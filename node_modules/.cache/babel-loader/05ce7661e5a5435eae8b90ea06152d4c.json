{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterDatePickerPermit.js\";\nimport React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport moment from \"moment\";\nimport { NavigationContext } from \"../NavigationContext\"; // Styles for the Material UI Components\n\nconst useStyles = makeStyles(theme => ({\n  root: {// display: \"flex\",\n    // flexWrap: \"wrap\",\n    // flexDirection: \"column\",\n    // justifyContent: \"space-around\",\n    // flexGrow: 1\n  },\n  datesRow: {\n    display: \"flex\",\n    flexDirection: \"row\" // flex: 1,\n    // flexGrow: 1\n\n  },\n  datePicker: {\n    margin: \"15px\",\n    // minWidth: 175,\n    // maxWidth: 176,\n    \"&& span\": {\n      pointerEvents: \"none\"\n    }\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  chip: {\n    margin: 10\n  }\n})); // FILTERS ARE NOT WORKING, WAITING ON THE TILE SET TO UPDATE\n// We are passing in Props from The FilterFromWells as labelDates to pass the Name of the filter\n\nexport default function FilterDatePickerPermit(props) {\n  //Local States Are Below as well as connections to Context\n  const classes = useStyles();\n  const [stateNav, setStateNav] = useContext(NavigationContext); //The 2 following states handle the dates for the start date and end date\n\n  const [selectedStartDate, handleStartDateChang] = useState(moment().subtract(120, 'Years'));\n  const [selectedEndDate, handleEndDateChange] = useState(moment()); // The 2 following states keep a object that has a date and a check boolean\n  // Both states have a logic that is used to set off effect or compare them in a If statement\n\n  const [permitFromDate, setPermitFromDate] = useState({\n    check: false,\n    date: moment()\n  });\n  const [permitToDate, setPermitToDate] = useState({\n    check: false,\n    date: moment()\n  });\n  const [dateTypeName, setDateTypeName] = useState(stateNav.dateTypeName ? stateNav.dateTypeName : []);\n  const setvaluesFrom = useCallback(() => {\n    // Check for the null date and if it is return\n    if (stateNav.permitDateFrom == null) {\n      return;\n    } else {\n      // else recall date from statenav context so display again \n      handleStartDateChang(stateNav.permitDateFrom);\n      setPermitFromDate({\n        check: true,\n        date: stateNav.permitDateFrom\n      });\n    }\n  }, [stateNav.permitDateFrom]);\n  const setvaluesTo = useCallback(() => {\n    // Check for the null date and if it is return\n    if (stateNav.permitDateTo == null) {\n      // else recall date from statenav context so display again \n      return;\n    } else {\n      handleEndDateChange(stateNav.permitDateTo);\n      setPermitToDate({\n        check: true,\n        date: stateNav.permitDateTo\n      });\n    }\n  }, [stateNav.permitDateTo]);\n  const setFilterName = useCallback(() => {\n    let filter;\n\n    if (permitFromDate.date._isValid === true && permitToDate.date._isValid === true) {\n      const checkDate = moment.parseZone(permitToDate.date).utc(true).valueOf();\n      const fromDate = moment.parseZone(permitFromDate.date).utc(true).valueOf();\n\n      if (permitFromDate.check && !permitToDate.check) {\n        filter = [\"all\", [\">=\", [\"get\", \"permitApprovedDate\"], fromDate], [\"<=\", [\"get\", \"permitApprovedDate\"], checkDate]];\n      } else if (permitToDate.check && !permitFromDate.check) {\n        let checkDate = moment().subtract(120, 'Years');\n        let fromDate = moment.parseZone(checkDate).utc(true).valueOf();\n        const toDate = moment.parseZone(permitToDate.date).utc(true).valueOf();\n        filter = [\"all\", [\">=\", [\"get\", \"permitApprovedDate\"], fromDate], [\"<=\", [\"get\", \"permitApprovedDate\"], toDate]];\n      } else {\n        const fromDate = moment.parseZone(permitFromDate.date).utc(true).valueOf();\n        const toDate = moment.parseZone(permitToDate.date).utc(true).valueOf();\n        filter = [\"all\", [\">=\", [\"get\", \"permitApprovedDate\"], fromDate], [\"<=\", [\"get\", \"permitApprovedDate\"], toDate]];\n      }\n    } else {\n      filter = null;\n    }\n\n    console.log(\"Permit Range dates change filter\", filter);\n    setStateNav(stateNav => ({ ...stateNav,\n      filterPermitDateRange: filter\n    }));\n  }, [permitFromDate.check, permitFromDate.date, permitToDate.check, permitToDate.date, setStateNav]);\n  useEffect(() => {\n    // check if value of the check are true to run the filter\n    if (permitFromDate.check === true) {\n      setFilterName();\n    }\n\n    if (permitToDate.check === true) {\n      setFilterName();\n    }\n  }, [permitFromDate.check, permitToDate.check, setFilterName]); // effect to run if the array has some values to recall the dates\n\n  useEffect(() => {\n    if (dateTypeName.length > 0) {\n      setvaluesFrom();\n      setvaluesTo();\n    }\n  }, [setvaluesTo, dateTypeName, setvaluesFrom]); // function to handle the date changes\n\n  const handleStartDate = date => {\n    // moments js and react quick rerenders make the input to become a null as soon as 1 number is delted\n    // if is equal it resets the date from the input\n    if (date == null) {\n      const formatDateReset = moment().subtract(120, 'Years');\n      setStateNav(stateNav => ({ ...stateNav,\n        permitDateFrom: null,\n        filterPermitDateRange: null\n      }));\n      handleStartDateChang(formatDateReset);\n    } else {\n      // format the date to keep consistency\n      const formatDateAfter = moment(date);\n      let dateName = []; // set the check and pass the date\n\n      setPermitFromDate({\n        check: true,\n        date: formatDateAfter\n      }); //handles the actual input value\n\n      handleStartDateChang(formatDateAfter); // add the name to the array to be used in a check above\n\n      dateName.push(\"PermitDate\"); //add to the  state the array\n\n      setDateTypeName(dateName); // sets the state in context and date name\n\n      setStateNav(stateNav => ({ ...stateNav,\n        permitDateFrom: formatDateAfter,\n        dateTypeName: dateName\n      }));\n    }\n  };\n\n  const handleEndDate = date => {\n    // moments js and react quick rerenders make the input to become a null as soon as 1 number is delted\n    // if is equal it resets the date from the input\n    if (date === null) {\n      const formatDateReset = moment();\n      setStateNav(stateNav => ({ ...stateNav,\n        permitDateTo: null,\n        filterPermitDateRange: null\n      }));\n      handleEndDateChange(formatDateReset);\n      return;\n    } else {\n      // format the date to keep consistency\n      const newDateAfter = moment(date);\n      let dateName = []; // set the check and pass the date\n\n      setPermitToDate({\n        check: true,\n        date: newDateAfter\n      }); //handles the actual input value\n\n      handleEndDateChange(newDateAfter); // add the name to the array to be used in a check above\n\n      dateName.push(\"PermitDate\"); //add to the the  state array\n\n      setDateTypeName(dateName); // sets the state in context and date name\n\n      setStateNav(stateNav => ({ ...stateNav,\n        permitDateTo: newDateAfter,\n        dateTypeName: dateName\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.datesRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n    label: props.labelDates + \" \" + \"From\",\n    className: classes.datePicker,\n    maxDate: moment().subtract(1, 'day'),\n    variant: \"inline\",\n    value: selectedStartDate,\n    onChange: date => handleStartDate(date) //inputVariant=\"outlined\"\n    ,\n    minDateMessage: \"Date should not be before minimal date\",\n    maxDateMessage: \"Date should not be after max date\",\n    disableToolbar: true,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    autoOk: \"true\",\n    format: \"MM/DD/YYYY\" // orientation = 'landscape'\n    // margin = 'normal'\n    ,\n    PopoverProps: {\n      disablePortal: true\n    },\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n    label: props.labelDates + \" \" + \"To\",\n    className: classes.datePicker,\n    variant: \"inline\",\n    maxDate: moment(),\n    value: selectedEndDate,\n    onChange: date => handleEndDate(date) //inputVariant=\"outlined\"\n    ,\n    minDateMessage: \"Date should not be before minimal date\",\n    maxDateMessage: \"Date should not be after max date\",\n    disableToolbar: true,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    autoOk: \"true\",\n    format: \"MM/DD/YYYY\" // orientation = 'landscape'\n    // margin = 'normal'\n    ,\n    PopoverProps: {\n      disablePortal: true\n    },\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterDatePickerPermit.js"],"names":["React","useState","useContext","useEffect","useCallback","makeStyles","KeyboardDatePicker","moment","NavigationContext","useStyles","theme","root","datesRow","display","flexDirection","datePicker","margin","pointerEvents","chips","flexWrap","chip","FilterDatePickerPermit","props","classes","stateNav","setStateNav","selectedStartDate","handleStartDateChang","subtract","selectedEndDate","handleEndDateChange","permitFromDate","setPermitFromDate","check","date","permitToDate","setPermitToDate","dateTypeName","setDateTypeName","setvaluesFrom","permitDateFrom","setvaluesTo","permitDateTo","setFilterName","filter","_isValid","checkDate","parseZone","utc","valueOf","fromDate","toDate","console","log","filterPermitDateRange","length","handleStartDate","formatDateReset","formatDateAfter","dateName","push","handleEndDate","newDateAfter","labelDates","disablePortal"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\n\r\n// Styles for the Material UI Components\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    // display: \"flex\",\r\n    // flexWrap: \"wrap\",\r\n    // flexDirection: \"column\",\r\n    // justifyContent: \"space-around\",\r\n    // flexGrow: 1\r\n  },\r\n  datesRow: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    // flex: 1,\r\n    // flexGrow: 1\r\n  },\r\n  datePicker: {\r\n    margin: \"15px\",\r\n    // minWidth: 175,\r\n    // maxWidth: 176,\r\n    \"&& span\": {\r\n      pointerEvents: \"none\"\r\n    }\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  chip: {\r\n    margin: 10\r\n  }\r\n}));\r\n// FILTERS ARE NOT WORKING, WAITING ON THE TILE SET TO UPDATE\r\n// We are passing in Props from The FilterFromWells as labelDates to pass the Name of the filter\r\nexport default function FilterDatePickerPermit(props) {\r\n  //Local States Are Below as well as connections to Context\r\n  const classes = useStyles();\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  //The 2 following states handle the dates for the start date and end date\r\n  const [selectedStartDate, handleStartDateChang] = useState(\r\n    moment().subtract(120, 'Years')\r\n  );\r\n  const [selectedEndDate, handleEndDateChange] = useState(\r\n    moment()\r\n  );\r\n  \r\n  // The 2 following states keep a object that has a date and a check boolean\r\n  // Both states have a logic that is used to set off effect or compare them in a If statement\r\n  const [permitFromDate, setPermitFromDate] = useState({\r\n    check: false,\r\n    date: moment()\r\n  });\r\n  const [permitToDate, setPermitToDate] = useState({\r\n    check: false,\r\n    date: moment()\r\n  });\r\n\r\n  const [dateTypeName, setDateTypeName] = useState(\r\n    stateNav.dateTypeName ? stateNav.dateTypeName : []\r\n  );\r\n\r\n  const setvaluesFrom = useCallback(() => {\r\n    // Check for the null date and if it is return\r\n    if (stateNav.permitDateFrom == null) {\r\n      return;\r\n    } else {\r\n      // else recall date from statenav context so display again \r\n      handleStartDateChang(stateNav.permitDateFrom);\r\n      setPermitFromDate({ check: true, date: stateNav.permitDateFrom });\r\n    }\r\n  }, [stateNav.permitDateFrom]);\r\n\r\n  const setvaluesTo = useCallback(() => {\r\n    // Check for the null date and if it is return\r\n    if (stateNav.permitDateTo == null) {\r\n      // else recall date from statenav context so display again \r\n      return;\r\n    } else {\r\n      handleEndDateChange(stateNav.permitDateTo);\r\n      setPermitToDate({ check: true, date: stateNav.permitDateTo });\r\n    }\r\n  }, [stateNav.permitDateTo]);\r\n  \r\n  const setFilterName = useCallback(() => {\r\n      let filter;\r\n      if (permitFromDate.date._isValid === true  && permitToDate.date._isValid === true) {\r\n        const checkDate = moment.parseZone(permitToDate.date).utc(true).valueOf()\r\n        const fromDate = moment.parseZone(permitFromDate.date).utc(true).valueOf()\r\n        if(permitFromDate.check && !permitToDate.check){\r\n          filter = [\"all\", [\">=\",[\"get\", \"permitApprovedDate\"] ,fromDate], [\"<=\",[\"get\", \"permitApprovedDate\"] , checkDate]];\r\n        } else if (permitToDate.check &&  !permitFromDate.check ) {\r\n          let checkDate = moment().subtract(120, 'Years')\r\n          let fromDate = moment.parseZone(checkDate).utc(true).valueOf()\r\n          const toDate =  moment.parseZone(permitToDate.date).utc(true).valueOf()\r\n          filter = [\"all\", [\">=\",[\"get\", \"permitApprovedDate\"] ,fromDate], [\"<=\",[\"get\", \"permitApprovedDate\"] , toDate]];\r\n        }\r\n        else{\r\n          const fromDate = moment.parseZone(permitFromDate.date).utc(true).valueOf()\r\n          const toDate =  moment.parseZone(permitToDate.date).utc(true).valueOf()\r\n          filter = [\"all\", [\">=\", [\"get\", \"permitApprovedDate\"]  ,fromDate], [\"<=\", [\"get\", \"permitApprovedDate\"] ,toDate]];\r\n        }\r\n      } else {\r\n        filter = null;\r\n      }\r\n      console.log(\"Permit Range dates change filter\", filter);\r\n      setStateNav(stateNav => ({ ...stateNav, filterPermitDateRange: filter }));\r\n  }, [permitFromDate.check, permitFromDate.date, permitToDate.check, permitToDate.date, setStateNav]);\r\n\r\n  useEffect(() => {\r\n    // check if value of the check are true to run the filter\r\n    if (permitFromDate.check === true) {\r\n      setFilterName();\r\n    }\r\n    if (permitToDate.check === true) {\r\n      setFilterName();\r\n    }\r\n  }, [permitFromDate.check, permitToDate.check, setFilterName]);\r\n  // effect to run if the array has some values to recall the dates\r\n  useEffect(() => {\r\n    if (dateTypeName.length > 0) {\r\n      setvaluesFrom();\r\n      setvaluesTo();\r\n    }\r\n  }, [setvaluesTo, dateTypeName, setvaluesFrom]);\r\n  // function to handle the date changes\r\n  const handleStartDate = date => {\r\n    // moments js and react quick rerenders make the input to become a null as soon as 1 number is delted\r\n    // if is equal it resets the date from the input\r\n    if (date == null) {\r\n      const formatDateReset = moment().subtract(120, 'Years');\r\n      setStateNav(stateNav => ({\r\n        ...stateNav,\r\n        permitDateFrom: null,\r\n        filterPermitDateRange: null\r\n      }));\r\n      handleStartDateChang(formatDateReset);\r\n    } else {\r\n    // format the date to keep consistency\r\n    const formatDateAfter = moment(date)\r\n    let dateName = [];\r\n    // set the check and pass the date\r\n    setPermitFromDate({ check: true, date: formatDateAfter });\r\n    //handles the actual input value\r\n    handleStartDateChang(formatDateAfter);\r\n    // add the name to the array to be used in a check above\r\n    dateName.push(\"PermitDate\");\r\n    //add to the  state the array\r\n    setDateTypeName(dateName);\r\n    // sets the state in context and date name\r\n    setStateNav(stateNav => ({\r\n      ...stateNav,\r\n      permitDateFrom: formatDateAfter,\r\n      dateTypeName: dateName\r\n    }));\r\n  }\r\n  };\r\n\r\n  const handleEndDate = date => {\r\n    // moments js and react quick rerenders make the input to become a null as soon as 1 number is delted\r\n    // if is equal it resets the date from the input\r\n    if (date === null) {\r\n      const formatDateReset = moment();\r\n      setStateNav(stateNav => ({ ...stateNav, permitDateTo: null , filterPermitDateRange: null}));\r\n      handleEndDateChange(formatDateReset);\r\n      return;\r\n    } else {\r\n    // format the date to keep consistency\r\n    \r\n    const newDateAfter = moment(date)\r\n    let dateName = [];\r\n    // set the check and pass the date\r\n    setPermitToDate({ check: true, date: newDateAfter });\r\n    //handles the actual input value\r\n    handleEndDateChange(newDateAfter);\r\n    // add the name to the array to be used in a check above\r\n    dateName.push(\"PermitDate\");\r\n    //add to the the  state array\r\n    setDateTypeName(dateName);\r\n    // sets the state in context and date name\r\n    setStateNav(stateNav => ({\r\n      ...stateNav,\r\n      permitDateTo: newDateAfter,\r\n      dateTypeName: dateName\r\n    }));\r\n  }\r\n  };\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.datesRow}>\r\n        <KeyboardDatePicker\r\n          label={props.labelDates + \" \" + \"From\"}\r\n          className={classes.datePicker}\r\n          maxDate={moment().subtract(1, 'day')}\r\n          variant=\"inline\"\r\n          value={selectedStartDate}\r\n          onChange={date => handleStartDate(date)}\r\n\r\n          //inputVariant=\"outlined\"\r\n          minDateMessage = 'Date should not be before minimal date'\r\n          maxDateMessage = 'Date should not be after max date'\r\n          disableToolbar\r\n          KeyboardButtonProps={{'aria-label':'change date'}}\r\n          autoOk = 'true'\r\n          format=\"MM/DD/YYYY\"\r\n          // orientation = 'landscape'\r\n          // margin = 'normal'\r\n          PopoverProps={{ disablePortal: true }}\r\n          fullWidth={true}\r\n        />\r\n\r\n        <KeyboardDatePicker\r\n          label={props.labelDates + \" \" + \"To\"}\r\n          className={classes.datePicker}\r\n          variant=\"inline\"\r\n          maxDate={moment()}\r\n          value={selectedEndDate}\r\n          onChange={date => handleEndDate(date)}\r\n\r\n          //inputVariant=\"outlined\"\r\n          minDateMessage = 'Date should not be before minimal date'\r\n          maxDateMessage = 'Date should not be after max date'\r\n          disableToolbar\r\n          KeyboardButtonProps={{'aria-label':'change date'}}\r\n          autoOk = 'true'\r\n          format=\"MM/DD/YYYY\"\r\n          // orientation = 'landscape'\r\n          // margin = 'normal'\r\n          PopoverProps={{ disablePortal: true }}\r\n          fullWidth={true}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}