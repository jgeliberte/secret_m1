{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Map\\\\Map.js\";\nimport React, { useContext, useState, useLayoutEffect, useRef, useEffect, useCallback } from \"react\";\nimport { AppContext } from \"../../AppContext\";\nimport { NavigationContext } from \"../Navigation/NavigationContext\";\nimport { MapControlsContext } from \"../MapControls/MapControlsContext\";\nimport Popover from \"@material-ui/core/Popover\";\nimport mapboxgl from \"mapbox-gl\";\nimport * as turf from \"@turf/turf\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MapControlsProvider from \"../MapControls/MapControlsProvider\";\nimport WellCardProvider from \"../WellCard/WellCardProvider\";\nimport ExpandableCardProvider from \"../ExpandableCard/ExpandableCardProvider\";\nimport Portal from \"@material-ui/core/Portal\";\nimport PortalD from \"./components/Portal\";\nimport Coordinates from \"./components/Coordinates\";\nimport DrawStatus from \"./components/DrawStatus\";\nimport SpatialDataCardEdit from \"../MapControls/components/spatialDataCardEdit\";\nimport SpatialDataCard from \"../MapControls/components/spatialDataCard\";\nimport \"./popup.css\";\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\nimport { CircleMode, DragCircleMode, DirectMode, SimpleSelectMode } from \"mapbox-gl-draw-circle\";\nimport DrawRectangle from \"mapbox-gl-draw-rectangle-mode\";\nimport * as MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\nimport DefaultFiltersTest from \"./filtersDefaultTest\";\nimport FilterControl from \"./components/FilterControl\";\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport { WELLSQUERY } from \"../../graphQL/useQueryWells\";\nimport { TRACKSBYUSERANDOBJECTTYPE } from \"../../graphQL/useQueryTracksByUserAndObjectType\";\nimport { OWNERSWELLSQUERY } from \"../../graphQL/useQueryOwnersWells\";\nimport { CUSTOMLAYERSQUERY } from \"../../graphQL/useQueryCustomLayers\";\nimport { REMOVECUSTOMLAYER } from \"../../graphQL/useMutationRemoveCustomLayer\";\nimport { UPDATECUSTOMLAYER } from \"../../graphQL/useMutationUpdateCustomLayer\";\nimport { PERMITSQUERY } from \"../../graphQL/useQueryPermits\";\nimport { RIGSQUERY } from \"../../graphQL/useQueryRigs\";\nimport { spatialDataAttributes } from \"../MapControls/components/DrawShapes/constants\";\nimport { addCustomShapeProperties } from \"../MapControls/components/DrawShapes/drawShapesHelpers\";\nimport MapGridCard from \"../MapGridCard/MapGridCard\";\nconst useStyles = makeStyles(theme => ({\n  mapWrapper: {\n    width: \"100%\"\n  },\n  map: {\n    position: \"absolute\",\n    top: \"64px\",\n    bottom: \"0\",\n    width: \"100%\",\n    height: \"calc(100% - 64px)\",\n    overflow: \"hidden !important\",\n    \"& a.mapboxgl-ctrl-logo, .mapboxgl-ctrl.mapboxgl-ctrl-attrib\": {\n      display: \"none\"\n    }\n  },\n  filterPopup: {\n    \"& .mapboxgl-popup-tip\": {\n      display: \"none\"\n    }\n  },\n  footerLeftLogo: {\n    position: \"absolute\",\n    bottom: \"5px\",\n    zIndex: \"1\",\n    left: \"10px\"\n  },\n  portal: {\n    position: \"absolute\",\n    top: \"45%\",\n    left: \"47%\",\n    transform: \"translate(-50%, -50%)\"\n  }\n}));\nexport default function Map() {\n  let classes = useStyles();\n  const [stateApp, setStateApp] = useContext(AppContext);\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [stateMapControls, setStateMapControls] = useContext(MapControlsContext);\n  const [filtersDefault, setFiltersDefault] = useState(stateApp.user.defaultFilters ? stateApp.user.defaultFilters : []);\n  const [lng, setLng] = useState();\n  const [lat, setLat] = useState();\n  const [transform, setTransform] = useState(\"transform: inherit\");\n  const container = useRef(null);\n  const [showExpandableCard, setShowExpandableCard] = useState(false);\n  const [mapStyles, setMapStyles] = useState([]);\n  const [wellsTileset, setwellsTileset] = useState();\n  const [defaultsCheckOnOff, setDefaultsCheckOnOff] = useState(true);\n  const [m1neralCheckOnOff, setM1neralCheckOnOff] = useState(true);\n  const [map, setMap] = useState(null);\n  const [mapClick, setMapClick] = useState(null);\n  const [draw, setDraw] = useState(null);\n  const [drawStatus, setDrawStatus] = useState(false);\n  const [rigs, setRigData] = useState([]);\n  const [drawingFilterFeatureId, setDrawingFilterFeatureId] = useState(null); // const [geocoder, setGeocoder] = useState(null);\n\n  const [anchorElPoPOver, setAnchorElPoPOver] = useState(null);\n  const mapEl = useRef(null);\n  mapboxgl.accessToken = stateApp.mapboxglAccessToken; //////////// TEMP UNTIL PROVIDER IS MADE //////////\n  //////begin////////temporary\n\n  const [rows, setRows] = React.useState([]);\n  const [loading, setLoading] = useState(true);\n  const [getWells, {\n    data: dataWells\n  }] = useLazyQuery(WELLSQUERY);\n  const [tracksByUserAndObjectType, {\n    data: dataTracks\n  }] = useLazyQuery(TRACKSBYUSERANDOBJECTTYPE);\n  const [tracksByUserAndObjectTypeOwner, {\n    data: dataTracksOwner\n  }] = useLazyQuery(TRACKSBYUSERANDOBJECTTYPE);\n  const [getOwnersWells, {\n    data: dataOwnersWells\n  }] = useLazyQuery(OWNERSWELLSQUERY);\n  const [getCustomLayers, {\n    data: customLayerData\n  }] = useLazyQuery(CUSTOMLAYERSQUERY, {\n    fetchPolicy: \"network-only\"\n  });\n  const [updateCustomLayer] = useMutation(UPDATECUSTOMLAYER);\n  const [removeCustomLayer] = useMutation(REMOVECUSTOMLAYER);\n  const [getWellsForLayer, {\n    data: dataWellsForOwnerWellTrackLayer\n  }] = useLazyQuery(WELLSQUERY);\n  const [getPermits, {\n    data: permitData\n  }] = useLazyQuery(PERMITSQUERY);\n  const [getRigs, {\n    data: rigData\n  }] = useLazyQuery(RIGSQUERY); /////end/////////temporary\n\n  useEffect(() => {\n    if (stateApp.user && stateApp.user.mongoId) {\n      setLoading(true);\n      tracksByUserAndObjectType({\n        variables: {\n          userId: stateApp.user.mongoId,\n          objectType: \"well\"\n        }\n      });\n      tracksByUserAndObjectTypeOwner({\n        variables: {\n          userId: stateApp.user.mongoId,\n          objectType: \"owner\"\n        }\n      });\n      getCustomLayers({\n        variables: {\n          userId: stateApp.user.mongoId\n        }\n      });\n    }\n  }, [stateApp.user]);\n  useEffect(() => {\n    if (dataTracks && dataTracks.tracksByUserAndObjectType) {\n      if (dataTracks.tracksByUserAndObjectType.length !== 0) {\n        const tracksIdArray = dataTracks.tracksByUserAndObjectType.map(track => track.trackOn); // setStateApp((stateApp) => ({\n        //   ...stateApp,\n        //   trackedwells: dataTracks.tracksByUserAndObjectType,\n        // }));\n\n        getWells({\n          variables: {\n            wellIdArray: tracksIdArray,\n            authToken: stateApp.user.authToken\n          }\n        });\n      } else {\n        setRows([]);\n        setLoading(false);\n      }\n    }\n  }, [dataTracks]);\n  useEffect(() => {\n    if (dataTracksOwner && dataTracksOwner.tracksByUserAndObjectType) {\n      if (dataTracksOwner.tracksByUserAndObjectType.length !== 0) {\n        var objectsIdsArray = dataTracksOwner.tracksByUserAndObjectType.map(item => item.trackOn);\n        getOwnersWells({\n          variables: {\n            ownersIds: objectsIdsArray\n          }\n        });\n      }\n    }\n  }, [dataTracksOwner]);\n  useEffect(() => {\n    if (customLayerData && customLayerData.customLayers) {\n      console.log(\"Custom Layer data\", customLayerData.customLayers);\n      setStateApp(state => ({ ...state,\n        customLayers: customLayerData.customLayers,\n        selectedUserDefinedLayer: null,\n        editLayer: false,\n        popupOpen: false\n      }));\n    }\n  }, [customLayerData]);\n  useEffect(() => {\n    if (dataOwnersWells && dataOwnersWells.length !== 0) {\n      console.log(dataOwnersWells.ownersWells);\n      var ownerObjectIds = dataOwnersWells.ownersWells.map(item => item.wells);\n      var merged = [].concat.apply([], ownerObjectIds);\n      var stripped = merged.map(item => item.wellId);\n      getWellsForLayer({\n        variables: {\n          wellIdArray: stripped,\n          authToken: stateApp.user.authToken\n        }\n      });\n    }\n  }, [dataOwnersWells]);\n  useEffect(() => {\n    if (dataWells) {\n      if (dataWells.wells && dataWells.wells.results && dataWells.wells.results.length > 0) setStateApp(state => ({ ...state,\n        trackedwells: dataWells.wells.results\n      }));else setStateApp(state => ({ ...state,\n        trackedwells: null\n      }));\n    }\n  }, [dataWells]);\n\n  const setLayer = (data, layerName, map) => {\n    const makeGeoJSON = data => {\n      return {\n        type: \"FeatureCollection\",\n        features: data.map(feature => {\n          return {\n            type: \"Feature\",\n            properties: feature,\n            geometry: {\n              type: \"Point\",\n              coordinates: [feature.Longitude, feature.Latitude]\n            }\n          };\n        })\n      };\n    };\n\n    const geoJson = makeGeoJSON(data);\n    const configIndex = stateApp.styleLayers.findIndex(value => value.name === layerName);\n    const config = stateApp.styleLayers[configIndex];\n    const checkedPosition = stateApp.checkedLayers.indexOf(configIndex);\n    console.log(config); // -> add source\n\n    if (config) {\n      map.addSource(config.sourceProps[0], {\n        type: \"geojson\",\n        data: geoJson,\n        cluster: true,\n        clusterRadius: 50,\n        clusterMaxZoom: 6\n      });\n      map.addSource(`${config.sourceProps[0]}_filter`, {\n        type: \"geojson\",\n        data: geoJson\n      }); // -> add layer\n\n      if (config.layerProps.layerId[0] == 'rigs') {\n        map.addLayer({\n          id: config.layerProps.layerId[0],\n          type: config.layerProps.layerType[0],\n          source: `${config.sourceProps[0]}_filter`,\n          paint: config.layerProps.paintProps,\n          layout: config.layerProps.layoutProps\n        });\n      } else {\n        map.addLayer({\n          id: config.layerProps.layerId[0],\n          type: config.layerProps.layerType[0],\n          source: config.sourceProps[0],\n          paint: config.layerProps.paintProps,\n          layout: {\n            visibility: checkedPosition > -1 ? \"visible\" : \"none\"\n          }\n        });\n      }\n\n      const clusterVar = config.layerProps.layerId[0] + \"-clusters\";\n      const clusterLabelBar = config.layerProps.layerId[0] + \"-clusters-counts\";\n      map.addLayer({\n        id: clusterLabelBar,\n        type: \"symbol\",\n        source: config.sourceProps[0],\n        filter: [\"has\", \"point_count\"],\n        layout: config.layerProps.clusterProps.clusterSymbolProps\n      });\n      map.addLayer({\n        id: clusterVar,\n        type: config.layerProps.layerType[0],\n        source: config.sourceProps[0],\n        filter: [\"has\", \"point_count\"],\n        paint: config.layerProps.clusterProps.clusterPaintProps\n      });\n      map.setLayoutProperty(clusterVar, \"visibility\", checkedPosition > -1 ? \"visible\" : \"none\");\n      map.setLayoutProperty(clusterLabelBar, \"visibility\", checkedPosition > -1 ? \"visible\" : \"none\");\n    }\n  };\n\n  useEffect(() => {\n    if (permitData && permitData.permits && permitData.permits.length > 0 && map) {\n      setLayer(permitData.permits, \"Permits\", map);\n    }\n  }, [permitData, map]);\n  useEffect(() => {\n    if (rigData && rigData.rigs && rigData.rigs.length > 0) {\n      const nextOffset = rigs.length + rigData.rigs.length;\n      setRigData([...rigs, ...rigData.rigs]);\n      getRigs({\n        variables: {\n          offset: nextOffset,\n          amount: 5000\n        }\n      });\n    }\n  }, [rigData]);\n  useEffect(() => {\n    if (rigs.length > 0 && map) {\n      setLayer(rigs, \"Rig Activity\", map);\n    }\n  }, [rigs, map]);\n  useEffect(() => {\n    if (dataWellsForOwnerWellTrackLayer) {\n      if (dataWellsForOwnerWellTrackLayer.wells && dataWellsForOwnerWellTrackLayer.wells.results && dataWellsForOwnerWellTrackLayer.wells.results.length > 0) setStateApp(state => ({ ...state,\n        trackedOwnerWells: dataWellsForOwnerWellTrackLayer.wells.results\n      }));else setStateApp(state => ({ ...state,\n        trackedOwnerWells: null\n      }));\n    }\n  }, [dataWellsForOwnerWellTrackLayer]);\n  useEffect(() => {\n    const wellLineClick = currentFeature => {\n      console.log(\"clicked well lines\", currentFeature);\n      setStateApp(state => ({ ...state,\n        popupOpen: false,\n        selectedUserDefinedLayer: undefined\n      }));\n      setStateApp(state => ({ ...state,\n        selectedWell: currentFeature.properties,\n        selectedWellId: currentFeature.properties.id,\n        wellSelectedCoordinates: [currentFeature.properties.longitude, currentFeature.properties.latitude]\n      }));\n      createPopUp(currentFeature.properties);\n    };\n\n    const wellPointClick = currentFeature => {\n      console.log(\"current feature\", currentFeature);\n      setStateApp(state => ({ ...state,\n        popupOpen: false,\n        selectedUserDefinedLayer: undefined\n      }));\n      setStateApp(state => ({ ...state,\n        selectedWell: currentFeature.properties,\n        selectedWellId: currentFeature.properties.id,\n        wellSelectedCoordinates: [currentFeature.properties.longitude, currentFeature.properties.latitude]\n      }));\n      createPopUp(currentFeature.properties);\n      map.resize();\n    };\n\n    const layerClickHander = feature => {\n      let zVal;\n      if (map && map.getZoom() && map.getZoom() > 12) zVal = map.getZoom();\n      setStateApp(state => ({ ...state,\n        popupOpen: false,\n        selectedUserDefinedLayer: undefined,\n        selectedWell: null,\n        selectedWellId: feature.properties.id ? feature.properties.id.toLowerCase() : null,\n        flyTo: zVal ? { ...feature.properties,\n          zoom: zVal\n        } : feature.properties\n      }));\n    };\n\n    const udLayerClickHandler = feature => {\n      console.log(\"current feature\", feature);\n      setStateApp(state => ({ ...state,\n        popupOpen: false\n      }));\n      setStateApp(state => ({ ...state,\n        selectedUserDefinedLayer: feature\n      })); // setStateApp({...stateApp, currentFeature: feature});\n\n      createUDPopUp(feature.properties);\n      map.resize();\n    };\n\n    const clusterClickHandler = (feature, map) => {\n      var clusterId = feature.properties.cluster_id;\n      map.getSource(feature.source).getClusterExpansionZoom(clusterId, function (err, zoom) {\n        if (err) return;\n        map.easeTo({\n          center: feature.geometry.coordinates,\n          zoom: zoom\n        });\n      });\n    };\n\n    const mapClickHandler = e => {\n      const map = e.target;\n      let layers = [];\n      const checkedUDLayersInteraction = stateApp.checkedUserDefinedLayersInteraction;\n      const checkedUDLayers = stateApp.checkedUserDefinedLayers;\n      const definedLayers = stateApp.userDefinedLayers;\n      const clusterUDLayers = [];\n      const udLayers = [];\n      const clusterLayers = [];\n      checkedUDLayers.forEach(l => {\n        if (checkedUDLayersInteraction.indexOf(l) > -1) {\n          const definedLayer = definedLayers[l];\n          const layerProps = definedLayer.layerProps;\n\n          if (layerProps) {\n            for (let i = 0; i < layerProps.length; i++) {\n              const layerProp = layerProps[i];\n\n              if (definedLayer.name === \"Area of Interest\" || definedLayer.name === \"Parcels\") {\n                if (map.getLayer(layerProp.layerId)) {\n                  udLayers.push(layerProp.layerId);\n                }\n              }\n\n              if (layerProp.clusterProps) {\n                const clusterLayerId = layerProp.layerId + \"-clusters\";\n\n                if (map.getLayer(clusterLayerId)) {\n                  layers.push(clusterLayerId);\n                  clusterUDLayers.push(clusterLayerId);\n                  clusterLayers.push(layerProp.layerId);\n                }\n              }\n\n              if (map.getLayer(layerProp.layerId)) {\n                layers.push(layerProp.layerId);\n              }\n            }\n          }\n        }\n      });\n      const checkedSLayersInteraction = stateApp.checkedLayersInteraction;\n      const checkedSLayers = stateApp.checkedLayers;\n      const styleLayers = stateApp.styleLayers; // let sLayers = [];\n\n      checkedSLayers.forEach(l => {\n        if (checkedSLayersInteraction.indexOf(l) > -1) {\n          const styleLayer = styleLayers[l];\n\n          if (!styleLayer.layerProps) {\n            styleLayer.id.forEach(styleId => {\n              if (map.getLayer(styleId)) {\n                layers.push(styleId);\n              }\n            });\n          } // sLayers = [...sLayers, ...styleLayer.id];\n\n\n          if (styleLayer.layerProps && styleLayer.layerProps.clusterProps) {\n            if (map.getLayer(styleLayer.id[1])) {\n              layers.push(styleLayer.id[1]);\n            }\n\n            if (map.getLayer(styleLayer.id[2])) {\n              layers.push(styleLayer.id[2]);\n            }\n\n            const clusterLayerId = styleLayer.id[1];\n\n            if (map.getLayer(clusterLayerId)) {\n              clusterUDLayers.push(clusterLayerId);\n            }\n          }\n        }\n      });\n      var bbox = [[e.point.x - 10, e.point.y - 10], [e.point.x + 10, e.point.y + 10]];\n      console.log(\"checking layers\", layers);\n      let features = map.queryRenderedFeatures(bbox, {\n        layers: layers\n      });\n\n      if (features && features.length > 0) {\n        const feature = features[0];\n        console.log(\"stacked layers click info\", features);\n        const layerId = feature.layer.id;\n\n        switch (true) {\n          case clusterUDLayers.indexOf(layerId) > -1:\n            clusterClickHandler(feature, map);\n            break;\n\n          case clusterLayers.indexOf(layerId) > -1:\n            layerClickHander(feature);\n            break;\n\n          case udLayers.indexOf(layerId) > -1:\n            udLayerClickHandler(feature);\n            break;\n\n          case layerId === \"wellpoints\":\n            wellPointClick(feature);\n            break;\n\n          case layerId === \"welllines\":\n            wellLineClick(feature);\n            break;\n\n          default:\n            break;\n        }\n      }\n    };\n\n    if (map) {\n      console.log(mapClick);\n\n      if (mapClick && mapClick.mapClickHandler) {\n        console.log(\"off click action\");\n        map.off(\"click\", mapClick.mapClickHandler);\n      }\n\n      console.log(\"on click action\");\n      map.on(\"click\", mapClickHandler);\n      setMapClick({\n        mapClickHandler\n      });\n    }\n  }, [map, stateApp.checkedLayersInteraction, stateApp.checkedUserDefinedLayersInteraction, stateApp.checkedLayers, stateApp.checkedUserDefinedLayers]);\n  useEffect(() => {\n    // USE EFFECT FOR M1 LAYER HANDLES\n    console.log(\"layer ue start\");\n    setStateApp(state => ({ ...state,\n      popupOpen: false,\n      selectedUserDefinedLayer: undefined\n    }));\n\n    if (stateApp.styleLayers.length > 0 && map) {\n      stateApp.styleLayers.forEach(l => {\n        l.id.forEach(k => {\n          if (map.getLayer(k)) {\n            map.setLayoutProperty(k, \"visibility\", \"none\");\n          }\n\n          if (l.layerProps && l.layerProps.clusterProps) {\n            if (map.getLayer(k + \"-clusters-counts\")) {\n              map.setLayoutProperty(k + \"-clusters-counts\", \"visibility\", \"none\");\n            }\n\n            if (map.getLayer(k + \"-clusters\")) {\n              map.setLayoutProperty(k + \"-clusters\", \"visibility\", \"none\");\n            }\n          }\n        });\n      });\n      const checkedLayers = stateApp.checkedLayers.slice(0);\n\n      if (stateApp.tempCheckedLayer) {\n        checkedLayers.push(stateApp.tempCheckedLayer);\n      }\n\n      if (checkedLayers.length > 0) {\n        let layers = checkedLayers;\n        layers.sort(function (a, b) {\n          return b - a;\n        });\n\n        if (layers.length > 0) {\n          let belowlayer = null;\n\n          for (let k = layers.length - 1; k >= 0; k--) {\n            let i = layers[k];\n            let layerConfig = stateApp.styleLayers[i];\n            let currentLayerArray = stateApp.styleLayers[i].id; // eslint-disable-next-line no-loop-func\n\n            currentLayerArray.forEach(j => {\n              let mapLayer = map.getLayer(j);\n\n              if (mapLayer && layerConfig.layerProps && layerConfig.layerProps.clusterProps && !mapLayer.source.includes(\"_filter\")) {\n                map.setLayoutProperty(j + \"-clusters-counts\", \"visibility\", \"visible\");\n\n                if (belowlayer != null) {\n                  map.moveLayer(j + \"-clusters-counts\", belowlayer);\n                }\n\n                belowlayer = j + \"-clusters-counts\";\n                map.setLayoutProperty(j + \"-clusters\", \"visibility\", \"visible\");\n                map.moveLayer(j + \"-clusters\", belowlayer);\n                belowlayer = j + \"-clusters\";\n              }\n\n              if (typeof mapLayer !== \"undefined\") {\n                if (map.getLayer(j)) {\n                  map.setLayoutProperty(j, \"visibility\", \"visible\");\n\n                  if (belowlayer != null) {\n                    map.moveLayer(j, belowlayer);\n                  }\n\n                  belowlayer = j;\n                }\n              } else {}\n            });\n          }\n        }\n      }\n    }\n  }, [map, stateApp.checkedLayers, stateApp.tempCheckedLayer, stateApp.styleLayers]);\n  useEffect(() => {\n    // USE EFFECT FOR BASEMAP LAYER HANDLING\n    console.log(\"basemap layer ue start\");\n\n    if (stateApp.baseMapLayers.length > 0 && map) {\n      stateApp.baseMapLayers.forEach(l => {\n        l.id.forEach(k => {\n          if (map.getLayer(k)) {\n            map.setLayoutProperty(k, \"visibility\", \"none\");\n          }\n        });\n      });\n\n      if (stateApp.checkedBaseLayers.length > 0) {\n        let layers = stateApp.checkedBaseLayers.slice(0);\n        layers.sort(function (a, b) {\n          return b - a;\n        });\n\n        if (layers.length > 0) {\n          let belowlayer = null;\n\n          for (let k = layers.length - 1; k >= 0; k--) {\n            let i = layers[k];\n            let currentLayerArray = stateApp.baseMapLayers[i].id; // eslint-disable-next-line no-loop-func\n\n            currentLayerArray.forEach(j => {\n              var mapLayer = map.getLayer(j);\n\n              if (typeof mapLayer !== \"undefined\") {\n                if (map.getLayer(j)) {\n                  map.setLayoutProperty(j, \"visibility\", \"visible\");\n\n                  if (belowlayer != null) {\n                    map.moveLayer(j, belowlayer);\n                  }\n\n                  belowlayer = j;\n                }\n              }\n            });\n          }\n        }\n      }\n    }\n  }, [map, stateApp.checkedBaseLayers, stateApp.baseMapLayers]);\n  useEffect(() => {\n    // USE EFFECT FOR HEATMAP LAYER HANDLES\n    console.log(\"heatmap layer ue start\");\n\n    if (stateApp.heatLayers.length > 0 && map) {\n      stateApp.heatLayers.forEach(l => {\n        l.id.forEach(k => {\n          if (map.getLayer(k)) {\n            map.setLayoutProperty(k, \"visibility\", \"none\");\n          }\n        });\n      });\n\n      if (stateApp.checkedHeats.length > 0) {\n        let layers = stateApp.checkedHeats.slice(0);\n        layers.sort(function (a, b) {\n          return b - a;\n        });\n\n        if (layers.length > 0) {\n          let belowlayer = null;\n\n          for (let k = layers.length - 1; k >= 0; k--) {\n            let i = layers[k];\n            let currentLayerArray = stateApp.heatLayers[i].id; // eslint-disable-next-line no-loop-func\n\n            currentLayerArray.forEach(j => {\n              var mapLayer = map.getLayer(j);\n\n              if (typeof mapLayer !== \"undefined\") {\n                if (map.getLayer(j)) {\n                  map.setLayoutProperty(j, \"visibility\", \"visible\");\n\n                  if (belowlayer != null) {\n                    map.moveLayer(j, belowlayer);\n                  }\n\n                  belowlayer = j;\n                }\n              }\n            });\n          }\n        }\n      }\n    }\n  }, [map, stateApp.checkedHeats, stateApp.heatLayers]);\n  useEffect(() => {\n    ///////////////// EFFECT FOR SHOWING TRACKED WELLS /////////////////\n    if (map && stateApp.trackFilterOn && stateApp.trackedWellArray) {\n      console.log(\"array \", stateApp.trackedWellArray);\n\n      const makeGeoJSON = data => {\n        return {\n          type: \"FeatureCollection\",\n          features: data.map(feature => {\n            return {\n              type: \"Feature\",\n              properties: {\n                api: feature.api,\n                id: feature.id,\n                latitude: feature.latitude,\n                longitude: feature.longitude,\n                operator: feature.operator,\n                WellName: feature.wellName\n              },\n              geometry: {\n                type: \"Point\",\n                coordinates: [feature.longitude, feature.latitude]\n              }\n            };\n          })\n        };\n      };\n\n      const myGeoJSONData = makeGeoJSON(stateApp.trackedWellArray.wells.results);\n      map.addSource(\"track_well_points_source\", {\n        type: \"geojson\",\n        data: myGeoJSONData\n      });\n      map.addLayer({\n        id: \"track_well_points_layer\",\n        type: \"circle\",\n        source: \"track_well_points_source\",\n        paint: {\n          \"circle-radius\": 5,\n          \"circle-color\": \"yellow\"\n        }\n      }); // const latArray = stateApp.trackedWellArray.wells.results.map(\n      //   (item) => item.latitude\n      // );\n      // const longArray = stateApp.trackedWellArray.wells.results.map(\n      //   (item) => item.longitude\n      // );\n\n      map.on(\"click\", \"track_well_points_layer\", function (e) {\n        var bbox = [[e.point.x - 10, e.point.y - 10], [e.point.x + 10, e.point.y + 10]];\n        let features = map.queryRenderedFeatures(bbox, {\n          layers: [\"track_well_points_layer\"]\n        });\n        setStateApp(state => ({ ...state,\n          flyTo: features[0].properties\n        }));\n      });\n      map.on(\"mousemove\", \"track_well_points_layer\", e => {\n        map.getCanvas().style.cursor = \"pointer\";\n      });\n      map.on(\"mouseleave\", \"track_well_points_layer\", function () {\n        map.getCanvas().style.cursor = \"\";\n      }); // var bbox = [\n      //   [Math.min(...longArray), Math.min(...latArray)],\n      //   [Math.max(...longArray), Math.max(...latArray)],\n      // ];\n      // map.fitBounds(bbox, {\n      //   padding: { top: 50, bottom: 50, left: 50, right: 50 },\n      // });\n    }\n  }, [stateApp.trackFilterOn]);\n  useEffect(() => {\n    // USE EFFECT FOR USER DEFINED DATA LAYER HANDLE\n    setStateApp(state => ({ ...state,\n      popupOpen: false,\n      selectedUserDefinedLayer: undefined\n    }));\n\n    if (stateApp.userDefinedLayers.length > 0 && map) {\n      stateApp.userDefinedLayers.forEach(l => {\n        l.id.forEach((k, i) => {\n          let clusterLabelBar = k + \"-clusters-counts\";\n\n          if (map.getLayer(clusterLabelBar)) {\n            // map.removeLayer(clusterLabelBar);\n            // map.removeSource(l.sourceProps[i].sourceId);\n            map.setLayoutProperty(clusterLabelBar, \"visibility\", \"none\");\n          }\n\n          let clusterVar = k + \"-clusters\";\n\n          if (map.getLayer(clusterVar)) {\n            // map.removeLayer(clusterVar);\n            // map.removeSource(l.sourceProps[i].sourceId);\n            map.setLayoutProperty(clusterVar, \"visibility\", \"none\");\n          }\n\n          if (map.getLayer(k)) {\n            // map.removeLayer(k);\n            // map.removeSource(l.sourceProps[i].sourceId);\n            map.setLayoutProperty(k, \"visibility\", \"none\");\n          }\n        });\n      });\n    } // this section adds the updated list of layers\n\n\n    const tmpCheckedLayer = stateApp.tempCheckedUserDefinedLayers;\n    const checkedLayers = stateApp.checkedUserDefinedLayers.slice(0);\n\n    if (tmpCheckedLayer != null && stateApp.checkedUserDefinedLayers.indexOf(tmpCheckedLayer) === -1) {\n      checkedLayers.push(tmpCheckedLayer);\n    }\n\n    if (map && checkedLayers.length > 0) {\n      let layers = checkedLayers;\n      layers.sort(function (a, b) {\n        return b - a;\n      });\n      const layerList = stateApp.userDefinedLayers.slice(0);\n      let beforelayer = null;\n      let fitBounds = null;\n\n      for (let k = layers.length - 1; k >= 0; k--) {\n        const l = layers[k];\n        const selectLayerProps = { ...layerList[l]\n        };\n\n        if (selectLayerProps.type === \"data layer\") {\n          for (let i = 0; i < selectLayerProps.id.length; i++) {\n            // -> fetch data\n            let layerData = [];\n\n            if (selectLayerProps.dataProps[i].dataId == \"trackedWellsWells\") {\n              layerData = stateApp.trackedwells;\n            } else if (selectLayerProps.dataProps[i].dataId == \"trackedOwnersWells\") {\n              layerData = stateApp.trackedOwnerWells;\n            } else if (selectLayerProps.dataProps[i].dataId == \"wellsFromSearch\") {\n              layerData = stateApp.wellListFromSearch;\n            } else if (selectLayerProps.dataProps[i].dataId == \"wellsFromTagsFilter\") {\n              layerData = stateApp.wellListFromTagsFilter;\n            } else {\n              const dataId = selectLayerProps.dataProps[i].dataId;\n\n              const groupBy = (arr, property) => {\n                return arr.reduce((memo, x) => {\n                  if (!memo[x[property]]) {\n                    memo[x[property]] = [];\n                  }\n\n                  memo[x[property]].push(x);\n                  return memo;\n                }, {});\n              };\n\n              layerData = groupBy(stateApp.customLayers, \"layer\")[dataId];\n            }\n\n            if (layerData && layerData.length !== 0) {\n              // -> make GEOJSON\n              const makeGeoJSON = data => {\n                return {\n                  type: \"FeatureCollection\",\n                  features: data.map(feature => {\n                    if (selectLayerProps.dataProps[i].dataTypeId == \"Point\") {\n                      return {\n                        type: \"Feature\",\n                        properties: feature,\n                        geometry: {\n                          type: selectLayerProps.dataProps[i].dataTypeId,\n                          coordinates: [feature.longitude, feature.latitude]\n                        }\n                      };\n                    } else {\n                      return JSON.parse(feature.shape);\n                    }\n                  })\n                };\n              };\n\n              const myGeoJSONData = makeGeoJSON(layerData);\n              const layerId = selectLayerProps.layerProps[i].layerId;\n              console.log(\"layerId: \" + layerId);\n\n              if (map.getLayer(layerId)) {\n                map.setLayoutProperty(layerId, \"visibility\", \"visible\");\n                map.getSource(selectLayerProps.sourceProps[i].sourceId).setData(myGeoJSONData);\n                let clusterLabelBar = layerId + \"-clusters-counts\";\n\n                if (map.getLayer(clusterLabelBar)) {\n                  map.setLayoutProperty(clusterLabelBar, \"visibility\", \"visible\");\n\n                  if (beforelayer) {\n                    map.moveLayer(clusterLabelBar, beforelayer);\n                  }\n\n                  beforelayer = clusterLabelBar;\n                }\n\n                let clusterVar = layerId + \"-clusters\";\n\n                if (map.getLayer(clusterVar)) {\n                  map.setLayoutProperty(clusterVar, \"visibility\", \"visible\");\n\n                  if (beforelayer) {\n                    map.moveLayer(clusterVar, beforelayer);\n                  }\n\n                  beforelayer = clusterVar;\n                }\n              } else {\n                // -> add source\n                if (selectLayerProps.dataProps[i].dataTypeId == \"Point\") {\n                  map.addSource(selectLayerProps.sourceProps[i].sourceId, {\n                    type: selectLayerProps.sourceProps[i].sourceType,\n                    data: myGeoJSONData,\n                    cluster: true,\n                    clusterRadius: 50,\n                    clusterMaxZoom: 6\n                  });\n                  const filterLayerId = selectLayerProps.sourceProps[i].sourceId + \"_filter\";\n                  console.log(filterLayerId);\n                  map.addSource(filterLayerId, {\n                    type: selectLayerProps.sourceProps[i].sourceType,\n                    data: myGeoJSONData\n                  });\n                } else {\n                  map.addSource(selectLayerProps.sourceProps[i].sourceId, {\n                    type: selectLayerProps.sourceProps[i].sourceType,\n                    data: myGeoJSONData,\n                    promoteId: {\n                      original: \"id\"\n                    }\n                  });\n                } // -> add layer\n                // eslint-disable-next-line eqeqeq\n\n\n                if (selectLayerProps.layerProps[i].layerType == \"symbol\") {\n                  map.addLayer({\n                    id: selectLayerProps.layerProps[i].layerId,\n                    type: selectLayerProps.layerProps[i].layerType,\n                    source: selectLayerProps.sourceProps[i].sourceId,\n                    layout: selectLayerProps.layerProps[i].symbolProps\n                  });\n                } else {\n                  map.addLayer({\n                    id: selectLayerProps.layerProps[i].layerId,\n                    type: selectLayerProps.layerProps[i].layerType,\n                    source: selectLayerProps.sourceProps[i].sourceId,\n                    paint: selectLayerProps.layerProps[i].paintProps\n                  });\n                } // -> add cluster layer\n\n\n                if (selectLayerProps && selectLayerProps.layerProps && selectLayerProps.layerProps[i].clusterProps) {\n                  var clusterVar = selectLayerProps.layerProps[i].layerId + \"-clusters\";\n                  var clusterLabelBar = selectLayerProps.layerProps[i].layerId + \"-clusters-counts\";\n                  map.addLayer({\n                    id: clusterLabelBar,\n                    type: \"symbol\",\n                    source: selectLayerProps.sourceProps[i].sourceId,\n                    filter: [\"has\", \"point_count\"],\n                    layout: selectLayerProps.layerProps[i].clusterProps.clusterSymbolProps\n                  });\n\n                  if (beforelayer) {\n                    map.moveLayer(clusterLabelBar, beforelayer);\n                  }\n\n                  beforelayer = clusterLabelBar;\n                  map.addLayer({\n                    id: clusterVar,\n                    type: selectLayerProps.layerProps[i].layerType,\n                    source: selectLayerProps.sourceProps[i].sourceId,\n                    filter: [\"has\", \"point_count\"],\n                    paint: selectLayerProps.layerProps[i].clusterProps.clusterPaintProps\n                  });\n\n                  if (beforelayer) {\n                    map.moveLayer(clusterVar, beforelayer);\n                  }\n\n                  beforelayer = clusterVar;\n                } // -> add interaction (note to change later w/ interaction panel)\n\n\n                if (selectLayerProps && selectLayerProps.interactionProps) {\n                  const availableInteraction = stateApp.checkedUserDefinedLayersInteraction.indexOf(l) !== -1;\n\n                  if (selectLayerProps.interactionProps.mouseClick) {\n                    var clusterVar = selectLayerProps.layerProps[i].layerId + \"-clusters\";\n                  }\n\n                  if (selectLayerProps && selectLayerProps.interactionProps && selectLayerProps.interactionProps.hoverActions) {\n                    var clusterVar = selectLayerProps.layerProps[i].layerId + \"-clusters\";\n\n                    if (selectLayerProps.interactionProps.hoverActions.mouseMove) {\n                      const mouseMoveHandler = () => {\n                        map.getCanvas().style.cursor = selectLayerProps.interactionProps.hoverActions.mouseMove.cursor;\n                      };\n\n                      if (selectLayerProps.interactionProps.hoverActions.mouseMoveHandler) {\n                        const oldHander = selectLayerProps.interactionProps.hoverActions.mouseMoveHandler;\n                        map.off(\"mousemove\", selectLayerProps.layerProps[i].layerId, oldHander);\n                        map.off(\"mousemove\", clusterVar, oldHander);\n                      }\n\n                      if (availableInteraction) {\n                        map.on(\"mousemove\", selectLayerProps.layerProps[i].layerId, mouseMoveHandler);\n                        map.on(\"mousemove\", clusterVar, mouseMoveHandler);\n                        selectLayerProps.interactionProps.hoverActions.mouseMoveHandler = mouseMoveHandler;\n                      }\n                    }\n\n                    if (selectLayerProps.interactionProps.hoverActions.mouseLeave) {\n                      const mouseLeaveHandler = () => {\n                        map.getCanvas().style.cursor = selectLayerProps.interactionProps.hoverActions.mouseLeave.cursor;\n                      };\n\n                      if (selectLayerProps.interactionProps.hoverActions.mouseLeaveHandler) {\n                        const oldHander = selectLayerProps.interactionProps.hoverActions.mouseMoveHandler;\n                        map.off(\"mouseleave\", selectLayerProps.layerProps[i].layerId, oldHander);\n                        map.off(\"mouseleave\", clusterVar, oldHander);\n                      }\n\n                      if (availableInteraction) {\n                        map.on(\"mouseleave\", selectLayerProps.layerProps[i].layerId, mouseLeaveHandler);\n                        map.on(\"mouseleave\", clusterVar, mouseLeaveHandler);\n                        selectLayerProps.interactionProps.hoverActions.mouseLeaveHandler = mouseLeaveHandler;\n                      }\n                    }\n                  }\n\n                  layerList[l] = selectLayerProps;\n                }\n              }\n\n              if (beforelayer) {\n                map.moveLayer(selectLayerProps.layerProps[i].layerId, beforelayer);\n              }\n\n              beforelayer = selectLayerProps.layerProps[i].layerId; //// finding and fitting bounds\n              // eslint-disable-next-line no-loop-func\n\n              const findBounds = wells => {\n                let latArray = wells.map(item => item.latitude);\n                let longArray = wells.map(item => item.longitude);\n                latArray = latArray.filter(item => item !== 0);\n                longArray = longArray.filter(item => item !== 0);\n                let maxLat = Math.max(...latArray);\n                let minLat = Math.min(...latArray);\n                let maxLong = Math.max(...longArray);\n                let minLong = Math.min(...longArray);\n\n                if (fitBounds) {\n                  const {\n                    maxLat: maxLatSApp,\n                    minLat: minLatSApp,\n                    maxLong: maxLongSApp,\n                    minLong: minLongSApp\n                  } = fitBounds;\n                  return {\n                    maxLat: maxLatSApp < maxLat ? maxLat : maxLatSApp,\n                    minLat: minLatSApp > minLat ? minLat : minLatSApp,\n                    maxLong: maxLongSApp < maxLong ? maxLong : maxLongSApp,\n                    minLong: minLongSApp > minLong ? minLong : minLongSApp\n                  };\n                }\n\n                return {\n                  maxLat,\n                  minLat,\n                  maxLong,\n                  minLong\n                };\n              };\n\n              fitBounds = layerData ? findBounds(layerData) : null;\n            }\n          }\n        }\n      }\n\n      if (fitBounds) {\n        const fitOverBounds = ({\n          maxLat,\n          minLat,\n          maxLong,\n          minLong\n        }) => {\n          const latDif = maxLat - minLat;\n          const longDif = maxLong - minLong;\n\n          if (latDif === 0) {\n            maxLat = maxLat + 0.005 > 90 ? 90 : maxLat + 0.005;\n            minLat = minLat - 0.005 < -90 ? -90 : minLat - 0.005;\n          } else {\n            maxLat = maxLat + latDif * 0.08 > 90 ? 90 : maxLat + latDif * 0.08;\n            minLat = minLat - latDif * 0.08 < -90 ? -90 : minLat - latDif * 0.08;\n          }\n\n          if (longDif === 0) {\n            maxLong = maxLong + 0.005 > 180 ? 180 : maxLong + 0.005;\n            minLong = minLong - 0.005 < -180 ? -180 : minLong - 0.005;\n          } else {\n            maxLong = maxLong + longDif * 0.08 > 180 ? 180 : maxLong + latDif * 0.08;\n            maxLong = maxLong - longDif * 0.08 < -180 ? -180 : maxLong - latDif * 0.08;\n          }\n\n          return {\n            maxLat,\n            minLat,\n            maxLong,\n            minLong\n          };\n        };\n\n        let bounds = fitOverBounds(fitBounds);\n\n        if (bounds && bounds.minLong && bounds.maxLong && bounds.minLat && bounds.maxLat && !stateApp.fitBounds) {\n          map.fitBounds([[bounds.minLong, bounds.minLat], [bounds.maxLong, bounds.maxLat]]);\n        }\n      }\n\n      setStateApp(stateApp => ({ ...stateApp,\n        userDefinedLayers: layerList,\n        fitBounds: { ...stateApp.fitBounds\n        }\n      }));\n    }\n  }, [map, stateApp.checkedUserDefinedLayers, stateApp.checkedUserDefinedLayersInteraction, stateApp.tempCheckedUserDefinedLayers, stateApp.customLayers, stateApp.trackedwells, stateApp.trackedOwnerWells, stateApp.wellListFromSearch, stateApp.wellListFromTagsFilter]);\n  useEffect(() => {\n    if (showExpandableCard) {\n      setTransform(\"transform: none\");\n    } else {\n      setTransform(\"transform: inherit\");\n    }\n  }, [showExpandableCard]);\n  useEffect(() => {\n    if (stateNav.m1neralDefaultsOnOff) {\n      setDefaultsCheckOnOff(defaultsCheckOnOff => !defaultsCheckOnOff);\n    }\n\n    if (stateNav.m1neralCehckOnOff) {\n      setM1neralCheckOnOff(m1neralCheckOnOff => !m1neralCheckOnOff);\n    }\n  }, [stateNav.m1neralCehckOnOff, stateNav.m1neralDefaultsOnOff]);\n  useEffect(() => {\n    console.log(\"filter ue start\"); //applies filter when one of the filters change\n\n    if (map) {\n      let isFilterSet = false;\n      let wellFilterCount = 0;\n      let ownershipFilterCount = 0;\n      let productionFilterCount = 0;\n      let geographyFilterCount = 0;\n      let valuationFilterCount = 0;\n      let aiFilterCount = 0;\n      let totalCount = 0;\n      let tagFilterCount = 0;\n      let filterArray = [];\n      let filterCustomArray = {};\n      let defaultOverride = true;\n\n      if (defaultOverride == true && stateNav.defaultOn && !stateNav.filterWellStatus && !stateNav.filterWellType && filterArray.length === 0) {\n        // let defaultTypeName = [\"typeName\", [\"GAS\", \"OIL\", \"OIL AND GAS\", \"PERMITTED\", \"UNKNOWN\"]];\n        // let defaultStatusName = [\"statusName\",\n        // [\n        //   \"ACTIVE\",\n        //   \"ACTIVE - DRILLING\",\n        //   \"COMPLETED - NOT ACTIVE\",\n        //   \"DRILLED UNCOMPLETED (DUC)\",\n        //   \"PERMIT\",\n        //   \"PERMIT - EXISTING WELL\",\n        //   \"PERMIT - NEW DRILL\",\n        // ],];\n        let defaultTypeName = [\"typeName\", []];\n        let defaultStatusName = [\"statusName\", []];\n        let defaultFiltersWellStatus = [\"filterWellStatus\", [\"match\", [\"get\", \"wellStatus\"], defaultStatusName[1], true, false]];\n        let defaultFiltersWellType = [\"filterWellType\", [\"match\", [\"get\", \"wellType\"], defaultTypeName[1], true, false]];\n        const m1neralDefaults = [{\n          name: \"M1neral Default Filters\",\n          filters: [defaultFiltersWellStatus, defaultFiltersWellType],\n          types: [defaultTypeName, defaultStatusName],\n          on: m1neralCheckOnOff,\n          default: defaultsCheckOnOff\n        }];\n        let wellTypeFilter = null;\n        let wellStatusFilter = null; // console.log('***********',defaultTypeName[1])\n        // console.log('***********',defaultStatusName[1].length)\n\n        if (defaultTypeName[1].length > 0) {\n          wellTypeFilter = defaultFiltersWellType[1];\n        }\n\n        if (defaultStatusName[1].length > 0) {\n          wellStatusFilter = defaultFiltersWellStatus[1];\n        }\n\n        setStateNav(stateNav => ({ ...stateNav,\n          defaultOn: false,\n          statusName: defaultStatusName[1],\n          typeName: defaultTypeName[1],\n          m1neralDefaultFilters: m1neralDefaults,\n          filterWellStatus: wellStatusFilter,\n          filterWellType: wellTypeFilter\n        }));\n      }\n\n      if (stateNav.filterWellProfile && stateNav.filterWellProfile.length > 0) {\n        let total = stateNav.filterWellProfile[2].length;\n        filterArray.push(stateNav.filterWellProfile);\n        isFilterSet = true;\n        wellFilterCount += total;\n        totalCount += total;\n      }\n\n      if (stateNav.filterWellType && stateNav.filterWellType.length > 0) {\n        let total = stateNav.filterWellType[2].length;\n        filterArray.push(stateNav.filterWellType);\n        isFilterSet = true;\n        wellFilterCount += total;\n        totalCount += total;\n      }\n\n      if (stateNav.filterOwnerCount && stateNav.filterOwnerCount.length > 0) {\n        filterArray.push(stateNav.filterOwnerCount);\n        isFilterSet = true;\n        ownershipFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterOwnerConfidence && stateNav.filterOwnerConfidence.length > 0) {\n        filterArray.push(stateNav.filterOwnerConfidence);\n        isFilterSet = true;\n        aiFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterNoOwnerCount && stateNav.filterNoOwnerCount.length > 0) {\n        filterArray.push(stateNav.filterNoOwnerCount);\n        isFilterSet = true;\n        ownershipFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterTrackedWells) {\n        // filterArray.push(stateNav.filterTrackedWells);\n        // isFilterSet = true;\n        tagFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterTrackedOwners) {\n        // filterArray.push(stateNav.filterTrackedWells);\n        // isFilterSet = true;\n        tagFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterTags && stateNav.filterTags.length > 0) {\n        filterArray.push(stateNav.filterTags);\n        isFilterSet = true;\n        totalCount += stateNav.selectedTags ? stateNav.selectedTags.length : 0;\n        tagFilterCount += stateNav.selectedTags ? stateNav.selectedTags.length : 0;\n      }\n\n      if (stateNav.filterHasOwnerCount && stateNav.filterHasOwnerCount.length > 0) {\n        filterArray.push(stateNav.filterHasOwnerCount);\n        isFilterSet = true;\n        ownershipFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterHasOwners && stateNav.filterHasOwners.length > 0) {\n        filterArray.push(stateNav.filterHasOwners);\n        isFilterSet = true;\n        ownershipFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterWellStatus && stateNav.filterWellStatus.length > 0) {\n        let total = stateNav.filterWellStatus[2].length;\n        filterArray.push(stateNav.filterWellStatus);\n        isFilterSet = true;\n        wellFilterCount += total;\n        totalCount += total;\n      }\n\n      if (stateNav.filterOperator && stateNav.filterOperator.length > 0) {\n        let total = stateNav.filterOperator[2].length;\n        filterArray.push(stateNav.filterOperator);\n        isFilterSet = true;\n        wellFilterCount += total;\n        totalCount += total;\n      }\n\n      if (stateNav.filterWellAppraisal && stateNav.filterWellAppraisal.length > 0) {\n        filterArray.push(stateNav.filterWellAppraisal);\n        isFilterSet = true;\n        valuationFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterCumulativeOil && stateNav.filterCumulativeOil.length > 0) {\n        filterArray.push(stateNav.filterCumulativeOil);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterCumulativeGas && stateNav.filterCumulativeGas.length > 0) {\n        filterArray.push(stateNav.filterCumulativeGas);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterCumulativeWater && stateNav.filterCumulativeWater.length > 0) {\n        filterArray.push(stateNav.filterCumulativeWater);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstMonthWater && stateNav.filterFirstMonthWater.length > 0) {\n        filterArray.push(stateNav.filterFirstMonthWater);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstThreeMonthWater && stateNav.filterFirstThreeMonthWater.length > 0) {\n        filterArray.push(stateNav.filterFirstThreeMonthWater);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstSixMonthWater && stateNav.filterFirstSixMonthWater.length > 0) {\n        filterArray.push(stateNav.filterFirstSixMonthWater);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstTwelveMonthWater && stateNav.filterFirstTwelveMonthWater.length > 0) {\n        filterArray.push(stateNav.filterFirstTwelveMonthWater);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastMonthWater && stateNav.filterLastMonthWater.length > 0) {\n        filterArray.push(stateNav.filterLastMonthWater);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastThreeMonthWater && stateNav.filterLastThreeMonthWater.length > 0) {\n        filterArray.push(stateNav.filterLastThreeMonthWater);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastSixMonthWater && stateNav.filterLastSixMonthWater.length > 0) {\n        filterArray.push(stateNav.filterLastSixMonthWater);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastTwelveMonthWater && stateNav.filterLastTwelveMonthWater.length > 0) {\n        filterArray.push(stateNav.filterLastTwelveMonthWater);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstMonthGas && stateNav.filterFirstMonthGas.length > 0) {\n        filterArray.push(stateNav.filterFirstMonthGas);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstThreeMonthGas && stateNav.filterFirstThreeMonthGas.length > 0) {\n        filterArray.push(stateNav.filterFirstThreeMonthGas);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstSixMonthGas && stateNav.filterFirstSixMonthGas.length > 0) {\n        filterArray.push(stateNav.filterFirstSixMonthGas);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstTwelveMonthGas && stateNav.filterFirstTwelveMonthGas.length > 0) {\n        filterArray.push(stateNav.filterFirstTwelveMonthGas);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastMonthGas && stateNav.filterLastMonthGas.length > 0) {\n        filterArray.push(stateNav.filterLastMonthGas);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastThreeMonthGas && stateNav.filterLastThreeMonthGas.length > 0) {\n        filterArray.push(stateNav.filterLastThreeMonthGas);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastSixMonthGas && stateNav.filterLastSixMonthGas.length > 0) {\n        filterArray.push(stateNav.filterLastSixMonthGas);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastTwelveMonthGas && stateNav.filterLastTwelveMonthGas.length > 0) {\n        filterArray.push(stateNav.filterLastTwelveMonthGas);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstMonthOil && stateNav.filterFirstMonthOil.length > 0) {\n        filterArray.push(stateNav.filterFirstMonthOil);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstThreeMonthOil && stateNav.filterFirstThreeMonthOil.length > 0) {\n        filterArray.push(stateNav.filterFirstThreeMonthOil);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstSixMonthOil && stateNav.filterFirstSixMonthOil.length > 0) {\n        filterArray.push(stateNav.filterFirstSixMonthOil);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterFirstTwelveMonthOil && stateNav.filterFirstTwelveMonthOil.length > 0) {\n        filterArray.push(stateNav.filterFirstTwelveMonthOil);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastMonthOil && stateNav.filterLastMonthOil.length > 0) {\n        filterArray.push(stateNav.filterLastMonthOil);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastThreeMonthOil && stateNav.filterLastThreeMonthOil.length > 0) {\n        filterArray.push(stateNav.filterLastThreeMonthOil);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastSixMonthOil && stateNav.filterLastSixMonthOil.length > 0) {\n        filterArray.push(stateNav.filterLastSixMonthOil);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterLastTwelveMonthOil && stateNav.filterLastTwelveMonthOil.length > 0) {\n        filterArray.push(stateNav.filterLastTwelveMonthOil);\n        isFilterSet = true;\n        productionFilterCount += 1;\n        totalCount += 1;\n      }\n\n      if (stateNav.filterAllInterestTypes && stateNav.filterAllInterestTypes.length > 0) {\n        let removeAny = 1;\n        let numberFiltes = stateNav.filterAllInterestTypes.length;\n        let total = numberFiltes - removeAny;\n        filterArray.push(stateNav.filterAllInterestTypes);\n        isFilterSet = true;\n        ownershipFilterCount += total;\n        totalCount += total;\n      }\n\n      if (stateNav.filterAllOwnershipTypes && stateNav.filterAllOwnershipTypes.length > 0) {\n        let removeAny = 1;\n        let numberFiltes = stateNav.filterAllOwnershipTypes.length;\n        let total = numberFiltes - removeAny;\n        filterArray.push(stateNav.filterAllOwnershipTypes);\n        isFilterSet = true;\n        ownershipFilterCount += total;\n        totalCount += total;\n      }\n\n      if (stateNav.filterOwnerAppraisals && stateNav.filterOwnerAppraisals.length > 0) {\n        let removeAny = 1;\n        let numberFiltes = stateNav.filterOwnerAppraisals.length;\n        let total = numberFiltes - removeAny;\n        filterArray.push(stateNav.filterOwnerAppraisals);\n        isFilterSet = true;\n        valuationFilterCount += total;\n        totalCount += total;\n      }\n\n      let fitBounds = null;\n\n      const findBounds = shapes => {\n        let bound = null;\n\n        if (fitBounds && fitBounds.maxLat && fitBounds.minLat && fitBounds.maxLong && fitBounds.minLong) {\n          bound = fitBounds;\n        }\n\n        if (shapes && shapes.length > 0) {\n          shapes.forEach(shape => {\n            const bbox = turf.bbox(shape);\n\n            if (bound) {\n              bound.minLong = bound.minLong > bbox[0] ? bbox[0] : bound.minLong;\n              bound.minLat = bound.minLat > bbox[1] ? bbox[1] : bound.minLat;\n              bound.maxLong = bound.maxLong < bbox[2] ? bbox[2] : bound.maxLong;\n              bound.maxLat = bound.maxLat < bbox[3] ? bbox[3] : bound.maxLat;\n            } else {\n              bound = {\n                minLong: bbox[0],\n                minLat: bbox[1],\n                maxLong: bbox[2],\n                maxLat: bbox[3]\n              };\n            }\n          });\n        }\n\n        return bound;\n      };\n\n      const setLayerSource = (layerId, source, sourceLayer = null) => {\n        const oldLayers = map.getStyle().layers;\n        const cluster_layer = `${layerId}-clusters`;\n        const cluster_counts_layer = `${layerId}-clusters-counts`;\n        const layer = map.getLayer(layerId);\n\n        if (source.includes(\"_filter\")) {\n          if (map.getLayer(cluster_layer)) {\n            map.setLayoutProperty(cluster_layer, \"visibility\", \"none\");\n          }\n\n          if (map.getLayer(cluster_counts_layer)) {\n            map.setLayoutProperty(cluster_counts_layer, \"visibility\", \"none\");\n          }\n        } else {\n          if (layer.visibility == \"visible\") {\n            if (map.getLayer(cluster_layer)) {\n              map.setLayoutProperty(cluster_layer, \"visibility\", \"visible\");\n            }\n\n            if (map.getLayer(cluster_counts_layer)) {\n              map.setLayoutProperty(cluster_counts_layer, \"visibility\", \"visible\");\n            }\n          }\n        }\n\n        const layerIndex = oldLayers.findIndex(l => l.id === layerId);\n        const layerDef = oldLayers[layerIndex];\n        const before = oldLayers[layerIndex + 1] && oldLayers[layerIndex + 1].id;\n        layerDef.source = source;\n\n        if (sourceLayer) {\n          layerDef[\"source-layer\"] = sourceLayer;\n        }\n\n        map.removeLayer(layerId);\n        map.addLayer(layerDef, before);\n      };\n\n      const filterShapeAction = (shapeList, filterLayers) => {\n        filterLayers.forEach(filterLayer => {\n          let layer = map.getLayer(filterLayer);\n\n          if (layer) {\n            if (layer.type == \"circle\" && layer.id != \"wellpoints\") {\n              if (!layer.source.includes(\"_filter\")) {\n                const filterSource = layer.source + \"_filter\";\n                setLayerSource(layer.id, filterSource);\n                layer = map.getLayer(filterLayer);\n              }\n            }\n\n            let featuresList = [];\n\n            if (layer.source === \"composite\") {\n              // console.log(map.getSource(layer.source));\n              featuresList = map.querySourceFeatures(\"composite\", {\n                sourceLayer: layer.sourceLayer\n              });\n            } else {\n              // console.log(map.getSource(layer.source));\n              // featuresList = map.querySourceFeatures(layer.source);\n              featuresList = map.getSource(layer.source)._data.features;\n            } // console.log(filterLayer, featuresList);\n\n\n            if (featuresList && featuresList.length > 0) {\n              const result = featuresList.filter(feature => {\n                if (feature.geometry.type === \"MultiPolygon\") {\n                  for (let i = 0; i < feature.geometry.coordinates.length; i++) {\n                    const coordinates = feature.geometry.coordinates[i];\n                    const geometry = {\n                      type: \"Polygon\",\n                      coordinates: coordinates\n                    };\n                    let flag = 0;\n\n                    for (let k = 0; k < shapeList.length; k++) {\n                      if (shapeList[k].type === \"MultiPolygon\") {\n                        let flagM = 0;\n\n                        for (let j = 0; j < shapeList[k].coordinates.length; j++) {\n                          let filterCoordinates = shapeList[k].coordinates[j];\n\n                          if (filterCoordinates[0].length > 2) {\n                            filterCoordinates = filterCoordinates[0];\n                          }\n\n                          const filterGeometry = {\n                            type: \"Polygon\",\n                            coordinates: filterCoordinates\n                          };\n\n                          if (!turf.booleanContains(filterGeometry, geometry)) {\n                            flagM++;\n                          }\n                        }\n\n                        if (flagM == shapeList[k].coordinates.length) {\n                          flag++;\n                        }\n                      } else {\n                        if (!turf.booleanContains(shapeList[k], geometry)) {\n                          flag++;\n                        }\n                      }\n                    }\n\n                    if (flag === shapeList.length) {\n                      return false;\n                    }\n                  }\n\n                  return true;\n                } else {\n                  for (let i = 0; i < shapeList.length; i++) {\n                    if (shapeList[i].type === \"MultiPolygon\") {\n                      for (let j = 0; j < shapeList[i].coordinates.length; j++) {\n                        let filterCoordinates = shapeList[i].coordinates[j];\n\n                        if (filterCoordinates[0].length > 2) {\n                          filterCoordinates = filterCoordinates[0];\n                        }\n\n                        const filterGeometry = {\n                          type: \"Polygon\",\n                          coordinates: filterCoordinates\n                        };\n\n                        if (feature.geometry.coordinates[0] && turf.booleanContains(filterGeometry, feature)) {\n                          return true;\n                        }\n                      }\n                    } else {\n                      if (feature.geometry.coordinates[0] && turf.booleanContains(shapeList[i], feature)) {\n                        return true;\n                      }\n                    }\n                  }\n\n                  return false;\n                }\n              });\n              let ids = result.map(function (feature) {\n                if ([\"wellpoints\", \"welllines\", \"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\"].indexOf(filterLayer) > -1) {\n                  return feature.properties.id;\n                } else if ([\"permits\", \"rigs\"].indexOf(filterLayer) > -1) {\n                  return feature.properties.Id;\n                } else if ([\"interest\", \"parcel\"].indexOf(filterLayer) > -1) {\n                  return feature.properties.shapeLabel;\n                }\n\n                return feature.properties.VIEWID;\n              });\n\n              const onlyUnique = (value, index, self) => {\n                return self.indexOf(value) === index && (typeof value === \"number\" || typeof value === \"string\");\n              };\n\n              ids = ids.filter(onlyUnique);\n\n              if (ids.length > 0) {\n                if (!filterCustomArray[filterLayer]) {\n                  filterCustomArray[filterLayer] = [];\n                }\n\n                filterCustomArray[filterLayer].push(ids);\n              }\n            }\n          }\n        });\n      };\n\n      if (stateNav.filterBasin && stateNav.filterBasin.length > 0) {\n        // let total = stateNav.filterBasin[2].length;\n        // filterArray.push(stateNav.filterBasin);\n        const {\n          styleLayers,\n          checkedLayers\n        } = stateApp;\n        const basinIndex = styleLayers.findIndex(styleLayer => styleLayer.name === \"Basins\");\n\n        if (checkedLayers.indexOf(basinIndex) === -1) {\n          setStateApp(stateApp => ({ ...stateApp,\n            tempCheckedLayer: basinIndex\n          }));\n        }\n\n        let basinNames = stateNav.basinName;\n\n        if (basinNames) {\n          filterCustomArray[\"basin\"] = [\"match\", [\"get\", \"NAME\"], basinNames, true, false];\n        }\n\n        const filterLayers = [\"GLOLeases\", \"GLOLeaseLabels\", \"GLOUnits\", \"GLOUnitLabels\", \"wellpoints\", \"welllines\", \"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\", \"permits\", \"rigs\", \"interest\", \"parcel\"];\n\n        if (stateNav.filterBasin && stateNav.filterBasin.length > 0) {\n          const basinShapes = stateNav.filterBasin;\n          fitBounds = findBounds(basinShapes);\n          filterShapeAction(basinShapes, filterLayers);\n        }\n\n        isFilterSet = true;\n        geographyFilterCount += stateNav.basinName.length;\n        totalCount += stateNav.basinName.length;\n      } else {\n        setStateApp(stateApp => ({ ...stateApp,\n          tempCheckedLayer: null\n        }));\n      }\n\n      if (stateNav.filterAOI && stateNav.filterAOI.length > 0) {\n        const {\n          userDefinedLayers,\n          checkedUserDefinedLayers\n        } = stateApp;\n        const aoiIndex = userDefinedLayers.findIndex(userDefinedLayer => userDefinedLayer.name === \"Area of Interest\");\n\n        if (checkedUserDefinedLayers.indexOf(aoiIndex) === -1) {\n          setStateApp(stateApp => ({ ...stateApp,\n            tempCheckedUserDefinedLayer: aoiIndex\n          }));\n        }\n\n        let aoiName = stateNav.aoiName;\n\n        if (aoiName) {\n          if (!filterCustomArray[\"interest\"]) {\n            filterCustomArray[\"interest\"] = [];\n          }\n\n          filterCustomArray[\"interest\"].push(aoiName);\n        }\n\n        const filterLayers = [\"GLOLeases\", \"GLOLeaseLabels\", \"GLOUnits\", \"GLOUnitLabels\", \"wellpoints\", \"welllines\", \"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\", \"permits\", \"rigs\", \"parcel\"];\n\n        if (stateNav.filterAOI && stateNav.filterAOI.length > 0) {\n          const aoiShapes = stateNav.filterAOI;\n          fitBounds = findBounds(aoiShapes);\n          filterShapeAction(aoiShapes, filterLayers);\n        }\n\n        isFilterSet = true;\n        geographyFilterCount += stateNav.aoiName.length;\n        totalCount += stateNav.aoiName.length;\n      } else {\n        setStateApp(stateApp => ({ ...stateApp,\n          tempCheckedUserDefinedLayer: null\n        }));\n      }\n\n      if (stateNav.filterParcel && stateNav.filterParcel.length > 0) {\n        const {\n          userDefinedLayers,\n          checkedUserDefinedLayers\n        } = stateApp;\n        const parcelIndex = userDefinedLayers.findIndex(userDefinedLayer => userDefinedLayer.name === \"Parcels\");\n\n        if (checkedUserDefinedLayers.indexOf(parcelIndex) === -1) {\n          setStateApp(stateApp => ({ ...stateApp,\n            tempCheckedUserDefinedLayer: parcelIndex\n          }));\n        }\n\n        let parcelName = stateNav.parcelName;\n\n        if (parcelName) {\n          if (!filterCustomArray[\"parcel\"]) {\n            filterCustomArray[\"parcel\"] = [];\n          }\n\n          filterCustomArray[\"parcel\"].push(parcelName);\n        }\n\n        const filterLayers = [\"GLOLeases\", \"GLOLeaseLabels\", \"GLOUnits\", \"GLOUnitLabels\", \"wellpoints\", \"welllines\", \"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\", \"permits\", \"rigs\", \"interest\"];\n\n        if (stateNav.filterParcel && stateNav.filterParcel.length > 0) {\n          const parcelShapes = stateNav.filterParcel;\n          fitBounds = findBounds(parcelShapes);\n          filterShapeAction(parcelShapes, filterLayers);\n        }\n\n        isFilterSet = true;\n        geographyFilterCount += stateNav.parcelName.length;\n        totalCount += stateNav.parcelName.length;\n      } else {\n        setStateApp(stateApp => ({ ...stateApp,\n          tempCheckedUserDefinedLayer: null\n        }));\n      }\n\n      if (fitBounds) {\n        // console.log(fitBounds);\n        setStateApp(stateApp => ({ ...stateApp,\n          fitBounds\n        }));\n      }\n\n      if (stateNav.filterPlay && stateNav.filterPlay.length > 0) {\n        let total = stateNav.filterPlay[2].length;\n        filterArray.push(stateNav.filterPlay);\n        isFilterSet = true;\n        geographyFilterCount += total;\n        totalCount += total;\n      }\n\n      if (stateNav.filterPermitDateRange && stateNav.filterPermitDateRange.length > 0) {\n        filterArray.push(stateNav.filterPermitDateRange);\n        isFilterSet = true;\n        totalCount += 1;\n        wellFilterCount += 1;\n      }\n\n      if (stateNav.filterSpudDateRange && stateNav.filterSpudDateRange.length > 0) {\n        filterArray.push(stateNav.filterSpudDateRange);\n        isFilterSet = true;\n        totalCount += 1;\n        wellFilterCount += 1;\n      }\n\n      if (stateNav.filterCompletetionDateRange && stateNav.filterCompletetionDateRange.length > 0) {\n        filterArray.push(stateNav.filterCompletetionDateRange);\n        isFilterSet = true;\n        totalCount += 1;\n        wellFilterCount += 1;\n      }\n\n      if (stateNav.filterFirstProdDateRange && stateNav.filterFirstProdDateRange.length > 0) {\n        filterArray.push(stateNav.filterFirstProdDateRange);\n        isFilterSet = true;\n        totalCount += 1;\n        wellFilterCount += 1;\n      }\n\n      if (stateNav.filterGeography && stateNav.filterGeography.length > 0) {\n        filterArray.push(stateNav.filterGeography);\n        isFilterSet = true;\n        totalCount += 1;\n        geographyFilterCount += stateNav.filterGeography.length - 1;\n      }\n\n      if (stateNav.filterOwnerWellInterestSum && stateNav.filterOwnerWellInterestSum.length > 0) {\n        filterArray.push(stateNav.filterOwnerWellInterestSum);\n        isFilterSet = true;\n        totalCount += 1;\n        ownershipFilterCount += 1;\n      }\n\n      if (stateNav.filterDrawing && stateNav.filterDrawing.length > 0) {\n        isFilterSet = true;\n        totalCount += 1;\n        geographyFilterCount += 1;\n        const filterLayers = [\"GLOLeases\", \"GLOLeaseLabels\", \"GLOUnits\", \"GLOUnitLabels\", \"wellpoints\", \"welllines\", \"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\", \"permits\", \"rigs\", \"interest\", \"parcel\"];\n        const filterFeature = stateNav.filterDrawing[1];\n        filterShapeAction([filterFeature], filterLayers);\n      }\n\n      setStateNav(state => ({ ...state,\n        productionFilterCount: productionFilterCount,\n        geographyFilterCount: geographyFilterCount,\n        ownershipFilterCount: ownershipFilterCount,\n        wellFilterCount: wellFilterCount,\n        totalFilterCount: totalCount,\n        valuationFilterCount: valuationFilterCount,\n        tagFilterCount: tagFilterCount,\n        aiFilterCount: aiFilterCount\n      }));\n\n      if (isFilterSet) {\n        const mergeArrays = arrays => {\n          let jointArray = [];\n          arrays.forEach(array => {\n            jointArray = [...jointArray, ...array];\n          });\n          return Array.from(new Set([...jointArray]));\n        };\n\n        filterArray.unshift(\"all\");\n\n        if (filterCustomArray[\"wellpoints\"]) {\n          map.setFilter(\"wellpoints\", [...filterArray, [\"match\", [\"get\", \"id\"], mergeArrays(filterCustomArray[\"wellpoints\"]), true, false]]);\n        } else {\n          map.setFilter(\"wellpoints\", filterArray);\n        }\n\n        if (filterCustomArray[\"welllines\"]) {\n          map.setFilter(\"welllines\", [...filterArray, [\"match\", [\"get\", \"id\"], mergeArrays(filterCustomArray[\"welllines\"]), true, false]]);\n        } else {\n          map.setFilter(\"welllines\", filterArray);\n        }\n\n        map.setFilter(\"wellsHeatmapBoe\", [\">\", [\"get\", \"boeTotal\"], 0]);\n        map.setFilter(\"wellsHeatmapLast12\", [\">\", [\"get\", \"lastTwelveMonthBOE\"], 0]);\n        map.setFilter(\"wellsHeatmapIP90Oil\", [\">\", [\"get\", \"ipOil\"], 0]);\n        map.setFilter(\"wellsHeatmapIP90Gas\", [\">\", [\"get\", \"ipGas\"], 0]);\n        map.setFilter(\"wellsHeatmapRecentlyDrilled\", [\">\", [\"get\", \"daysSinceDrilled\"], 0]);\n        map.setFilter(\"wellsHeatmapRecentlyCompleted\", [\">\", [\"get\", \"daysSinceCompletion\"], 0]);\n        const filterLayers = [\"GLOLeaseLabels\", \"GLOUnitLabels\", \"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\", \"interest\", \"parcel\", \"permits\", \"rigs\"];\n        filterLayers.forEach(filterLayer => {\n          if (filterCustomArray[filterLayer]) {\n            if ([\"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\"].indexOf(filterLayer) > -1) {\n              map.setFilter(filterLayer, [\"match\", [\"get\", \"id\"], mergeArrays(filterCustomArray[filterLayer]), true, false]);\n            } else if ([\"permits\", \"rigs\"].indexOf(filterLayer) > -1) {\n              map.setFilter(filterLayer, [\"match\", [\"get\", \"Id\"], mergeArrays(filterCustomArray[filterLayer]), true, false]);\n            } else if ([\"interest\", \"parcel\"].indexOf(filterLayer) > -1) {\n              map.setFilter(filterLayer, [\"match\", [\"get\", \"shapeLabel\"], mergeArrays(filterCustomArray[filterLayer]), true, false]);\n              map.setFilter(filterLayer + \"_labels\", [\"match\", [\"get\", \"shapeLabel\"], mergeArrays(filterCustomArray[filterLayer]), true, false]);\n            } else {\n              const baseLayer = filterLayer.replace(\"Labels\", \"s\");\n\n              if (filterCustomArray[baseLayer]) {\n                map.setFilter(filterLayer, [\"match\", [\"get\", \"VIEWID\"], mergeArrays(filterCustomArray[baseLayer]), true, false]);\n                map.setFilter(baseLayer, [\"match\", [\"get\", \"VIEWID\"], mergeArrays(filterCustomArray[baseLayer]), true, false]);\n              } else {\n                map.setFilter(filterLayer, [\"match\", [\"get\", \"VIEWID\"], mergeArrays(filterCustomArray[filterLayer]), true, false]);\n                map.setFilter(baseLayer, [\"match\", [\"get\", \"VIEWID\"], mergeArrays(filterCustomArray[filterLayer]), true, false]);\n              }\n            }\n          } else {\n            const layer = map.getLayer(filterLayer);\n\n            if (Object.keys(filterCustomArray).length > 0) {\n              console.log(filterLayer, filterCustomArray);\n\n              if (layer) {\n                if ([\"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\"].indexOf(filterLayer) > -1) {\n                  map.setFilter(filterLayer, [\"match\", [\"get\", \"id\"], \"-1\", true, false]);\n                } else if ([\"permits\", \"rigs\"].indexOf(filterLayer) > -1) {\n                  map.setFilter(filterLayer, [\"match\", [\"get\", \"Id\"], \"-1\", true, false]);\n                } else if ([\"interest\", \"parcel\"].indexOf(filterLayer) > -1) {\n                  map.setFilter(filterLayer, [\"match\", [\"get\", \"shapeLabel\"], \"-1\", true, false]);\n                  map.setFilter(filterLayer + \"_labels\", [\"match\", [\"get\", \"shapeLabel\"], \"-1\", true, false]);\n                } else {\n                  const baseLayer = filterLayer.replace(\"Labels\", \"s\");\n                  map.setFilter(filterLayer, [\"match\", [\"get\", \"VIEWID\"], -1, true, false]);\n                  map.setFilter(baseLayer, [\"match\", [\"get\", \"VIEWID\"], -1, true, false]);\n                }\n              }\n            } else {\n              const layer = map.getLayer(filterLayer);\n\n              if (layer) {\n                map.setFilter(filterLayer, null);\n\n                if (map.getLayer(filterLayer + \"_labels\")) {\n                  map.setFilter(filterLayer + \"_labels\", null);\n                }\n\n                if (map.getLayer(filterLayer.replace(\"Labels\", \"s\"))) {\n                  map.setFilter(filterLayer.replace(\"Labels\", \"s\"), null);\n                }\n\n                if (layer.type == \"circle\" && layer.id != \"wellpoints\") {\n                  if (layer.source.includes(\"_filter\")) {\n                    const clusterSource = layer.source.replace(\"_filter\", \"\");\n                    setLayerSource(layer.id, clusterSource);\n                  }\n                }\n              }\n            }\n          }\n        });\n\n        if (filterCustomArray[\"basin\"]) {\n          if (filterCustomArray[\"basin\"].length == 1) {\n            map.setFilter(\"basinLayer\", filterCustomArray[\"basin\"][0]);\n            map.setFilter(\"basinLabels\", filterCustomArray[\"basin\"][0]);\n          } else {\n            map.setFilter(\"basinLayer\", filterCustomArray[\"basin\"]);\n            map.setFilter(\"basinLabels\", filterCustomArray[\"basin\"]);\n          }\n        } else {\n          map.setFilter(\"basinLayer\", null);\n          map.setFilter(\"basinLabels\", null);\n        }\n      } else {\n        map.setFilter(\"wellpoints\", null);\n        map.setFilter(\"welllines\", null);\n        map.setFilter(\"GLOLeases\", null);\n        map.setFilter(\"GLOLeaseLabels\", null);\n        map.setFilter(\"GLOUnits\", null);\n        map.setFilter(\"GLOUnitLabels\", null);\n        map.setFilter(\"basinLayer\", null);\n        map.setFilter(\"basinLabels\", null);\n        map.setFilter(\"interest\", null);\n        map.setFilter(\"interest_labels\", null);\n        map.setFilter(\"parcel\", null);\n        map.setFilter(\"parcel_labels\", null);\n        map.setFilter(\"wellsHeatmapBoe\", [\">\", [\"get\", \"boeTotal\"], 0]);\n        map.setFilter(\"wellsHeatmapLast12\", [\">\", [\"get\", \"lastTwelveMonthBOE\"], 0]);\n        map.setFilter(\"wellsHeatmapIP90Oil\", [\">\", [\"get\", \"ipOil\"], 0]);\n        map.setFilter(\"wellsHeatmapIP90Gas\", [\">\", [\"get\", \"ipGas\"], 0]);\n        map.setFilter(\"wellsHeatmapRecentlyDrilled\", [\">\", [\"get\", \"daysSinceDrilled\"], 0]);\n        map.setFilter(\"wellsHeatmapRecentlyCompleted\", [\">\", [\"get\", \"daysSinceCompletion\"], 0]);\n        const filterLayers = [\"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\", \"permits\", \"rigs\"];\n        filterLayers.forEach(filterLayer => {\n          const layer = map.getLayer(filterLayer);\n\n          if (layer) {\n            map.setFilter(filterLayer, null);\n\n            if (layer.type == \"circle\") {\n              if (layer.source.includes(\"_filter\")) {\n                const clusterSource = layer.source.replace(\"_filter\", \"\");\n                setLayerSource(layer.id, clusterSource);\n              }\n            }\n          }\n        });\n      }\n    }\n\n    console.log(\"filters applied\");\n  }, [map, setStateNav, stateNav.defaultOn, stateNav.filterAllInterestTypes, stateNav.filterAllOwnershipTypes, stateNav.filterBasin, stateNav.filterAOI, stateNav.filterParcel, stateNav.filterCompletetionDateRange, stateNav.filterCumulativeGas, stateNav.filterCumulativeOil, stateNav.filterCumulativeWater, stateNav.filterFirstMonthGas, stateNav.filterFirstMonthOil, stateNav.filterFirstMonthWater, stateNav.filterFirstProdDateRange, stateNav.filterFirstSixMonthGas, stateNav.filterFirstSixMonthOil, stateNav.filterFirstSixMonthWater, stateNav.filterFirstThreeMonthGas, stateNav.filterFirstThreeMonthOil, stateNav.filterFirstThreeMonthWater, stateNav.filterFirstTwelveMonthGas, stateNav.filterFirstTwelveMonthOil, stateNav.filterFirstTwelveMonthWater, stateNav.filterGeography, stateNav.filterLastMonthGas, stateNav.filterLastMonthOil, stateNav.filterLastMonthWater, stateNav.filterLastSixMonthGas, stateNav.filterLastSixMonthOil, stateNav.filterLastSixMonthWater, stateNav.filterLastThreeMonthGas, stateNav.filterLastThreeMonthOil, stateNav.filterLastThreeMonthWater, stateNav.filterLastTwelveMonthGas, stateNav.filterLastTwelveMonthOil, stateNav.filterLastTwelveMonthWater, stateNav.filterOperator, stateNav.filterOwnerCount, stateNav.filterPermitDateRange, stateNav.filterPlay, stateNav.filterSpudDateRange, stateNav.filterWellProfile, stateNav.filterWellStatus, stateNav.filterWellType, stateNav.filterNoOwnerCount, stateNav.filterHasOwners, stateNav.filterHasOwnerCount, stateNav.filterTrackedWells, stateNav.filterTrackedOwners, stateNav.filterOwnerConfidence, stateNav.filterOwnerWellInterestSum, stateNav.filterWellAppraisal, stateNav.filterOwnerAppraisals, stateNav.filterDrawing, stateNav.filterTags, stateNav.selectedTags]);\n  useEffect(() => {\n    //sets style of map when changed in Map Controls\n    if (stateApp.selectedLayerId && map) {\n      if (stateApp.selectedLayerId) {\n        map.setStyle(stateApp.selectedLayerId);\n      }\n    }\n  }, [map, stateApp.selectedLayerId]);\n  const createPopUp = useCallback(currentFeature => {\n    let coordinates = [currentFeature.longitude, currentFeature.latitude];\n    let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\n    if (popUps[0]) popUps[0].remove(); //console.log(popUps);\n\n    let popup = new mapboxgl.Popup({\n      offset: 0,\n      closeOnClick: false\n    }).setLngLat(coordinates).setMaxWidth(\"none\").setHTML(`<div id=\"popupContainer\"></div>`).addTo(map); // //show wellcard in popup Portal\n\n    setStateApp(state => ({ ...state,\n      popupOpen: true\n    })); //setStateApp((state) => ({ ...state, wellSelected: true }));\n    //setStateApp((state) => ({ ...state, wellSelectedCoordinates: [currentFeature.longitude, currentFeature.latitude] }));\n\n    handleOpenExpandableCard();\n  }, [map, setStateApp]);\n  const createFilterPopup = useCallback(filterFeature => {\n    const {\n      geometry\n    } = filterFeature;\n    const coordinates = geometry.coordinates;\n    let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\n    if (popUps[0]) popUps[0].remove();\n\n    if (coordinates.length > 0) {\n      const minLatitude = coordinates.reduce((a, b) => a[0] < b[0] ? a : b)[0][0];\n      const maxLongitude = coordinates.reduce((a, b) => a[1] > b[1] ? a : b)[0][1];\n      let popupCoordinate = [minLatitude, maxLongitude];\n      console.log(popupCoordinate);\n      let popup = new mapboxgl.Popup({\n        offset: 0,\n        closeOnClick: false\n      }).setLngLat(popupCoordinate).setMaxWidth(\"none\").setHTML(`<div id=\"filterPopupContainer\"></div>`).addTo(map);\n      setStateApp(state => ({ ...state,\n        popupOpen: true,\n        filterFeature: filterFeature\n      }));\n    }\n  }, [map, setStateApp]);\n  const createUDPopUp = useCallback(currentFeature => {\n    console.log(currentFeature.shapeCenter);\n    let coordinates = currentFeature.shapeCenter;\n\n    if (typeof currentFeature.shapeCenter === \"string\") {\n      coordinates = JSON.parse(currentFeature.shapeCenter);\n    }\n\n    let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\n    if (popUps[0]) popUps[0].remove();\n    let popup = new mapboxgl.Popup({\n      offset: 0,\n      closeOnClick: false\n    }).setLngLat(coordinates).setMaxWidth(\"none\").setHTML(`<div id=\"popupContainer\"></div>`).addTo(map);\n    setStateApp(state => ({ ...state,\n      popupOpen: true\n    }));\n  }, [map, setStateApp]);\n  useEffect(() => {\n    console.log(\"wellSelected\", stateApp.wellSelected);\n    console.log(\"wellSelectedCoordinates\", stateApp.wellSelectedCoordinates); // if( map\n    //     && stateApp.wellSelected === false\n    //     ){\n    //       map.removeLayer('well-point');\n    //       map.removeSource('well-select-point')\n    //     }\n\n    if (map && stateApp.wellSelectedCoordinates) {\n      if (map.getLayer(\"well-point\")) {\n        map.removeLayer(\"well-point\");\n        map.removeSource(\"well-select-point\");\n      }\n\n      if (stateApp.wellSelectedCoordinates.length > 0) {\n        map.addSource(\"well-select-point\", {\n          type: \"geojson\",\n          data: {\n            type: \"FeatureCollection\",\n            features: [{\n              type: \"Feature\",\n              geometry: {\n                type: \"Point\",\n                coordinates: stateApp.wellSelectedCoordinates\n              }\n            }]\n          }\n        });\n        map.addLayer({\n          id: \"well-point\",\n          type: \"circle\",\n          source: \"well-select-point\",\n          paint: {\n            \"circle-radius\": 5,\n            \"circle-color\": \"yellow\"\n          }\n        });\n      }\n    }\n  }, [stateApp.wellSelectedCoordinates]);\n  useEffect(() => {\n    (async () => {\n      if (map && stateApp.selectedWellId && stateApp.wellSelectedCoordinates && stateApp.wellSelectedCoordinates.length > 0 && !stateApp.selectedWell) {\n        let point = map.project(stateApp.wellSelectedCoordinates);\n        var bbox = [[point.x - 10, point.y - 10], [point.x + 10, point.y + 10]];\n        let features = map.queryRenderedFeatures(bbox, {\n          layers: [\"wellpoints\"]\n        });\n        let currentFeature = features.find(element => element.properties.id.toLowerCase() == stateApp.selectedWellId);\n        console.log(\"current feature\", currentFeature);\n\n        if (!currentFeature) {\n          features = map.querySourceFeatures(\"composite\", {\n            sourceLayer: \"wellPoints\",\n            filter: [\"in\", \"id\", stateApp.selectedWellId]\n          });\n          currentFeature = features.find(element => element.properties.id.toLowerCase() == stateApp.selectedWellId);\n        }\n\n        if (!currentFeature) {\n          const endpoint = `https://api.mapbox.com/v4/${wellsTileset}/tilequery/${stateApp.wellSelectedCoordinates.join()}.json?radius=1&limit=5&dedupe&layers=wellPoints&access_token=pk.eyJ1IjoibTFuZXJhbCIsImEiOiJjanYycGJxbG8yN3JsM3lsYTdnMXZoeHh1In0.tTNECYKDPtcrzivWTiZcIQ`;\n          const headers = new Headers();\n          headers.append(\"Content-Type\", \"application/json\");\n          headers.append(\"api-key\", \"1AE3C6346B38CEB007191D51CFDDFF65\");\n          const options = {\n            method: \"GET\",\n            headers: headers\n          };\n          console.log(\"request made to lod2019-index search at: \" + new Date().toString());\n          await fetch(endpoint, options).then(response => response.json()).then(response => {\n            console.log(response);\n            features = response.features;\n            currentFeature = features.find(element => element.properties.id.toLowerCase() == stateApp.selectedWellId);\n          }).catch(error => {\n            console.log(error);\n          });\n          console.log(\"current feature\", currentFeature);\n        }\n\n        if (currentFeature) {\n          let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\n          if (popUps[0]) popUps[0].remove();\n          setStateApp(state => ({ ...state,\n            selectedWell: currentFeature.properties\n          })); // map.fire('click', { lngLat: stateApp.wellSelectedCoordinates, point: point, originalEvent: {} })\n\n          createPopUp(currentFeature.properties);\n          map.resize();\n        }\n      }\n    })();\n  }, [stateApp.wellSelectedCoordinates]);\n  useEffect(() => {\n    const req = new Request(\"https://api.mapbox.com/styles/v1/m1neral?access_token=sk.eyJ1IjoibTFuZXJhbCIsImEiOiJjazdkbGg1YXAwMjVqM2VwanZzbm95Z2dvIn0.cdoQNZU42xxbybyGxlBNkw\", {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Cache-Control\": \"max-age=0\"\n      }\n    });\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    getPermits();\n    getRigs({\n      variables: {\n        offset: 0,\n        amount: 500\n      }\n    });\n    fetch(req, {\n      signal: signal\n    }).then(results => results.json()).then(data => {\n      setMapStyles(data.slice(0, 5));\n    });\n    setStateApp(state => ({ ...state,\n      popupOpen: false,\n      expandedCard: false,\n      selectedUserDefinedLayer: undefined\n    })); //clean up\n\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n  useEffect(() => {\n    if (map) {\n      setStateApp(stateApp => ({ ...stateApp,\n        mapVars: { ...stateApp.mapVars,\n          zoom: map.getZoom(),\n          center: map.getCenter(),\n          pitch: map.getPitch(),\n          bearing: map.getBearing()\n        }\n      }));\n      setMap(null);\n    }\n  }, [stateApp.mapVars.styleId]);\n  useLayoutEffect(() => {\n    if (stateApp.popupOpen === false) {\n      let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\n      if (popUps[0]) popUps[0].remove();\n      setStateApp(state => ({ ...state,\n        wellSelectedCoordinates: [],\n        selectedWell: null\n      }));\n    }\n  }, [stateApp.popupOpen]);\n\n  function getIndex(value, arr, prop) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i][prop] === value) {\n        return i;\n      }\n    }\n\n    return -1; //to handle the case where the value doesn't exist\n  }\n\n  const wellMouseMove = e => {\n    map.getCanvas().style.cursor = \"pointer\";\n  };\n\n  const wellMouseLeave = e => {\n    map.getCanvas().style.cursor = \"\";\n  };\n\n  const mapMouseMove = e => {\n    // e.lngLat is the longitude, latitude geographical position of the event\n    let coordinates = e.lngLat.wrap();\n    setLng(coordinates.lng);\n    setLat(coordinates.lat);\n  };\n\n  useEffect(() => {\n    console.log(\"map ue start\");\n\n    if (mapStyles.length > 0) {\n      // const SET_INITIAL_MAP_STYLE = \"Satellite\";\n      const initializeMap = ({\n        setMap,\n        mapEl,\n        setStateApp,\n        setDraw\n      }) => {\n        let id = mapEl.current.id;\n        var index = getIndex(stateApp.mapVars.styleId, mapStyles, \"name\");\n        console.log(\"tileset api loaded - style selected\", stateApp.mapStyle);\n        console.log(stateApp.mapVars);\n        console.log(mapStyles[index]);\n        console.log(mapStyles);\n        const newMap = new mapboxgl.Map({\n          container: `${id}`,\n          style: \"mapbox://styles/m1neral/\" + mapStyles[index].id,\n          center: stateApp.mapVars.center,\n          zoom: stateApp.mapVars.zoom,\n          pitch: stateApp.mapVars.pitch,\n          bearing: stateApp.mapVars.bearing\n        });\n        console.log(`Setting wellsTileset: ${mapStyles[index].sources.composite.url.split(\",\").find(element => element.indexOf(\"m1neral.wells\") > -1).replace(\"mapbox://\", \"\")}`);\n        setwellsTileset(mapStyles[index].sources.composite.url.split(\",\").find(element => element.indexOf(\"m1neral.wells\") > -1).replace(\"mapbox://\", \"\"));\n        console.log(\"new map generated\"); /// optimized interactions w/ map\n\n        newMap.scrollZoom.enable();\n        newMap.dragPan.enable();\n        newMap.dragRotate.enable();\n        newMap.keyboard.enable();\n        newMap.doubleClickZoom.disable();\n        newMap.boxZoom.enable();\n        newMap.touchZoomRotate.enable();\n        newMap.addControl(new mapboxgl.ScaleControl({\n          maxWidth: 80,\n          unit: \"imperial\"\n        }), \"bottom-right\");\n        newMap.addControl(new mapboxgl.NavigationControl(), \"bottom-right\");\n        newMap.addControl(new mapboxgl.FullscreenControl(), \"bottom-right\");\n        var geoLocate = new mapboxgl.GeolocateControl({\n          positionOptions: {\n            enableHighAccuracy: true\n          },\n          fitBoundsOptions: {\n            maxZoom: 24\n          },\n          trackUserLocation: false,\n          showAccuracyCircle: true,\n          showUserLocation: true\n        });\n        newMap.addControl(geoLocate, \"bottom-right\");\n        geoLocate.on(\"geolocate\", function (e) {\n          newMap.flyTo({\n            center: [e.coords.longitude, e.coords.latitude],\n            zoom: 14,\n            pitch: 80,\n            bearing: 20,\n            speed: 0.4\n          });\n        });\n        let Draw = new MapboxDraw({\n          displayControlsDefault: false,\n          userProperties: true,\n          modes: { ...MapboxDraw.modes,\n            draw_circle: CircleMode,\n            drag_circle: DragCircleMode,\n            direct_select: DirectMode,\n            simple_select: SimpleSelectMode,\n            draw_rectangle: DrawRectangle\n          }\n        });\n        newMap.addControl(Draw);\n        setStateApp({ ...stateApp,\n          map: newMap,\n          draw: Draw\n        });\n        newMap.on(\"load\", function (e) {\n          setDraw(Draw);\n          setMap(newMap);\n          console.log(\"set new map complete\", newMap.loaded());\n        });\n      };\n\n      if (!map) {\n        console.log(\"initialize map start\");\n        initializeMap({\n          setMap,\n          mapEl,\n          setStateApp,\n          setDraw\n        });\n        console.log(\"initialize map finish\");\n      } else {\n        console.log(\"map extra components start\"); // additional map interactions\n        // for some reason these do not work when initializing but do here\n        // map.boxZoom.enable();\n        // map.touchZoomRotate.enable();\n\n        const selectedLayerIntereaction = stateApp.checkedLayersInteraction.slice(0);\n        const wellIndex = stateApp.styleLayers.findIndex(layer => layer.name === \"Wells\");\n        const well = stateApp.styleLayers[wellIndex];\n\n        if (well.wellMouseMove) {\n          map.off(\"mousemove\", \"wellpoints\", well.wellMouseMove);\n          map.off(\"mousemove\", \"welllines\", well.wellMouseMove);\n        }\n\n        if (well.wellMouseLeave) {\n          map.off(\"mouseleave\", \"wellpoints\", well.wellMouseLeave);\n          map.off(\"mouseleave\", \"welllines\", well.wellMouseLeave);\n        }\n\n        if (stateApp.checkedLayersInteraction.length > 0 && selectedLayerIntereaction.indexOf(wellIndex) > -1) {\n          map.on(\"mousemove\", \"wellpoints\", wellMouseMove);\n          map.on(\"mouseleave\", \"wellpoints\", wellMouseLeave);\n          map.on(\"mousemove\", \"welllines\", wellMouseMove);\n          map.on(\"mouseleave\", \"welllines\", wellMouseLeave);\n          const wellcp = { ...well\n          };\n          wellcp.wellMouseLeave = wellMouseLeave;\n          wellcp.wellMouseMove = wellMouseMove;\n          const styleLayers = stateApp.styleLayers.slice(0);\n          styleLayers[wellIndex] = wellcp;\n          setStateApp({ ...stateApp,\n            styleLayers\n          });\n        }\n\n        map.off(\"mousemove\", mapMouseMove);\n        map.on(\"mousemove\", mapMouseMove);\n        console.log(\"map extra components complete\");\n      }\n    }\n  }, [map, setStateApp, setStateMapControls, mapStyles, stateApp.checkedLayersInteraction]); // Use effect for removing shape filter\n\n  useEffect(() => {\n    if (stateNav.filterDrawing && stateNav.filterDrawing.length === 0) {\n      if (draw) draw.delete(drawingFilterFeatureId);\n      setStateNav(stateNav => ({ ...stateNav,\n        drawingMode: null,\n        filterDrawing: stateNav.filterDrawing,\n        filterFeatureId: null\n      }));\n      setDrawingFilterFeatureId(null);\n      setStateApp(state => ({ ...state,\n        popupOpen: false\n      }));\n    }\n  }, [stateNav.filterDrawing]); // Use effect for adding shape filter\n\n  useEffect(() => {\n    function drawCreateListener(e) {\n      if (stateNav.drawingMode !== null) {\n        let feature = e.features[0]; //delete feature, and create a copy with custom id\n\n        draw.delete(feature.id);\n        feature.id = stateNav.filterFeatureId;\n        draw.add(feature);\n        createFilterPopup(feature, map);\n        setStateNav(stateNav => ({ ...stateNav,\n          drawingMode: null,\n          filterDrawing: [\"within\", feature]\n        }));\n        map.off(\"draw.create\", drawCreateListener);\n      }\n    }\n\n    function drawUpdateListener(e) {\n      if (e.features[0].id.includes(\"draw_polygon\") || e.features[0].id.includes(\"drag_circle\") || e.features[0].id.includes(\"draw_rectangle\")) {\n        let feature = e.features[0];\n        createFilterPopup(feature, map);\n        setStateNav(stateNav => ({ ...stateNav,\n          filterDrawing: [\"within\", feature]\n        }));\n      }\n    }\n\n    if (stateNav.drawingMode) {\n      // delete previous filter feature\n      stateApp.draw.delete(drawingFilterFeatureId);\n      setDrawingFilterFeatureId(stateNav.filterFeatureId);\n      stateApp.draw.changeMode(stateNav.drawingMode);\n\n      if (map) {\n        map.on(\"draw.create\", drawCreateListener);\n        map.on(\"draw.update\", drawUpdateListener);\n      }\n    }\n  }, [stateNav.filterFeatureId]);\n  useEffect(() => {\n    if (draw && stateNav.filterDrawing && stateNav.filterDrawing.length == 2) {\n      console.log(\"initialize filter draw\");\n      const feature = stateNav.filterDrawing[1];\n      setDrawingFilterFeatureId(feature.id);\n      draw.delete(feature.id);\n      draw.add(feature);\n    }\n  }, [draw]);\n  useEffect(() => {\n    if (map) {\n      return () => {\n        var list = document.getElementById(\"searchBar\");\n\n        if (list && list.childNodes && list.childNodes.length > 0) {\n          list.removeChild(list.childNodes[0]);\n        }\n\n        var zoom = map.getZoom();\n        var center = map.getCenter();\n        var pitch = map.getPitch();\n        var bearing = map.getBearing();\n        console.log(stateApp.mapVars);\n        setStateApp(stateApp => ({ ...stateApp,\n          mapVars: { ...stateApp.mapVars,\n            zoom: zoom,\n            center: center,\n            pitch: pitch,\n            bearing: bearing\n          }\n        }));\n        console.log(\"save map state variables\");\n        console.log(stateApp.mapVars);\n        var mapList = document.getElementById(\"map\");\n        console.log(mapList.childNodes);\n\n        if (mapList.childNodes.length > 1) {\n          mapList.removeChild(mapList.childNodes[1]);\n          mapList.removeChild(mapList.childNodes[1]);\n          mapList.removeChild(mapList.childNodes[1]);\n        }\n\n        console.log(mapList.childNodes);\n        console.log(\"end map unmount\");\n      };\n    }\n  }, [map]);\n  useEffect(() => {\n    ////// USE EFFECT TO MANAGE THE FLY TO FEATURE\n    if (map && stateApp.flyTo) {\n      var zVal = 12;\n      setStateApp(stateApp => ({ ...stateApp,\n        wellSelectedCoordinates: [stateApp.flyTo.longitude, stateApp.flyTo.latitude]\n      }));\n      map.flyTo({\n        center: [stateApp.flyTo.longitude, stateApp.flyTo.latitude],\n        zoom: stateApp.flyTo.zoom ? stateApp.flyTo.zoom : zVal,\n        speed: 0.5\n      });\n    }\n  }, [createPopUp, map, stateApp.flyTo]);\n  useEffect(() => {\n    ////// USE EFFECT TO MANAGE THE FIT BOUNDS TO FEATURE\n    if (map && stateApp.fitBounds && stateApp.fitBounds.maxLat && stateApp.fitBounds.minLat && stateApp.fitBounds.maxLong && stateApp.fitBounds.minLong) {\n      const fitOverBounds = () => {\n        let {\n          maxLat,\n          minLat,\n          maxLong,\n          minLong\n        } = stateApp.fitBounds;\n        const latDif = maxLat - minLat;\n        const longDif = maxLong - minLong;\n\n        if (latDif === 0) {\n          maxLat = maxLat + 0.005 > 90 ? 89.995 : maxLat + 0.005;\n          minLat = minLat - 0.005 < -90 ? -89.995 : minLat - 0.005;\n        } else {\n          maxLat = maxLat + latDif * 0.08 > 90 ? 89.995 : maxLat + latDif * 0.08;\n          minLat = minLat - latDif * 0.08 < -90 ? -89.995 : minLat - latDif * 0.08;\n        }\n\n        if (longDif === 0) {\n          maxLong = maxLong + 0.005 > 180 ? 179.995 : maxLong + 0.005;\n          minLong = minLong - 0.005 < -180 ? -179.995 : minLong - 0.005;\n        } else {\n          maxLong = maxLong + longDif * 0.08 > 180 ? 179.995 : maxLong + latDif * 0.08;\n          maxLong = maxLong - longDif * 0.08 < -180 ? -179.995 : maxLong - latDif * 0.08;\n        }\n\n        return {\n          maxLat,\n          minLat,\n          maxLong,\n          minLong\n        };\n      };\n\n      let bounds = fitOverBounds();\n      map.fitBounds([[bounds.minLong, bounds.minLat], [bounds.maxLong, bounds.maxLat]]);\n    }\n  }, [map, stateApp.fitBounds]);\n  useEffect(() => {\n    if (map && stateApp.toggleZoomOut) {\n      if (stateApp.toggleZoomOut === true) {\n        map.flyTo({\n          center: {\n            lng: -98.8,\n            lat: 38\n          },\n          zoom: 4.88,\n          pitch: 0,\n          bearing: 0,\n          speed: 0.5\n        });\n        let flying = null;\n        map.on(\"flystart\", function () {\n          flying = true;\n        });\n        map.on(\"flyend\", function () {\n          flying = false;\n        });\n        map.on(\"moveend\", function (e) {\n          if (flying) {\n            setStateApp(stateApp => ({ ...stateApp,\n              mapVars: { ...stateApp.mapVars,\n                zoom: map.getZoom(),\n                center: map.getCenter(),\n                pitch: map.getPitch(),\n                bearing: map.getBearing()\n              }\n            }));\n            map.fire(\"flyend\");\n          }\n        });\n        setStateApp(stateApp => ({ ...stateApp,\n          toggleZoomOut: null\n        }));\n      }\n    }\n  }, [stateApp.toggleZoomOut]);\n  useEffect(() => {\n    if (map && stateApp.toggle3d) {\n      if (stateApp.toggle3d === true) {\n        if (map.getPitch() == 0 && map.getBearing() == 0) {\n          map.setPitch(70);\n          map.setBearing(20);\n        } else {\n          map.setPitch(0);\n          map.setBearing(0);\n        }\n\n        setStateApp(stateApp => ({ ...stateApp,\n          mapVars: { ...stateApp.mapVars,\n            zoom: map.getZoom(),\n            center: map.getCenter(),\n            pitch: map.getPitch(),\n            bearing: map.getBearing()\n          }\n        }));\n        setStateApp(stateApp => ({ ...stateApp,\n          toggle3d: null\n        }));\n      }\n    }\n  }, [stateApp.toggle3d]);\n  useEffect(() => {\n    console.log(\"Drawing status check\", stateApp.editDraw, stateNav.drawingMode);\n\n    if (stateApp.editDraw === true || stateNav.drawingMode) {\n      setDrawStatus(true);\n\n      if (mapClick && mapClick.mapClickHandler != null) {\n        map.off(\"click\", mapClick.mapClickHandler);\n      }\n    } else {\n      setDrawStatus(false);\n\n      if (mapClick && mapClick.mapClickHandler != null) {\n        setTimeout(() => {\n          map.on(\"click\", mapClick.mapClickHandler);\n        }, 500);\n      }\n    }\n  }, [stateApp.editDraw, stateNav.drawingMode]);\n\n  const handleOpenExpandableCard = e => {\n    setAnchorElPoPOver(container.current);\n    setShowExpandableCard(true);\n  };\n\n  const handleCloseExpandableCard = () => {\n    setShowExpandableCard(false);\n    setAnchorElPoPOver(null);\n    setStateApp(state => ({ ...state,\n      expandedCard: false\n    }));\n  };\n\n  const handleCloseSpatialDataCard = (complete = true) => {\n    console.log(\"close card on map here\");\n    setStateApp(state => ({ ...state,\n      popupOpen: false,\n      selectedUserDefinedLayer: undefined\n    }));\n\n    if (complete == true) {\n      setStateApp(state => ({ ...state,\n        selectedUserDefinedLayer: undefined\n      }));\n    }\n  };\n\n  const handleCloseSpatialDataCardEdit = () => {\n    console.log(\"close card on map here\");\n    setStateApp(state => ({ ...state,\n      popupOpen: false,\n      editLayer: false,\n      selectedUserDefinedLayer: undefined\n    }));\n  };\n\n  const handleSaveSpatialDataToShape = (spatialData, dataType) => {\n    // save data onto geoJSON properties fields\n    const {\n      selectedUserDefinedLayer\n    } = stateApp;\n    spatialDataAttributes.forEach(attribute => {\n      if (spatialData[attribute] != null || typeof spatialData[attribute] !== \"undefined\") {\n        console.log(\"set attribute\", spatialData[attribute], attribute);\n        selectedUserDefinedLayer.properties[attribute] = spatialData[attribute];\n      }\n    });\n    selectedUserDefinedLayer.id = selectedUserDefinedLayer.properties.id;\n    let update_layer = selectedUserDefinedLayer;\n    let draw_id = selectedUserDefinedLayer.id;\n\n    if (!draw_id.includes(\"edit_polygon\")) {\n      draw_id = `edit_polygon_${draw_id}`;\n    }\n\n    let current_feature = stateApp.draw.get(draw_id);\n\n    if (current_feature) {\n      addCustomShapeProperties(current_feature, stateApp.draw);\n      current_feature = stateApp.draw.get(draw_id);\n      spatialDataAttributes.forEach(attribute => {\n        if (spatialData[attribute] != null || typeof spatialData[attribute] !== \"undefined\") {\n          console.log(\"set attribute\", spatialData[attribute], attribute);\n          current_feature.properties[attribute] = spatialData[attribute];\n        }\n      });\n      current_feature.id = current_feature.properties.id;\n      update_layer = current_feature;\n    }\n\n    let position = null;\n\n    if (typeof update_layer.properties.shapeCenter == \"string\") {\n      position = JSON.parse(update_layer.properties.shapeCenter);\n    } else {\n      position = update_layer.properties.shapeCenter;\n    }\n\n    const symbolFeature = {\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: position\n      },\n      properties: { ...update_layer.properties,\n        id: `${update_layer.properties.id}_label`,\n        label: spatialData.shapeLabel\n      }\n    }; // //////cleaning the selected title opinion and redirecting to title opinion page//\n\n    if (stateApp.user.mongoId !== \"\") {\n      const id = update_layer.properties.id;\n      let update_layers = stateApp.editingUserDefinedLayers.filter(layer => {\n        const shape_properties = JSON.parse(layer.shape).properties;\n        return shape_properties.id && shape_properties.id.includes(id);\n      });\n\n      if (update_layers.length === 0) {\n        update_layers = stateApp.customLayers.filter(layer => {\n          const shape_properties = JSON.parse(layer.shape).properties;\n          return shape_properties.id && shape_properties.id.includes(id);\n        });\n        handleCloseSpatialDataCard();\n      } else {\n        stateApp.draw.delete(`edit_polygon_${id}`);\n        const updated_layers = stateApp.editingUserDefinedLayers.filter(layer => {\n          const shape_properties = JSON.parse(layer.shape).properties;\n          return !shape_properties.id || !shape_properties.id.includes(id);\n        });\n        setStateApp({ ...stateApp,\n          selectedUserDefinedLayer: null,\n          editingUserDefinedLayers: updated_layers\n        });\n        handleCloseSpatialDataCardEdit();\n      }\n\n      const customLayerId = update_layers[0]._id;\n      const customLayerLabelId = update_layers[1]._id;\n      const customLayerData = {\n        shape: JSON.stringify(update_layer),\n        layer: dataType,\n        name: spatialData.shapeLabel,\n        user: stateApp.user.mongoId\n      };\n      const customLayerSymbolData = {\n        shape: JSON.stringify(symbolFeature),\n        layer: `${dataType}_labels`,\n        name: spatialData.shapeLabel,\n        user: stateApp.user.mongoId\n      };\n      updateCustomLayer({\n        variables: {\n          customLayerId: customLayerId,\n          customLayer: customLayerData\n        }\n      });\n      updateCustomLayer({\n        variables: {\n          customLayerId: customLayerLabelId,\n          customLayer: customLayerSymbolData\n        }\n      });\n      getCustomLayers({\n        variables: {\n          userId: stateApp.user.mongoId\n        }\n      });\n    }\n  };\n\n  const handleDeleteSpatialDataAndShape = () => {\n    const {\n      selectedUserDefinedLayer,\n      editingUserDefinedLayers,\n      customLayers\n    } = stateApp;\n\n    if (selectedUserDefinedLayer) {\n      let id = selectedUserDefinedLayer.properties.id;\n\n      if (id.includes(\"edit_polygon\")) {\n        id = id.replace(\"edit_polygon_\", \"\");\n      }\n\n      if (editingUserDefinedLayers.length > 0) {\n        const delete_layers = editingUserDefinedLayers.filter(layer => {\n          const shape_properties = JSON.parse(layer.shape).properties;\n          return shape_properties.id && shape_properties.id.includes(id);\n        });\n\n        if (delete_layers.length > 0) {\n          for (let i = 0; i < delete_layers.length; i++) {\n            const delete_layer = delete_layers[i];\n            removeCustomLayer({\n              variables: {\n                customLayerId: delete_layer._id\n              }\n            });\n          }\n\n          const updated_layers = editingUserDefinedLayers.filter(layer => {\n            const shape_properties = JSON.parse(layer.shape).properties;\n            return !shape_properties.id || !shape_properties.id.includes(id);\n          });\n          stateApp.draw.delete(`edit_polygon_${id}`);\n          setStateApp({ ...stateApp,\n            editingUserDefinedLayers: updated_layers\n          });\n          handleCloseSpatialDataCardEdit();\n        } else if (customLayers.length > 0) {\n          const delete_layers = customLayers.filter(layer => {\n            const shape_properties = JSON.parse(layer.shape).properties;\n            return shape_properties.id && shape_properties.id.includes(id);\n          });\n\n          if (delete_layers.length > 0) {\n            for (let i = 0; i < delete_layers.length; i++) {\n              const delete_layer = delete_layers[i];\n              removeCustomLayer({\n                variables: {\n                  customLayerId: delete_layer._id\n                }\n              });\n            }\n\n            const updated_layers = customLayers.filter(layer => {\n              const shape_properties = JSON.parse(layer.shape).properties;\n              return !shape_properties.id || !shape_properties.id.includes(id);\n            });\n            setStateApp({ ...stateApp,\n              customLayers: updated_layers\n            });\n          }\n\n          handleCloseSpatialDataCard();\n        }\n      } else {\n        if (customLayers.length > 0) {\n          const delete_layers = customLayers.filter(layer => {\n            const shape_properties = JSON.parse(layer.shape).properties;\n            return shape_properties.id && shape_properties.id.includes(id);\n          });\n\n          if (delete_layers.length > 0) {\n            for (let i = 0; i < delete_layers.length; i++) {\n              const delete_layer = delete_layers[i];\n              removeCustomLayer({\n                variables: {\n                  customLayerId: delete_layer._id\n                }\n              });\n            }\n\n            const updated_layers = customLayers.filter(layer => {\n              const shape_properties = JSON.parse(layer.shape).properties;\n              return !shape_properties.id || !shape_properties.id.includes(id);\n            });\n            setStateApp({ ...stateApp,\n              customLayers: updated_layers\n            });\n          }\n\n          handleCloseSpatialDataCard();\n        }\n      }\n    }\n  }; // useEffect(() => {\n  //   if (stateApp.userSnap === true) {\n  //     var script = document.createElement(\"script\");\n  //     script.type = \"text/javascript\";\n  //     script.src =\n  //       \"//api.usersnap.com/load/64ab8ea7-9417-41a0-b565-eb7ad69da871.js\";\n  //     script.async = true;\n  //     script.setAttribute(\"id\", \"feedback-script\");\n  //     var x = document.getElementsByTagName(\"script\")[0];\n  //     x.parentNode.insertBefore(script, x);\n  //     document.body.appendChild(script);\n  //     return () => {\n  //       document.body.removeChild(script);\n  //     };\n  //   } else if (stateApp.userSnap === false){\n  //     const feedbackScript = document.querySelector(\"#feedback-script\");\n  //     feedbackScript && feedbackScript.remove();\n  //     const element = document.getElementsByName(\"us-entrypoint-button\");\n  //     element && element[0] && element[0].remove();\n  //   }\n  // }, [stateApp.userSnap]);\n\n\n  useEffect(() => {\n    if (stateApp.editingUserDefinedLayers.length > 0) {\n      const {\n        map\n      } = stateApp;\n      map.on(\"draw.selectionchange\", ({\n        features\n      }) => {\n        const [feature] = features;\n\n        if (feature && feature.id.includes(\"edit_polygon\")) {\n          setStateApp({ ...stateApp,\n            selectedUserDefinedLayer: feature,\n            editLayer: true\n          });\n        } else {\n          setStateApp({ ...stateApp,\n            popupOpen: false,\n            selectedUserDefinedLayer: undefined,\n            editLayer: false\n          });\n        }\n      });\n    }\n  }, [stateApp.editingUserDefinedLayers]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mapWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3701,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.map,\n    ref: mapEl,\n    id: \"map\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3702,\n      columnNumber: 7\n    }\n  }, map ? /*#__PURE__*/React.createElement(DefaultFiltersTest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3703,\n      columnNumber: 16\n    }\n  }) : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.footerLeftLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3704,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"icons/M1LogoWhiteTransparent.png\",\n    alt: \"logo\",\n    width: \"150\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3705,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(MapControlsProvider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3708,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(DrawStatus, {\n    drawingStatus: drawStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3709,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Coordinates, {\n    long: lng,\n    lat: lat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3710,\n      columnNumber: 7\n    }\n  }), stateApp.selectedUserDefinedLayer && !stateApp.popupOpen && stateApp.editLayer && /*#__PURE__*/React.createElement(SpatialDataCard, {\n    selectedFeature: stateApp.selectedUserDefinedLayer,\n    saveSpatialData: handleSaveSpatialDataToShape,\n    closeSpatialDataCard: handleCloseSpatialDataCardEdit,\n    deleteSpatialDataAndShape: handleDeleteSpatialDataAndShape,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3714,\n      columnNumber: 11\n    }\n  }), stateApp.mapGridCardActivated && /*#__PURE__*/React.createElement(MapGridCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3721,\n      columnNumber: 41\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"tempPopupHolder\",\n    className: classes.portal,\n    ref: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3722,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Portal, {\n    container: container.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3723,\n      columnNumber: 7\n    }\n  }, stateApp.popupOpen ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3725,\n      columnNumber: 11\n    }\n  }, stateApp.selectedWell && /*#__PURE__*/React.createElement(PortalD, {\n    id: \"popupContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3727,\n      columnNumber: 15\n    }\n  }, showExpandableCard && !stateApp.expandedCard ? /*#__PURE__*/React.createElement(ExpandableCardProvider, {\n    expanded: false,\n    handleCloseExpandableCard: handleCloseExpandableCard,\n    component: /*#__PURE__*/React.createElement(WellCardProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3732,\n        columnNumber: 32\n      }\n    }),\n    title: stateApp.selectedWell.wellName,\n    subTitle: stateApp.selectedWell.operator,\n    parent: \"map\",\n    mouseX: 0,\n    mouseY: 0,\n    position: \"relative\",\n    cardLeft: 20,\n    cardTop: 70,\n    zIndex: 99,\n    cardWidth: \"350px\" // cardHeight=\"350px\"\n    ,\n    cardWidthExpanded: \"95vw\",\n    cardHeightExpanded: \"90vh\",\n    targetSourceId: stateApp.selectedWell.id,\n    targetLabel: \"well\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3729,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(Popover, {\n    open: stateApp.expandedCard,\n    anchorEl: anchorElPoPOver,\n    anchorReference: \"anchorEl\",\n    style: {\n      width: \"100%\"\n    } //right:30, left: \"-30px\"}}\n    ,\n    BackdropProps: {\n      invisible: false\n    },\n    anchorOrigin: {\n      vertical: \"center\",\n      horizontal: \"center\"\n    },\n    transformOrigin: {\n      vertical: \"center\",\n      horizontal: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3750,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ExpandableCardProvider, {\n    expanded: true,\n    handleCloseExpandableCard: handleCloseExpandableCard,\n    component: /*#__PURE__*/React.createElement(WellCardProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 3768,\n        columnNumber: 34\n      }\n    }),\n    title: stateApp.selectedWell.wellName,\n    subTitle: stateApp.selectedWell.operator,\n    parent: \"map\",\n    mouseX: 0,\n    mouseY: 0,\n    position: \"relative\" // cardLeft={\"0px\"}\n    // cardTop={\"0px\"}\n    ,\n    zIndex: 99 // cardWidth=\"380px\"\n    // cardHeight=\"380px\"\n    ,\n    cardWidthExpanded: \"95vw\",\n    cardHeightExpanded: \"95vh\",\n    targetSourceId: stateApp.selectedWell.id,\n    targetLabel: \"well\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3765,\n      columnNumber: 21\n    }\n  }))), stateApp.selectedUserDefinedLayer && /*#__PURE__*/React.createElement(PortalD, {\n    id: \"popupContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3790,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(SpatialDataCardEdit, {\n    selectedFeature: stateApp.selectedUserDefinedLayer,\n    saveSpatialData: handleSaveSpatialDataToShape,\n    closeSpatialDataCard: handleCloseSpatialDataCard,\n    deleteSpatialDataAndShape: handleDeleteSpatialDataAndShape,\n    cardClass: \"cardPopup\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3791,\n      columnNumber: 17\n    }\n  })), stateApp.filterFeature && /*#__PURE__*/React.createElement(PortalD, {\n    id: \"filterPopupContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3801,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(FilterControl, {\n    filterFeature: stateApp.filterFeature,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 3802,\n      columnNumber: 17\n    }\n  }))) : null));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Map/Map.js"],"names":["React","useContext","useState","useLayoutEffect","useRef","useEffect","useCallback","AppContext","NavigationContext","MapControlsContext","Popover","mapboxgl","turf","makeStyles","MapControlsProvider","WellCardProvider","ExpandableCardProvider","Portal","PortalD","Coordinates","DrawStatus","SpatialDataCardEdit","SpatialDataCard","MapboxDraw","CircleMode","DragCircleMode","DirectMode","SimpleSelectMode","DrawRectangle","MapboxGeocoder","DefaultFiltersTest","FilterControl","useLazyQuery","useMutation","WELLSQUERY","TRACKSBYUSERANDOBJECTTYPE","OWNERSWELLSQUERY","CUSTOMLAYERSQUERY","REMOVECUSTOMLAYER","UPDATECUSTOMLAYER","PERMITSQUERY","RIGSQUERY","spatialDataAttributes","addCustomShapeProperties","MapGridCard","useStyles","theme","mapWrapper","width","map","position","top","bottom","height","overflow","display","filterPopup","footerLeftLogo","zIndex","left","portal","transform","Map","classes","stateApp","setStateApp","stateNav","setStateNav","stateMapControls","setStateMapControls","filtersDefault","setFiltersDefault","user","defaultFilters","lng","setLng","lat","setLat","setTransform","container","showExpandableCard","setShowExpandableCard","mapStyles","setMapStyles","wellsTileset","setwellsTileset","defaultsCheckOnOff","setDefaultsCheckOnOff","m1neralCheckOnOff","setM1neralCheckOnOff","setMap","mapClick","setMapClick","draw","setDraw","drawStatus","setDrawStatus","rigs","setRigData","drawingFilterFeatureId","setDrawingFilterFeatureId","anchorElPoPOver","setAnchorElPoPOver","mapEl","accessToken","mapboxglAccessToken","rows","setRows","loading","setLoading","getWells","data","dataWells","tracksByUserAndObjectType","dataTracks","tracksByUserAndObjectTypeOwner","dataTracksOwner","getOwnersWells","dataOwnersWells","getCustomLayers","customLayerData","fetchPolicy","updateCustomLayer","removeCustomLayer","getWellsForLayer","dataWellsForOwnerWellTrackLayer","getPermits","permitData","getRigs","rigData","mongoId","variables","userId","objectType","length","tracksIdArray","track","trackOn","wellIdArray","authToken","objectsIdsArray","item","ownersIds","customLayers","console","log","state","selectedUserDefinedLayer","editLayer","popupOpen","ownersWells","ownerObjectIds","wells","merged","concat","apply","stripped","wellId","results","trackedwells","setLayer","layerName","makeGeoJSON","type","features","feature","properties","geometry","coordinates","Longitude","Latitude","geoJson","configIndex","styleLayers","findIndex","value","name","config","checkedPosition","checkedLayers","indexOf","addSource","sourceProps","cluster","clusterRadius","clusterMaxZoom","layerProps","layerId","addLayer","id","layerType","source","paint","paintProps","layout","layoutProps","visibility","clusterVar","clusterLabelBar","filter","clusterProps","clusterSymbolProps","clusterPaintProps","setLayoutProperty","permits","nextOffset","offset","amount","trackedOwnerWells","wellLineClick","currentFeature","undefined","selectedWell","selectedWellId","wellSelectedCoordinates","longitude","latitude","createPopUp","wellPointClick","resize","layerClickHander","zVal","getZoom","toLowerCase","flyTo","zoom","udLayerClickHandler","createUDPopUp","clusterClickHandler","clusterId","cluster_id","getSource","getClusterExpansionZoom","err","easeTo","center","mapClickHandler","e","target","layers","checkedUDLayersInteraction","checkedUserDefinedLayersInteraction","checkedUDLayers","checkedUserDefinedLayers","definedLayers","userDefinedLayers","clusterUDLayers","udLayers","clusterLayers","forEach","l","definedLayer","i","layerProp","getLayer","push","clusterLayerId","checkedSLayersInteraction","checkedLayersInteraction","checkedSLayers","styleLayer","styleId","bbox","point","x","y","queryRenderedFeatures","layer","off","on","k","slice","tempCheckedLayer","sort","a","b","belowlayer","layerConfig","currentLayerArray","j","mapLayer","includes","moveLayer","baseMapLayers","checkedBaseLayers","heatLayers","checkedHeats","trackFilterOn","trackedWellArray","api","operator","WellName","wellName","myGeoJSONData","getCanvas","style","cursor","tmpCheckedLayer","tempCheckedUserDefinedLayers","layerList","beforelayer","fitBounds","selectLayerProps","layerData","dataProps","dataId","wellListFromSearch","wellListFromTagsFilter","groupBy","arr","property","reduce","memo","dataTypeId","JSON","parse","shape","sourceId","setData","sourceType","filterLayerId","promoteId","original","symbolProps","interactionProps","availableInteraction","mouseClick","hoverActions","mouseMove","mouseMoveHandler","oldHander","mouseLeave","mouseLeaveHandler","findBounds","latArray","longArray","maxLat","Math","max","minLat","min","maxLong","minLong","maxLatSApp","minLatSApp","maxLongSApp","minLongSApp","fitOverBounds","latDif","longDif","bounds","m1neralDefaultsOnOff","m1neralCehckOnOff","isFilterSet","wellFilterCount","ownershipFilterCount","productionFilterCount","geographyFilterCount","valuationFilterCount","aiFilterCount","totalCount","tagFilterCount","filterArray","filterCustomArray","defaultOverride","defaultOn","filterWellStatus","filterWellType","defaultTypeName","defaultStatusName","defaultFiltersWellStatus","defaultFiltersWellType","m1neralDefaults","filters","types","default","wellTypeFilter","wellStatusFilter","statusName","typeName","m1neralDefaultFilters","filterWellProfile","total","filterOwnerCount","filterOwnerConfidence","filterNoOwnerCount","filterTrackedWells","filterTrackedOwners","filterTags","selectedTags","filterHasOwnerCount","filterHasOwners","filterOperator","filterWellAppraisal","filterCumulativeOil","filterCumulativeGas","filterCumulativeWater","filterFirstMonthWater","filterFirstThreeMonthWater","filterFirstSixMonthWater","filterFirstTwelveMonthWater","filterLastMonthWater","filterLastThreeMonthWater","filterLastSixMonthWater","filterLastTwelveMonthWater","filterFirstMonthGas","filterFirstThreeMonthGas","filterFirstSixMonthGas","filterFirstTwelveMonthGas","filterLastMonthGas","filterLastThreeMonthGas","filterLastSixMonthGas","filterLastTwelveMonthGas","filterFirstMonthOil","filterFirstThreeMonthOil","filterFirstSixMonthOil","filterFirstTwelveMonthOil","filterLastMonthOil","filterLastThreeMonthOil","filterLastSixMonthOil","filterLastTwelveMonthOil","filterAllInterestTypes","removeAny","numberFiltes","filterAllOwnershipTypes","filterOwnerAppraisals","shapes","bound","setLayerSource","sourceLayer","oldLayers","getStyle","cluster_layer","cluster_counts_layer","layerIndex","layerDef","before","removeLayer","filterShapeAction","shapeList","filterLayers","filterLayer","filterSource","featuresList","querySourceFeatures","_data","result","flag","flagM","filterCoordinates","filterGeometry","booleanContains","ids","Id","shapeLabel","VIEWID","onlyUnique","index","self","filterBasin","basinIndex","basinNames","basinName","basinShapes","filterAOI","aoiIndex","userDefinedLayer","tempCheckedUserDefinedLayer","aoiName","aoiShapes","filterParcel","parcelIndex","parcelName","parcelShapes","filterPlay","filterPermitDateRange","filterSpudDateRange","filterCompletetionDateRange","filterFirstProdDateRange","filterGeography","filterOwnerWellInterestSum","filterDrawing","filterFeature","totalFilterCount","mergeArrays","arrays","jointArray","array","Array","from","Set","unshift","setFilter","baseLayer","replace","Object","keys","clusterSource","selectedLayerId","setStyle","popUps","document","getElementsByClassName","remove","popup","Popup","closeOnClick","setLngLat","setMaxWidth","setHTML","addTo","handleOpenExpandableCard","createFilterPopup","minLatitude","maxLongitude","popupCoordinate","shapeCenter","wellSelected","removeSource","project","find","element","endpoint","join","headers","Headers","append","options","method","Date","toString","fetch","then","response","json","catch","error","req","Request","mode","Accept","abortController","AbortController","signal","expandedCard","cleanup","abort","mapVars","getCenter","pitch","getPitch","bearing","getBearing","getIndex","prop","wellMouseMove","wellMouseLeave","mapMouseMove","lngLat","wrap","initializeMap","current","mapStyle","newMap","sources","composite","url","split","scrollZoom","enable","dragPan","dragRotate","keyboard","doubleClickZoom","disable","boxZoom","touchZoomRotate","addControl","ScaleControl","maxWidth","unit","NavigationControl","FullscreenControl","geoLocate","GeolocateControl","positionOptions","enableHighAccuracy","fitBoundsOptions","maxZoom","trackUserLocation","showAccuracyCircle","showUserLocation","coords","speed","Draw","displayControlsDefault","userProperties","modes","draw_circle","drag_circle","direct_select","simple_select","draw_rectangle","loaded","selectedLayerIntereaction","wellIndex","well","wellcp","delete","drawingMode","filterFeatureId","drawCreateListener","add","drawUpdateListener","changeMode","list","getElementById","childNodes","removeChild","mapList","toggleZoomOut","flying","fire","toggle3d","setPitch","setBearing","editDraw","setTimeout","handleCloseExpandableCard","handleCloseSpatialDataCard","complete","handleCloseSpatialDataCardEdit","handleSaveSpatialDataToShape","spatialData","dataType","attribute","update_layer","draw_id","current_feature","get","symbolFeature","label","update_layers","editingUserDefinedLayers","shape_properties","updated_layers","customLayerId","_id","customLayerLabelId","stringify","customLayerSymbolData","customLayer","handleDeleteSpatialDataAndShape","delete_layers","delete_layer","mapGridCardActivated","invisible","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, {\r\n  useContext,\r\n  useState,\r\n  useLayoutEffect,\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { AppContext } from \"../../AppContext\";\r\nimport { NavigationContext } from \"../Navigation/NavigationContext\";\r\nimport { MapControlsContext } from \"../MapControls/MapControlsContext\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport * as turf from \"@turf/turf\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MapControlsProvider from \"../MapControls/MapControlsProvider\";\r\nimport WellCardProvider from \"../WellCard/WellCardProvider\";\r\nimport ExpandableCardProvider from \"../ExpandableCard/ExpandableCardProvider\";\r\nimport Portal from \"@material-ui/core/Portal\";\r\nimport PortalD from \"./components/Portal\";\r\nimport Coordinates from \"./components/Coordinates\";\r\nimport DrawStatus from \"./components/DrawStatus\";\r\nimport SpatialDataCardEdit from \"../MapControls/components/spatialDataCardEdit\";\r\nimport SpatialDataCard from \"../MapControls/components/spatialDataCard\";\r\nimport \"./popup.css\";\r\nimport MapboxDraw from \"@mapbox/mapbox-gl-draw\";\r\nimport {\r\n  CircleMode,\r\n  DragCircleMode,\r\n  DirectMode,\r\n  SimpleSelectMode,\r\n} from \"mapbox-gl-draw-circle\";\r\nimport DrawRectangle from \"mapbox-gl-draw-rectangle-mode\";\r\nimport * as MapboxGeocoder from \"@mapbox/mapbox-gl-geocoder\";\r\nimport \"@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css\";\r\nimport DefaultFiltersTest from \"./filtersDefaultTest\";\r\nimport FilterControl from \"./components/FilterControl\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\r\nimport { WELLSQUERY } from \"../../graphQL/useQueryWells\";\r\nimport { TRACKSBYUSERANDOBJECTTYPE } from \"../../graphQL/useQueryTracksByUserAndObjectType\";\r\nimport { OWNERSWELLSQUERY } from \"../../graphQL/useQueryOwnersWells\";\r\nimport { CUSTOMLAYERSQUERY } from \"../../graphQL/useQueryCustomLayers\";\r\nimport { REMOVECUSTOMLAYER } from \"../../graphQL/useMutationRemoveCustomLayer\";\r\nimport { UPDATECUSTOMLAYER } from \"../../graphQL/useMutationUpdateCustomLayer\";\r\nimport { PERMITSQUERY } from \"../../graphQL/useQueryPermits\";\r\nimport { RIGSQUERY } from \"../../graphQL/useQueryRigs\";\r\nimport { spatialDataAttributes } from \"../MapControls/components/DrawShapes/constants\";\r\nimport { addCustomShapeProperties } from \"../MapControls/components/DrawShapes/drawShapesHelpers\";\r\nimport MapGridCard from \"../MapGridCard/MapGridCard\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  mapWrapper: {\r\n    width: \"100%\",\r\n  },\r\n  map: {\r\n    position: \"absolute\",\r\n    top: \"64px\",\r\n    bottom: \"0\",\r\n    width: \"100%\",\r\n    height: \"calc(100% - 64px)\",\r\n    overflow: \"hidden !important\",\r\n    \"& a.mapboxgl-ctrl-logo, .mapboxgl-ctrl.mapboxgl-ctrl-attrib\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  filterPopup: {\r\n    \"& .mapboxgl-popup-tip\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  footerLeftLogo: {\r\n    position: \"absolute\",\r\n    bottom: \"5px\",\r\n    zIndex: \"1\",\r\n    left: \"10px\",\r\n  },\r\n  portal: {\r\n    position: \"absolute\",\r\n    top: \"45%\",\r\n    left: \"47%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n  },\r\n}));\r\n\r\nexport default function Map() {\r\n  let classes = useStyles();\r\n  const [stateApp, setStateApp] = useContext(AppContext);\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [stateMapControls, setStateMapControls] = useContext(\r\n    MapControlsContext\r\n  );\r\n  const [filtersDefault, setFiltersDefault] = useState(\r\n    stateApp.user.defaultFilters ? stateApp.user.defaultFilters : []\r\n  );\r\n  const [lng, setLng] = useState();\r\n  const [lat, setLat] = useState();\r\n  const [transform, setTransform] = useState(\"transform: inherit\");\r\n  const container = useRef(null);\r\n  const [showExpandableCard, setShowExpandableCard] = useState(false);\r\n  const [mapStyles, setMapStyles] = useState([]);\r\n  const [wellsTileset, setwellsTileset] = useState();\r\n  const [defaultsCheckOnOff, setDefaultsCheckOnOff] = useState(true);\r\n  const [m1neralCheckOnOff, setM1neralCheckOnOff] = useState(true);\r\n  const [map, setMap] = useState(null);\r\n  const [mapClick, setMapClick] = useState(null);\r\n  const [draw, setDraw] = useState(null);\r\n  const [drawStatus, setDrawStatus] = useState(false);\r\n  const [rigs, setRigData] = useState([]);\r\n  const [drawingFilterFeatureId, setDrawingFilterFeatureId] = useState(null);\r\n  // const [geocoder, setGeocoder] = useState(null);\r\n  const [anchorElPoPOver, setAnchorElPoPOver] = useState(null);\r\n  const mapEl = useRef(null);\r\n\r\n  mapboxgl.accessToken = stateApp.mapboxglAccessToken;\r\n\r\n  //////////// TEMP UNTIL PROVIDER IS MADE //////////\r\n\r\n  //////begin////////temporary\r\n\r\n  const [rows, setRows] = React.useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [getWells, { data: dataWells }] = useLazyQuery(WELLSQUERY);\r\n  const [tracksByUserAndObjectType, { data: dataTracks }] = useLazyQuery(\r\n    TRACKSBYUSERANDOBJECTTYPE\r\n  );\r\n  const [\r\n    tracksByUserAndObjectTypeOwner,\r\n    { data: dataTracksOwner },\r\n  ] = useLazyQuery(TRACKSBYUSERANDOBJECTTYPE);\r\n\r\n  const [getOwnersWells, { data: dataOwnersWells }] = useLazyQuery(\r\n    OWNERSWELLSQUERY\r\n  );\r\n\r\n  const [\r\n    getCustomLayers,\r\n    { data: customLayerData },\r\n  ] = useLazyQuery(CUSTOMLAYERSQUERY, { fetchPolicy: \"network-only\" });\r\n\r\n  const [updateCustomLayer] = useMutation(UPDATECUSTOMLAYER);\r\n\r\n  const [removeCustomLayer] = useMutation(REMOVECUSTOMLAYER);\r\n\r\n  const [\r\n    getWellsForLayer,\r\n    { data: dataWellsForOwnerWellTrackLayer },\r\n  ] = useLazyQuery(WELLSQUERY);\r\n\r\n  const [getPermits, { data: permitData }] = useLazyQuery(PERMITSQUERY);\r\n\r\n  const [getRigs, { data: rigData }] = useLazyQuery(RIGSQUERY);\r\n\r\n  /////end/////////temporary\r\n\r\n  useEffect(() => {\r\n    if (stateApp.user && stateApp.user.mongoId) {\r\n      setLoading(true);\r\n\r\n      tracksByUserAndObjectType({\r\n        variables: {\r\n          userId: stateApp.user.mongoId,\r\n          objectType: \"well\",\r\n        },\r\n      });\r\n\r\n      tracksByUserAndObjectTypeOwner({\r\n        variables: {\r\n          userId: stateApp.user.mongoId,\r\n          objectType: \"owner\",\r\n        },\r\n      });\r\n\r\n      getCustomLayers({\r\n        variables: {\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n    }\r\n  }, [stateApp.user]);\r\n\r\n  useEffect(() => {\r\n    if (dataTracks && dataTracks.tracksByUserAndObjectType) {\r\n      if (dataTracks.tracksByUserAndObjectType.length !== 0) {\r\n        const tracksIdArray = dataTracks.tracksByUserAndObjectType.map(\r\n          (track) => track.trackOn\r\n        );\r\n\r\n        // setStateApp((stateApp) => ({\r\n        //   ...stateApp,\r\n        //   trackedwells: dataTracks.tracksByUserAndObjectType,\r\n        // }));\r\n\r\n        getWells({\r\n          variables: {\r\n            wellIdArray: tracksIdArray,\r\n            authToken: stateApp.user.authToken,\r\n          },\r\n        });\r\n      } else {\r\n        setRows([]);\r\n        setLoading(false);\r\n      }\r\n    }\r\n  }, [dataTracks]);\r\n\r\n  useEffect(() => {\r\n    if (dataTracksOwner && dataTracksOwner.tracksByUserAndObjectType) {\r\n      if (dataTracksOwner.tracksByUserAndObjectType.length !== 0) {\r\n        var objectsIdsArray = dataTracksOwner.tracksByUserAndObjectType.map(\r\n          (item) => item.trackOn\r\n        );\r\n\r\n        getOwnersWells({\r\n          variables: {\r\n            ownersIds: objectsIdsArray,\r\n          },\r\n        });\r\n      }\r\n    }\r\n  }, [dataTracksOwner]);\r\n\r\n  useEffect(() => {\r\n    if (customLayerData && customLayerData.customLayers) {\r\n      console.log(\"Custom Layer data\", customLayerData.customLayers);\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        customLayers: customLayerData.customLayers,\r\n        selectedUserDefinedLayer: null,\r\n        editLayer: false,\r\n        popupOpen: false,\r\n      }));\r\n    }\r\n  }, [customLayerData]);\r\n\r\n  useEffect(() => {\r\n    if (dataOwnersWells && dataOwnersWells.length !== 0) {\r\n      console.log(dataOwnersWells.ownersWells);\r\n      var ownerObjectIds = dataOwnersWells.ownersWells.map(\r\n        (item) => item.wells\r\n      );\r\n\r\n      var merged = [].concat.apply([], ownerObjectIds);\r\n\r\n      var stripped = merged.map((item) => item.wellId);\r\n\r\n      getWellsForLayer({\r\n        variables: {\r\n          wellIdArray: stripped,\r\n          authToken: stateApp.user.authToken,\r\n        },\r\n      });\r\n    }\r\n  }, [dataOwnersWells]);\r\n\r\n  useEffect(() => {\r\n    if (dataWells) {\r\n      if (\r\n        dataWells.wells &&\r\n        dataWells.wells.results &&\r\n        dataWells.wells.results.length > 0\r\n      )\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          trackedwells: dataWells.wells.results,\r\n        }));\r\n      else\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          trackedwells: null,\r\n        }));\r\n    }\r\n  }, [dataWells]);\r\n\r\n  const setLayer = (data, layerName, map) => {\r\n    const makeGeoJSON = (data) => {\r\n      return {\r\n        type: \"FeatureCollection\",\r\n        features: data.map((feature) => {\r\n          return {\r\n            type: \"Feature\",\r\n            properties: feature,\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: [feature.Longitude, feature.Latitude],\r\n            },\r\n          };\r\n        }),\r\n      };\r\n    };\r\n\r\n    const geoJson = makeGeoJSON(data);\r\n\r\n    const configIndex = stateApp.styleLayers.findIndex(\r\n      (value) => value.name === layerName\r\n    );\r\n    const config = stateApp.styleLayers[configIndex];\r\n    const checkedPosition = stateApp.checkedLayers.indexOf(configIndex);\r\n    console.log(config);\r\n\r\n    // -> add source\r\n    if (config) {\r\n      map.addSource(config.sourceProps[0], {\r\n        type: \"geojson\",\r\n        data: geoJson,\r\n        cluster: true,\r\n        clusterRadius: 50,\r\n        clusterMaxZoom: 6,\r\n      });\r\n\r\n      map.addSource(`${config.sourceProps[0]}_filter`, {\r\n        type: \"geojson\",\r\n        data: geoJson,\r\n      });\r\n\r\n      // -> add layer\r\n\r\n      if(config.layerProps.layerId[0] =='rigs'){\r\n        map.addLayer({\r\n          id: config.layerProps.layerId[0],\r\n          type: config.layerProps.layerType[0],\r\n          source: `${config.sourceProps[0]}_filter`,\r\n          paint: config.layerProps.paintProps,\r\n          layout: config.layerProps.layoutProps, \r\n        });\r\n      } else {\r\n        map.addLayer({\r\n          id: config.layerProps.layerId[0],\r\n          type: config.layerProps.layerType[0],\r\n          source: config.sourceProps[0],\r\n          paint: config.layerProps.paintProps,\r\n          layout: {\r\n            visibility: checkedPosition > -1 ? \"visible\" : \"none\",\r\n          },\r\n        });\r\n      }\r\n\r\n      const clusterVar = config.layerProps.layerId[0] + \"-clusters\";\r\n      const clusterLabelBar = config.layerProps.layerId[0] + \"-clusters-counts\";\r\n\r\n      map.addLayer({\r\n        id: clusterLabelBar,\r\n        type: \"symbol\",\r\n        source: config.sourceProps[0],\r\n        filter: [\"has\", \"point_count\"],\r\n        layout: config.layerProps.clusterProps.clusterSymbolProps,\r\n      });\r\n\r\n      map.addLayer({\r\n        id: clusterVar,\r\n        type: config.layerProps.layerType[0],\r\n        source: config.sourceProps[0],\r\n        filter: [\"has\", \"point_count\"],\r\n        paint: config.layerProps.clusterProps.clusterPaintProps,\r\n      });\r\n\r\n      map.setLayoutProperty(\r\n        clusterVar,\r\n        \"visibility\",\r\n        checkedPosition > -1 ? \"visible\" : \"none\"\r\n      );\r\n      map.setLayoutProperty(\r\n        clusterLabelBar,\r\n        \"visibility\",\r\n        checkedPosition > -1 ? \"visible\" : \"none\"\r\n      );\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (\r\n      permitData &&\r\n      permitData.permits &&\r\n      permitData.permits.length > 0 &&\r\n      map\r\n    ) {\r\n      setLayer(permitData.permits, \"Permits\", map);\r\n    }\r\n  }, [permitData, map]);\r\n\r\n  useEffect(() => {\r\n    if (rigData && rigData.rigs && rigData.rigs.length > 0) {\r\n      const nextOffset = rigs.length + rigData.rigs.length;\r\n      setRigData([...rigs, ...rigData.rigs]);\r\n\r\n      getRigs({\r\n        variables: {\r\n          offset: nextOffset,\r\n          amount: 5000,\r\n        },\r\n      });\r\n    }\r\n  }, [rigData]);\r\n\r\n  useEffect(() => {\r\n    if (rigs.length > 0 && map) {\r\n      setLayer(rigs, \"Rig Activity\", map);\r\n    }\r\n  }, [rigs, map]);\r\n\r\n  useEffect(() => {\r\n    if (dataWellsForOwnerWellTrackLayer) {\r\n      if (\r\n        dataWellsForOwnerWellTrackLayer.wells &&\r\n        dataWellsForOwnerWellTrackLayer.wells.results &&\r\n        dataWellsForOwnerWellTrackLayer.wells.results.length > 0\r\n      )\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          trackedOwnerWells: dataWellsForOwnerWellTrackLayer.wells.results,\r\n        }));\r\n      else\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          trackedOwnerWells: null,\r\n        }));\r\n    }\r\n  }, [dataWellsForOwnerWellTrackLayer]);\r\n\r\n  useEffect(() => {\r\n    const wellLineClick = (currentFeature) => {\r\n      console.log(\"clicked well lines\", currentFeature);\r\n\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        popupOpen: false,\r\n        selectedUserDefinedLayer: undefined,\r\n      }));\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        selectedWell: currentFeature.properties,\r\n        selectedWellId: currentFeature.properties.id,\r\n        wellSelectedCoordinates: [\r\n          currentFeature.properties.longitude,\r\n          currentFeature.properties.latitude,\r\n        ],\r\n      }));\r\n\r\n      createPopUp(currentFeature.properties);\r\n    };\r\n\r\n    const wellPointClick = (currentFeature) => {\r\n      console.log(\"current feature\", currentFeature);\r\n\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        popupOpen: false,\r\n        selectedUserDefinedLayer: undefined,\r\n      }));\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        selectedWell: currentFeature.properties,\r\n        selectedWellId: currentFeature.properties.id,\r\n        wellSelectedCoordinates: [\r\n          currentFeature.properties.longitude,\r\n          currentFeature.properties.latitude,\r\n        ],\r\n      }));\r\n\r\n      createPopUp(currentFeature.properties);\r\n      map.resize();\r\n    };\r\n\r\n    const layerClickHander = (feature) => {\r\n      let zVal;\r\n      if (map && map.getZoom() && map.getZoom() > 12) zVal = map.getZoom();\r\n\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        popupOpen: false,\r\n        selectedUserDefinedLayer: undefined,\r\n        selectedWell: null,\r\n        selectedWellId: feature.properties.id\r\n          ? feature.properties.id.toLowerCase()\r\n          : null,\r\n        flyTo: zVal\r\n          ? { ...feature.properties, zoom: zVal }\r\n          : feature.properties,\r\n      }));\r\n    };\r\n\r\n    const udLayerClickHandler = (feature) => {\r\n      console.log(\"current feature\", feature);\r\n\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        popupOpen: false,\r\n      }));\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        selectedUserDefinedLayer: feature,\r\n      }));\r\n\r\n      // setStateApp({...stateApp, currentFeature: feature});\r\n      createUDPopUp(feature.properties);\r\n      map.resize();\r\n    };\r\n\r\n    const clusterClickHandler = (feature, map) => {\r\n      var clusterId = feature.properties.cluster_id;\r\n      map\r\n        .getSource(feature.source)\r\n        .getClusterExpansionZoom(clusterId, function (err, zoom) {\r\n          if (err) return;\r\n\r\n          map.easeTo({\r\n            center: feature.geometry.coordinates,\r\n            zoom: zoom,\r\n          });\r\n        });\r\n    };\r\n\r\n    const mapClickHandler = (e) => {\r\n      const map = e.target;\r\n      let layers = [];\r\n      const checkedUDLayersInteraction =\r\n        stateApp.checkedUserDefinedLayersInteraction;\r\n      const checkedUDLayers = stateApp.checkedUserDefinedLayers;\r\n      const definedLayers = stateApp.userDefinedLayers;\r\n      const clusterUDLayers = [];\r\n      const udLayers = [];\r\n      const clusterLayers = [];\r\n\r\n      checkedUDLayers.forEach((l) => {\r\n        if (checkedUDLayersInteraction.indexOf(l) > -1) {\r\n          const definedLayer = definedLayers[l];\r\n          const layerProps = definedLayer.layerProps;\r\n          if (layerProps) {\r\n            for (let i = 0; i < layerProps.length; i++) {\r\n              const layerProp = layerProps[i];\r\n              if (\r\n                definedLayer.name === \"Area of Interest\" ||\r\n                definedLayer.name === \"Parcels\"\r\n              ) {\r\n                if (map.getLayer(layerProp.layerId)) {\r\n                  udLayers.push(layerProp.layerId);\r\n                }\r\n              }\r\n              if (layerProp.clusterProps) {\r\n                const clusterLayerId = layerProp.layerId + \"-clusters\";\r\n                if (map.getLayer(clusterLayerId)) {\r\n                  layers.push(clusterLayerId);\r\n                  clusterUDLayers.push(clusterLayerId);\r\n                  clusterLayers.push(layerProp.layerId);\r\n                }\r\n              }\r\n              if (map.getLayer(layerProp.layerId)) {\r\n                layers.push(layerProp.layerId);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      });\r\n      const checkedSLayersInteraction = stateApp.checkedLayersInteraction;\r\n      const checkedSLayers = stateApp.checkedLayers;\r\n      const styleLayers = stateApp.styleLayers;\r\n      // let sLayers = [];\r\n      checkedSLayers.forEach((l) => {\r\n        if (checkedSLayersInteraction.indexOf(l) > -1) {\r\n          const styleLayer = styleLayers[l];\r\n          if (!styleLayer.layerProps) {\r\n            styleLayer.id.forEach((styleId) => {\r\n              if (map.getLayer(styleId)) {\r\n                layers.push(styleId);\r\n              }\r\n            });\r\n          }\r\n          // sLayers = [...sLayers, ...styleLayer.id];\r\n          if (styleLayer.layerProps && styleLayer.layerProps.clusterProps) {\r\n            if (map.getLayer(styleLayer.id[1])) {\r\n              layers.push(styleLayer.id[1]);\r\n            }\r\n            if (map.getLayer(styleLayer.id[2])) {\r\n              layers.push(styleLayer.id[2]);\r\n            }\r\n            const clusterLayerId = styleLayer.id[1];\r\n            if (map.getLayer(clusterLayerId)) {\r\n              clusterUDLayers.push(clusterLayerId);\r\n            }\r\n          }\r\n        }\r\n      });\r\n\r\n      var bbox = [\r\n        [e.point.x - 10, e.point.y - 10],\r\n        [e.point.x + 10, e.point.y + 10],\r\n      ];\r\n\r\n      console.log(\"checking layers\", layers);\r\n\r\n      let features = map.queryRenderedFeatures(bbox, {\r\n        layers: layers,\r\n      });\r\n\r\n      if (features && features.length > 0) {\r\n        const feature = features[0];\r\n        console.log(\"stacked layers click info\", features);\r\n        const layerId = feature.layer.id;\r\n        switch (true) {\r\n          case clusterUDLayers.indexOf(layerId) > -1:\r\n            clusterClickHandler(feature, map);\r\n            break;\r\n          case clusterLayers.indexOf(layerId) > -1:\r\n            layerClickHander(feature);\r\n            break;\r\n          case udLayers.indexOf(layerId) > -1:\r\n            udLayerClickHandler(feature);\r\n            break;\r\n          case layerId === \"wellpoints\":\r\n            wellPointClick(feature);\r\n            break;\r\n          case layerId === \"welllines\":\r\n            wellLineClick(feature);\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n    };\r\n    if (map) {\r\n      console.log(mapClick);\r\n      if (mapClick && mapClick.mapClickHandler) {\r\n        console.log(\"off click action\");\r\n        map.off(\"click\", mapClick.mapClickHandler);\r\n      }\r\n      console.log(\"on click action\");\r\n      map.on(\"click\", mapClickHandler);\r\n      setMapClick({ mapClickHandler });\r\n    }\r\n  }, [\r\n    map,\r\n    stateApp.checkedLayersInteraction,\r\n    stateApp.checkedUserDefinedLayersInteraction,\r\n    stateApp.checkedLayers,\r\n    stateApp.checkedUserDefinedLayers,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // USE EFFECT FOR M1 LAYER HANDLES\r\n    console.log(\"layer ue start\");\r\n\r\n    setStateApp((state) => ({\r\n      ...state,\r\n      popupOpen: false,\r\n      selectedUserDefinedLayer: undefined,\r\n    }));\r\n\r\n    if (stateApp.styleLayers.length > 0 && map) {\r\n      stateApp.styleLayers.forEach((l) => {\r\n        l.id.forEach((k) => {\r\n          if (map.getLayer(k)) {\r\n            map.setLayoutProperty(k, \"visibility\", \"none\");\r\n          }\r\n          if (l.layerProps && l.layerProps.clusterProps) {\r\n            if (map.getLayer(k + \"-clusters-counts\")) {\r\n              map.setLayoutProperty(\r\n                k + \"-clusters-counts\",\r\n                \"visibility\",\r\n                \"none\"\r\n              );\r\n            }\r\n            if (map.getLayer(k + \"-clusters\")) {\r\n              map.setLayoutProperty(k + \"-clusters\", \"visibility\", \"none\");\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      const checkedLayers = stateApp.checkedLayers.slice(0);\r\n      if (stateApp.tempCheckedLayer) {\r\n        checkedLayers.push(stateApp.tempCheckedLayer);\r\n      }\r\n\r\n      if (checkedLayers.length > 0) {\r\n        let layers = checkedLayers;\r\n        layers.sort(function (a, b) {\r\n          return b - a;\r\n        });\r\n        if (layers.length > 0) {\r\n          let belowlayer = null;\r\n          for (let k = layers.length - 1; k >= 0; k--) {\r\n            let i = layers[k];\r\n            let layerConfig = stateApp.styleLayers[i];\r\n            let currentLayerArray = stateApp.styleLayers[i].id;\r\n            // eslint-disable-next-line no-loop-func\r\n            currentLayerArray.forEach((j) => {\r\n              let mapLayer = map.getLayer(j);\r\n              if (\r\n                mapLayer &&\r\n                layerConfig.layerProps &&\r\n                layerConfig.layerProps.clusterProps &&\r\n                !mapLayer.source.includes(\"_filter\")\r\n              ) {\r\n                map.setLayoutProperty(\r\n                  j + \"-clusters-counts\",\r\n                  \"visibility\",\r\n                  \"visible\"\r\n                );\r\n                if (belowlayer != null) {\r\n                  map.moveLayer(j + \"-clusters-counts\", belowlayer);\r\n                }\r\n                belowlayer = j + \"-clusters-counts\";\r\n                map.setLayoutProperty(j + \"-clusters\", \"visibility\", \"visible\");\r\n                map.moveLayer(j + \"-clusters\", belowlayer);\r\n                belowlayer = j + \"-clusters\";\r\n              }\r\n              if (typeof mapLayer !== \"undefined\") {\r\n                if (map.getLayer(j)) {\r\n                  map.setLayoutProperty(j, \"visibility\", \"visible\");\r\n                  if (belowlayer != null) {\r\n                    map.moveLayer(j, belowlayer);\r\n                  }\r\n                  belowlayer = j;\r\n                }\r\n              } else {\r\n              }\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    map,\r\n    stateApp.checkedLayers,\r\n    stateApp.tempCheckedLayer,\r\n    stateApp.styleLayers,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    // USE EFFECT FOR BASEMAP LAYER HANDLING\r\n    console.log(\"basemap layer ue start\");\r\n    if (stateApp.baseMapLayers.length > 0 && map) {\r\n      stateApp.baseMapLayers.forEach((l) => {\r\n        l.id.forEach((k) => {\r\n          if (map.getLayer(k)) {\r\n            map.setLayoutProperty(k, \"visibility\", \"none\");\r\n          }\r\n        });\r\n      });\r\n\r\n      if (stateApp.checkedBaseLayers.length > 0) {\r\n        let layers = stateApp.checkedBaseLayers.slice(0);\r\n        layers.sort(function (a, b) {\r\n          return b - a;\r\n        });\r\n        if (layers.length > 0) {\r\n          let belowlayer = null;\r\n          for (let k = layers.length - 1; k >= 0; k--) {\r\n            let i = layers[k];\r\n            let currentLayerArray = stateApp.baseMapLayers[i].id;\r\n            // eslint-disable-next-line no-loop-func\r\n            currentLayerArray.forEach((j) => {\r\n              var mapLayer = map.getLayer(j);\r\n              if (typeof mapLayer !== \"undefined\") {\r\n                if (map.getLayer(j)) {\r\n                  map.setLayoutProperty(j, \"visibility\", \"visible\");\r\n                  if (belowlayer != null) {\r\n                    map.moveLayer(j, belowlayer);\r\n                  }\r\n                  belowlayer = j;\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [map, stateApp.checkedBaseLayers, stateApp.baseMapLayers]);\r\n\r\n  useEffect(() => {\r\n    // USE EFFECT FOR HEATMAP LAYER HANDLES\r\n    console.log(\"heatmap layer ue start\");\r\n    if (stateApp.heatLayers.length > 0 && map) {\r\n      stateApp.heatLayers.forEach((l) => {\r\n        l.id.forEach((k) => {\r\n          if (map.getLayer(k)) {\r\n            map.setLayoutProperty(k, \"visibility\", \"none\");\r\n          }\r\n        });\r\n      });\r\n\r\n      if (stateApp.checkedHeats.length > 0) {\r\n        let layers = stateApp.checkedHeats.slice(0);\r\n        layers.sort(function (a, b) {\r\n          return b - a;\r\n        });\r\n        if (layers.length > 0) {\r\n          let belowlayer = null;\r\n          for (let k = layers.length - 1; k >= 0; k--) {\r\n            let i = layers[k];\r\n            let currentLayerArray = stateApp.heatLayers[i].id;\r\n            // eslint-disable-next-line no-loop-func\r\n            currentLayerArray.forEach((j) => {\r\n              var mapLayer = map.getLayer(j);\r\n              if (typeof mapLayer !== \"undefined\") {\r\n                if (map.getLayer(j)) {\r\n                  map.setLayoutProperty(j, \"visibility\", \"visible\");\r\n                  if (belowlayer != null) {\r\n                    map.moveLayer(j, belowlayer);\r\n                  }\r\n                  belowlayer = j;\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, [map, stateApp.checkedHeats, stateApp.heatLayers]);\r\n\r\n  useEffect(() => {\r\n    ///////////////// EFFECT FOR SHOWING TRACKED WELLS /////////////////\r\n\r\n    if (map && stateApp.trackFilterOn && stateApp.trackedWellArray) {\r\n      console.log(\"array \", stateApp.trackedWellArray);\r\n\r\n      const makeGeoJSON = (data) => {\r\n        return {\r\n          type: \"FeatureCollection\",\r\n          features: data.map((feature) => {\r\n            return {\r\n              type: \"Feature\",\r\n              properties: {\r\n                api: feature.api,\r\n                id: feature.id,\r\n                latitude: feature.latitude,\r\n                longitude: feature.longitude,\r\n                operator: feature.operator,\r\n                WellName: feature.wellName,\r\n              },\r\n              geometry: {\r\n                type: \"Point\",\r\n                coordinates: [feature.longitude, feature.latitude],\r\n              },\r\n            };\r\n          }),\r\n        };\r\n      };\r\n\r\n      const myGeoJSONData = makeGeoJSON(\r\n        stateApp.trackedWellArray.wells.results\r\n      );\r\n\r\n      map.addSource(\"track_well_points_source\", {\r\n        type: \"geojson\",\r\n        data: myGeoJSONData,\r\n      });\r\n\r\n      map.addLayer({\r\n        id: \"track_well_points_layer\",\r\n        type: \"circle\",\r\n        source: \"track_well_points_source\",\r\n        paint: {\r\n          \"circle-radius\": 5,\r\n          \"circle-color\": \"yellow\",\r\n        },\r\n      });\r\n\r\n      // const latArray = stateApp.trackedWellArray.wells.results.map(\r\n      //   (item) => item.latitude\r\n      // );\r\n      // const longArray = stateApp.trackedWellArray.wells.results.map(\r\n      //   (item) => item.longitude\r\n      // );\r\n\r\n      map.on(\"click\", \"track_well_points_layer\", function (e) {\r\n        var bbox = [\r\n          [e.point.x - 10, e.point.y - 10],\r\n          [e.point.x + 10, e.point.y + 10],\r\n        ];\r\n\r\n        let features = map.queryRenderedFeatures(bbox, {\r\n          layers: [\"track_well_points_layer\"],\r\n        });\r\n\r\n        setStateApp((state) => ({ ...state, flyTo: features[0].properties }));\r\n      });\r\n\r\n      map.on(\"mousemove\", \"track_well_points_layer\", (e) => {\r\n        map.getCanvas().style.cursor = \"pointer\";\r\n      });\r\n\r\n      map.on(\"mouseleave\", \"track_well_points_layer\", function () {\r\n        map.getCanvas().style.cursor = \"\";\r\n      });\r\n\r\n      // var bbox = [\r\n      //   [Math.min(...longArray), Math.min(...latArray)],\r\n      //   [Math.max(...longArray), Math.max(...latArray)],\r\n      // ];\r\n\r\n      // map.fitBounds(bbox, {\r\n      //   padding: { top: 50, bottom: 50, left: 50, right: 50 },\r\n      // });\r\n    }\r\n  }, [stateApp.trackFilterOn]);\r\n\r\n  useEffect(() => {\r\n    // USE EFFECT FOR USER DEFINED DATA LAYER HANDLE\r\n    setStateApp((state) => ({\r\n      ...state,\r\n      popupOpen: false,\r\n      selectedUserDefinedLayer: undefined,\r\n    }));\r\n\r\n    if (stateApp.userDefinedLayers.length > 0 && map) {\r\n      stateApp.userDefinedLayers.forEach((l) => {\r\n        l.id.forEach((k, i) => {\r\n          let clusterLabelBar = k + \"-clusters-counts\";\r\n          if (map.getLayer(clusterLabelBar)) {\r\n            // map.removeLayer(clusterLabelBar);\r\n            // map.removeSource(l.sourceProps[i].sourceId);\r\n            map.setLayoutProperty(clusterLabelBar, \"visibility\", \"none\");\r\n          }\r\n\r\n          let clusterVar = k + \"-clusters\";\r\n          if (map.getLayer(clusterVar)) {\r\n            // map.removeLayer(clusterVar);\r\n            // map.removeSource(l.sourceProps[i].sourceId);\r\n            map.setLayoutProperty(clusterVar, \"visibility\", \"none\");\r\n          }\r\n\r\n          if (map.getLayer(k)) {\r\n            // map.removeLayer(k);\r\n            // map.removeSource(l.sourceProps[i].sourceId);\r\n            map.setLayoutProperty(k, \"visibility\", \"none\");\r\n          }\r\n        });\r\n      });\r\n    }\r\n\r\n    // this section adds the updated list of layers\r\n    const tmpCheckedLayer = stateApp.tempCheckedUserDefinedLayers;\r\n    const checkedLayers = stateApp.checkedUserDefinedLayers.slice(0);\r\n    if (\r\n      tmpCheckedLayer != null &&\r\n      stateApp.checkedUserDefinedLayers.indexOf(tmpCheckedLayer) === -1\r\n    ) {\r\n      checkedLayers.push(tmpCheckedLayer);\r\n    }\r\n\r\n    if (map && checkedLayers.length > 0) {\r\n      let layers = checkedLayers;\r\n      layers.sort(function (a, b) {\r\n        return b - a;\r\n      });\r\n      const layerList = stateApp.userDefinedLayers.slice(0);\r\n      let beforelayer = null;\r\n      let fitBounds = null;\r\n\r\n      for (let k = layers.length - 1; k >= 0; k--) {\r\n        const l = layers[k];\r\n\r\n        const selectLayerProps = { ...layerList[l] };\r\n\r\n        if (selectLayerProps.type === \"data layer\") {\r\n          for (let i = 0; i < selectLayerProps.id.length; i++) {\r\n            // -> fetch data\r\n            let layerData = [];\r\n            if (selectLayerProps.dataProps[i].dataId == \"trackedWellsWells\") {\r\n              layerData = stateApp.trackedwells;\r\n            } else if (\r\n              selectLayerProps.dataProps[i].dataId == \"trackedOwnersWells\"\r\n            ) {\r\n              layerData = stateApp.trackedOwnerWells;\r\n            } else if (\r\n              selectLayerProps.dataProps[i].dataId == \"wellsFromSearch\"\r\n            ) {\r\n              layerData = stateApp.wellListFromSearch;\r\n            } else if (\r\n              selectLayerProps.dataProps[i].dataId == \"wellsFromTagsFilter\"\r\n            ) {\r\n              layerData = stateApp.wellListFromTagsFilter;\r\n            } else {\r\n              const dataId = selectLayerProps.dataProps[i].dataId;\r\n\r\n              const groupBy = (arr, property) => {\r\n                return arr.reduce((memo, x) => {\r\n                  if (!memo[x[property]]) {\r\n                    memo[x[property]] = [];\r\n                  }\r\n                  memo[x[property]].push(x);\r\n                  return memo;\r\n                }, {});\r\n              };\r\n\r\n              layerData = groupBy(stateApp.customLayers, \"layer\")[dataId];\r\n            }\r\n\r\n            if (layerData && layerData.length !== 0) {\r\n              // -> make GEOJSON\r\n\r\n              const makeGeoJSON = (data) => {\r\n                return {\r\n                  type: \"FeatureCollection\",\r\n                  features: data.map((feature) => {\r\n                    if (selectLayerProps.dataProps[i].dataTypeId == \"Point\") {\r\n                      return {\r\n                        type: \"Feature\",\r\n                        properties: feature,\r\n                        geometry: {\r\n                          type: selectLayerProps.dataProps[i].dataTypeId,\r\n                          coordinates: [feature.longitude, feature.latitude],\r\n                        },\r\n                      };\r\n                    } else {\r\n                      return JSON.parse(feature.shape);\r\n                    }\r\n                  }),\r\n                };\r\n              };\r\n\r\n              const myGeoJSONData = makeGeoJSON(layerData);\r\n\r\n              const layerId = selectLayerProps.layerProps[i].layerId;\r\n              console.log(\"layerId: \" + layerId);\r\n              if (map.getLayer(layerId)) {\r\n                map.setLayoutProperty(layerId, \"visibility\", \"visible\");\r\n                map\r\n                  .getSource(selectLayerProps.sourceProps[i].sourceId)\r\n                  .setData(myGeoJSONData);\r\n                let clusterLabelBar = layerId + \"-clusters-counts\";\r\n                if (map.getLayer(clusterLabelBar)) {\r\n                  map.setLayoutProperty(\r\n                    clusterLabelBar,\r\n                    \"visibility\",\r\n                    \"visible\"\r\n                  );\r\n                  if (beforelayer) {\r\n                    map.moveLayer(clusterLabelBar, beforelayer);\r\n                  }\r\n                  beforelayer = clusterLabelBar;\r\n                }\r\n\r\n                let clusterVar = layerId + \"-clusters\";\r\n                if (map.getLayer(clusterVar)) {\r\n                  map.setLayoutProperty(clusterVar, \"visibility\", \"visible\");\r\n                  if (beforelayer) {\r\n                    map.moveLayer(clusterVar, beforelayer);\r\n                  }\r\n                  beforelayer = clusterVar;\r\n                }\r\n              } else {\r\n                // -> add source\r\n                if (selectLayerProps.dataProps[i].dataTypeId == \"Point\") {\r\n                  map.addSource(selectLayerProps.sourceProps[i].sourceId, {\r\n                    type: selectLayerProps.sourceProps[i].sourceType,\r\n                    data: myGeoJSONData,\r\n                    cluster: true,\r\n                    clusterRadius: 50,\r\n                    clusterMaxZoom: 6,\r\n                  });\r\n                  const filterLayerId =\r\n                    selectLayerProps.sourceProps[i].sourceId + \"_filter\";\r\n                  console.log(filterLayerId);\r\n                  map.addSource(filterLayerId, {\r\n                    type: selectLayerProps.sourceProps[i].sourceType,\r\n                    data: myGeoJSONData,\r\n                  });\r\n                } else {\r\n                  map.addSource(selectLayerProps.sourceProps[i].sourceId, {\r\n                    type: selectLayerProps.sourceProps[i].sourceType,\r\n                    data: myGeoJSONData,\r\n                    promoteId: { original: \"id\" },\r\n                  });\r\n                }\r\n\r\n                // -> add layer\r\n                // eslint-disable-next-line eqeqeq\r\n                if (selectLayerProps.layerProps[i].layerType == \"symbol\") {\r\n                  map.addLayer({\r\n                    id: selectLayerProps.layerProps[i].layerId,\r\n                    type: selectLayerProps.layerProps[i].layerType,\r\n                    source: selectLayerProps.sourceProps[i].sourceId,\r\n                    layout: selectLayerProps.layerProps[i].symbolProps,\r\n                  });\r\n                } else {\r\n                  map.addLayer({\r\n                    id: selectLayerProps.layerProps[i].layerId,\r\n                    type: selectLayerProps.layerProps[i].layerType,\r\n                    source: selectLayerProps.sourceProps[i].sourceId,\r\n                    paint: selectLayerProps.layerProps[i].paintProps,\r\n                  });\r\n                }\r\n\r\n                // -> add cluster layer\r\n\r\n                if (\r\n                  selectLayerProps &&\r\n                  selectLayerProps.layerProps &&\r\n                  selectLayerProps.layerProps[i].clusterProps\r\n                ) {\r\n                  var clusterVar =\r\n                    selectLayerProps.layerProps[i].layerId + \"-clusters\";\r\n                  var clusterLabelBar =\r\n                    selectLayerProps.layerProps[i].layerId + \"-clusters-counts\";\r\n\r\n                  map.addLayer({\r\n                    id: clusterLabelBar,\r\n                    type: \"symbol\",\r\n                    source: selectLayerProps.sourceProps[i].sourceId,\r\n                    filter: [\"has\", \"point_count\"],\r\n                    layout:\r\n                      selectLayerProps.layerProps[i].clusterProps\r\n                        .clusterSymbolProps,\r\n                  });\r\n                  if (beforelayer) {\r\n                    map.moveLayer(clusterLabelBar, beforelayer);\r\n                  }\r\n                  beforelayer = clusterLabelBar;\r\n\r\n                  map.addLayer({\r\n                    id: clusterVar,\r\n                    type: selectLayerProps.layerProps[i].layerType,\r\n                    source: selectLayerProps.sourceProps[i].sourceId,\r\n                    filter: [\"has\", \"point_count\"],\r\n                    paint:\r\n                      selectLayerProps.layerProps[i].clusterProps\r\n                        .clusterPaintProps,\r\n                  });\r\n\r\n                  if (beforelayer) {\r\n                    map.moveLayer(clusterVar, beforelayer);\r\n                  }\r\n                  beforelayer = clusterVar;\r\n                }\r\n                // -> add interaction (note to change later w/ interaction panel)\r\n                if (selectLayerProps && selectLayerProps.interactionProps) {\r\n                  const availableInteraction =\r\n                    stateApp.checkedUserDefinedLayersInteraction.indexOf(l) !==\r\n                    -1;\r\n                  if (selectLayerProps.interactionProps.mouseClick) {\r\n                    var clusterVar =\r\n                      selectLayerProps.layerProps[i].layerId + \"-clusters\";\r\n                  }\r\n\r\n                  if (\r\n                    selectLayerProps &&\r\n                    selectLayerProps.interactionProps &&\r\n                    selectLayerProps.interactionProps.hoverActions\r\n                  ) {\r\n                    var clusterVar =\r\n                      selectLayerProps.layerProps[i].layerId + \"-clusters\";\r\n\r\n                    if (\r\n                      selectLayerProps.interactionProps.hoverActions.mouseMove\r\n                    ) {\r\n                      const mouseMoveHandler = () => {\r\n                        map.getCanvas().style.cursor =\r\n                          selectLayerProps.interactionProps.hoverActions.mouseMove.cursor;\r\n                      };\r\n                      if (\r\n                        selectLayerProps.interactionProps.hoverActions\r\n                          .mouseMoveHandler\r\n                      ) {\r\n                        const oldHander =\r\n                          selectLayerProps.interactionProps.hoverActions\r\n                            .mouseMoveHandler;\r\n                        map.off(\r\n                          \"mousemove\",\r\n                          selectLayerProps.layerProps[i].layerId,\r\n                          oldHander\r\n                        );\r\n                        map.off(\"mousemove\", clusterVar, oldHander);\r\n                      }\r\n                      if (availableInteraction) {\r\n                        map.on(\r\n                          \"mousemove\",\r\n                          selectLayerProps.layerProps[i].layerId,\r\n                          mouseMoveHandler\r\n                        );\r\n                        map.on(\"mousemove\", clusterVar, mouseMoveHandler);\r\n                        selectLayerProps.interactionProps.hoverActions.mouseMoveHandler = mouseMoveHandler;\r\n                      }\r\n                    }\r\n\r\n                    if (\r\n                      selectLayerProps.interactionProps.hoverActions.mouseLeave\r\n                    ) {\r\n                      const mouseLeaveHandler = () => {\r\n                        map.getCanvas().style.cursor =\r\n                          selectLayerProps.interactionProps.hoverActions.mouseLeave.cursor;\r\n                      };\r\n                      if (\r\n                        selectLayerProps.interactionProps.hoverActions\r\n                          .mouseLeaveHandler\r\n                      ) {\r\n                        const oldHander =\r\n                          selectLayerProps.interactionProps.hoverActions\r\n                            .mouseMoveHandler;\r\n                        map.off(\r\n                          \"mouseleave\",\r\n                          selectLayerProps.layerProps[i].layerId,\r\n                          oldHander\r\n                        );\r\n                        map.off(\"mouseleave\", clusterVar, oldHander);\r\n                      }\r\n                      if (availableInteraction) {\r\n                        map.on(\r\n                          \"mouseleave\",\r\n                          selectLayerProps.layerProps[i].layerId,\r\n                          mouseLeaveHandler\r\n                        );\r\n                        map.on(\"mouseleave\", clusterVar, mouseLeaveHandler);\r\n                        selectLayerProps.interactionProps.hoverActions.mouseLeaveHandler = mouseLeaveHandler;\r\n                      }\r\n                    }\r\n                  }\r\n\r\n                  layerList[l] = selectLayerProps;\r\n                }\r\n              }\r\n\r\n              if (beforelayer) {\r\n                map.moveLayer(\r\n                  selectLayerProps.layerProps[i].layerId,\r\n                  beforelayer\r\n                );\r\n              }\r\n              beforelayer = selectLayerProps.layerProps[i].layerId;\r\n\r\n              //// finding and fitting bounds\r\n              // eslint-disable-next-line no-loop-func\r\n              const findBounds = (wells) => {\r\n                let latArray = wells.map((item) => item.latitude);\r\n                let longArray = wells.map((item) => item.longitude);\r\n\r\n                latArray = latArray.filter((item) => item !== 0);\r\n                longArray = longArray.filter((item) => item !== 0);\r\n\r\n                let maxLat = Math.max(...latArray);\r\n                let minLat = Math.min(...latArray);\r\n                let maxLong = Math.max(...longArray);\r\n                let minLong = Math.min(...longArray);\r\n\r\n                if (fitBounds) {\r\n                  const {\r\n                    maxLat: maxLatSApp,\r\n                    minLat: minLatSApp,\r\n                    maxLong: maxLongSApp,\r\n                    minLong: minLongSApp,\r\n                  } = fitBounds;\r\n\r\n                  return {\r\n                    maxLat: maxLatSApp < maxLat ? maxLat : maxLatSApp,\r\n                    minLat: minLatSApp > minLat ? minLat : minLatSApp,\r\n                    maxLong: maxLongSApp < maxLong ? maxLong : maxLongSApp,\r\n                    minLong: minLongSApp > minLong ? minLong : minLongSApp,\r\n                  };\r\n                }\r\n\r\n                return { maxLat, minLat, maxLong, minLong };\r\n              };\r\n\r\n              fitBounds = layerData ? findBounds(layerData) : null;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (fitBounds) {\r\n        const fitOverBounds = ({ maxLat, minLat, maxLong, minLong }) => {\r\n          const latDif = maxLat - minLat;\r\n          const longDif = maxLong - minLong;\r\n\r\n          if (latDif === 0) {\r\n            maxLat = maxLat + 0.005 > 90 ? 90 : maxLat + 0.005;\r\n            minLat = minLat - 0.005 < -90 ? -90 : minLat - 0.005;\r\n          } else {\r\n            maxLat = maxLat + latDif * 0.08 > 90 ? 90 : maxLat + latDif * 0.08;\r\n            minLat =\r\n              minLat - latDif * 0.08 < -90 ? -90 : minLat - latDif * 0.08;\r\n          }\r\n\r\n          if (longDif === 0) {\r\n            maxLong = maxLong + 0.005 > 180 ? 180 : maxLong + 0.005;\r\n            minLong = minLong - 0.005 < -180 ? -180 : minLong - 0.005;\r\n          } else {\r\n            maxLong =\r\n              maxLong + longDif * 0.08 > 180 ? 180 : maxLong + latDif * 0.08;\r\n            maxLong =\r\n              maxLong - longDif * 0.08 < -180 ? -180 : maxLong - latDif * 0.08;\r\n          }\r\n\r\n          return {\r\n            maxLat,\r\n            minLat,\r\n            maxLong,\r\n            minLong,\r\n          };\r\n        };\r\n\r\n        let bounds = fitOverBounds(fitBounds);\r\n\r\n        if (\r\n          bounds &&\r\n          bounds.minLong &&\r\n          bounds.maxLong &&\r\n          bounds.minLat &&\r\n          bounds.maxLat &&\r\n          !stateApp.fitBounds\r\n        ) {\r\n          map.fitBounds([\r\n            [bounds.minLong, bounds.minLat],\r\n            [bounds.maxLong, bounds.maxLat],\r\n          ]);\r\n        }\r\n      }\r\n\r\n      setStateApp((stateApp) => ({\r\n        ...stateApp,\r\n        userDefinedLayers: layerList,\r\n        fitBounds: { ...stateApp.fitBounds },\r\n      }));\r\n    }\r\n  }, [\r\n    map,\r\n    stateApp.checkedUserDefinedLayers,\r\n    stateApp.checkedUserDefinedLayersInteraction,\r\n    stateApp.tempCheckedUserDefinedLayers,\r\n    stateApp.customLayers,\r\n    stateApp.trackedwells,\r\n    stateApp.trackedOwnerWells,\r\n    stateApp.wellListFromSearch,\r\n    stateApp.wellListFromTagsFilter,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (showExpandableCard) {\r\n      setTransform(\"transform: none\");\r\n    } else {\r\n      setTransform(\"transform: inherit\");\r\n    }\r\n  }, [showExpandableCard]);\r\n\r\n  useEffect(() => {\r\n    if (stateNav.m1neralDefaultsOnOff) {\r\n      setDefaultsCheckOnOff((defaultsCheckOnOff) => !defaultsCheckOnOff);\r\n    }\r\n    if (stateNav.m1neralCehckOnOff) {\r\n      setM1neralCheckOnOff((m1neralCheckOnOff) => !m1neralCheckOnOff);\r\n    }\r\n  }, [stateNav.m1neralCehckOnOff, stateNav.m1neralDefaultsOnOff]);\r\n\r\n  useEffect(() => {\r\n    console.log(\"filter ue start\");\r\n    //applies filter when one of the filters change\r\n    if (map) {\r\n      let isFilterSet = false;\r\n\r\n      let wellFilterCount = 0;\r\n      let ownershipFilterCount = 0;\r\n      let productionFilterCount = 0;\r\n      let geographyFilterCount = 0;\r\n      let valuationFilterCount = 0;\r\n      let aiFilterCount = 0;\r\n      let totalCount = 0;\r\n      let tagFilterCount = 0;\r\n      let filterArray = [];\r\n      let filterCustomArray = {};\r\n\r\n      let defaultOverride = true;\r\n\r\n      if (\r\n        defaultOverride == true &&\r\n        stateNav.defaultOn &&\r\n        !stateNav.filterWellStatus &&\r\n        !stateNav.filterWellType &&\r\n        filterArray.length === 0\r\n      ) {\r\n        // let defaultTypeName = [\"typeName\", [\"GAS\", \"OIL\", \"OIL AND GAS\", \"PERMITTED\", \"UNKNOWN\"]];\r\n        // let defaultStatusName = [\"statusName\",\r\n        // [\r\n        //   \"ACTIVE\",\r\n        //   \"ACTIVE - DRILLING\",\r\n        //   \"COMPLETED - NOT ACTIVE\",\r\n        //   \"DRILLED UNCOMPLETED (DUC)\",\r\n        //   \"PERMIT\",\r\n        //   \"PERMIT - EXISTING WELL\",\r\n        //   \"PERMIT - NEW DRILL\",\r\n        // ],];\r\n\r\n        let defaultTypeName = [\"typeName\", []];\r\n        let defaultStatusName = [\"statusName\", []];\r\n\r\n        let defaultFiltersWellStatus = [\r\n          \"filterWellStatus\",\r\n          [\"match\", [\"get\", \"wellStatus\"], defaultStatusName[1], true, false],\r\n        ];\r\n        let defaultFiltersWellType = [\r\n          \"filterWellType\",\r\n          [\"match\", [\"get\", \"wellType\"], defaultTypeName[1], true, false],\r\n        ];\r\n        const m1neralDefaults = [\r\n          {\r\n            name: \"M1neral Default Filters\",\r\n            filters: [defaultFiltersWellStatus, defaultFiltersWellType],\r\n            types: [defaultTypeName, defaultStatusName],\r\n            on: m1neralCheckOnOff,\r\n            default: defaultsCheckOnOff,\r\n          },\r\n        ];\r\n\r\n        let wellTypeFilter = null;\r\n        let wellStatusFilter = null;\r\n\r\n        // console.log('***********',defaultTypeName[1])\r\n        // console.log('***********',defaultStatusName[1].length)\r\n\r\n        if (defaultTypeName[1].length > 0) {\r\n          wellTypeFilter = defaultFiltersWellType[1];\r\n        }\r\n        if (defaultStatusName[1].length > 0) {\r\n          wellStatusFilter = defaultFiltersWellStatus[1];\r\n        }\r\n\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          defaultOn: false,\r\n          statusName: defaultStatusName[1],\r\n          typeName: defaultTypeName[1],\r\n          m1neralDefaultFilters: m1neralDefaults,\r\n          filterWellStatus: wellStatusFilter,\r\n          filterWellType: wellTypeFilter,\r\n        }));\r\n      }\r\n      if (stateNav.filterWellProfile && stateNav.filterWellProfile.length > 0) {\r\n        let total = stateNav.filterWellProfile[2].length;\r\n        filterArray.push(stateNav.filterWellProfile);\r\n        isFilterSet = true;\r\n\r\n        wellFilterCount += total;\r\n        totalCount += total;\r\n      }\r\n      if (stateNav.filterWellType && stateNav.filterWellType.length > 0) {\r\n        let total = stateNav.filterWellType[2].length;\r\n        filterArray.push(stateNav.filterWellType);\r\n        isFilterSet = true;\r\n        wellFilterCount += total;\r\n        totalCount += total;\r\n      }\r\n      if (stateNav.filterOwnerCount && stateNav.filterOwnerCount.length > 0) {\r\n        filterArray.push(stateNav.filterOwnerCount);\r\n        isFilterSet = true;\r\n        ownershipFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterOwnerConfidence &&\r\n        stateNav.filterOwnerConfidence.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterOwnerConfidence);\r\n        isFilterSet = true;\r\n        aiFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterNoOwnerCount &&\r\n        stateNav.filterNoOwnerCount.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterNoOwnerCount);\r\n        isFilterSet = true;\r\n        ownershipFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (stateNav.filterTrackedWells) {\r\n        // filterArray.push(stateNav.filterTrackedWells);\r\n        // isFilterSet = true;\r\n        tagFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (stateNav.filterTrackedOwners) {\r\n        // filterArray.push(stateNav.filterTrackedWells);\r\n        // isFilterSet = true;\r\n        tagFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n\r\n      if (stateNav.filterTags && stateNav.filterTags.length > 0) {\r\n        filterArray.push(stateNav.filterTags);\r\n        isFilterSet = true;\r\n        totalCount += stateNav.selectedTags ? stateNav.selectedTags.length : 0;\r\n        tagFilterCount += stateNav.selectedTags\r\n          ? stateNav.selectedTags.length\r\n          : 0;\r\n      }\r\n\r\n      if (\r\n        stateNav.filterHasOwnerCount &&\r\n        stateNav.filterHasOwnerCount.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterHasOwnerCount);\r\n        isFilterSet = true;\r\n        ownershipFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (stateNav.filterHasOwners && stateNav.filterHasOwners.length > 0) {\r\n        filterArray.push(stateNav.filterHasOwners);\r\n        isFilterSet = true;\r\n        ownershipFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (stateNav.filterWellStatus && stateNav.filterWellStatus.length > 0) {\r\n        let total = stateNav.filterWellStatus[2].length;\r\n        filterArray.push(stateNav.filterWellStatus);\r\n        isFilterSet = true;\r\n        wellFilterCount += total;\r\n        totalCount += total;\r\n      }\r\n      if (stateNav.filterOperator && stateNav.filterOperator.length > 0) {\r\n        let total = stateNav.filterOperator[2].length;\r\n        filterArray.push(stateNav.filterOperator);\r\n        isFilterSet = true;\r\n        wellFilterCount += total;\r\n        totalCount += total;\r\n      }\r\n      if (\r\n        stateNav.filterWellAppraisal &&\r\n        stateNav.filterWellAppraisal.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterWellAppraisal);\r\n        isFilterSet = true;\r\n        valuationFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterCumulativeOil &&\r\n        stateNav.filterCumulativeOil.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterCumulativeOil);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterCumulativeGas &&\r\n        stateNav.filterCumulativeGas.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterCumulativeGas);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterCumulativeWater &&\r\n        stateNav.filterCumulativeWater.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterCumulativeWater);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstMonthWater &&\r\n        stateNav.filterFirstMonthWater.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstMonthWater);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstThreeMonthWater &&\r\n        stateNav.filterFirstThreeMonthWater.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstThreeMonthWater);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstSixMonthWater &&\r\n        stateNav.filterFirstSixMonthWater.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstSixMonthWater);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstTwelveMonthWater &&\r\n        stateNav.filterFirstTwelveMonthWater.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstTwelveMonthWater);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastMonthWater &&\r\n        stateNav.filterLastMonthWater.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastMonthWater);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastThreeMonthWater &&\r\n        stateNav.filterLastThreeMonthWater.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastThreeMonthWater);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastSixMonthWater &&\r\n        stateNav.filterLastSixMonthWater.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastSixMonthWater);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastTwelveMonthWater &&\r\n        stateNav.filterLastTwelveMonthWater.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastTwelveMonthWater);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstMonthGas &&\r\n        stateNav.filterFirstMonthGas.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstMonthGas);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstThreeMonthGas &&\r\n        stateNav.filterFirstThreeMonthGas.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstThreeMonthGas);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstSixMonthGas &&\r\n        stateNav.filterFirstSixMonthGas.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstSixMonthGas);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstTwelveMonthGas &&\r\n        stateNav.filterFirstTwelveMonthGas.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstTwelveMonthGas);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastMonthGas &&\r\n        stateNav.filterLastMonthGas.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastMonthGas);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastThreeMonthGas &&\r\n        stateNav.filterLastThreeMonthGas.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastThreeMonthGas);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastSixMonthGas &&\r\n        stateNav.filterLastSixMonthGas.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastSixMonthGas);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastTwelveMonthGas &&\r\n        stateNav.filterLastTwelveMonthGas.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastTwelveMonthGas);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstMonthOil &&\r\n        stateNav.filterFirstMonthOil.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstMonthOil);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstThreeMonthOil &&\r\n        stateNav.filterFirstThreeMonthOil.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstThreeMonthOil);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstSixMonthOil &&\r\n        stateNav.filterFirstSixMonthOil.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstSixMonthOil);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstTwelveMonthOil &&\r\n        stateNav.filterFirstTwelveMonthOil.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstTwelveMonthOil);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastMonthOil &&\r\n        stateNav.filterLastMonthOil.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastMonthOil);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastThreeMonthOil &&\r\n        stateNav.filterLastThreeMonthOil.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastThreeMonthOil);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastSixMonthOil &&\r\n        stateNav.filterLastSixMonthOil.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastSixMonthOil);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterLastTwelveMonthOil &&\r\n        stateNav.filterLastTwelveMonthOil.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterLastTwelveMonthOil);\r\n        isFilterSet = true;\r\n        productionFilterCount += 1;\r\n        totalCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterAllInterestTypes &&\r\n        stateNav.filterAllInterestTypes.length > 0\r\n      ) {\r\n        let removeAny = 1;\r\n        let numberFiltes = stateNav.filterAllInterestTypes.length;\r\n        let total = numberFiltes - removeAny;\r\n        filterArray.push(stateNav.filterAllInterestTypes);\r\n        isFilterSet = true;\r\n        ownershipFilterCount += total;\r\n        totalCount += total;\r\n      }\r\n      if (\r\n        stateNav.filterAllOwnershipTypes &&\r\n        stateNav.filterAllOwnershipTypes.length > 0\r\n      ) {\r\n        let removeAny = 1;\r\n        let numberFiltes = stateNav.filterAllOwnershipTypes.length;\r\n        let total = numberFiltes - removeAny;\r\n        filterArray.push(stateNav.filterAllOwnershipTypes);\r\n        isFilterSet = true;\r\n        ownershipFilterCount += total;\r\n        totalCount += total;\r\n      }\r\n\r\n      if (\r\n        stateNav.filterOwnerAppraisals &&\r\n        stateNav.filterOwnerAppraisals.length > 0\r\n      ) {\r\n        let removeAny = 1;\r\n        let numberFiltes = stateNav.filterOwnerAppraisals.length;\r\n        let total = numberFiltes - removeAny;\r\n        filterArray.push(stateNav.filterOwnerAppraisals);\r\n        isFilterSet = true;\r\n        valuationFilterCount += total;\r\n        totalCount += total;\r\n      }\r\n\r\n      let fitBounds = null;\r\n\r\n      const findBounds = (shapes) => {\r\n        let bound = null;\r\n        if (\r\n          fitBounds &&\r\n          fitBounds.maxLat &&\r\n          fitBounds.minLat &&\r\n          fitBounds.maxLong &&\r\n          fitBounds.minLong\r\n        ) {\r\n          bound = fitBounds;\r\n        }\r\n        if (shapes && shapes.length > 0) {\r\n          shapes.forEach((shape) => {\r\n            const bbox = turf.bbox(shape);\r\n            if (bound) {\r\n              bound.minLong = bound.minLong > bbox[0] ? bbox[0] : bound.minLong;\r\n              bound.minLat = bound.minLat > bbox[1] ? bbox[1] : bound.minLat;\r\n              bound.maxLong = bound.maxLong < bbox[2] ? bbox[2] : bound.maxLong;\r\n              bound.maxLat = bound.maxLat < bbox[3] ? bbox[3] : bound.maxLat;\r\n            } else {\r\n              bound = {\r\n                minLong: bbox[0],\r\n                minLat: bbox[1],\r\n                maxLong: bbox[2],\r\n                maxLat: bbox[3],\r\n              };\r\n            }\r\n          });\r\n        }\r\n        return bound;\r\n      };\r\n\r\n      const setLayerSource = (layerId, source, sourceLayer = null) => {\r\n        const oldLayers = map.getStyle().layers;\r\n        const cluster_layer = `${layerId}-clusters`;\r\n        const cluster_counts_layer = `${layerId}-clusters-counts`;\r\n        const layer = map.getLayer(layerId);\r\n        if (source.includes(\"_filter\")) {\r\n          if (map.getLayer(cluster_layer)) {\r\n            map.setLayoutProperty(cluster_layer, \"visibility\", \"none\");\r\n          }\r\n\r\n          if (map.getLayer(cluster_counts_layer)) {\r\n            map.setLayoutProperty(cluster_counts_layer, \"visibility\", \"none\");\r\n          }\r\n        } else {\r\n          if (layer.visibility == \"visible\") {\r\n            if (map.getLayer(cluster_layer)) {\r\n              map.setLayoutProperty(cluster_layer, \"visibility\", \"visible\");\r\n            }\r\n\r\n            if (map.getLayer(cluster_counts_layer)) {\r\n              map.setLayoutProperty(\r\n                cluster_counts_layer,\r\n                \"visibility\",\r\n                \"visible\"\r\n              );\r\n            }\r\n          }\r\n        }\r\n        const layerIndex = oldLayers.findIndex((l) => l.id === layerId);\r\n        const layerDef = oldLayers[layerIndex];\r\n        const before =\r\n          oldLayers[layerIndex + 1] && oldLayers[layerIndex + 1].id;\r\n        layerDef.source = source;\r\n        if (sourceLayer) {\r\n          layerDef[\"source-layer\"] = sourceLayer;\r\n        }\r\n        map.removeLayer(layerId);\r\n        map.addLayer(layerDef, before);\r\n      };\r\n\r\n      const filterShapeAction = (shapeList, filterLayers) => {\r\n        filterLayers.forEach((filterLayer) => {\r\n          let layer = map.getLayer(filterLayer);\r\n          if (layer) {\r\n            if (layer.type == \"circle\" && layer.id != \"wellpoints\") {\r\n              if (!layer.source.includes(\"_filter\")) {\r\n                const filterSource = layer.source + \"_filter\";\r\n                setLayerSource(layer.id, filterSource);\r\n                layer = map.getLayer(filterLayer);\r\n              }\r\n            }\r\n            let featuresList = [];\r\n            if (layer.source === \"composite\") {\r\n              // console.log(map.getSource(layer.source));\r\n              featuresList = map.querySourceFeatures(\"composite\", {\r\n                sourceLayer: layer.sourceLayer,\r\n              });\r\n            } else {\r\n              // console.log(map.getSource(layer.source));\r\n              // featuresList = map.querySourceFeatures(layer.source);\r\n              featuresList = map.getSource(layer.source)._data.features;\r\n            }\r\n            // console.log(filterLayer, featuresList);\r\n            if (featuresList && featuresList.length > 0) {\r\n              const result = featuresList.filter((feature) => {\r\n                if (feature.geometry.type === \"MultiPolygon\") {\r\n                  for (\r\n                    let i = 0;\r\n                    i < feature.geometry.coordinates.length;\r\n                    i++\r\n                  ) {\r\n                    const coordinates = feature.geometry.coordinates[i];\r\n                    const geometry = {\r\n                      type: \"Polygon\",\r\n                      coordinates: coordinates,\r\n                    };\r\n                    let flag = 0;\r\n                    for (let k = 0; k < shapeList.length; k++) {\r\n                      if (shapeList[k].type === \"MultiPolygon\") {\r\n                        let flagM = 0;\r\n                        for (\r\n                          let j = 0;\r\n                          j < shapeList[k].coordinates.length;\r\n                          j++\r\n                        ) {\r\n                          let filterCoordinates = shapeList[k].coordinates[j];\r\n                          if (filterCoordinates[0].length > 2) {\r\n                            filterCoordinates = filterCoordinates[0];\r\n                          }\r\n                          const filterGeometry = {\r\n                            type: \"Polygon\",\r\n                            coordinates: filterCoordinates,\r\n                          };\r\n                          if (!turf.booleanContains(filterGeometry, geometry)) {\r\n                            flagM++;\r\n                          }\r\n                        }\r\n                        if (flagM == shapeList[k].coordinates.length) {\r\n                          flag++;\r\n                        }\r\n                      } else {\r\n                        if (!turf.booleanContains(shapeList[k], geometry)) {\r\n                          flag++;\r\n                        }\r\n                      }\r\n                    }\r\n                    if (flag === shapeList.length) {\r\n                      return false;\r\n                    }\r\n                  }\r\n                  return true;\r\n                } else {\r\n                  for (let i = 0; i < shapeList.length; i++) {\r\n                    if (shapeList[i].type === \"MultiPolygon\") {\r\n                      for (\r\n                        let j = 0;\r\n                        j < shapeList[i].coordinates.length;\r\n                        j++\r\n                      ) {\r\n                        let filterCoordinates = shapeList[i].coordinates[j];\r\n                        if (filterCoordinates[0].length > 2) {\r\n                          filterCoordinates = filterCoordinates[0];\r\n                        }\r\n                        const filterGeometry = {\r\n                          type: \"Polygon\",\r\n                          coordinates: filterCoordinates,\r\n                        };\r\n                        if (\r\n                          feature.geometry.coordinates[0] &&\r\n                          turf.booleanContains(filterGeometry, feature)\r\n                        ) {\r\n                          return true;\r\n                        }\r\n                      }\r\n                    } else {\r\n                      if (\r\n                        feature.geometry.coordinates[0] &&\r\n                        turf.booleanContains(shapeList[i], feature)\r\n                      ) {\r\n                        return true;\r\n                      }\r\n                    }\r\n                  }\r\n                  return false;\r\n                }\r\n              });\r\n\r\n              let ids = result.map(function (feature) {\r\n                if (\r\n                  [\r\n                    \"wellpoints\",\r\n                    \"welllines\",\r\n                    \"Tracked Wells\",\r\n                    \"Tracked Owners\",\r\n                    \"Tags Filter\",\r\n                  ].indexOf(filterLayer) > -1\r\n                ) {\r\n                  return feature.properties.id;\r\n                } else if ([\"permits\", \"rigs\"].indexOf(filterLayer) > -1) {\r\n                  return feature.properties.Id;\r\n                } else if ([\"interest\", \"parcel\"].indexOf(filterLayer) > -1) {\r\n                  return feature.properties.shapeLabel;\r\n                }\r\n                return feature.properties.VIEWID;\r\n              });\r\n\r\n              const onlyUnique = (value, index, self) => {\r\n                return (\r\n                  self.indexOf(value) === index &&\r\n                  (typeof value === \"number\" || typeof value === \"string\")\r\n                );\r\n              };\r\n\r\n              ids = ids.filter(onlyUnique);\r\n\r\n              if (ids.length > 0) {\r\n                if (!filterCustomArray[filterLayer]) {\r\n                  filterCustomArray[filterLayer] = [];\r\n                }\r\n                filterCustomArray[filterLayer].push(ids);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      };\r\n\r\n      if (stateNav.filterBasin && stateNav.filterBasin.length > 0) {\r\n        // let total = stateNav.filterBasin[2].length;\r\n        // filterArray.push(stateNav.filterBasin);\r\n        const { styleLayers, checkedLayers } = stateApp;\r\n        const basinIndex = styleLayers.findIndex(\r\n          (styleLayer) => styleLayer.name === \"Basins\"\r\n        );\r\n\r\n        if (checkedLayers.indexOf(basinIndex) === -1) {\r\n          setStateApp((stateApp) => ({\r\n            ...stateApp,\r\n            tempCheckedLayer: basinIndex,\r\n          }));\r\n        }\r\n        let basinNames = stateNav.basinName;\r\n        if (basinNames) {\r\n          filterCustomArray[\"basin\"] = [\r\n            \"match\",\r\n            [\"get\", \"NAME\"],\r\n            basinNames,\r\n            true,\r\n            false,\r\n          ];\r\n        }\r\n        const filterLayers = [\r\n          \"GLOLeases\",\r\n          \"GLOLeaseLabels\",\r\n          \"GLOUnits\",\r\n          \"GLOUnitLabels\",\r\n          \"wellpoints\",\r\n          \"welllines\",\r\n          \"Tracked Wells\",\r\n          \"Tracked Owners\",\r\n          \"Tags Filter\",\r\n          \"permits\",\r\n          \"rigs\",\r\n          \"interest\",\r\n          \"parcel\",\r\n        ];\r\n        if (stateNav.filterBasin && stateNav.filterBasin.length > 0) {\r\n          const basinShapes = stateNav.filterBasin;\r\n          fitBounds = findBounds(basinShapes);\r\n          filterShapeAction(basinShapes, filterLayers);\r\n        }\r\n        isFilterSet = true;\r\n        geographyFilterCount += stateNav.basinName.length;\r\n        totalCount += stateNav.basinName.length;\r\n      } else {\r\n        setStateApp((stateApp) => ({\r\n          ...stateApp,\r\n          tempCheckedLayer: null,\r\n        }));\r\n      }\r\n\r\n      if (stateNav.filterAOI && stateNav.filterAOI.length > 0) {\r\n        const { userDefinedLayers, checkedUserDefinedLayers } = stateApp;\r\n        const aoiIndex = userDefinedLayers.findIndex(\r\n          (userDefinedLayer) => userDefinedLayer.name === \"Area of Interest\"\r\n        );\r\n\r\n        if (checkedUserDefinedLayers.indexOf(aoiIndex) === -1) {\r\n          setStateApp((stateApp) => ({\r\n            ...stateApp,\r\n            tempCheckedUserDefinedLayer: aoiIndex,\r\n          }));\r\n        }\r\n        let aoiName = stateNav.aoiName;\r\n        if (aoiName) {\r\n          if (!filterCustomArray[\"interest\"]) {\r\n            filterCustomArray[\"interest\"] = [];\r\n          }\r\n          filterCustomArray[\"interest\"].push(aoiName);\r\n        }\r\n        const filterLayers = [\r\n          \"GLOLeases\",\r\n          \"GLOLeaseLabels\",\r\n          \"GLOUnits\",\r\n          \"GLOUnitLabels\",\r\n          \"wellpoints\",\r\n          \"welllines\",\r\n          \"Tracked Wells\",\r\n          \"Tracked Owners\",\r\n          \"Tags Filter\",\r\n          \"permits\",\r\n          \"rigs\",\r\n          \"parcel\",\r\n        ];\r\n        if (stateNav.filterAOI && stateNav.filterAOI.length > 0) {\r\n          const aoiShapes = stateNav.filterAOI;\r\n          fitBounds = findBounds(aoiShapes);\r\n          filterShapeAction(aoiShapes, filterLayers);\r\n        }\r\n        isFilterSet = true;\r\n        geographyFilterCount += stateNav.aoiName.length;\r\n        totalCount += stateNav.aoiName.length;\r\n      } else {\r\n        setStateApp((stateApp) => ({\r\n          ...stateApp,\r\n          tempCheckedUserDefinedLayer: null,\r\n        }));\r\n      }\r\n\r\n      if (stateNav.filterParcel && stateNav.filterParcel.length > 0) {\r\n        const { userDefinedLayers, checkedUserDefinedLayers } = stateApp;\r\n        const parcelIndex = userDefinedLayers.findIndex(\r\n          (userDefinedLayer) => userDefinedLayer.name === \"Parcels\"\r\n        );\r\n\r\n        if (checkedUserDefinedLayers.indexOf(parcelIndex) === -1) {\r\n          setStateApp((stateApp) => ({\r\n            ...stateApp,\r\n            tempCheckedUserDefinedLayer: parcelIndex,\r\n          }));\r\n        }\r\n        let parcelName = stateNav.parcelName;\r\n        if (parcelName) {\r\n          if (!filterCustomArray[\"parcel\"]) {\r\n            filterCustomArray[\"parcel\"] = [];\r\n          }\r\n          filterCustomArray[\"parcel\"].push(parcelName);\r\n        }\r\n        const filterLayers = [\r\n          \"GLOLeases\",\r\n          \"GLOLeaseLabels\",\r\n          \"GLOUnits\",\r\n          \"GLOUnitLabels\",\r\n          \"wellpoints\",\r\n          \"welllines\",\r\n          \"Tracked Wells\",\r\n          \"Tracked Owners\",\r\n          \"Tags Filter\",\r\n          \"permits\",\r\n          \"rigs\",\r\n          \"interest\",\r\n        ];\r\n        if (stateNav.filterParcel && stateNav.filterParcel.length > 0) {\r\n          const parcelShapes = stateNav.filterParcel;\r\n          fitBounds = findBounds(parcelShapes);\r\n          filterShapeAction(parcelShapes, filterLayers);\r\n        }\r\n        isFilterSet = true;\r\n        geographyFilterCount += stateNav.parcelName.length;\r\n        totalCount += stateNav.parcelName.length;\r\n      } else {\r\n        setStateApp((stateApp) => ({\r\n          ...stateApp,\r\n          tempCheckedUserDefinedLayer: null,\r\n        }));\r\n      }\r\n\r\n      if (fitBounds) {\r\n        // console.log(fitBounds);\r\n        setStateApp((stateApp) => ({\r\n          ...stateApp,\r\n          fitBounds,\r\n        }));\r\n      }\r\n\r\n      if (stateNav.filterPlay && stateNav.filterPlay.length > 0) {\r\n        let total = stateNav.filterPlay[2].length;\r\n        filterArray.push(stateNav.filterPlay);\r\n        isFilterSet = true;\r\n        geographyFilterCount += total;\r\n        totalCount += total;\r\n      }\r\n\r\n      if (\r\n        stateNav.filterPermitDateRange &&\r\n        stateNav.filterPermitDateRange.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterPermitDateRange);\r\n        isFilterSet = true;\r\n        totalCount += 1;\r\n        wellFilterCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterSpudDateRange &&\r\n        stateNav.filterSpudDateRange.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterSpudDateRange);\r\n        isFilterSet = true;\r\n        totalCount += 1;\r\n        wellFilterCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterCompletetionDateRange &&\r\n        stateNav.filterCompletetionDateRange.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterCompletetionDateRange);\r\n        isFilterSet = true;\r\n        totalCount += 1;\r\n        wellFilterCount += 1;\r\n      }\r\n      if (\r\n        stateNav.filterFirstProdDateRange &&\r\n        stateNav.filterFirstProdDateRange.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterFirstProdDateRange);\r\n        isFilterSet = true;\r\n        totalCount += 1;\r\n        wellFilterCount += 1;\r\n      }\r\n      if (stateNav.filterGeography && stateNav.filterGeography.length > 0) {\r\n        filterArray.push(stateNav.filterGeography);\r\n        isFilterSet = true;\r\n        totalCount += 1;\r\n        geographyFilterCount += stateNav.filterGeography.length - 1;\r\n      }\r\n\r\n      if (\r\n        stateNav.filterOwnerWellInterestSum &&\r\n        stateNav.filterOwnerWellInterestSum.length > 0\r\n      ) {\r\n        filterArray.push(stateNav.filterOwnerWellInterestSum);\r\n        isFilterSet = true;\r\n        totalCount += 1;\r\n        ownershipFilterCount += 1;\r\n      }\r\n\r\n      if (stateNav.filterDrawing && stateNav.filterDrawing.length > 0) {\r\n        isFilterSet = true;\r\n        totalCount += 1;\r\n        geographyFilterCount += 1;\r\n\r\n        const filterLayers = [\r\n          \"GLOLeases\",\r\n          \"GLOLeaseLabels\",\r\n          \"GLOUnits\",\r\n          \"GLOUnitLabels\",\r\n          \"wellpoints\",\r\n          \"welllines\",\r\n          \"Tracked Wells\",\r\n          \"Tracked Owners\",\r\n          \"Tags Filter\",\r\n          \"permits\",\r\n          \"rigs\",\r\n          \"interest\",\r\n          \"parcel\",\r\n        ];\r\n        const filterFeature = stateNav.filterDrawing[1];\r\n        filterShapeAction([filterFeature], filterLayers);\r\n      }\r\n\r\n      setStateNav((state) => ({\r\n        ...state,\r\n        productionFilterCount: productionFilterCount,\r\n        geographyFilterCount: geographyFilterCount,\r\n        ownershipFilterCount: ownershipFilterCount,\r\n        wellFilterCount: wellFilterCount,\r\n        totalFilterCount: totalCount,\r\n        valuationFilterCount: valuationFilterCount,\r\n        tagFilterCount: tagFilterCount,\r\n        aiFilterCount: aiFilterCount,\r\n      }));\r\n\r\n      if (isFilterSet) {\r\n        const mergeArrays = (arrays) => {\r\n          let jointArray = [];\r\n\r\n          arrays.forEach((array) => {\r\n            jointArray = [...jointArray, ...array];\r\n          });\r\n          return Array.from(new Set([...jointArray]));\r\n        };\r\n        filterArray.unshift(\"all\");\r\n        if (filterCustomArray[\"wellpoints\"]) {\r\n          map.setFilter(\"wellpoints\", [\r\n            ...filterArray,\r\n            [\r\n              \"match\",\r\n              [\"get\", \"id\"],\r\n              mergeArrays(filterCustomArray[\"wellpoints\"]),\r\n              true,\r\n              false,\r\n            ],\r\n          ]);\r\n        } else {\r\n          map.setFilter(\"wellpoints\", filterArray);\r\n        }\r\n        if (filterCustomArray[\"welllines\"]) {\r\n          map.setFilter(\"welllines\", [\r\n            ...filterArray,\r\n            [\r\n              \"match\",\r\n              [\"get\", \"id\"],\r\n              mergeArrays(filterCustomArray[\"welllines\"]),\r\n              true,\r\n              false,\r\n            ],\r\n          ]);\r\n        } else {\r\n          map.setFilter(\"welllines\", filterArray);\r\n        }\r\n        map.setFilter(\"wellsHeatmapBoe\", [\">\", [\"get\", \"boeTotal\"], 0]);\r\n        map.setFilter(\"wellsHeatmapLast12\", [\r\n          \">\",\r\n          [\"get\", \"lastTwelveMonthBOE\"],\r\n          0,\r\n        ]);\r\n        map.setFilter(\"wellsHeatmapIP90Oil\", [\">\", [\"get\", \"ipOil\"], 0]);\r\n        map.setFilter(\"wellsHeatmapIP90Gas\", [\">\", [\"get\", \"ipGas\"], 0]);\r\n        map.setFilter(\"wellsHeatmapRecentlyDrilled\", [\r\n          \">\",\r\n          [\"get\", \"daysSinceDrilled\"],\r\n          0,\r\n        ]);\r\n        map.setFilter(\"wellsHeatmapRecentlyCompleted\", [\r\n          \">\",\r\n          [\"get\", \"daysSinceCompletion\"],\r\n          0,\r\n        ]);\r\n\r\n        const filterLayers = [\r\n          \"GLOLeaseLabels\",\r\n          \"GLOUnitLabels\",\r\n          \"Tracked Wells\",\r\n          \"Tracked Owners\",\r\n          \"Tags Filter\",\r\n          \"interest\",\r\n          \"parcel\",\r\n          \"permits\",\r\n          \"rigs\",\r\n        ];\r\n        filterLayers.forEach((filterLayer) => {\r\n          if (filterCustomArray[filterLayer]) {\r\n            if (\r\n              [\"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\"].indexOf(\r\n                filterLayer\r\n              ) > -1\r\n            ) {\r\n              map.setFilter(filterLayer, [\r\n                \"match\",\r\n                [\"get\", \"id\"],\r\n                mergeArrays(filterCustomArray[filterLayer]),\r\n                true,\r\n                false,\r\n              ]);\r\n            } else if ([\"permits\", \"rigs\"].indexOf(filterLayer) > -1) {\r\n              map.setFilter(filterLayer, [\r\n                \"match\",\r\n                [\"get\", \"Id\"],\r\n                mergeArrays(filterCustomArray[filterLayer]),\r\n                true,\r\n                false,\r\n              ]);\r\n            } else if ([\"interest\", \"parcel\"].indexOf(filterLayer) > -1) {\r\n              map.setFilter(filterLayer, [\r\n                \"match\",\r\n                [\"get\", \"shapeLabel\"],\r\n                mergeArrays(filterCustomArray[filterLayer]),\r\n                true,\r\n                false,\r\n              ]);\r\n              map.setFilter(filterLayer + \"_labels\", [\r\n                \"match\",\r\n                [\"get\", \"shapeLabel\"],\r\n                mergeArrays(filterCustomArray[filterLayer]),\r\n                true,\r\n                false,\r\n              ]);\r\n            } else {\r\n              const baseLayer = filterLayer.replace(\"Labels\", \"s\");\r\n              if (filterCustomArray[baseLayer]) {\r\n                map.setFilter(filterLayer, [\r\n                  \"match\",\r\n                  [\"get\", \"VIEWID\"],\r\n                  mergeArrays(filterCustomArray[baseLayer]),\r\n                  true,\r\n                  false,\r\n                ]);\r\n                map.setFilter(baseLayer, [\r\n                  \"match\",\r\n                  [\"get\", \"VIEWID\"],\r\n                  mergeArrays(filterCustomArray[baseLayer]),\r\n                  true,\r\n                  false,\r\n                ]);\r\n              } else {\r\n                map.setFilter(filterLayer, [\r\n                  \"match\",\r\n                  [\"get\", \"VIEWID\"],\r\n                  mergeArrays(filterCustomArray[filterLayer]),\r\n                  true,\r\n                  false,\r\n                ]);\r\n                map.setFilter(baseLayer, [\r\n                  \"match\",\r\n                  [\"get\", \"VIEWID\"],\r\n                  mergeArrays(filterCustomArray[filterLayer]),\r\n                  true,\r\n                  false,\r\n                ]);\r\n              }\r\n            }\r\n          } else {\r\n            const layer = map.getLayer(filterLayer);\r\n            if (Object.keys(filterCustomArray).length > 0) {\r\n              console.log(filterLayer, filterCustomArray);\r\n              if (layer) {\r\n                if (\r\n                  [\"Tracked Wells\", \"Tracked Owners\", \"Tags Filter\"].indexOf(\r\n                    filterLayer\r\n                  ) > -1\r\n                ) {\r\n                  map.setFilter(filterLayer, [\r\n                    \"match\",\r\n                    [\"get\", \"id\"],\r\n                    \"-1\",\r\n                    true,\r\n                    false,\r\n                  ]);\r\n                } else if ([\"permits\", \"rigs\"].indexOf(filterLayer) > -1) {\r\n                  map.setFilter(filterLayer, [\r\n                    \"match\",\r\n                    [\"get\", \"Id\"],\r\n                    \"-1\",\r\n                    true,\r\n                    false,\r\n                  ]);\r\n                } else if ([\"interest\", \"parcel\"].indexOf(filterLayer) > -1) {\r\n                  map.setFilter(filterLayer, [\r\n                    \"match\",\r\n                    [\"get\", \"shapeLabel\"],\r\n                    \"-1\",\r\n                    true,\r\n                    false,\r\n                  ]);\r\n                  map.setFilter(filterLayer + \"_labels\", [\r\n                    \"match\",\r\n                    [\"get\", \"shapeLabel\"],\r\n                    \"-1\",\r\n                    true,\r\n                    false,\r\n                  ]);\r\n                } else {\r\n                  const baseLayer = filterLayer.replace(\"Labels\", \"s\");\r\n                  map.setFilter(filterLayer, [\r\n                    \"match\",\r\n                    [\"get\", \"VIEWID\"],\r\n                    -1,\r\n                    true,\r\n                    false,\r\n                  ]);\r\n                  map.setFilter(baseLayer, [\r\n                    \"match\",\r\n                    [\"get\", \"VIEWID\"],\r\n                    -1,\r\n                    true,\r\n                    false,\r\n                  ]);\r\n                }\r\n              }\r\n            } else {\r\n              const layer = map.getLayer(filterLayer);\r\n              if (layer) {\r\n                map.setFilter(filterLayer, null);\r\n                if (map.getLayer(filterLayer + \"_labels\")) {\r\n                  map.setFilter(filterLayer + \"_labels\", null);\r\n                }\r\n                if (map.getLayer(filterLayer.replace(\"Labels\", \"s\"))) {\r\n                  map.setFilter(filterLayer.replace(\"Labels\", \"s\"), null);\r\n                }\r\n                if (layer.type == \"circle\" && layer.id != \"wellpoints\") {\r\n                  if (layer.source.includes(\"_filter\")) {\r\n                    const clusterSource = layer.source.replace(\"_filter\", \"\");\r\n                    setLayerSource(layer.id, clusterSource);\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        });\r\n        if (filterCustomArray[\"basin\"]) {\r\n          if (filterCustomArray[\"basin\"].length == 1) {\r\n            map.setFilter(\"basinLayer\", filterCustomArray[\"basin\"][0]);\r\n            map.setFilter(\"basinLabels\", filterCustomArray[\"basin\"][0]);\r\n          } else {\r\n            map.setFilter(\"basinLayer\", filterCustomArray[\"basin\"]);\r\n            map.setFilter(\"basinLabels\", filterCustomArray[\"basin\"]);\r\n          }\r\n        } else {\r\n          map.setFilter(\"basinLayer\", null);\r\n          map.setFilter(\"basinLabels\", null);\r\n        }\r\n      } else {\r\n        map.setFilter(\"wellpoints\", null);\r\n        map.setFilter(\"welllines\", null);\r\n        map.setFilter(\"GLOLeases\", null);\r\n        map.setFilter(\"GLOLeaseLabels\", null);\r\n        map.setFilter(\"GLOUnits\", null);\r\n        map.setFilter(\"GLOUnitLabels\", null);\r\n        map.setFilter(\"basinLayer\", null);\r\n        map.setFilter(\"basinLabels\", null);\r\n        map.setFilter(\"interest\", null);\r\n        map.setFilter(\"interest_labels\", null);\r\n        map.setFilter(\"parcel\", null);\r\n        map.setFilter(\"parcel_labels\", null);\r\n        map.setFilter(\"wellsHeatmapBoe\", [\">\", [\"get\", \"boeTotal\"], 0]);\r\n        map.setFilter(\"wellsHeatmapLast12\", [\r\n          \">\",\r\n          [\"get\", \"lastTwelveMonthBOE\"],\r\n          0,\r\n        ]);\r\n        map.setFilter(\"wellsHeatmapIP90Oil\", [\">\", [\"get\", \"ipOil\"], 0]);\r\n        map.setFilter(\"wellsHeatmapIP90Gas\", [\">\", [\"get\", \"ipGas\"], 0]);\r\n        map.setFilter(\"wellsHeatmapRecentlyDrilled\", [\r\n          \">\",\r\n          [\"get\", \"daysSinceDrilled\"],\r\n          0,\r\n        ]);\r\n        map.setFilter(\"wellsHeatmapRecentlyCompleted\", [\r\n          \">\",\r\n          [\"get\", \"daysSinceCompletion\"],\r\n          0,\r\n        ]);\r\n\r\n        const filterLayers = [\r\n          \"Tracked Wells\",\r\n          \"Tracked Owners\",\r\n          \"Tags Filter\",\r\n          \"permits\",\r\n          \"rigs\",\r\n        ];\r\n        filterLayers.forEach((filterLayer) => {\r\n          const layer = map.getLayer(filterLayer);\r\n          if (layer) {\r\n            map.setFilter(filterLayer, null);\r\n            if (layer.type == \"circle\") {\r\n              if (layer.source.includes(\"_filter\")) {\r\n                const clusterSource = layer.source.replace(\"_filter\", \"\");\r\n                setLayerSource(layer.id, clusterSource);\r\n              }\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n    console.log(\"filters applied\");\r\n  }, [\r\n    map,\r\n    setStateNav,\r\n    stateNav.defaultOn,\r\n    stateNav.filterAllInterestTypes,\r\n    stateNav.filterAllOwnershipTypes,\r\n    stateNav.filterBasin,\r\n    stateNav.filterAOI,\r\n    stateNav.filterParcel,\r\n    stateNav.filterCompletetionDateRange,\r\n    stateNav.filterCumulativeGas,\r\n    stateNav.filterCumulativeOil,\r\n    stateNav.filterCumulativeWater,\r\n    stateNav.filterFirstMonthGas,\r\n    stateNav.filterFirstMonthOil,\r\n    stateNav.filterFirstMonthWater,\r\n    stateNav.filterFirstProdDateRange,\r\n    stateNav.filterFirstSixMonthGas,\r\n    stateNav.filterFirstSixMonthOil,\r\n    stateNav.filterFirstSixMonthWater,\r\n    stateNav.filterFirstThreeMonthGas,\r\n    stateNav.filterFirstThreeMonthOil,\r\n    stateNav.filterFirstThreeMonthWater,\r\n    stateNav.filterFirstTwelveMonthGas,\r\n    stateNav.filterFirstTwelveMonthOil,\r\n    stateNav.filterFirstTwelveMonthWater,\r\n    stateNav.filterGeography,\r\n    stateNav.filterLastMonthGas,\r\n    stateNav.filterLastMonthOil,\r\n    stateNav.filterLastMonthWater,\r\n    stateNav.filterLastSixMonthGas,\r\n    stateNav.filterLastSixMonthOil,\r\n    stateNav.filterLastSixMonthWater,\r\n    stateNav.filterLastThreeMonthGas,\r\n    stateNav.filterLastThreeMonthOil,\r\n    stateNav.filterLastThreeMonthWater,\r\n    stateNav.filterLastTwelveMonthGas,\r\n    stateNav.filterLastTwelveMonthOil,\r\n    stateNav.filterLastTwelveMonthWater,\r\n    stateNav.filterOperator,\r\n    stateNav.filterOwnerCount,\r\n    stateNav.filterPermitDateRange,\r\n    stateNav.filterPlay,\r\n    stateNav.filterSpudDateRange,\r\n    stateNav.filterWellProfile,\r\n    stateNav.filterWellStatus,\r\n    stateNav.filterWellType,\r\n    stateNav.filterNoOwnerCount,\r\n    stateNav.filterHasOwners,\r\n    stateNav.filterHasOwnerCount,\r\n    stateNav.filterTrackedWells,\r\n    stateNav.filterTrackedOwners,\r\n    stateNav.filterOwnerConfidence,\r\n    stateNav.filterOwnerWellInterestSum,\r\n    stateNav.filterWellAppraisal,\r\n    stateNav.filterOwnerAppraisals,\r\n    stateNav.filterDrawing,\r\n    stateNav.filterTags,\r\n    stateNav.selectedTags,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    //sets style of map when changed in Map Controls\r\n    if (stateApp.selectedLayerId && map) {\r\n      if (stateApp.selectedLayerId) {\r\n        map.setStyle(stateApp.selectedLayerId);\r\n      }\r\n    }\r\n  }, [map, stateApp.selectedLayerId]);\r\n\r\n  const createPopUp = useCallback(\r\n    (currentFeature) => {\r\n      let coordinates = [currentFeature.longitude, currentFeature.latitude];\r\n      let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\r\n      if (popUps[0]) popUps[0].remove();\r\n      //console.log(popUps);\r\n\r\n      let popup = new mapboxgl.Popup({ offset: 0, closeOnClick: false })\r\n        .setLngLat(coordinates)\r\n        .setMaxWidth(\"none\")\r\n        .setHTML(`<div id=\"popupContainer\"></div>`)\r\n        .addTo(map);\r\n\r\n      // //show wellcard in popup Portal\r\n      setStateApp((state) => ({ ...state, popupOpen: true }));\r\n      //setStateApp((state) => ({ ...state, wellSelected: true }));\r\n      //setStateApp((state) => ({ ...state, wellSelectedCoordinates: [currentFeature.longitude, currentFeature.latitude] }));\r\n      handleOpenExpandableCard();\r\n    },\r\n    [map, setStateApp]\r\n  );\r\n\r\n  const createFilterPopup = useCallback(\r\n    (filterFeature) => {\r\n      const { geometry } = filterFeature;\r\n      const coordinates = geometry.coordinates;\r\n      let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\r\n      if (popUps[0]) popUps[0].remove();\r\n      if (coordinates.length > 0) {\r\n        const minLatitude = coordinates.reduce((a, b) =>\r\n          a[0] < b[0] ? a : b\r\n        )[0][0];\r\n        const maxLongitude = coordinates.reduce((a, b) =>\r\n          a[1] > b[1] ? a : b\r\n        )[0][1];\r\n\r\n        let popupCoordinate = [minLatitude, maxLongitude];\r\n        console.log(popupCoordinate);\r\n\r\n        let popup = new mapboxgl.Popup({ offset: 0, closeOnClick: false })\r\n          .setLngLat(popupCoordinate)\r\n          .setMaxWidth(\"none\")\r\n          .setHTML(`<div id=\"filterPopupContainer\"></div>`)\r\n          .addTo(map);\r\n\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          popupOpen: true,\r\n          filterFeature: filterFeature,\r\n        }));\r\n      }\r\n    },\r\n    [map, setStateApp]\r\n  );\r\n\r\n  const createUDPopUp = useCallback(\r\n    (currentFeature) => {\r\n      console.log(currentFeature.shapeCenter);\r\n      let coordinates = currentFeature.shapeCenter;\r\n      if (typeof currentFeature.shapeCenter === \"string\") {\r\n        coordinates = JSON.parse(currentFeature.shapeCenter);\r\n      }\r\n      let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\r\n      if (popUps[0]) popUps[0].remove();\r\n\r\n      let popup = new mapboxgl.Popup({ offset: 0, closeOnClick: false })\r\n        .setLngLat(coordinates)\r\n        .setMaxWidth(\"none\")\r\n        .setHTML(`<div id=\"popupContainer\"></div>`)\r\n        .addTo(map);\r\n\r\n      setStateApp((state) => ({ ...state, popupOpen: true }));\r\n    },\r\n    [map, setStateApp]\r\n  );\r\n\r\n  useEffect(() => {\r\n    console.log(\"wellSelected\", stateApp.wellSelected);\r\n    console.log(\"wellSelectedCoordinates\", stateApp.wellSelectedCoordinates);\r\n\r\n    // if( map\r\n    //     && stateApp.wellSelected === false\r\n    //     ){\r\n    //       map.removeLayer('well-point');\r\n    //       map.removeSource('well-select-point')\r\n    //     }\r\n\r\n    if (map && stateApp.wellSelectedCoordinates) {\r\n      if (map.getLayer(\"well-point\")) {\r\n        map.removeLayer(\"well-point\");\r\n        map.removeSource(\"well-select-point\");\r\n      }\r\n\r\n      if (stateApp.wellSelectedCoordinates.length > 0) {\r\n        map.addSource(\"well-select-point\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: [\r\n              {\r\n                type: \"Feature\",\r\n                geometry: {\r\n                  type: \"Point\",\r\n                  coordinates: stateApp.wellSelectedCoordinates,\r\n                },\r\n              },\r\n            ],\r\n          },\r\n        });\r\n\r\n        map.addLayer({\r\n          id: \"well-point\",\r\n          type: \"circle\",\r\n          source: \"well-select-point\",\r\n          paint: {\r\n            \"circle-radius\": 5,\r\n            \"circle-color\": \"yellow\",\r\n          },\r\n        });\r\n      }\r\n    }\r\n  }, [stateApp.wellSelectedCoordinates]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (\r\n        map &&\r\n        stateApp.selectedWellId &&\r\n        stateApp.wellSelectedCoordinates &&\r\n        stateApp.wellSelectedCoordinates.length > 0 &&\r\n        !stateApp.selectedWell\r\n      ) {\r\n        let point = map.project(stateApp.wellSelectedCoordinates);\r\n\r\n        var bbox = [\r\n          [point.x - 10, point.y - 10],\r\n          [point.x + 10, point.y + 10],\r\n        ];\r\n        let features = map.queryRenderedFeatures(bbox, {\r\n          layers: [\"wellpoints\"],\r\n        });\r\n        let currentFeature = features.find(\r\n          (element) =>\r\n            element.properties.id.toLowerCase() == stateApp.selectedWellId\r\n        );\r\n        console.log(\"current feature\", currentFeature);\r\n\r\n        if (!currentFeature) {\r\n          features = map.querySourceFeatures(\"composite\", {\r\n            sourceLayer: \"wellPoints\",\r\n            filter: [\"in\", \"id\", stateApp.selectedWellId],\r\n          });\r\n          currentFeature = features.find(\r\n            (element) =>\r\n              element.properties.id.toLowerCase() == stateApp.selectedWellId\r\n          );\r\n        }\r\n\r\n        if (!currentFeature) {\r\n          const endpoint = `https://api.mapbox.com/v4/${wellsTileset}/tilequery/${stateApp.wellSelectedCoordinates.join()}.json?radius=1&limit=5&dedupe&layers=wellPoints&access_token=pk.eyJ1IjoibTFuZXJhbCIsImEiOiJjanYycGJxbG8yN3JsM3lsYTdnMXZoeHh1In0.tTNECYKDPtcrzivWTiZcIQ`;\r\n\r\n          const headers = new Headers();\r\n          headers.append(\"Content-Type\", \"application/json\");\r\n          headers.append(\"api-key\", \"1AE3C6346B38CEB007191D51CFDDFF65\");\r\n\r\n          const options = {\r\n            method: \"GET\",\r\n            headers: headers,\r\n          };\r\n\r\n          console.log(\r\n            \"request made to lod2019-index search at: \" + new Date().toString()\r\n          );\r\n\r\n          await fetch(endpoint, options)\r\n            .then((response) => response.json())\r\n            .then((response) => {\r\n              console.log(response);\r\n              features = response.features;\r\n              currentFeature = features.find(\r\n                (element) =>\r\n                  element.properties.id.toLowerCase() == stateApp.selectedWellId\r\n              );\r\n            })\r\n            .catch((error) => {\r\n              console.log(error);\r\n            });\r\n\r\n          console.log(\"current feature\", currentFeature);\r\n        }\r\n\r\n        if (currentFeature) {\r\n          let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\r\n          if (popUps[0]) popUps[0].remove();\r\n          setStateApp((state) => ({\r\n            ...state,\r\n            selectedWell: currentFeature.properties,\r\n          }));\r\n\r\n          // map.fire('click', { lngLat: stateApp.wellSelectedCoordinates, point: point, originalEvent: {} })\r\n          createPopUp(currentFeature.properties);\r\n          map.resize();\r\n        }\r\n      }\r\n    })();\r\n  }, [stateApp.wellSelectedCoordinates]);\r\n\r\n  useEffect(() => {\r\n    const req = new Request(\r\n      \"https://api.mapbox.com/styles/v1/m1neral?access_token=sk.eyJ1IjoibTFuZXJhbCIsImEiOiJjazdkbGg1YXAwMjVqM2VwanZzbm95Z2dvIn0.cdoQNZU42xxbybyGxlBNkw\",\r\n      {\r\n        method: \"GET\",\r\n        mode: \"cors\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n          \"Cache-Control\": \"max-age=0\",\r\n        },\r\n      }\r\n    );\r\n\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n\r\n    getPermits();\r\n    getRigs({\r\n      variables: {\r\n        offset: 0,\r\n        amount: 500,\r\n      },\r\n    });\r\n\r\n    fetch(req, { signal: signal })\r\n      .then((results) => results.json())\r\n      .then((data) => {\r\n        setMapStyles(data.slice(0, 5));\r\n      });\r\n\r\n    setStateApp((state) => ({\r\n      ...state,\r\n      popupOpen: false,\r\n      expandedCard: false,\r\n      selectedUserDefinedLayer: undefined,\r\n    }));\r\n\r\n    //clean up\r\n    return function cleanup() {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      setStateApp((stateApp) => ({\r\n        ...stateApp,\r\n        mapVars: {\r\n          ...stateApp.mapVars,\r\n          zoom: map.getZoom(),\r\n          center: map.getCenter(),\r\n          pitch: map.getPitch(),\r\n          bearing: map.getBearing(),\r\n        },\r\n      }));\r\n\r\n      setMap(null);\r\n    }\r\n  }, [stateApp.mapVars.styleId]);\r\n\r\n  useLayoutEffect(() => {\r\n    if (stateApp.popupOpen === false) {\r\n      let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\r\n      if (popUps[0]) popUps[0].remove();\r\n\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        wellSelectedCoordinates: [],\r\n        selectedWell: null,\r\n      }));\r\n    }\r\n  }, [stateApp.popupOpen]);\r\n\r\n  function getIndex(value, arr, prop) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i][prop] === value) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1; //to handle the case where the value doesn't exist\r\n  }\r\n\r\n  const wellMouseMove = (e) => {\r\n    map.getCanvas().style.cursor = \"pointer\";\r\n  };\r\n\r\n  const wellMouseLeave = (e) => {\r\n    map.getCanvas().style.cursor = \"\";\r\n  };\r\n\r\n  const mapMouseMove = (e) => {\r\n    // e.lngLat is the longitude, latitude geographical position of the event\r\n    let coordinates = e.lngLat.wrap();\r\n    setLng(coordinates.lng);\r\n    setLat(coordinates.lat);\r\n  };\r\n\r\n  useEffect(() => {\r\n    console.log(\"map ue start\");\r\n    if (mapStyles.length > 0) {\r\n      // const SET_INITIAL_MAP_STYLE = \"Satellite\";\r\n\r\n      const initializeMap = ({ setMap, mapEl, setStateApp, setDraw }) => {\r\n        let id = mapEl.current.id;\r\n\r\n        var index = getIndex(stateApp.mapVars.styleId, mapStyles, \"name\");\r\n\r\n        console.log(\"tileset api loaded - style selected\", stateApp.mapStyle);\r\n        console.log(stateApp.mapVars);\r\n        console.log(mapStyles[index]);\r\n        console.log(mapStyles);\r\n\r\n        const newMap = new mapboxgl.Map({\r\n          container: `${id}`,\r\n          style: \"mapbox://styles/m1neral/\" + mapStyles[index].id,\r\n          center: stateApp.mapVars.center,\r\n          zoom: stateApp.mapVars.zoom,\r\n          pitch: stateApp.mapVars.pitch,\r\n          bearing: stateApp.mapVars.bearing,\r\n        });\r\n\r\n        console.log(\r\n          `Setting wellsTileset: ${mapStyles[index].sources.composite.url\r\n            .split(\",\")\r\n            .find((element) => element.indexOf(\"m1neral.wells\") > -1)\r\n            .replace(\"mapbox://\", \"\")}`\r\n        );\r\n        setwellsTileset(\r\n          mapStyles[index].sources.composite.url\r\n            .split(\",\")\r\n            .find((element) => element.indexOf(\"m1neral.wells\") > -1)\r\n            .replace(\"mapbox://\", \"\")\r\n        );\r\n\r\n        console.log(\"new map generated\");\r\n\r\n        /// optimized interactions w/ map\r\n        newMap.scrollZoom.enable();\r\n        newMap.dragPan.enable();\r\n        newMap.dragRotate.enable();\r\n        newMap.keyboard.enable();\r\n        newMap.doubleClickZoom.disable();\r\n        newMap.boxZoom.enable();\r\n        newMap.touchZoomRotate.enable();\r\n\r\n        newMap.addControl(\r\n          new mapboxgl.ScaleControl({\r\n            maxWidth: 80,\r\n            unit: \"imperial\",\r\n          }),\r\n          \"bottom-right\"\r\n        );\r\n\r\n        newMap.addControl(new mapboxgl.NavigationControl(), \"bottom-right\");\r\n\r\n        newMap.addControl(new mapboxgl.FullscreenControl(), \"bottom-right\");\r\n\r\n        var geoLocate = new mapboxgl.GeolocateControl({\r\n          positionOptions: {\r\n            enableHighAccuracy: true,\r\n          },\r\n          fitBoundsOptions: {\r\n            maxZoom: 24,\r\n          },\r\n          trackUserLocation: false,\r\n          showAccuracyCircle: true,\r\n          showUserLocation: true,\r\n        });\r\n        newMap.addControl(geoLocate, \"bottom-right\");\r\n        geoLocate.on(\"geolocate\", function (e) {\r\n          newMap.flyTo({\r\n            center: [e.coords.longitude, e.coords.latitude],\r\n            zoom: 14,\r\n            pitch: 80,\r\n            bearing: 20,\r\n            speed: 0.4,\r\n          });\r\n        });\r\n\r\n        let Draw = new MapboxDraw({\r\n          displayControlsDefault: false,\r\n          userProperties: true,\r\n          modes: {\r\n            ...MapboxDraw.modes,\r\n            draw_circle: CircleMode,\r\n            drag_circle: DragCircleMode,\r\n            direct_select: DirectMode,\r\n            simple_select: SimpleSelectMode,\r\n            draw_rectangle: DrawRectangle,\r\n          },\r\n        });\r\n        newMap.addControl(Draw);\r\n        setStateApp({ ...stateApp, map: newMap, draw: Draw });\r\n\r\n        newMap.on(\"load\", function (e) {\r\n          setDraw(Draw);\r\n          setMap(newMap);\r\n          console.log(\"set new map complete\", newMap.loaded());\r\n        });\r\n      };\r\n\r\n      if (!map) {\r\n        console.log(\"initialize map start\");\r\n        initializeMap({ setMap, mapEl, setStateApp, setDraw });\r\n        console.log(\"initialize map finish\");\r\n      } else {\r\n        console.log(\"map extra components start\");\r\n\r\n        // additional map interactions\r\n        // for some reason these do not work when initializing but do here\r\n        // map.boxZoom.enable();\r\n        // map.touchZoomRotate.enable();\r\n\r\n        const selectedLayerIntereaction = stateApp.checkedLayersInteraction.slice(\r\n          0\r\n        );\r\n        const wellIndex = stateApp.styleLayers.findIndex(\r\n          (layer) => layer.name === \"Wells\"\r\n        );\r\n\r\n        const well = stateApp.styleLayers[wellIndex];\r\n\r\n        if (well.wellMouseMove) {\r\n          map.off(\"mousemove\", \"wellpoints\", well.wellMouseMove);\r\n          map.off(\"mousemove\", \"welllines\", well.wellMouseMove);\r\n        }\r\n\r\n        if (well.wellMouseLeave) {\r\n          map.off(\"mouseleave\", \"wellpoints\", well.wellMouseLeave);\r\n          map.off(\"mouseleave\", \"welllines\", well.wellMouseLeave);\r\n        }\r\n\r\n        if (\r\n          stateApp.checkedLayersInteraction.length > 0 &&\r\n          selectedLayerIntereaction.indexOf(wellIndex) > -1\r\n        ) {\r\n          map.on(\"mousemove\", \"wellpoints\", wellMouseMove);\r\n\r\n          map.on(\"mouseleave\", \"wellpoints\", wellMouseLeave);\r\n\r\n          map.on(\"mousemove\", \"welllines\", wellMouseMove);\r\n\r\n          map.on(\"mouseleave\", \"welllines\", wellMouseLeave);\r\n\r\n          const wellcp = { ...well };\r\n          wellcp.wellMouseLeave = wellMouseLeave;\r\n          wellcp.wellMouseMove = wellMouseMove;\r\n\r\n          const styleLayers = stateApp.styleLayers.slice(0);\r\n          styleLayers[wellIndex] = wellcp;\r\n\r\n          setStateApp({\r\n            ...stateApp,\r\n            styleLayers,\r\n          });\r\n        }\r\n        map.off(\"mousemove\", mapMouseMove);\r\n\r\n        map.on(\"mousemove\", mapMouseMove);\r\n\r\n        console.log(\"map extra components complete\");\r\n      }\r\n    }\r\n  }, [\r\n    map,\r\n    setStateApp,\r\n    setStateMapControls,\r\n    mapStyles,\r\n    stateApp.checkedLayersInteraction,\r\n  ]);\r\n\r\n  // Use effect for removing shape filter\r\n  useEffect(() => {\r\n    if (stateNav.filterDrawing && stateNav.filterDrawing.length === 0) {\r\n      if (draw) draw.delete(drawingFilterFeatureId);\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        drawingMode: null,\r\n        filterDrawing: stateNav.filterDrawing,\r\n        filterFeatureId: null,\r\n      }));\r\n      setDrawingFilterFeatureId(null);\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        popupOpen: false,\r\n      }));\r\n    }\r\n  }, [stateNav.filterDrawing]);\r\n\r\n  // Use effect for adding shape filter\r\n  useEffect(() => {\r\n    function drawCreateListener(e) {\r\n      if (stateNav.drawingMode !== null) {\r\n        let feature = e.features[0];\r\n\r\n        //delete feature, and create a copy with custom id\r\n        draw.delete(feature.id);\r\n        feature.id = stateNav.filterFeatureId;\r\n        draw.add(feature);\r\n\r\n        createFilterPopup(feature, map);\r\n\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          drawingMode: null,\r\n          filterDrawing: [\"within\", feature],\r\n        }));\r\n        map.off(\"draw.create\", drawCreateListener);\r\n      }\r\n    }\r\n\r\n    function drawUpdateListener(e) {\r\n      if (\r\n        e.features[0].id.includes(\"draw_polygon\") ||\r\n        e.features[0].id.includes(\"drag_circle\") ||\r\n        e.features[0].id.includes(\"draw_rectangle\")\r\n      ) {\r\n        let feature = e.features[0];\r\n\r\n        createFilterPopup(feature, map);\r\n\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterDrawing: [\"within\", feature],\r\n        }));\r\n      }\r\n    }\r\n\r\n    if (stateNav.drawingMode) {\r\n      // delete previous filter feature\r\n      stateApp.draw.delete(drawingFilterFeatureId);\r\n\r\n      setDrawingFilterFeatureId(stateNav.filterFeatureId);\r\n      stateApp.draw.changeMode(stateNav.drawingMode);\r\n      if (map) {\r\n        map.on(\"draw.create\", drawCreateListener);\r\n        map.on(\"draw.update\", drawUpdateListener);\r\n      }\r\n    }\r\n  }, [stateNav.filterFeatureId]);\r\n\r\n  useEffect(() => {\r\n    if (draw && stateNav.filterDrawing && stateNav.filterDrawing.length == 2) {\r\n      console.log(\"initialize filter draw\");\r\n      const feature = stateNav.filterDrawing[1];\r\n      setDrawingFilterFeatureId(feature.id);\r\n      draw.delete(feature.id);\r\n      draw.add(feature);\r\n    }\r\n  }, [draw]);\r\n\r\n  useEffect(() => {\r\n    if (map) {\r\n      return () => {\r\n        var list = document.getElementById(\"searchBar\");\r\n        if (list && list.childNodes && list.childNodes.length > 0) {\r\n          list.removeChild(list.childNodes[0]);\r\n        }\r\n        var zoom = map.getZoom();\r\n        var center = map.getCenter();\r\n        var pitch = map.getPitch();\r\n        var bearing = map.getBearing();\r\n\r\n        console.log(stateApp.mapVars);\r\n\r\n        setStateApp((stateApp) => ({\r\n          ...stateApp,\r\n          mapVars: {\r\n            ...stateApp.mapVars,\r\n            zoom: zoom,\r\n            center: center,\r\n            pitch: pitch,\r\n            bearing: bearing,\r\n          },\r\n        }));\r\n\r\n        console.log(\"save map state variables\");\r\n        console.log(stateApp.mapVars);\r\n\r\n        var mapList = document.getElementById(\"map\");\r\n        console.log(mapList.childNodes);\r\n        if (mapList.childNodes.length > 1) {\r\n          mapList.removeChild(mapList.childNodes[1]);\r\n          mapList.removeChild(mapList.childNodes[1]);\r\n          mapList.removeChild(mapList.childNodes[1]);\r\n        }\r\n        console.log(mapList.childNodes);\r\n        console.log(\"end map unmount\");\r\n      };\r\n    }\r\n  }, [map]);\r\n\r\n  useEffect(() => {\r\n    ////// USE EFFECT TO MANAGE THE FLY TO FEATURE\r\n\r\n    if (map && stateApp.flyTo) {\r\n      var zVal = 12;\r\n\r\n      setStateApp((stateApp) => ({\r\n        ...stateApp,\r\n        wellSelectedCoordinates: [\r\n          stateApp.flyTo.longitude,\r\n          stateApp.flyTo.latitude,\r\n        ],\r\n      }));\r\n\r\n      map.flyTo({\r\n        center: [stateApp.flyTo.longitude, stateApp.flyTo.latitude],\r\n        zoom: stateApp.flyTo.zoom ? stateApp.flyTo.zoom : zVal,\r\n        speed: 0.5,\r\n      });\r\n    }\r\n  }, [createPopUp, map, stateApp.flyTo]);\r\n\r\n  useEffect(() => {\r\n    ////// USE EFFECT TO MANAGE THE FIT BOUNDS TO FEATURE\r\n\r\n    if (\r\n      map &&\r\n      stateApp.fitBounds &&\r\n      stateApp.fitBounds.maxLat &&\r\n      stateApp.fitBounds.minLat &&\r\n      stateApp.fitBounds.maxLong &&\r\n      stateApp.fitBounds.minLong\r\n    ) {\r\n      const fitOverBounds = () => {\r\n        let { maxLat, minLat, maxLong, minLong } = stateApp.fitBounds;\r\n\r\n        const latDif = maxLat - minLat;\r\n        const longDif = maxLong - minLong;\r\n\r\n        if (latDif === 0) {\r\n          maxLat = maxLat + 0.005 > 90 ? 89.995 : maxLat + 0.005;\r\n          minLat = minLat - 0.005 < -90 ? -89.995 : minLat - 0.005;\r\n        } else {\r\n          maxLat =\r\n            maxLat + latDif * 0.08 > 90 ? 89.995 : maxLat + latDif * 0.08;\r\n          minLat =\r\n            minLat - latDif * 0.08 < -90 ? -89.995 : minLat - latDif * 0.08;\r\n        }\r\n\r\n        if (longDif === 0) {\r\n          maxLong = maxLong + 0.005 > 180 ? 179.995 : maxLong + 0.005;\r\n          minLong = minLong - 0.005 < -180 ? -179.995 : minLong - 0.005;\r\n        } else {\r\n          maxLong =\r\n            maxLong + longDif * 0.08 > 180 ? 179.995 : maxLong + latDif * 0.08;\r\n          maxLong =\r\n            maxLong - longDif * 0.08 < -180\r\n              ? -179.995\r\n              : maxLong - latDif * 0.08;\r\n        }\r\n\r\n        return {\r\n          maxLat,\r\n          minLat,\r\n          maxLong,\r\n          minLong,\r\n        };\r\n      };\r\n\r\n      let bounds = fitOverBounds();\r\n\r\n      map.fitBounds([\r\n        [bounds.minLong, bounds.minLat],\r\n        [bounds.maxLong, bounds.maxLat],\r\n      ]);\r\n    }\r\n  }, [map, stateApp.fitBounds]);\r\n\r\n  useEffect(() => {\r\n    if (map && stateApp.toggleZoomOut) {\r\n      if (stateApp.toggleZoomOut === true) {\r\n        map.flyTo({\r\n          center: { lng: -98.8, lat: 38 },\r\n          zoom: 4.88,\r\n          pitch: 0,\r\n          bearing: 0,\r\n          speed: 0.5,\r\n        });\r\n\r\n        let flying = null;\r\n\r\n        map.on(\"flystart\", function () {\r\n          flying = true;\r\n        });\r\n\r\n        map.on(\"flyend\", function () {\r\n          flying = false;\r\n        });\r\n\r\n        map.on(\"moveend\", function (e) {\r\n          if (flying) {\r\n            setStateApp((stateApp) => ({\r\n              ...stateApp,\r\n              mapVars: {\r\n                ...stateApp.mapVars,\r\n                zoom: map.getZoom(),\r\n                center: map.getCenter(),\r\n                pitch: map.getPitch(),\r\n                bearing: map.getBearing(),\r\n              },\r\n            }));\r\n            map.fire(\"flyend\");\r\n          }\r\n        });\r\n\r\n        setStateApp((stateApp) => ({ ...stateApp, toggleZoomOut: null }));\r\n      }\r\n    }\r\n  }, [stateApp.toggleZoomOut]);\r\n\r\n  useEffect(() => {\r\n    if (map && stateApp.toggle3d) {\r\n      if (stateApp.toggle3d === true) {\r\n        if (map.getPitch() == 0 && map.getBearing() == 0) {\r\n          map.setPitch(70);\r\n          map.setBearing(20);\r\n        } else {\r\n          map.setPitch(0);\r\n          map.setBearing(0);\r\n        }\r\n\r\n        setStateApp((stateApp) => ({\r\n          ...stateApp,\r\n          mapVars: {\r\n            ...stateApp.mapVars,\r\n            zoom: map.getZoom(),\r\n            center: map.getCenter(),\r\n            pitch: map.getPitch(),\r\n            bearing: map.getBearing(),\r\n          },\r\n        }));\r\n        setStateApp((stateApp) => ({ ...stateApp, toggle3d: null }));\r\n      }\r\n    }\r\n  }, [stateApp.toggle3d]);\r\n\r\n  useEffect(() => {\r\n    console.log(\r\n      \"Drawing status check\",\r\n      stateApp.editDraw,\r\n      stateNav.drawingMode\r\n    );\r\n    if (stateApp.editDraw === true || stateNav.drawingMode) {\r\n      setDrawStatus(true);\r\n      if (mapClick && mapClick.mapClickHandler != null) {\r\n        map.off(\"click\", mapClick.mapClickHandler);\r\n      }\r\n    } else {\r\n      setDrawStatus(false);\r\n      if (mapClick && mapClick.mapClickHandler != null) {\r\n        setTimeout(() => {\r\n          map.on(\"click\", mapClick.mapClickHandler);\r\n        }, 500);\r\n      }\r\n    }\r\n  }, [stateApp.editDraw, stateNav.drawingMode]);\r\n\r\n  const handleOpenExpandableCard = (e) => {\r\n    setAnchorElPoPOver(container.current);\r\n    setShowExpandableCard(true);\r\n  };\r\n\r\n  const handleCloseExpandableCard = () => {\r\n    setShowExpandableCard(false);\r\n    setAnchorElPoPOver(null);\r\n    setStateApp((state) => ({ ...state, expandedCard: false }));\r\n  };\r\n\r\n  const handleCloseSpatialDataCard = (complete = true) => {\r\n    console.log(\"close card on map here\");\r\n    setStateApp((state) => ({\r\n      ...state,\r\n      popupOpen: false,\r\n      selectedUserDefinedLayer: undefined,\r\n    }));\r\n    if (complete == true) {\r\n      setStateApp((state) => ({\r\n        ...state,\r\n        selectedUserDefinedLayer: undefined,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleCloseSpatialDataCardEdit = () => {\r\n    console.log(\"close card on map here\");\r\n    setStateApp((state) => ({\r\n      ...state,\r\n      popupOpen: false,\r\n      editLayer: false,\r\n      selectedUserDefinedLayer: undefined,\r\n    }));\r\n  };\r\n\r\n  const handleSaveSpatialDataToShape = (spatialData, dataType) => {\r\n    // save data onto geoJSON properties fields\r\n\r\n    const { selectedUserDefinedLayer } = stateApp;\r\n\r\n    spatialDataAttributes.forEach((attribute) => {\r\n      if (\r\n        spatialData[attribute] != null ||\r\n        typeof spatialData[attribute] !== \"undefined\"\r\n      ) {\r\n        console.log(\"set attribute\", spatialData[attribute], attribute);\r\n        selectedUserDefinedLayer.properties[attribute] = spatialData[attribute];\r\n      }\r\n    });\r\n    selectedUserDefinedLayer.id = selectedUserDefinedLayer.properties.id;\r\n\r\n    let update_layer = selectedUserDefinedLayer;\r\n\r\n    let draw_id = selectedUserDefinedLayer.id;\r\n    if (!draw_id.includes(\"edit_polygon\")) {\r\n      draw_id = `edit_polygon_${draw_id}`;\r\n    }\r\n\r\n    let current_feature = stateApp.draw.get(draw_id);\r\n    if (current_feature) {\r\n      addCustomShapeProperties(current_feature, stateApp.draw);\r\n      current_feature = stateApp.draw.get(draw_id);\r\n      spatialDataAttributes.forEach((attribute) => {\r\n        if (\r\n          spatialData[attribute] != null ||\r\n          typeof spatialData[attribute] !== \"undefined\"\r\n        ) {\r\n          console.log(\"set attribute\", spatialData[attribute], attribute);\r\n          current_feature.properties[attribute] = spatialData[attribute];\r\n        }\r\n      });\r\n      current_feature.id = current_feature.properties.id;\r\n      update_layer = current_feature;\r\n    }\r\n\r\n    let position = null;\r\n\r\n    if (typeof update_layer.properties.shapeCenter == \"string\") {\r\n      position = JSON.parse(update_layer.properties.shapeCenter);\r\n    } else {\r\n      position = update_layer.properties.shapeCenter;\r\n    }\r\n\r\n    const symbolFeature = {\r\n      type: \"Feature\",\r\n      geometry: {\r\n        type: \"Point\",\r\n        coordinates: position,\r\n      },\r\n      properties: {\r\n        ...update_layer.properties,\r\n        id: `${update_layer.properties.id}_label`,\r\n        label: spatialData.shapeLabel,\r\n      },\r\n    };\r\n\r\n    // //////cleaning the selected title opinion and redirecting to title opinion page//\r\n    if (stateApp.user.mongoId !== \"\") {\r\n      const id = update_layer.properties.id;\r\n      let update_layers = stateApp.editingUserDefinedLayers.filter((layer) => {\r\n        const shape_properties = JSON.parse(layer.shape).properties;\r\n        return shape_properties.id && shape_properties.id.includes(id);\r\n      });\r\n      if (update_layers.length === 0) {\r\n        update_layers = stateApp.customLayers.filter((layer) => {\r\n          const shape_properties = JSON.parse(layer.shape).properties;\r\n          return shape_properties.id && shape_properties.id.includes(id);\r\n        });\r\n        handleCloseSpatialDataCard();\r\n      } else {\r\n        stateApp.draw.delete(`edit_polygon_${id}`);\r\n        const updated_layers = stateApp.editingUserDefinedLayers.filter(\r\n          (layer) => {\r\n            const shape_properties = JSON.parse(layer.shape).properties;\r\n            return !shape_properties.id || !shape_properties.id.includes(id);\r\n          }\r\n        );\r\n        setStateApp({\r\n          ...stateApp,\r\n          selectedUserDefinedLayer: null,\r\n          editingUserDefinedLayers: updated_layers,\r\n        });\r\n        handleCloseSpatialDataCardEdit();\r\n      }\r\n      const customLayerId = update_layers[0]._id;\r\n      const customLayerLabelId = update_layers[1]._id;\r\n\r\n      const customLayerData = {\r\n        shape: JSON.stringify(update_layer),\r\n        layer: dataType,\r\n        name: spatialData.shapeLabel,\r\n        user: stateApp.user.mongoId,\r\n      };\r\n      const customLayerSymbolData = {\r\n        shape: JSON.stringify(symbolFeature),\r\n        layer: `${dataType}_labels`,\r\n        name: spatialData.shapeLabel,\r\n        user: stateApp.user.mongoId,\r\n      };\r\n\r\n      updateCustomLayer({\r\n        variables: {\r\n          customLayerId: customLayerId,\r\n          customLayer: customLayerData,\r\n        },\r\n      });\r\n      updateCustomLayer({\r\n        variables: {\r\n          customLayerId: customLayerLabelId,\r\n          customLayer: customLayerSymbolData,\r\n        },\r\n      });\r\n      getCustomLayers({\r\n        variables: {\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDeleteSpatialDataAndShape = () => {\r\n    const {\r\n      selectedUserDefinedLayer,\r\n      editingUserDefinedLayers,\r\n      customLayers,\r\n    } = stateApp;\r\n    if (selectedUserDefinedLayer) {\r\n      let id = selectedUserDefinedLayer.properties.id;\r\n      if (id.includes(\"edit_polygon\")) {\r\n        id = id.replace(\"edit_polygon_\", \"\");\r\n      }\r\n      if (editingUserDefinedLayers.length > 0) {\r\n        const delete_layers = editingUserDefinedLayers.filter((layer) => {\r\n          const shape_properties = JSON.parse(layer.shape).properties;\r\n          return shape_properties.id && shape_properties.id.includes(id);\r\n        });\r\n        if (delete_layers.length > 0) {\r\n          for (let i = 0; i < delete_layers.length; i++) {\r\n            const delete_layer = delete_layers[i];\r\n            removeCustomLayer({\r\n              variables: {\r\n                customLayerId: delete_layer._id,\r\n              },\r\n            });\r\n          }\r\n          const updated_layers = editingUserDefinedLayers.filter((layer) => {\r\n            const shape_properties = JSON.parse(layer.shape).properties;\r\n            return !shape_properties.id || !shape_properties.id.includes(id);\r\n          });\r\n          stateApp.draw.delete(`edit_polygon_${id}`);\r\n          setStateApp({\r\n            ...stateApp,\r\n            editingUserDefinedLayers: updated_layers,\r\n          });\r\n          handleCloseSpatialDataCardEdit();\r\n        } else if (customLayers.length > 0) {\r\n          const delete_layers = customLayers.filter((layer) => {\r\n            const shape_properties = JSON.parse(layer.shape).properties;\r\n            return shape_properties.id && shape_properties.id.includes(id);\r\n          });\r\n          if (delete_layers.length > 0) {\r\n            for (let i = 0; i < delete_layers.length; i++) {\r\n              const delete_layer = delete_layers[i];\r\n              removeCustomLayer({\r\n                variables: {\r\n                  customLayerId: delete_layer._id,\r\n                },\r\n              });\r\n            }\r\n            const updated_layers = customLayers.filter((layer) => {\r\n              const shape_properties = JSON.parse(layer.shape).properties;\r\n              return !shape_properties.id || !shape_properties.id.includes(id);\r\n            });\r\n            setStateApp({\r\n              ...stateApp,\r\n              customLayers: updated_layers,\r\n            });\r\n          }\r\n          handleCloseSpatialDataCard();\r\n        }\r\n      } else {\r\n        if (customLayers.length > 0) {\r\n          const delete_layers = customLayers.filter((layer) => {\r\n            const shape_properties = JSON.parse(layer.shape).properties;\r\n            return shape_properties.id && shape_properties.id.includes(id);\r\n          });\r\n          if (delete_layers.length > 0) {\r\n            for (let i = 0; i < delete_layers.length; i++) {\r\n              const delete_layer = delete_layers[i];\r\n              removeCustomLayer({\r\n                variables: {\r\n                  customLayerId: delete_layer._id,\r\n                },\r\n              });\r\n            }\r\n            const updated_layers = customLayers.filter((layer) => {\r\n              const shape_properties = JSON.parse(layer.shape).properties;\r\n              return !shape_properties.id || !shape_properties.id.includes(id);\r\n            });\r\n            setStateApp({\r\n              ...stateApp,\r\n              customLayers: updated_layers,\r\n            });\r\n          }\r\n          handleCloseSpatialDataCard();\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   if (stateApp.userSnap === true) {\r\n  //     var script = document.createElement(\"script\");\r\n  //     script.type = \"text/javascript\";\r\n  //     script.src =\r\n  //       \"//api.usersnap.com/load/64ab8ea7-9417-41a0-b565-eb7ad69da871.js\";\r\n  //     script.async = true;\r\n  //     script.setAttribute(\"id\", \"feedback-script\");\r\n\r\n  //     var x = document.getElementsByTagName(\"script\")[0];\r\n  //     x.parentNode.insertBefore(script, x);\r\n\r\n  //     document.body.appendChild(script);\r\n\r\n  //     return () => {\r\n  //       document.body.removeChild(script);\r\n  //     };\r\n  //   } else if (stateApp.userSnap === false){\r\n  //     const feedbackScript = document.querySelector(\"#feedback-script\");\r\n  //     feedbackScript && feedbackScript.remove();\r\n  //     const element = document.getElementsByName(\"us-entrypoint-button\");\r\n  //     element && element[0] && element[0].remove();\r\n  //   }\r\n  // }, [stateApp.userSnap]);\r\n\r\n  useEffect(() => {\r\n    if (stateApp.editingUserDefinedLayers.length > 0) {\r\n      const { map } = stateApp;\r\n\r\n      map.on(\"draw.selectionchange\", ({ features }) => {\r\n        const [feature] = features;\r\n        if (feature && feature.id.includes(\"edit_polygon\")) {\r\n          setStateApp({\r\n            ...stateApp,\r\n            selectedUserDefinedLayer: feature,\r\n            editLayer: true,\r\n          });\r\n        } else {\r\n          setStateApp({\r\n            ...stateApp,\r\n            popupOpen: false,\r\n            selectedUserDefinedLayer: undefined,\r\n            editLayer: false,\r\n          });\r\n        }\r\n      });\r\n    }\r\n  }, [stateApp.editingUserDefinedLayers]);\r\n\r\n  return (\r\n    <div className={classes.mapWrapper}>\r\n      <div className={classes.map} ref={mapEl} id=\"map\">\r\n        {map ? <DefaultFiltersTest /> : null}\r\n        <div className={classes.footerLeftLogo}>\r\n          <img src=\"icons/M1LogoWhiteTransparent.png\" alt=\"logo\" width=\"150\" />\r\n        </div>\r\n      </div>\r\n      <MapControlsProvider />\r\n      <DrawStatus drawingStatus={drawStatus} />\r\n      <Coordinates long={lng} lat={lat} />\r\n      {stateApp.selectedUserDefinedLayer &&\r\n        !stateApp.popupOpen &&\r\n        stateApp.editLayer && (\r\n          <SpatialDataCard\r\n            selectedFeature={stateApp.selectedUserDefinedLayer}\r\n            saveSpatialData={handleSaveSpatialDataToShape}\r\n            closeSpatialDataCard={handleCloseSpatialDataCardEdit}\r\n            deleteSpatialDataAndShape={handleDeleteSpatialDataAndShape}\r\n          />\r\n        )}\r\n      {stateApp.mapGridCardActivated && <MapGridCard />}\r\n      <div id=\"tempPopupHolder\" className={classes.portal} ref={container} />\r\n      <Portal container={container.current}>\r\n        {stateApp.popupOpen ? (\r\n          <div>\r\n            {stateApp.selectedWell && (\r\n              <PortalD id=\"popupContainer\">\r\n                {showExpandableCard && !stateApp.expandedCard ? (\r\n                  <ExpandableCardProvider\r\n                    expanded={false}\r\n                    handleCloseExpandableCard={handleCloseExpandableCard}\r\n                    component={<WellCardProvider></WellCardProvider>}\r\n                    title={stateApp.selectedWell.wellName}\r\n                    subTitle={stateApp.selectedWell.operator}\r\n                    parent=\"map\"\r\n                    mouseX={0}\r\n                    mouseY={0}\r\n                    position=\"relative\"\r\n                    cardLeft={20}\r\n                    cardTop={70}\r\n                    zIndex={99}\r\n                    cardWidth=\"350px\"\r\n                    // cardHeight=\"350px\"\r\n                    cardWidthExpanded=\"95vw\"\r\n                    cardHeightExpanded=\"90vh\"\r\n                    targetSourceId={stateApp.selectedWell.id}\r\n                    targetLabel=\"well\"\r\n                  ></ExpandableCardProvider>\r\n                ) : (\r\n                  <Popover\r\n                    open={stateApp.expandedCard}\r\n                    anchorEl={anchorElPoPOver}\r\n                    anchorReference=\"anchorEl\"\r\n                    style={{ width: \"100%\" }} //right:30, left: \"-30px\"}}\r\n                    BackdropProps={{ invisible: false }}\r\n                    anchorOrigin={{\r\n                      vertical: \"center\",\r\n                      horizontal: \"center\",\r\n                    }}\r\n                    transformOrigin={{\r\n                      vertical: \"center\",\r\n                      horizontal: \"center\",\r\n                    }}\r\n                  >\r\n                    <ExpandableCardProvider\r\n                      expanded={true}\r\n                      handleCloseExpandableCard={handleCloseExpandableCard}\r\n                      component={<WellCardProvider></WellCardProvider>}\r\n                      title={stateApp.selectedWell.wellName}\r\n                      subTitle={stateApp.selectedWell.operator}\r\n                      parent=\"map\"\r\n                      mouseX={0}\r\n                      mouseY={0}\r\n                      position=\"relative\"\r\n                      // cardLeft={\"0px\"}\r\n                      // cardTop={\"0px\"}\r\n                      zIndex={99}\r\n                      // cardWidth=\"380px\"\r\n                      // cardHeight=\"380px\"\r\n                      cardWidthExpanded=\"95vw\"\r\n                      cardHeightExpanded=\"95vh\"\r\n                      targetSourceId={stateApp.selectedWell.id}\r\n                      targetLabel=\"well\"\r\n                    ></ExpandableCardProvider>\r\n                  </Popover>\r\n                )}\r\n              </PortalD>\r\n            )}\r\n            {stateApp.selectedUserDefinedLayer && (\r\n              <PortalD id=\"popupContainer\">\r\n                <SpatialDataCardEdit\r\n                  selectedFeature={stateApp.selectedUserDefinedLayer}\r\n                  saveSpatialData={handleSaveSpatialDataToShape}\r\n                  closeSpatialDataCard={handleCloseSpatialDataCard}\r\n                  deleteSpatialDataAndShape={handleDeleteSpatialDataAndShape}\r\n                  cardClass={\"cardPopup\"}\r\n                />\r\n              </PortalD>\r\n            )}\r\n            {stateApp.filterFeature && (\r\n              <PortalD id=\"filterPopupContainer\">\r\n                <FilterControl filterFeature={stateApp.filterFeature} />\r\n              </PortalD>\r\n            )}\r\n          </div>\r\n        ) : null}\r\n      </Portal>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}