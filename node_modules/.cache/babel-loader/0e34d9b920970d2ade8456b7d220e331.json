{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\MapControls\\\\components\\\\addUserData.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport { MapControlsContext } from \"../MapControlsContext\";\nimport { AppContext } from \"../../../AppContext\";\nimport DragIndicator from \"@material-ui/icons/DragIndicator\";\nimport RootRef from \"@material-ui/core/RootRef\";\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport TextField from '@material-ui/core/TextField';\nimport { DropzoneAreaBase } from 'material-ui-dropzone';\nexport default function AddUserData(props) {\n  const [isOpen, setIsOpen] = useState(true);\n  const [inputFiles, setInputFiles] = useState(null);\n  const [inputURL, setInputURL] = useState(null);\n  const [stateMapControls, setStateMapControls] = useContext(MapControlsContext);\n  const [stateApp, setStateApp] = useContext(AppContext);\n\n  const handleClose = () => {\n    setIsOpen(false); //setStateMapControls(stateMapControls => ({ ...stateMapControls }));\n  };\n\n  async function handleFileInput(fileObj) {\n    console.log('Added Files:', fileObj);\n    console.log(typeof fileObj);\n\n    try {\n      let fileContent = await handleFileAsync(fileObj);\n      console.log('FILE CONTENT: ', fileContent);\n      setInputFiles(fileContent);\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const handleOnAlert = (message, variant) => {\n    console.log(`${variant}: ${message}`);\n  };\n\n  const handleApplyChanges = () => {\n    console.log('Apply Changes');\n    let fileContent = inputFiles;\n    let existingFileLayers = stateApp.userFileLayers;\n    existingFileLayers.push(fileContent);\n    console.log('USER FILE LAYERS:: ', existingFileLayers);\n    setStateApp(stateApp => ({ ...stateApp,\n      userFileLayers: [...existingFileLayers]\n    }));\n  };\n\n  const handleFileAsync = file => {\n    return new Promise((resolve, reject) => {\n      fetch(file[0].data).then(response => response.json()).then(response => {\n        resolve(response);\n      }).catch(error => reject(error));\n    });\n  };\n\n  const handleURLinput = e => {\n    let inputURL = e.target.value;\n    console.log(inputURL);\n\n    if (inputURL.endsWith(\".geojson\")) {\n      let existingFileLayers = stateApp.userFileLayers;\n      existingFileLayers.push(inputURL);\n      console.log('INPUT URL ADDED:: ', inputURL);\n      setInputFiles(inputFiles => ({\n        userFileLayers: [...existingFileLayers]\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(ClickAwayListener, {\n    onClickAway: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    open: isOpen,\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Add Data\"), /*#__PURE__*/React.createElement(DialogContent, {\n    dividers: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DialogContentText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(DropzoneAreaBase, {\n    onAdd: handleFileInput,\n    onDelete: fileObj => console.log('Removed File:', fileObj),\n    onAlert: handleOnAlert,\n    filesLimit: 1,\n    dropzoneText: \" Drag and Drop a GeoJSON or Shapefile.\",\n    acceptedFiles: [\".geojson\", \".zip\"],\n    maxFileSize: 600000000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TextField, {\n    autoFocus: true,\n    margin: \"dense\",\n    id: \"name\",\n    label: \"Esri Feature Service URL\",\n    type: \"url\",\n    fullWidth: true,\n    onChange: handleURLinput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Typography, {\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    autoFocus: true,\n    onClick: handleApplyChanges,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, \"Apply Changes\"), /*#__PURE__*/React.createElement(Button, {\n    autoFocus: true,\n    onClick: handleClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, \"Close\"))));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/MapControls/components/addUserData.js"],"names":["React","useContext","useState","useEffect","withStyles","makeStyles","ClickAwayListener","MapControlsContext","AppContext","DragIndicator","RootRef","Dialog","DialogTitle","DialogContent","DialogActions","Typography","Button","DialogContentText","TextField","DropzoneAreaBase","AddUserData","props","isOpen","setIsOpen","inputFiles","setInputFiles","inputURL","setInputURL","stateMapControls","setStateMapControls","stateApp","setStateApp","handleClose","handleFileInput","fileObj","console","log","fileContent","handleFileAsync","err","handleOnAlert","message","variant","handleApplyChanges","existingFileLayers","userFileLayers","push","file","Promise","resolve","reject","fetch","data","then","response","json","catch","error","handleURLinput","e","target","value","endsWith"],"mappings":"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","sourcesContent":["import React, {\r\n  useContext,\r\n  useState,\r\n  useEffect,\r\n} from \"react\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport { MapControlsContext } from \"../MapControlsContext\";\r\nimport { AppContext } from \"../../../AppContext\";\r\nimport DragIndicator from \"@material-ui/icons/DragIndicator\";\r\nimport RootRef from \"@material-ui/core/RootRef\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { DropzoneAreaBase } from 'material-ui-dropzone';\r\n\r\n\r\nexport default function AddUserData(props) {\r\n\r\n  const [isOpen, setIsOpen] = useState(true);\r\n  const [inputFiles, setInputFiles] = useState(null);\r\n  const [inputURL, setInputURL] = useState(null);\r\n\r\n  const [stateMapControls, setStateMapControls] = useContext(\r\n    MapControlsContext\r\n  );\r\n  const [stateApp, setStateApp] = useContext(AppContext);\r\n\r\n  const handleClose = () => {\r\n    setIsOpen(false);\r\n    //setStateMapControls(stateMapControls => ({ ...stateMapControls }));\r\n  };\r\n\r\n  async function handleFileInput(fileObj) {\r\n    console.log('Added Files:', fileObj)\r\n    console.log(typeof fileObj);\r\n\r\n    try {\r\n      let fileContent = await handleFileAsync(fileObj);\r\n      console.log('FILE CONTENT: ', fileContent);\r\n      setInputFiles(fileContent);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const handleOnAlert = (message, variant) => {\r\n    console.log(`${variant}: ${message}`)\r\n  }\r\n\r\n\r\n  const handleApplyChanges = () => {\r\n    console.log('Apply Changes');\r\n    let fileContent = inputFiles;\r\n    let existingFileLayers = stateApp.userFileLayers;\r\n    existingFileLayers.push(fileContent);\r\n    console.log('USER FILE LAYERS:: ', existingFileLayers)\r\n\r\n    setStateApp(stateApp => ({ ...stateApp, userFileLayers: [...existingFileLayers] }));\r\n  }\r\n\r\n  const handleFileAsync = (file) => {\r\n    return new Promise((resolve, reject) => {\r\n      fetch(file[0].data)\r\n        .then((response) => response.json())\r\n        .then((response) => {\r\n          resolve(response);\r\n        })\r\n        .catch((error) => reject(error));\r\n    })\r\n  }\r\n\r\n  const handleURLinput = (e) => {\r\n    let inputURL = e.target.value;\r\n    console.log(inputURL);\r\n    if (inputURL.endsWith(\".geojson\")) {\r\n      let existingFileLayers = stateApp.userFileLayers\r\n      existingFileLayers.push(inputURL);\r\n      console.log('INPUT URL ADDED:: ', inputURL)\r\n      setInputFiles(inputFiles => ({ userFileLayers: [...existingFileLayers] }));\r\n    }\r\n  }\r\n\r\n  return (\r\n    <ClickAwayListener onClickAway={handleClose}>\r\n      <Dialog open={isOpen} onClose={handleClose}>\r\n        <DialogTitle>\r\n          Add Data\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <DialogContentText>\r\n          </DialogContentText>\r\n          <DropzoneAreaBase\r\n            onAdd={handleFileInput}\r\n            onDelete={(fileObj) => console.log('Removed File:', fileObj)}\r\n            onAlert={handleOnAlert}\r\n            filesLimit={1}\r\n            dropzoneText=\" Drag and Drop a GeoJSON or Shapefile.\"\r\n            acceptedFiles={[\".geojson\", \".zip\"]}\r\n            maxFileSize={600000000}\r\n          ></DropzoneAreaBase>\r\n          <TextField\r\n            autoFocus\r\n            margin=\"dense\"\r\n            id=\"name\"\r\n            label=\"Esri Feature Service URL\"\r\n            type=\"url\"\r\n            fullWidth\r\n            onChange={handleURLinput}\r\n          />\r\n          <Typography gutterBottom>\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button autoFocus onClick={handleApplyChanges} color=\"primary\">\r\n            Apply Changes\r\n          </Button>\r\n          <Button autoFocus onClick={handleClose} color=\"primary\">\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </ClickAwayListener>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}