{"ast":null,"code":"const MapboxDraw = require('@mapbox/mapbox-gl-draw');\n\nconst Constants = require('@mapbox/mapbox-gl-draw/src/constants');\n\nconst doubleClickZoom = require('@mapbox/mapbox-gl-draw/src/lib/double_click_zoom');\n\nconst dragPan = require('../utils/drag_pan');\n\nconst circle = require('@turf/circle').default;\n\nconst distance = require('@turf/distance').default;\n\nconst turfHelpers = require('@turf/helpers');\n\nconst DragCircleMode = { ...MapboxDraw.modes.draw_polygon\n};\n\nDragCircleMode.onSetup = function (opts) {\n  const polygon = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {\n      isCircle: true,\n      center: []\n    },\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n  this.addFeature(polygon);\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  dragPan.disable(this);\n  this.updateUIClasses({\n    mouse: Constants.cursors.ADD\n  });\n  this.activateUIButton(Constants.types.POLYGON);\n  this.setActionableState({\n    trash: true\n  });\n  return {\n    polygon,\n    currentVertexPosition: 0\n  };\n};\n\nDragCircleMode.onMouseDown = DragCircleMode.onTouchStart = function (state, e) {\n  const currentCenter = state.polygon.properties.center;\n\n  if (currentCenter.length === 0) {\n    state.polygon.properties.center = [e.lngLat.lng, e.lngLat.lat];\n  }\n};\n\nDragCircleMode.onDrag = DragCircleMode.onMouseMove = function (state, e) {\n  const center = state.polygon.properties.center;\n\n  if (center.length > 0) {\n    const distanceInKm = distance(turfHelpers.point(center), turfHelpers.point([e.lngLat.lng, e.lngLat.lat]), {\n      units: 'kilometers'\n    });\n    const circleFeature = circle(center, distanceInKm);\n    state.polygon.incomingCoords(circleFeature.geometry.coordinates);\n    state.polygon.properties.radiusInKm = distanceInKm;\n  }\n};\n\nDragCircleMode.onMouseUp = DragCircleMode.onTouchEnd = function (state, e) {\n  dragPan.enable(this);\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, {\n    featureIds: [state.polygon.id]\n  });\n};\n\nDragCircleMode.onClick = DragCircleMode.onTap = function (state, e) {\n  // don't draw the circle if its a tap or click event\n  state.polygon.properties.center = [];\n};\n\nDragCircleMode.toDisplayFeatures = function (state, geojson, display) {\n  const isActivePolygon = geojson.properties.id === state.polygon.id;\n  geojson.properties.active = isActivePolygon ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  return display(geojson);\n};\n\nmodule.exports = DragCircleMode;","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/node_modules/mapbox-gl-draw-circle/lib/modes/DragCircleMode.js"],"names":["MapboxDraw","require","Constants","doubleClickZoom","dragPan","circle","default","distance","turfHelpers","DragCircleMode","modes","draw_polygon","onSetup","opts","polygon","newFeature","type","geojsonTypes","FEATURE","properties","isCircle","center","geometry","POLYGON","coordinates","addFeature","clearSelectedFeatures","disable","updateUIClasses","mouse","cursors","ADD","activateUIButton","types","setActionableState","trash","currentVertexPosition","onMouseDown","onTouchStart","state","e","currentCenter","length","lngLat","lng","lat","onDrag","onMouseMove","distanceInKm","point","units","circleFeature","incomingCoords","radiusInKm","onMouseUp","onTouchEnd","enable","changeMode","SIMPLE_SELECT","featureIds","id","onClick","onTap","toDisplayFeatures","geojson","display","isActivePolygon","active","activeStates","ACTIVE","INACTIVE","module","exports"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAAC,wBAAD,CAA1B;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,sCAAD,CAAzB;;AACA,MAAME,eAAe,GAAGF,OAAO,CAAC,kDAAD,CAA/B;;AACA,MAAMG,OAAO,GAAGH,OAAO,CAAC,mBAAD,CAAvB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,cAAD,CAAP,CAAwBK,OAAvC;;AACA,MAAMC,QAAQ,GAAGN,OAAO,CAAC,gBAAD,CAAP,CAA0BK,OAA3C;;AACA,MAAME,WAAW,GAAGP,OAAO,CAAC,eAAD,CAA3B;;AAEA,MAAMQ,cAAc,GAAG,EAAC,GAAGT,UAAU,CAACU,KAAX,CAAiBC;AAArB,CAAvB;;AAEAF,cAAc,CAACG,OAAf,GAAyB,UAASC,IAAT,EAAe;AACtC,QAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgB;AAC9BC,IAAAA,IAAI,EAAEd,SAAS,CAACe,YAAV,CAAuBC,OADC;AAE9BC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE,IADA;AAEVC,MAAAA,MAAM,EAAE;AAFE,KAFkB;AAM9BC,IAAAA,QAAQ,EAAE;AACRN,MAAAA,IAAI,EAAEd,SAAS,CAACe,YAAV,CAAuBM,OADrB;AAERC,MAAAA,WAAW,EAAE,CAAC,EAAD;AAFL;AANoB,GAAhB,CAAhB;AAYA,OAAKC,UAAL,CAAgBX,OAAhB;AAEA,OAAKY,qBAAL;AACAvB,EAAAA,eAAe,CAACwB,OAAhB,CAAwB,IAAxB;AACAvB,EAAAA,OAAO,CAACuB,OAAR,CAAgB,IAAhB;AACA,OAAKC,eAAL,CAAqB;AAAEC,IAAAA,KAAK,EAAE3B,SAAS,CAAC4B,OAAV,CAAkBC;AAA3B,GAArB;AACA,OAAKC,gBAAL,CAAsB9B,SAAS,CAAC+B,KAAV,CAAgBV,OAAtC;AACA,OAAKW,kBAAL,CAAwB;AACtBC,IAAAA,KAAK,EAAE;AADe,GAAxB;AAIA,SAAO;AACLrB,IAAAA,OADK;AAELsB,IAAAA,qBAAqB,EAAE;AAFlB,GAAP;AAID,CA5BD;;AA8BA3B,cAAc,CAAC4B,WAAf,GAA6B5B,cAAc,CAAC6B,YAAf,GAA8B,UAAUC,KAAV,EAAiBC,CAAjB,EAAoB;AAC7E,QAAMC,aAAa,GAAGF,KAAK,CAACzB,OAAN,CAAcK,UAAd,CAAyBE,MAA/C;;AACA,MAAIoB,aAAa,CAACC,MAAd,KAAyB,CAA7B,EAAgC;AAC9BH,IAAAA,KAAK,CAACzB,OAAN,CAAcK,UAAd,CAAyBE,MAAzB,GAAkC,CAACmB,CAAC,CAACG,MAAF,CAASC,GAAV,EAAeJ,CAAC,CAACG,MAAF,CAASE,GAAxB,CAAlC;AACD;AACF,CALD;;AAOApC,cAAc,CAACqC,MAAf,GAAwBrC,cAAc,CAACsC,WAAf,GAA6B,UAAUR,KAAV,EAAiBC,CAAjB,EAAoB;AACvE,QAAMnB,MAAM,GAAGkB,KAAK,CAACzB,OAAN,CAAcK,UAAd,CAAyBE,MAAxC;;AACA,MAAIA,MAAM,CAACqB,MAAP,GAAgB,CAApB,EAAuB;AACrB,UAAMM,YAAY,GAAGzC,QAAQ,CAC3BC,WAAW,CAACyC,KAAZ,CAAkB5B,MAAlB,CAD2B,EAE3Bb,WAAW,CAACyC,KAAZ,CAAkB,CAACT,CAAC,CAACG,MAAF,CAASC,GAAV,EAAeJ,CAAC,CAACG,MAAF,CAASE,GAAxB,CAAlB,CAF2B,EAG3B;AAAEK,MAAAA,KAAK,EAAG;AAAV,KAH2B,CAA7B;AAIA,UAAMC,aAAa,GAAG9C,MAAM,CAACgB,MAAD,EAAS2B,YAAT,CAA5B;AACAT,IAAAA,KAAK,CAACzB,OAAN,CAAcsC,cAAd,CAA6BD,aAAa,CAAC7B,QAAd,CAAuBE,WAApD;AACAe,IAAAA,KAAK,CAACzB,OAAN,CAAcK,UAAd,CAAyBkC,UAAzB,GAAsCL,YAAtC;AACD;AACF,CAXD;;AAaAvC,cAAc,CAAC6C,SAAf,GAA2B7C,cAAc,CAAC8C,UAAf,GAA4B,UAAUhB,KAAV,EAAiBC,CAAjB,EAAoB;AACzEpC,EAAAA,OAAO,CAACoD,MAAR,CAAe,IAAf;AACA,SAAO,KAAKC,UAAL,CAAgBvD,SAAS,CAACQ,KAAV,CAAgBgD,aAAhC,EAA+C;AAAEC,IAAAA,UAAU,EAAE,CAACpB,KAAK,CAACzB,OAAN,CAAc8C,EAAf;AAAd,GAA/C,CAAP;AACD,CAHD;;AAKAnD,cAAc,CAACoD,OAAf,GAAyBpD,cAAc,CAACqD,KAAf,GAAuB,UAAUvB,KAAV,EAAiBC,CAAjB,EAAoB;AAClE;AACAD,EAAAA,KAAK,CAACzB,OAAN,CAAcK,UAAd,CAAyBE,MAAzB,GAAkC,EAAlC;AACD,CAHD;;AAKAZ,cAAc,CAACsD,iBAAf,GAAmC,UAASxB,KAAT,EAAgByB,OAAhB,EAAyBC,OAAzB,EAAkC;AACnE,QAAMC,eAAe,GAAGF,OAAO,CAAC7C,UAAR,CAAmByC,EAAnB,KAA0BrB,KAAK,CAACzB,OAAN,CAAc8C,EAAhE;AACAI,EAAAA,OAAO,CAAC7C,UAAR,CAAmBgD,MAAnB,GAA6BD,eAAD,GAAoBhE,SAAS,CAACkE,YAAV,CAAuBC,MAA3C,GAAoDnE,SAAS,CAACkE,YAAV,CAAuBE,QAAvG;AACA,SAAOL,OAAO,CAACD,OAAD,CAAd;AACD,CAJD;;AAMAO,MAAM,CAACC,OAAP,GAAiB/D,cAAjB","sourcesContent":["const MapboxDraw = require('@mapbox/mapbox-gl-draw');\nconst Constants = require('@mapbox/mapbox-gl-draw/src/constants');\nconst doubleClickZoom = require('@mapbox/mapbox-gl-draw/src/lib/double_click_zoom');\nconst dragPan = require('../utils/drag_pan');\nconst circle = require('@turf/circle').default;\nconst distance = require('@turf/distance').default;\nconst turfHelpers = require('@turf/helpers');\n\nconst DragCircleMode = {...MapboxDraw.modes.draw_polygon};\n\nDragCircleMode.onSetup = function(opts) {\n  const polygon = this.newFeature({\n    type: Constants.geojsonTypes.FEATURE,\n    properties: {\n      isCircle: true,\n      center: []\n    },\n    geometry: {\n      type: Constants.geojsonTypes.POLYGON,\n      coordinates: [[]]\n    }\n  });\n\n  this.addFeature(polygon);\n\n  this.clearSelectedFeatures();\n  doubleClickZoom.disable(this);\n  dragPan.disable(this);\n  this.updateUIClasses({ mouse: Constants.cursors.ADD });\n  this.activateUIButton(Constants.types.POLYGON);\n  this.setActionableState({\n    trash: true\n  });\n\n  return {\n    polygon,\n    currentVertexPosition: 0\n  };\n};\n\nDragCircleMode.onMouseDown = DragCircleMode.onTouchStart = function (state, e) {\n  const currentCenter = state.polygon.properties.center;\n  if (currentCenter.length === 0) {\n    state.polygon.properties.center = [e.lngLat.lng, e.lngLat.lat];\n  }\n};\n\nDragCircleMode.onDrag = DragCircleMode.onMouseMove = function (state, e) {\n  const center = state.polygon.properties.center;\n  if (center.length > 0) {\n    const distanceInKm = distance(\n      turfHelpers.point(center),\n      turfHelpers.point([e.lngLat.lng, e.lngLat.lat]),\n      { units : 'kilometers'});\n    const circleFeature = circle(center, distanceInKm);\n    state.polygon.incomingCoords(circleFeature.geometry.coordinates);\n    state.polygon.properties.radiusInKm = distanceInKm;\n  }\n};\n\nDragCircleMode.onMouseUp = DragCircleMode.onTouchEnd = function (state, e) {\n  dragPan.enable(this);\n  return this.changeMode(Constants.modes.SIMPLE_SELECT, { featureIds: [state.polygon.id] });\n};\n\nDragCircleMode.onClick = DragCircleMode.onTap = function (state, e) {\n  // don't draw the circle if its a tap or click event\n  state.polygon.properties.center = [];\n};\n\nDragCircleMode.toDisplayFeatures = function(state, geojson, display) {\n  const isActivePolygon = geojson.properties.id === state.polygon.id;\n  geojson.properties.active = (isActivePolygon) ? Constants.activeStates.ACTIVE : Constants.activeStates.INACTIVE;\n  return display(geojson);\n};\n\nmodule.exports = DragCircleMode;"]},"metadata":{},"sourceType":"script"}