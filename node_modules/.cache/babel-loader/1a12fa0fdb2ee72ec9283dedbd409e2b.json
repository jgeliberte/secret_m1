{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport CellActions from './Cell/CellActions';\nimport CellExpand from './Cell/CellExpander';\nimport CellContent from './Cell/CellContent';\nimport { isFrozen } from './ColumnUtils';\n\nfunction getSubRowOptions(_a) {\n  var rowIdx = _a.rowIdx,\n      idx = _a.idx,\n      rowData = _a.rowData,\n      expandArgs = _a.expandableOptions;\n  return {\n    rowIdx: rowIdx,\n    idx: idx,\n    rowData: rowData,\n    expandArgs: expandArgs\n  };\n}\n\nvar Cell =\n/** @class */\nfunction (_super) {\n  __extends(Cell, _super);\n\n  function Cell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.cell = React.createRef();\n\n    _this.handleCellClick = function () {\n      var _a = _this.props,\n          idx = _a.idx,\n          rowIdx = _a.rowIdx,\n          cellMetaData = _a.cellMetaData;\n      cellMetaData.onCellClick({\n        idx: idx,\n        rowIdx: rowIdx\n      });\n    };\n\n    _this.handleCellMouseDown = function () {\n      var _a = _this.props,\n          idx = _a.idx,\n          rowIdx = _a.rowIdx,\n          cellMetaData = _a.cellMetaData;\n\n      if (cellMetaData.onCellMouseDown) {\n        cellMetaData.onCellMouseDown({\n          idx: idx,\n          rowIdx: rowIdx\n        });\n      }\n    };\n\n    _this.handleCellMouseEnter = function () {\n      var _a = _this.props,\n          idx = _a.idx,\n          rowIdx = _a.rowIdx,\n          cellMetaData = _a.cellMetaData;\n\n      if (cellMetaData.onCellMouseEnter) {\n        cellMetaData.onCellMouseEnter({\n          idx: idx,\n          rowIdx: rowIdx\n        });\n      }\n    };\n\n    _this.handleCellContextMenu = function () {\n      var _a = _this.props,\n          idx = _a.idx,\n          rowIdx = _a.rowIdx,\n          cellMetaData = _a.cellMetaData;\n      cellMetaData.onCellContextMenu({\n        idx: idx,\n        rowIdx: rowIdx\n      });\n    };\n\n    _this.handleCellDoubleClick = function (e) {\n      e.stopPropagation();\n      var _a = _this.props,\n          idx = _a.idx,\n          rowIdx = _a.rowIdx,\n          cellMetaData = _a.cellMetaData;\n      cellMetaData.onCellDoubleClick({\n        idx: idx,\n        rowIdx: rowIdx\n      });\n    };\n\n    _this.handleCellExpand = function () {\n      var onCellExpand = _this.props.cellMetaData.onCellExpand;\n\n      if (onCellExpand) {\n        onCellExpand(getSubRowOptions(_this.props));\n      }\n    };\n\n    _this.handleDragOver = function (e) {\n      e.preventDefault();\n    };\n\n    return _this;\n  }\n\n  Cell.prototype.componentDidMount = function () {\n    this.checkScroll();\n  };\n\n  Cell.prototype.componentDidUpdate = function (prevProps) {\n    if (isFrozen(prevProps.column) && !isFrozen(this.props.column)) {\n      this.removeScroll();\n    }\n  };\n\n  Cell.prototype.getStyle = function () {\n    return {\n      width: this.props.column.width,\n      height: this.props.height,\n      left: this.props.column.left\n    };\n  };\n\n  Cell.prototype.getCellClass = function () {\n    var _a = this.props,\n        idx = _a.idx,\n        column = _a.column,\n        lastFrozenColumnIndex = _a.lastFrozenColumnIndex,\n        isRowSelected = _a.isRowSelected,\n        tooltip = _a.tooltip,\n        expandableOptions = _a.expandableOptions;\n    return classNames(column.cellClass, 'react-grid-Cell', this.props.className, {\n      'react-grid-Cell--frozen': isFrozen(column),\n      'rdg-last--frozen': lastFrozenColumnIndex === idx,\n      'row-selected': isRowSelected,\n      'has-tooltip': !!tooltip,\n      'rdg-child-cell': expandableOptions && expandableOptions.subRowDetails && expandableOptions.treeDepth > 0\n    });\n  };\n\n  Cell.prototype.checkScroll = function () {\n    var _a = this.props,\n        scrollLeft = _a.scrollLeft,\n        column = _a.column;\n    var node = this.cell.current;\n\n    if (isFrozen(column) && node && node.style.transform != null) {\n      this.setScrollLeft(scrollLeft);\n    }\n  };\n\n  Cell.prototype.setScrollLeft = function (scrollLeft) {\n    var node = this.cell.current;\n\n    if (node) {\n      node.style.transform = \"translateX(\" + scrollLeft + \"px)\";\n    }\n  };\n\n  Cell.prototype.removeScroll = function () {\n    var node = this.cell.current;\n\n    if (node) {\n      node.style.transform = 'none';\n    }\n  };\n\n  Cell.prototype.getEvents = function () {\n    var _a = this.props,\n        column = _a.column,\n        cellMetaData = _a.cellMetaData,\n        idx = _a.idx,\n        rowIdx = _a.rowIdx,\n        rowData = _a.rowData;\n    var columnEvents = column.events;\n    var allEvents = {\n      onClick: this.handleCellClick,\n      onMouseDown: this.handleCellMouseDown,\n      onMouseEnter: this.handleCellMouseEnter,\n      onDoubleClick: this.handleCellDoubleClick,\n      onContextMenu: this.handleCellContextMenu,\n      onDragOver: this.handleDragOver\n    };\n\n    if (!columnEvents) {\n      return allEvents;\n    }\n\n    var _loop_1 = function (event_1) {\n      var columnEventHandler = columnEvents[event_1];\n\n      if (columnEventHandler) {\n        var eventInfo_1 = {\n          idx: idx,\n          rowIdx: rowIdx,\n          column: column,\n          rowId: rowData[cellMetaData.rowKey]\n        };\n\n        if (allEvents.hasOwnProperty(event_1)) {\n          var existingEvent_1 = allEvents[event_1];\n\n          allEvents[event_1] = function (e) {\n            existingEvent_1(e);\n            columnEventHandler(e, eventInfo_1);\n          };\n        } else {\n          allEvents[event_1] = function (e) {\n            columnEventHandler(e, eventInfo_1);\n          };\n        }\n      }\n    };\n\n    for (var event_1 in columnEvents) {\n      _loop_1(event_1);\n    }\n\n    return allEvents;\n  };\n\n  Cell.prototype.render = function () {\n    var _a = this.props,\n        column = _a.column,\n        children = _a.children,\n        expandableOptions = _a.expandableOptions,\n        cellMetaData = _a.cellMetaData,\n        rowData = _a.rowData;\n\n    if (column.hidden) {\n      return null;\n    }\n\n    var style = this.getStyle();\n    var className = this.getCellClass();\n    var cellContent = children || React.createElement(CellContent, __assign({}, this.props));\n    var events = this.getEvents();\n    var cellExpander = expandableOptions && expandableOptions.canExpand && React.createElement(CellExpand, {\n      expanded: expandableOptions.expanded,\n      onCellExpand: this.handleCellExpand\n    });\n    return React.createElement(\"div\", __assign({\n      ref: this.cell,\n      className: className,\n      style: style\n    }, events), React.createElement(CellActions, {\n      column: column,\n      rowData: rowData,\n      cellMetaData: cellMetaData\n    }), cellExpander, cellContent);\n  };\n\n  Cell.defaultProps = {\n    value: ''\n  };\n  return Cell;\n}(React.PureComponent);\n\nexport default Cell;","map":{"version":3,"sources":["../src/Cell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport { SubRowOptions, ColumnEventInfo, CellRenderer, CellRendererProps } from './common/types';\nimport CellActions from './Cell/CellActions';\nimport CellExpand from './Cell/CellExpander';\nimport CellContent from './Cell/CellContent';\nimport { isFrozen } from './ColumnUtils';\n\nfunction getSubRowOptions<R>({ rowIdx, idx, rowData, expandableOptions: expandArgs }: Props<R>): SubRowOptions<R> {\n  return { rowIdx, idx, rowData, expandArgs };\n}\n\nexport interface Props<R> extends CellRendererProps<R> {\n  // TODO: Check if these props are required or not. These are most likely set by custom cell renderer\n  className?: string;\n  tooltip?: string | null;\n  cellControls?: unknown;\n}\n\nexport default class Cell<R> extends React.PureComponent<Props<R>> implements CellRenderer {\n  static defaultProps = {\n    value: ''\n  };\n\n  private readonly cell = React.createRef<HTMLDivElement>();\n\n  componentDidMount() {\n    this.checkScroll();\n  }\n\n  componentDidUpdate(prevProps: Props<R>) {\n    if (isFrozen(prevProps.column) && !isFrozen(this.props.column)) {\n      this.removeScroll();\n    }\n  }\n\n  handleCellClick = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    cellMetaData.onCellClick({ idx, rowIdx });\n  };\n\n  handleCellMouseDown = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    if (cellMetaData.onCellMouseDown) {\n      cellMetaData.onCellMouseDown({ idx, rowIdx });\n    }\n  };\n\n  handleCellMouseEnter = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    if (cellMetaData.onCellMouseEnter) {\n      cellMetaData.onCellMouseEnter({ idx, rowIdx });\n    }\n  };\n\n  handleCellContextMenu = () => {\n    const { idx, rowIdx, cellMetaData } = this.props;\n    cellMetaData.onCellContextMenu({ idx, rowIdx });\n  };\n\n  handleCellDoubleClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n    const { idx, rowIdx, cellMetaData } = this.props;\n    cellMetaData.onCellDoubleClick({ idx, rowIdx });\n  };\n\n  handleCellExpand = () => {\n    const { onCellExpand } = this.props.cellMetaData;\n    if (onCellExpand) {\n      onCellExpand(getSubRowOptions(this.props));\n    }\n  };\n\n  handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n  };\n\n  getStyle(): React.CSSProperties {\n    return {\n      width: this.props.column.width,\n      height: this.props.height,\n      left: this.props.column.left\n    };\n  }\n\n  getCellClass() {\n    const { idx, column, lastFrozenColumnIndex, isRowSelected, tooltip, expandableOptions } = this.props;\n    return classNames(\n      column.cellClass,\n      'react-grid-Cell',\n      this.props.className, {\n        'react-grid-Cell--frozen': isFrozen(column),\n        'rdg-last--frozen': lastFrozenColumnIndex === idx,\n        'row-selected': isRowSelected,\n        'has-tooltip': !!tooltip,\n        'rdg-child-cell': expandableOptions && expandableOptions.subRowDetails && expandableOptions.treeDepth > 0\n      }\n    );\n  }\n\n  checkScroll() {\n    const { scrollLeft, column } = this.props;\n    const node = this.cell.current;\n    if (isFrozen(column) && node && node.style.transform != null) {\n      this.setScrollLeft(scrollLeft);\n    }\n  }\n\n  setScrollLeft(scrollLeft: number) {\n    const node = this.cell.current;\n    if (node) {\n      node.style.transform = `translateX(${scrollLeft}px)`;\n    }\n  }\n\n  removeScroll() {\n    const node = this.cell.current;\n    if (node) {\n      node.style.transform = 'none';\n    }\n  }\n\n  getEvents() {\n    const { column, cellMetaData, idx, rowIdx, rowData } = this.props;\n    const columnEvents = column.events;\n    const allEvents: { [key: string]: Function } = {\n      onClick: this.handleCellClick,\n      onMouseDown: this.handleCellMouseDown,\n      onMouseEnter: this.handleCellMouseEnter,\n      onDoubleClick: this.handleCellDoubleClick,\n      onContextMenu: this.handleCellContextMenu,\n      onDragOver: this.handleDragOver\n    };\n\n    if (!columnEvents) {\n      return allEvents;\n    }\n\n    for (const event in columnEvents) {\n      const columnEventHandler = columnEvents[event];\n      if (columnEventHandler) {\n        const eventInfo: ColumnEventInfo<R> = {\n          idx,\n          rowIdx,\n          column,\n          rowId: rowData[cellMetaData.rowKey]\n        };\n        if (allEvents.hasOwnProperty(event)) {\n          const existingEvent = allEvents[event];\n          allEvents[event] = (e: Event) => {\n            existingEvent(e);\n            columnEventHandler(e, eventInfo);\n          };\n        } else {\n          allEvents[event] = (e: Event) => {\n            columnEventHandler(e, eventInfo);\n          };\n        }\n      }\n    }\n\n    return allEvents;\n  }\n\n  render() {\n    const { column, children, expandableOptions, cellMetaData, rowData } = this.props;\n    if (column.hidden) {\n      return null;\n    }\n\n    const style = this.getStyle();\n    const className = this.getCellClass();\n    const cellContent = children || <CellContent<R> {...this.props} />;\n    const events = this.getEvents();\n    const cellExpander = expandableOptions && expandableOptions.canExpand && (\n      <CellExpand\n        expanded={expandableOptions.expanded}\n        onCellExpand={this.handleCellExpand}\n      />\n    );\n\n    return (\n      <div\n        ref={this.cell}\n        className={className}\n        style={style}\n        {...events}\n      >\n        <CellActions<R>\n          column={column}\n          rowData={rowData}\n          cellMetaData={cellMetaData}\n        />\n        {cellExpander}\n        {cellContent}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}