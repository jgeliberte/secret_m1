{"ast":null,"code":"import React from 'react';\nimport { isElement, isValidElementType } from 'react-is';\nexport default function ToolbarContainer(_a) {\n  var toolbar = _a.toolbar,\n      columns = _a.columns,\n      rowsCount = _a.rowsCount,\n      onToggleFilter = _a.onToggleFilter;\n\n  if (!toolbar) {\n    return null;\n  }\n\n  var toolBarProps = {\n    columns: columns,\n    onToggleFilter: onToggleFilter,\n    rowsCount: rowsCount\n  };\n\n  if (isElement(toolbar)) {\n    return React.cloneElement(toolbar, toolBarProps);\n  }\n\n  if (isValidElementType(toolbar)) {\n    return React.createElement(toolbar, toolBarProps);\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../src/ToolbarContainer.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,SAAT,EAAoB,kBAApB,QAA8C,UAA9C;AAYA,eAAc,SAAU,gBAAV,CAA8B,EAA9B,EAAuG;MAAvE,OAAA,GAAA,EAAA,CAAA,O;MAAS,OAAA,GAAA,EAAA,CAAA,O;MAAS,SAAA,GAAA,EAAA,CAAA,S;MAAW,cAAA,GAAA,EAAA,CAAA,c;;AACzE,MAAI,CAAC,OAAL,EAAc;AACZ,WAAO,IAAP;AACD;;AAED,MAAM,YAAY,GAAG;AAAE,IAAA,OAAO,EAAA,OAAT;AAAW,IAAA,cAAc,EAAA,cAAzB;AAA2B,IAAA,SAAS,EAAA;AAApC,GAArB;;AAEA,MAAI,SAAS,CAAC,OAAD,CAAb,EAAwB;AACtB,WAAO,KAAK,CAAC,YAAN,CAAmB,OAAnB,EAA4B,YAA5B,CAAP;AACD;;AAED,MAAI,kBAAkB,CAAC,OAAD,CAAtB,EAAiC;AAC/B,WAAO,KAAK,CAAC,aAAN,CAAoB,OAApB,EAA6B,YAA7B,CAAP;AACD;;AAED,SAAO,IAAP;AACD","sourcesContent":["import React from 'react';\nimport { isElement, isValidElementType } from 'react-is';\nimport { ColumnList } from './common/types';\nimport { ReactDataGridProps } from './ReactDataGrid';\n\nexport interface ToolbarProps<R> {\n  columns: ColumnList<R>;\n  rowsCount: number;\n  onToggleFilter(): void;\n}\n\ntype ToolbarContainerProps<R> = ToolbarProps<R> & Pick<ReactDataGridProps<R>, 'toolbar'>;\n\nexport default function ToolbarContainer<R>({ toolbar, columns, rowsCount, onToggleFilter }: ToolbarContainerProps<R>) {\n  if (!toolbar) {\n    return null;\n  }\n\n  const toolBarProps = { columns, onToggleFilter, rowsCount };\n\n  if (isElement(toolbar)) {\n    return React.cloneElement(toolbar, toolBarProps);\n  }\n\n  if (isValidElementType(toolbar)) {\n    return React.createElement(toolbar, toolBarProps);\n  }\n\n  return null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}