{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Shared\\\\TaggerWithIcon.js\";\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { AppContext } from \"../../AppContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { TAGSAMPLES } from \"../../graphQL/useQueryTagSamples\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Badge from \"@material-ui/core/Badge\";\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\nimport Tags from \"./Tagger\";\nimport Dialog from \"@material-ui/core/Dialog\";\nexport default function TaggerWithIcon(props) {\n  const [stateApp] = useContext(AppContext);\n  const [tagsCounter, setTagsCounter] = useState(0);\n  const [openDialog, setOpenDialog] = useState(false);\n  const useStyles = makeStyles(theme => ({\n    icons: {\n      color: \"#ffffff\",\n      marginLeft: \"auto\",\n      \"&:hover\": {\n        backgroundColor: \"#031d40\"\n      }\n    },\n    iconSelected: {\n      color: theme.palette.secondary.main\n    },\n    tagsDiv: {\n      margin: \"8px\"\n    }\n  }));\n  const classes = useStyles();\n  const [getTagSamples, {\n    data: dataTagSamples\n  }] = useLazyQuery(TAGSAMPLES);\n  useEffect(() => {\n    if (stateApp.user && stateApp.user.mongoId && props.objectId) {\n      getTagSamples({\n        variables: {\n          objectsIdsArray: [props.objectId],\n          userId: stateApp.user.mongoId\n        }\n      });\n    }\n  }, [stateApp.user, props.objectId]);\n  useEffect(() => {\n    if (dataTagSamples && dataTagSamples.tagSamples) {\n      if (dataTagSamples.tagSamples.length > 0) {\n        setTagsCounter(dataTagSamples.tagSamples[0].total);\n      } else {\n        setTagsCounter(0);\n      }\n    }\n  }, [dataTagSamples]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: !tagsCounter || tagsCounter === 0 ? \"Add Tags\" : \"Tags\",\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    badgeContent: props.iconZiseSmall ? null : tagsCounter,\n    color: \"secondary\" // variant={props.iconZiseSmall ? \"dot\" : \"standard\"}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    size: props.iconZiseSmall ? \"small\" : \"medium\",\n    color: \"primary\",\n    className: `${classes.icons}  ${openDialog || tagsCounter && tagsCounter > 0 ? classes.iconSelected : \"\"}`,\n    onClick: () => {\n      setOpenDialog(true);\n    },\n    \"aria-label\": \"show tags\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(LocalOfferIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  })))), openDialog && /*#__PURE__*/React.createElement(Dialog, {\n    className: classes.dialog,\n    open: openDialog,\n    onClose: () => {\n      setOpenDialog(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tagsDiv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Tags, {\n    targetSourceId: props.objectId,\n    targetLabel: props.targetLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Shared/TaggerWithIcon.js"],"names":["React","useEffect","useContext","useState","AppContext","makeStyles","IconButton","TAGSAMPLES","useLazyQuery","Tooltip","Badge","LocalOfferIcon","Tags","Dialog","TaggerWithIcon","props","stateApp","tagsCounter","setTagsCounter","openDialog","setOpenDialog","useStyles","theme","icons","color","marginLeft","backgroundColor","iconSelected","palette","secondary","main","tagsDiv","margin","classes","getTagSamples","data","dataTagSamples","user","mongoId","objectId","variables","objectsIdsArray","userId","tagSamples","length","total","iconZiseSmall","dialog","targetLabel"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from \"react\";\r\nimport { AppContext } from \"../../AppContext\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { TAGSAMPLES } from \"../../graphQL/useQueryTagSamples\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport LocalOfferIcon from \"@material-ui/icons/LocalOffer\";\r\nimport Tags from \"./Tagger\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\n\r\nexport default function TaggerWithIcon(props) {\r\n  const [stateApp] = useContext(AppContext);\r\n  const [tagsCounter, setTagsCounter] = useState(0);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    icons: {\r\n      color: \"#ffffff\",\r\n      marginLeft: \"auto\",\r\n      \"&:hover\": {\r\n        backgroundColor: \"#031d40\",\r\n      },\r\n    },\r\n    iconSelected: {\r\n      color: theme.palette.secondary.main,\r\n    },\r\n    tagsDiv: {\r\n      margin: \"8px\",\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const [getTagSamples, { data: dataTagSamples }] = useLazyQuery(TAGSAMPLES);\r\n\r\n  useEffect(() => {\r\n    if (stateApp.user && stateApp.user.mongoId && props.objectId) {\r\n      getTagSamples({\r\n        variables: {\r\n          objectsIdsArray: [props.objectId],\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n    }\r\n  }, [stateApp.user, props.objectId]);\r\n\r\n  useEffect(() => {\r\n    if (dataTagSamples && dataTagSamples.tagSamples) {\r\n      if (dataTagSamples.tagSamples.length > 0) {\r\n        setTagsCounter(dataTagSamples.tagSamples[0].total);\r\n      } else {\r\n        setTagsCounter(0);\r\n      }\r\n    }\r\n  }, [dataTagSamples]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Tooltip\r\n        title={!tagsCounter || tagsCounter === 0 ? \"Add Tags\" : \"Tags\"}\r\n        placement=\"top\"\r\n      >\r\n        <Badge\r\n          badgeContent={props.iconZiseSmall ? null : tagsCounter}\r\n          color=\"secondary\"\r\n          // variant={props.iconZiseSmall ? \"dot\" : \"standard\"}\r\n        >\r\n          <IconButton\r\n            size={props.iconZiseSmall ? \"small\" : \"medium\"}\r\n            color=\"primary\"\r\n            className={`${classes.icons}  ${\r\n              openDialog || (tagsCounter && tagsCounter > 0)\r\n                ? classes.iconSelected\r\n                : \"\"\r\n            }`}\r\n            onClick={() => {\r\n              setOpenDialog(true);\r\n            }}\r\n            aria-label=\"show tags\"\r\n          >\r\n            <LocalOfferIcon />\r\n          </IconButton>\r\n        </Badge>\r\n      </Tooltip>\r\n      {openDialog && (\r\n        <Dialog\r\n          className={classes.dialog}\r\n          open={openDialog}\r\n          onClose={() => {\r\n            setOpenDialog(false);\r\n          }}\r\n        >\r\n          <div className={classes.tagsDiv}>\r\n            <Tags\r\n              targetSourceId={props.objectId}\r\n              targetLabel={props.targetLabel}\r\n            />\r\n          </div>\r\n        </Dialog>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}