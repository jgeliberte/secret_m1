{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Shared\\\\svgIcons\\\\base.js\";\n// Copyright (c) 2020 Uber Technologies, Inc.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in\n// all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n// THE SOFTWARE.\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nconst getStyleClassFromColor = (totalColor, colors) => new Array(totalColor).fill(1).reduce((accu, c, i) => `${accu}.cr${i + 1} {fill:${colors[i % colors.length]};}`, '');\n\nexport default class Base extends Component {\n  render() {\n    const {\n      height,\n      width,\n      viewBox,\n      style,\n      children,\n      predefinedClassName,\n      className,\n      colors,\n      totalColor,\n      ...props\n    } = this.props;\n    const svgHeight = height;\n    const svgWidth = width || svgHeight;\n    const fillStyle = Array.isArray(colors) && totalColor && getStyleClassFromColor(totalColor, colors);\n    return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n      viewBox: viewBox,\n      width: svgWidth,\n      height: svgHeight,\n      style: style,\n      className: `${predefinedClassName} ${className}`\n    }, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }), fillStyle ? /*#__PURE__*/React.createElement(\"style\", {\n      type: \"text/css\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 22\n      }\n    }, fillStyle) : null, children);\n  }\n\n}\nBase.displayName = 'Base Icon';\nBase.propTypes = {\n  /** Set the height of the icon, ex. '16px' */\n  height: PropTypes.string,\n\n  /** Set the width of the icon, ex. '16px' */\n  width: PropTypes.string,\n\n  /** Set the viewbox of the svg */\n  viewBox: PropTypes.string,\n\n  /** Path element */\n  children: PropTypes.node,\n  predefinedClassName: PropTypes.string,\n  className: PropTypes.string\n};\nBase.defaultProps = {\n  height: null,\n  width: null,\n  viewBox: '0 0 64 64',\n  predefinedClassName: '',\n  className: '',\n  style: {\n    fill: 'currentColor'\n  }\n};","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Shared/svgIcons/base.js"],"names":["React","Component","PropTypes","getStyleClassFromColor","totalColor","colors","Array","fill","reduce","accu","c","i","length","Base","render","height","width","viewBox","style","children","predefinedClassName","className","props","svgHeight","svgWidth","fillStyle","isArray","displayName","propTypes","string","node","defaultProps"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,sBAAsB,GAAG,CAACC,UAAD,EAAaC,MAAb,KAC7B,IAAIC,KAAJ,CAAUF,UAAV,EACGG,IADH,CACQ,CADR,EAEGC,MAFH,CAEU,CAACC,IAAD,EAAOC,CAAP,EAAUC,CAAV,KAAiB,GAAEF,IAAK,MAAKE,CAAC,GAAG,CAAE,UAASN,MAAM,CAACM,CAAC,GAAGN,MAAM,CAACO,MAAZ,CAAoB,IAFhF,EAEqF,EAFrF,CADF;;AAKA,eAAe,MAAMC,IAAN,SAAmBZ,SAAnB,CAA6B;AA4B1Ca,EAAAA,MAAM,GAAG;AACP,UAAM;AACJC,MAAAA,MADI;AAEJC,MAAAA,KAFI;AAGJC,MAAAA,OAHI;AAIJC,MAAAA,KAJI;AAKJC,MAAAA,QALI;AAMJC,MAAAA,mBANI;AAOJC,MAAAA,SAPI;AAQJhB,MAAAA,MARI;AASJD,MAAAA,UATI;AAUJ,SAAGkB;AAVC,QAWF,KAAKA,KAXT;AAYA,UAAMC,SAAS,GAAGR,MAAlB;AACA,UAAMS,QAAQ,GAAGR,KAAK,IAAIO,SAA1B;AAEA,UAAME,SAAS,GACbnB,KAAK,CAACoB,OAAN,CAAcrB,MAAd,KAAyBD,UAAzB,IAAuCD,sBAAsB,CAACC,UAAD,EAAaC,MAAb,CAD/D;AAGA,wBACE;AACE,MAAA,OAAO,EAAEY,OADX;AAEE,MAAA,KAAK,EAAEO,QAFT;AAGE,MAAA,MAAM,EAAED,SAHV;AAIE,MAAA,KAAK,EAAEL,KAJT;AAKE,MAAA,SAAS,EAAG,GAAEE,mBAAoB,IAAGC,SAAU;AALjD,OAMMC,KANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAQGG,SAAS,gBAAG;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAwBA,SAAxB,CAAH,GAAgD,IAR5D,EASGN,QATH,CADF;AAaD;;AA5DyC;AAAvBN,I,CACZc,W,GAAc,W;AADFd,I,CAGZe,S,GAAY;AACjB;AACAb,EAAAA,MAAM,EAAEb,SAAS,CAAC2B,MAFD;;AAGjB;AACAb,EAAAA,KAAK,EAAEd,SAAS,CAAC2B,MAJA;;AAKjB;AACAZ,EAAAA,OAAO,EAAEf,SAAS,CAAC2B,MANF;;AAOjB;AACAV,EAAAA,QAAQ,EAAEjB,SAAS,CAAC4B,IARH;AAUjBV,EAAAA,mBAAmB,EAAElB,SAAS,CAAC2B,MAVd;AAWjBR,EAAAA,SAAS,EAAEnB,SAAS,CAAC2B;AAXJ,C;AAHAhB,I,CAiBZkB,Y,GAAe;AACpBhB,EAAAA,MAAM,EAAE,IADY;AAEpBC,EAAAA,KAAK,EAAE,IAFa;AAGpBC,EAAAA,OAAO,EAAE,WAHW;AAIpBG,EAAAA,mBAAmB,EAAE,EAJD;AAKpBC,EAAAA,SAAS,EAAE,EALS;AAMpBH,EAAAA,KAAK,EAAE;AACLX,IAAAA,IAAI,EAAE;AADD;AANa,C","sourcesContent":["// Copyright (c) 2020 Uber Technologies, Inc.\r\n//\r\n// Permission is hereby granted, free of charge, to any person obtaining a copy\r\n// of this software and associated documentation files (the \"Software\"), to deal\r\n// in the Software without restriction, including without limitation the rights\r\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n// copies of the Software, and to permit persons to whom the Software is\r\n// furnished to do so, subject to the following conditions:\r\n//\r\n// The above copyright notice and this permission notice shall be included in\r\n// all copies or substantial portions of the Software.\r\n//\r\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\r\n// THE SOFTWARE.\r\n\r\nimport React, {Component} from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst getStyleClassFromColor = (totalColor, colors) =>\r\n  new Array(totalColor)\r\n    .fill(1)\r\n    .reduce((accu, c, i) => `${accu}.cr${i + 1} {fill:${colors[i % colors.length]};}`, '');\r\n\r\nexport default class Base extends Component {\r\n  static displayName = 'Base Icon';\r\n\r\n  static propTypes = {\r\n    /** Set the height of the icon, ex. '16px' */\r\n    height: PropTypes.string,\r\n    /** Set the width of the icon, ex. '16px' */\r\n    width: PropTypes.string,\r\n    /** Set the viewbox of the svg */\r\n    viewBox: PropTypes.string,\r\n    /** Path element */\r\n    children: PropTypes.node,\r\n\r\n    predefinedClassName: PropTypes.string,\r\n    className: PropTypes.string\r\n  };\r\n\r\n  static defaultProps = {\r\n    height: null,\r\n    width: null,\r\n    viewBox: '0 0 64 64',\r\n    predefinedClassName: '',\r\n    className: '',\r\n    style: {\r\n      fill: 'currentColor'\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      height,\r\n      width,\r\n      viewBox,\r\n      style,\r\n      children,\r\n      predefinedClassName,\r\n      className,\r\n      colors,\r\n      totalColor,\r\n      ...props\r\n    } = this.props;\r\n    const svgHeight = height;\r\n    const svgWidth = width || svgHeight;\r\n\r\n    const fillStyle =\r\n      Array.isArray(colors) && totalColor && getStyleClassFromColor(totalColor, colors);\r\n\r\n    return (\r\n      <svg\r\n        viewBox={viewBox}\r\n        width={svgWidth}\r\n        height={svgHeight}\r\n        style={style}\r\n        className={`${predefinedClassName} ${className}`}\r\n        {...props}\r\n      >\r\n        {fillStyle ? <style type=\"text/css\">{fillStyle}</style> : null}\r\n        {children}\r\n      </svg>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}