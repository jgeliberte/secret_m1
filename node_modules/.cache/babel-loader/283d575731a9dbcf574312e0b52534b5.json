{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterDatePickerSpud.js\";\nimport React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport moment from \"moment\";\nimport { NavigationContext } from \"../NavigationContext\"; // DOCUMENTATION FOR THIS COMPONENT IS ON FILTERDATEPICKERPERMIT\n\nconst useStyles = makeStyles(theme => ({\n  root: {// display: \"flex\",\n    // flexWrap: \"wrap\",\n    // flexDirection: \"column\",\n    // justifyContent: \"space-around\",\n    // flexGrow: 1\n  },\n  datesRow: {\n    display: \"flex\",\n    flexDirection: \"row\" // flex: 1,\n    // flexGrow: 1\n\n  },\n  datePicker: {\n    margin: \"15px\",\n    // minWidth: 175,\n    // maxWidth: 176,\n    \"&& span\": {\n      pointerEvents: \"none\"\n    }\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  chip: {\n    margin: 10\n  }\n}));\nexport default function FilterDatePickerSpud(props) {\n  const classes = useStyles();\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [selectedStartDate, handleStartDateChang] = useState(moment().subtract(120, 'Years'));\n  const [selectedEndDate, handleEndDateChange] = useState(moment());\n  const [spudFromDate, setSpudFromDate] = useState({\n    check: false,\n    date: moment()\n  });\n  const [spudToDate, setSpudToDate] = useState({\n    check: false,\n    date: moment()\n  });\n  const [dateTypeName, setDateTypeName] = useState(stateNav.dateTypeName ? stateNav.dateTypeName : []);\n  const setFilterName = useCallback(() => {\n    let filter;\n\n    if (spudFromDate.date._isValid === true && spudToDate.date._isValid === true) {\n      const checkDate = moment.parseZone(spudToDate.date).utc(true).valueOf();\n      const fromDate = moment.parseZone(spudFromDate.date).utc(true).valueOf();\n\n      if (spudFromDate.check && !spudToDate.check) {\n        filter = [\"all\", [\">=\", [\"get\", \"spudDate\"], fromDate], [\"<=\", [\"get\", \"spudDate\"], checkDate]];\n      } else if (!spudFromDate.check && spudToDate.check) {\n        let checkDate = moment().subtract(120, 'Years');\n        let fromDate = moment.parseZone(checkDate).utc(true).valueOf();\n        const toDate = moment.parseZone(spudToDate.date).utc(true).valueOf();\n        filter = [\"all\", [\">=\", [\"get\", \"spudDate\"], fromDate], [\"<=\", [\"get\", \"spudDate\"], toDate]];\n      } else {\n        const fromDate = moment.parseZone(spudFromDate.date).utc(true).valueOf();\n        const toDate = moment.parseZone(spudToDate.date).utc(true).valueOf();\n        filter = [\"all\", [\">=\", [\"get\", \"spudDate\"], fromDate], [\"<=\", [\"get\", \"spudDate\"], toDate]];\n      }\n    } else {\n      filter = null;\n    }\n\n    console.log(\"Spud Date dates change filter\", filter);\n    setStateNav(stateNav => ({ ...stateNav,\n      filterSpudDateRange: filter\n    }));\n  }, [setStateNav, spudFromDate.check, spudFromDate.date, spudToDate.check, spudToDate.date]);\n  useEffect(() => {\n    if (spudFromDate.check === true) {\n      setFilterName();\n    }\n\n    if (spudToDate.check === true) {\n      setFilterName();\n    }\n  }, [spudFromDate.check, spudToDate.check, setFilterName]);\n  const setvaluesFrom = useCallback(() => {\n    if (stateNav.spudDateFrom === null) {\n      return;\n    } else {\n      handleStartDateChang(stateNav.spudDateFrom);\n      setSpudFromDate({\n        check: true,\n        date: stateNav.spudDateFrom\n      });\n    }\n  }, [stateNav.spudDateFrom]);\n  const setvaluesTo = useCallback(() => {\n    if (stateNav.spudDateTo === null) {\n      return;\n    } else {\n      handleEndDateChange(stateNav.spudDateTo);\n      setSpudToDate({\n        check: true,\n        date: stateNav.spudDateTo\n      });\n    }\n  }, [stateNav.spudDateTo]);\n  useEffect(() => {\n    if (dateTypeName.length > 0) {\n      setvaluesFrom();\n      setvaluesTo();\n    }\n  }, [setvaluesTo, dateTypeName, setvaluesFrom]);\n\n  const handleStartDate = date => {\n    if (date === null) {\n      const formatDateReset = moment().subtract(120, 'Years');\n      setStateNav(stateNav => ({ ...stateNav,\n        spudDateFrom: null,\n        filterSpudDateRange: null\n      }));\n      handleStartDateChang(formatDateReset);\n    } else {\n      const formatDateAfter = moment(date);\n      let dateName = [];\n      setSpudFromDate({\n        check: true,\n        date: formatDateAfter\n      });\n      handleStartDateChang(formatDateAfter);\n      dateName.push(\"Spud\");\n      setDateTypeName(dateName);\n      setStateNav(stateNav => ({ ...stateNav,\n        spudDateFrom: formatDateAfter,\n        dateTypeName: dateName\n      }));\n    }\n  };\n\n  const handleEndDate = date => {\n    if (date === null) {\n      const formatDateReset = moment();\n      setStateNav(stateNav => ({ ...stateNav,\n        spudDateTo: null,\n        filterSpudDateRange: null\n      }));\n      handleEndDateChange(formatDateReset);\n      return;\n    } else {\n      const newDateAfter = moment(date);\n      let dateName = [];\n      setSpudToDate({\n        check: true,\n        date: newDateAfter\n      });\n      handleEndDateChange(newDateAfter);\n      dateName.push(\"Spud\");\n      setDateTypeName(dateName);\n      setStateNav(stateNav => ({ ...stateNav,\n        spudDateTo: newDateAfter,\n        dateTypeName: dateName\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.datesRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n    label: props.labelDates + \" \" + \"From\",\n    className: classes.datePicker,\n    maxDate: moment().subtract(1, 'day'),\n    variant: \"inline\",\n    value: selectedStartDate,\n    onChange: date => handleStartDate(date) //inputVariant=\"outlined\"\n    ,\n    minDateMessage: \"Date should not be before minimal date\",\n    maxDateMessage: \"Date should not be after max date\",\n    disableToolbar: true,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    autoOk: \"true\",\n    format: \"MM/DD/YYYY\" // orientation = 'landscape'\n    // margin = 'normal'\n    ,\n    PopoverProps: {\n      disablePortal: true\n    },\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n    label: props.labelDates + \" \" + \"To\",\n    className: classes.datePicker,\n    variant: \"inline\",\n    maxDate: moment(),\n    value: selectedEndDate,\n    onChange: date => handleEndDate(date) //inputVariant=\"outlined\"\n    ,\n    minDateMessage: \"Date should not be before minimal date\",\n    maxDateMessage: \"Date should not be after max date\",\n    disableToolbar: true,\n    KeyboardButtonProps: {\n      'aria-label': 'change date'\n    },\n    autoOk: \"true\",\n    format: \"MM/DD/YYYY\" // orientation = 'landscape'\n    // margin = 'normal'\n    ,\n    PopoverProps: {\n      disablePortal: true\n    },\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterDatePickerSpud.js"],"names":["React","useState","useContext","useEffect","useCallback","makeStyles","KeyboardDatePicker","moment","NavigationContext","useStyles","theme","root","datesRow","display","flexDirection","datePicker","margin","pointerEvents","chips","flexWrap","chip","FilterDatePickerSpud","props","classes","stateNav","setStateNav","selectedStartDate","handleStartDateChang","subtract","selectedEndDate","handleEndDateChange","spudFromDate","setSpudFromDate","check","date","spudToDate","setSpudToDate","dateTypeName","setDateTypeName","setFilterName","filter","_isValid","checkDate","parseZone","utc","valueOf","fromDate","toDate","console","log","filterSpudDateRange","setvaluesFrom","spudDateFrom","setvaluesTo","spudDateTo","length","handleStartDate","formatDateReset","formatDateAfter","dateName","push","handleEndDate","newDateAfter","labelDates","disablePortal"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\n\r\n// DOCUMENTATION FOR THIS COMPONENT IS ON FILTERDATEPICKERPERMIT\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    // display: \"flex\",\r\n    // flexWrap: \"wrap\",\r\n    // flexDirection: \"column\",\r\n    // justifyContent: \"space-around\",\r\n    // flexGrow: 1\r\n  },\r\n  datesRow: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    // flex: 1,\r\n    // flexGrow: 1\r\n  },\r\n  datePicker: {\r\n    margin: \"15px\",\r\n    // minWidth: 175,\r\n    // maxWidth: 176,\r\n    \"&& span\": {\r\n      pointerEvents: \"none\"\r\n    }\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  chip: {\r\n    margin: 10\r\n  }\r\n}));\r\n\r\nexport default function FilterDatePickerSpud(props) {\r\n  const classes = useStyles();\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [selectedStartDate, handleStartDateChang] = useState(\r\n    moment().subtract(120, 'Years')\r\n  );\r\n  const [selectedEndDate, handleEndDateChange] = useState(\r\n    moment()\r\n  );\r\n  const [spudFromDate, setSpudFromDate] = useState({\r\n    check: false,\r\n    date: moment()\r\n  });\r\n  const [spudToDate, setSpudToDate] = useState({\r\n    check: false,\r\n    date: moment()\r\n  });\r\n\r\n  const [dateTypeName, setDateTypeName] = useState(\r\n    stateNav.dateTypeName ? stateNav.dateTypeName : []\r\n  );\r\n  \r\n  const setFilterName = useCallback(() => {\r\n    let filter;\r\n    if (spudFromDate.date._isValid === true  && spudToDate.date._isValid === true) {\r\n      const checkDate = moment.parseZone(spudToDate.date).utc(true).valueOf()\r\n      const fromDate = moment.parseZone(spudFromDate.date).utc(true).valueOf()\r\n      if(spudFromDate.check && !spudToDate.check){\r\n        filter = [\"all\", [\">=\",[\"get\", \"spudDate\"] ,fromDate], [\"<=\",[\"get\", \"spudDate\"] , checkDate]];\r\n      } else if (!spudFromDate.check && spudToDate.check) {\r\n        let checkDate = moment().subtract(120, 'Years')\r\n        let fromDate = moment.parseZone(checkDate).utc(true).valueOf()\r\n        const toDate =  moment.parseZone(spudToDate.date).utc(true).valueOf()\r\n        filter = [\"all\", [\">=\",[\"get\", \"spudDate\"] ,fromDate], [\"<=\",[\"get\", \"spudDate\"] , toDate]];\r\n      }\r\n      else{\r\n        const fromDate = moment.parseZone(spudFromDate.date).utc(true).valueOf()\r\n        const toDate =  moment.parseZone(spudToDate.date).utc(true).valueOf()\r\n        filter = [\"all\", [\">=\", [\"get\", \"spudDate\"]  ,fromDate], [\"<=\", [\"get\", \"spudDate\"] ,toDate]];\r\n      }\r\n    } else {\r\n      filter = null;\r\n    }\r\n    console.log(\"Spud Date dates change filter\", filter);\r\n    setStateNav(stateNav => ({ ...stateNav, filterSpudDateRange: filter }));\r\n}, [setStateNav, spudFromDate.check, spudFromDate.date, spudToDate.check, spudToDate.date]);\r\n\r\n  useEffect(() => {\r\n    if (spudFromDate.check === true) {\r\n      setFilterName();\r\n    }\r\n    if (spudToDate.check === true) {\r\n      setFilterName();\r\n    }\r\n  }, [spudFromDate.check, spudToDate.check, setFilterName]);\r\n\r\n  const setvaluesFrom = useCallback(() => {\r\n    if (stateNav.spudDateFrom === null) {\r\n      return;\r\n    } else {\r\n      handleStartDateChang(stateNav.spudDateFrom);\r\n      setSpudFromDate({ check: true, date: stateNav.spudDateFrom });\r\n    }\r\n  }, [stateNav.spudDateFrom]);\r\n\r\n  const setvaluesTo = useCallback(() => {\r\n    if (stateNav.spudDateTo === null) {\r\n      return;\r\n    } else {\r\n      handleEndDateChange(stateNav.spudDateTo);\r\n      setSpudToDate({ check: true, date: stateNav.spudDateTo });\r\n    }\r\n  }, [stateNav.spudDateTo]);\r\n\r\n  useEffect(() => {\r\n    if (dateTypeName.length > 0) {\r\n      setvaluesFrom();\r\n      setvaluesTo();\r\n    }\r\n  }, [setvaluesTo, dateTypeName, setvaluesFrom]);\r\n\r\n  const handleStartDate = date => {\r\n\r\n    if (date === null) {\r\n      const formatDateReset = moment().subtract(120, 'Years');\r\n      setStateNav(stateNav => ({\r\n        ...stateNav,\r\n        spudDateFrom: null,\r\n        filterSpudDateRange: null\r\n      }));\r\n      handleStartDateChang(formatDateReset);\r\n    } else {\r\n    const formatDateAfter = moment(date)\r\n    let dateName = [];\r\n    setSpudFromDate({ check: true, date: formatDateAfter });\r\n    handleStartDateChang(formatDateAfter);\r\n    dateName.push(\"Spud\");\r\n    setDateTypeName(dateName);\r\n    setStateNav(stateNav => ({\r\n      ...stateNav,\r\n      spudDateFrom: formatDateAfter,\r\n      dateTypeName: dateName\r\n    }));\r\n  }\r\n  };\r\n \r\n  const handleEndDate = date => {\r\n    if (date === null) {\r\n      const formatDateReset = moment();\r\n      setStateNav(stateNav => ({ ...stateNav, spudDateTo: null, filterSpudDateRange: null }));\r\n      handleEndDateChange(formatDateReset);\r\n      return;\r\n    } else {\r\n    const newDateAfter = moment(date)\r\n    let dateName = [];\r\n    setSpudToDate({ check: true, date: newDateAfter });\r\n    handleEndDateChange(newDateAfter);\r\n    dateName.push(\"Spud\");\r\n    setDateTypeName(dateName);\r\n    setStateNav(stateNav => ({\r\n      ...stateNav,\r\n      spudDateTo: newDateAfter,\r\n      dateTypeName: dateName\r\n    }));\r\n  }\r\n  };\r\n  \r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.datesRow}>\r\n        <KeyboardDatePicker\r\n          label={props.labelDates + \" \" + \"From\"}\r\n          className={classes.datePicker}\r\n          maxDate={moment().subtract(1, 'day')}\r\n          variant=\"inline\"\r\n          value={selectedStartDate}\r\n          onChange={date => handleStartDate(date)}\r\n\r\n          //inputVariant=\"outlined\"\r\n          minDateMessage = 'Date should not be before minimal date'\r\n          maxDateMessage = 'Date should not be after max date'\r\n          disableToolbar\r\n          KeyboardButtonProps={{'aria-label':'change date'}}\r\n          autoOk = 'true'\r\n          format=\"MM/DD/YYYY\"\r\n          // orientation = 'landscape'\r\n          // margin = 'normal'\r\n          PopoverProps={{ disablePortal: true }}\r\n          fullWidth={true}\r\n        />\r\n\r\n        <KeyboardDatePicker\r\n          label={props.labelDates + \" \" + \"To\"}\r\n          className={classes.datePicker}\r\n          variant=\"inline\"\r\n          maxDate={moment()}\r\n          value={selectedEndDate}\r\n          onChange={date => handleEndDate(date)}\r\n\r\n          //inputVariant=\"outlined\"\r\n          minDateMessage = 'Date should not be before minimal date'\r\n          maxDateMessage = 'Date should not be after max date'\r\n          disableToolbar\r\n          KeyboardButtonProps={{'aria-label':'change date'}}\r\n          autoOk = 'true'\r\n          format=\"MM/DD/YYYY\"\r\n          // orientation = 'landscape'\r\n          // margin = 'normal'\r\n          PopoverProps={{ disablePortal: true }}\r\n          fullWidth={true}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}