{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\SaveFilters.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { AppContext } from \"../../../AppContext\";\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Paper from \"@material-ui/core/Paper\";\nimport Button from \"@material-ui/core/Button\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => ({\n  paper: {\n    width: 350\n  },\n  header: {\n    padding: \"10px 30px\"\n  },\n  input: {\n    width: \"100%\",\n    padding: \"10px 40px\"\n  },\n  label: {\n    padding: \"15px 40px\",\n    fontSize: 15,\n    fontWeight: 600\n  },\n  buttonDiv: {\n    padding: \"30px 40px\",\n    textAlign: \"center\"\n  },\n  close: {\n    float: \"right\",\n    padding: \"3px 30px\",\n    \"&:hover\": {\n      backgroundColor: \"transparent\"\n    }\n  },\n  loader: {\n    marginLeft: \"45%\",\n    marginBottom: 8,\n    marginTop: 20\n  },\n  savedMessage: {\n    padding: \"10px 40px\",\n    fontWeight: 600,\n    textAlign: \"center\"\n  }\n}));\nexport default function SaveFilters(props) {\n  const [stateApp, setStateApp] = useContext(AppContext);\n  const [saveSearch, setSaveSearch] = useState(\"\");\n  const [upDateSearch, setUpdateSearch] = useState(\"\");\n  const [errorTextField, setErrorTextField] = useState(false);\n  const [errorText, setErrorText] = useState(\"\");\n  const [filterList, setFilterList] = useState(null);\n  const [filters, setFilters] = useState(null);\n  const [dateCreated, setDateCreated] = useState();\n  const [savedCompleted, setSavedCompleted] = useState(false);\n  const [completedSaving, setCompletedSaving] = useState(false);\n  const classes = useStyles();\n  useEffect(() => {\n    // effect to get filters from parent and set the date\n    if (props.filters) {\n      setFilters(props.filters);\n      setDateCreated(new Date());\n    }\n  }, [props.filterList, props.filters]);\n  useEffect(() => {\n    // validation and error message effect\n    if (saveSearch && saveSearch.length <= 2) {\n      setErrorTextField(true);\n      setErrorText(\"Name is to short\");\n    } else {\n      setErrorTextField(false);\n      setErrorText(\"\");\n    }\n  }, [saveSearch]);\n\n  const handleFilterName = e => {\n    // set the name of the filter and make the 1st letter a capital letter\n    let name = e.target.value;\n    let format = name.charAt(0).toUpperCase() + name.slice(1);\n    setSaveSearch(format);\n  };\n\n  const save = () => {\n    // create the filter object with state and props \n    // to be saved to the db \n    let filterInfo = {\n      name: saveSearch ? saveSearch : upDateSearch,\n      user: props.user,\n      created: dateCreated.toDateString(),\n      filters: filters,\n      on: true,\n      default: false\n    }; // flag to say we started the saving proccess waiting for a response\n\n    setCompletedSaving(true); // response  gotten and its good\n    // currently with out saving we are just alerting when updated\n    // or passing it to context\n\n    if (!saveSearch) {\n      /// pass filters to context \n      // setStateApp(stateApp => ({...stateApp, filtersAdd: [filterInfo] }))\n      alert(JSON.stringify(filterInfo));\n    } else {\n      // set error message\n      setStateApp(stateApp => ({ ...stateApp,\n        filtersAdd: [filterInfo]\n      }));\n    }\n  };\n\n  useEffect(() => {\n    // wait for response \n    if (completedSaving) {\n      setSavedCompleted(true);\n    }\n  }, [completedSaving]); // onchange for filter list\n\n  const handleChangeFilterList = newVal => {\n    setUpdateSearch(newVal);\n  };\n\n  useEffect(() => {\n    // set names for filter list\n    if (stateApp.filters) {\n      let findNames = stateApp.filters;\n      let name;\n      let Names = [];\n      findNames.forEach(e => {\n        name = e[0].name;\n        Names.push(name);\n      });\n      setFilterList(Names);\n    }\n  }, [stateApp.filters]);\n  return /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    color: \"secondary\",\n    onClick: props.close,\n    className: classes.close,\n    disableFocusRipple: true,\n    disableRipple: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    fontSize: \"large\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(\"h2\", {\n    className: classes.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, \"Save Search\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(TextField, {\n    className: classes.input,\n    variant: \"outlined\",\n    placeholder: \"My Saved Search\",\n    inputProps: {\n      \"aria-label\": \"save search\"\n    },\n    value: saveSearch,\n    onChange: e => handleFilterName(e),\n    error: errorTextField,\n    helperText: errorText,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, \"Update Existing Search\"), /*#__PURE__*/React.createElement(Autocomplete, {\n    className: classes.input,\n    onChange: (event, newValue) => {\n      handleChangeFilterList(newValue);\n    },\n    options: filterList,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"Saved Searches\",\n      placeholder: \"\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }\n    })),\n    disableListWrap: true,\n    id: \"virtualize-well-profiles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }\n  }), !savedCompleted && completedSaving ? /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"secondary\",\n    size: 40,\n    className: classes.loader,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 8\n    }\n  }) : null, savedCompleted && savedCompleted ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.savedMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 43\n    }\n  }, saveSearch, \" \", \" \", \" Successfully Saved\") : null, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.buttonDiv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }, !completedSaving ? /*#__PURE__*/React.createElement(Button, {\n    onClick: save,\n    disabled: completedSaving,\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, \"Save Search\") : /*#__PURE__*/React.createElement(Button, {\n    onClick: props.close,\n    variant: \"contained\",\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, \"Close\")));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/SaveFilters.js"],"names":["React","useContext","useEffect","useState","AppContext","CircularProgress","Paper","Button","TextField","Autocomplete","CloseIcon","IconButton","makeStyles","useStyles","theme","paper","width","header","padding","input","label","fontSize","fontWeight","buttonDiv","textAlign","close","float","backgroundColor","loader","marginLeft","marginBottom","marginTop","savedMessage","SaveFilters","props","stateApp","setStateApp","saveSearch","setSaveSearch","upDateSearch","setUpdateSearch","errorTextField","setErrorTextField","errorText","setErrorText","filterList","setFilterList","filters","setFilters","dateCreated","setDateCreated","savedCompleted","setSavedCompleted","completedSaving","setCompletedSaving","classes","Date","length","handleFilterName","e","name","target","value","format","charAt","toUpperCase","slice","save","filterInfo","user","created","toDateString","on","default","alert","JSON","stringify","filtersAdd","handleChangeFilterList","newVal","findNames","Names","forEach","push","event","newValue","params"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { AppContext } from \"../../../AppContext\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    width: 350,\r\n  },\r\n  header: {\r\n    padding: \"10px 30px\",\r\n  },\r\n  input: {\r\n    width: \"100%\",\r\n    padding: \"10px 40px\",\r\n  },\r\n  label: {\r\n    padding: \"15px 40px\",\r\n    fontSize: 15,\r\n    fontWeight: 600,\r\n  },\r\n  buttonDiv: {\r\n    padding: \"30px 40px\",\r\n    textAlign: \"center\",\r\n  },\r\n  close: {\r\n    float: \"right\",\r\n    padding: \"3px 30px\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  loader: {\r\n    marginLeft: \"45%\",\r\n    marginBottom: 8,\r\n    marginTop: 20,\r\n  },\r\n  savedMessage: {\r\n    padding: \"10px 40px\",\r\n    fontWeight: 600,\r\n    textAlign: \"center\",\r\n  },\r\n}));\r\n\r\nexport default function SaveFilters(props) {\r\n  const [stateApp, setStateApp] = useContext(AppContext);\r\n  const [saveSearch, setSaveSearch] = useState(\"\");\r\n  const [upDateSearch, setUpdateSearch] = useState(\"\");\r\n  const [errorTextField, setErrorTextField] = useState(false);\r\n  const [errorText, setErrorText] = useState(\"\");\r\n  const [filterList, setFilterList] = useState(null);\r\n  const [filters, setFilters] = useState(null);\r\n  const [dateCreated, setDateCreated] = useState();\r\n  const [savedCompleted, setSavedCompleted] =useState(false);\r\n  const [completedSaving, setCompletedSaving] = useState(false)\r\n  const classes = useStyles();\r\n  \r\n  useEffect(() => {\r\n    // effect to get filters from parent and set the date\r\n    if (props.filters) {\r\n        setFilters(props.filters)\r\n        setDateCreated(new Date())\r\n    }\r\n  },[props.filterList, props.filters])\r\n  \r\n  \r\n  useEffect(() => {\r\n    // validation and error message effect\r\n    if ( saveSearch && saveSearch.length <= 2) {\r\n      setErrorTextField(true);\r\n      setErrorText(\"Name is to short\")\r\n    } else {\r\n      setErrorTextField(false);\r\n      setErrorText(\"\")\r\n    }\r\n  },[saveSearch])\r\n\r\n  const handleFilterName = (e) => {\r\n      // set the name of the filter and make the 1st letter a capital letter\r\n      let name = e.target.value;\r\n      let format = name.charAt(0).toUpperCase() + name.slice(1)\r\n      setSaveSearch(format)\r\n  }\r\n\r\n  const save = () => {\r\n    // create the filter object with state and props \r\n    // to be saved to the db \r\n    let filterInfo = {\r\n      name: saveSearch ? saveSearch : upDateSearch,\r\n      user: props.user,\r\n      created: dateCreated.toDateString(),\r\n      filters: filters,\r\n      on: true,\r\n      default: false,\r\n    }\r\n    // flag to say we started the saving proccess waiting for a response\r\n    setCompletedSaving(true)\r\n    // response  gotten and its good\r\n\r\n    // currently with out saving we are just alerting when updated\r\n    // or passing it to context\r\n    if (!saveSearch) {\r\n      /// pass filters to context \r\n      // setStateApp(stateApp => ({...stateApp, filtersAdd: [filterInfo] }))\r\n      alert(\r\n        JSON.stringify(filterInfo)\r\n      )\r\n    } else {\r\n      // set error message\r\n      setStateApp(stateApp => ({...stateApp, filtersAdd: [filterInfo] }))\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    // wait for response \r\n    if (completedSaving) {\r\n      setSavedCompleted(true)\r\n    }\r\n  },[completedSaving])\r\n  // onchange for filter list\r\n  const handleChangeFilterList = newVal => {\r\n    setUpdateSearch(newVal)\r\n  }\r\n\r\n  useEffect(() => {\r\n    // set names for filter list\r\n    if (stateApp.filters) {\r\n      let findNames = stateApp.filters;\r\n      let name;\r\n      let Names = [];\r\n      findNames.forEach(e => {\r\n        name = e[0].name;\r\n        Names.push(name)\r\n      })\r\n      setFilterList(Names);\r\n    }\r\n  },[stateApp.filters])\r\n\r\n  return (\r\n    <Paper className={classes.paper}>\r\n      <IconButton\r\n        color=\"secondary\"\r\n        onClick={props.close}\r\n        className={classes.close}\r\n        disableFocusRipple={true}\r\n        disableRipple={true}\r\n      >\r\n        <CloseIcon fontSize=\"large\" />\r\n      </IconButton>\r\n      <h2 className={classes.header}>Save Search</h2>\r\n      <div className={classes.label}>Name</div>\r\n      <TextField\r\n        className={classes.input}\r\n        variant=\"outlined\"\r\n        placeholder=\"My Saved Search\"\r\n        inputProps={{ \"aria-label\": \"save search\" }}\r\n        value={saveSearch}\r\n        onChange={e => handleFilterName(e)}\r\n        error={errorTextField}\r\n        helperText={errorText}\r\n        required\r\n      />\r\n      <div className={classes.label}>Update Existing Search</div>\r\n      <Autocomplete\r\n        className={classes.input}\r\n        onChange={(event, newValue) => {\r\n            handleChangeFilterList(newValue);\r\n        }}\r\n        options={filterList}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            variant=\"outlined\"\r\n            label=\"Saved Searches\"\r\n            placeholder=\"\"\r\n            fullWidth={true}\r\n          />\r\n        )}\r\n        disableListWrap\r\n        id=\"virtualize-well-profiles\"\r\n      />\r\n      {!savedCompleted && completedSaving ? \r\n       <CircularProgress color=\"secondary\" size={40} className={classes.loader} />\r\n      : null}\r\n      {savedCompleted && savedCompleted ? <div className={classes.savedMessage}>{saveSearch} {\" \"} Successfully Saved</div> : null}\r\n      <div className={classes.buttonDiv}>\r\n        {!completedSaving ? (\r\n        <Button onClick={save} disabled={completedSaving} variant=\"contained\" color=\"secondary\">\r\n          Save Search\r\n        </Button>\r\n        ):( \r\n        <Button onClick={props.close} variant=\"contained\" color=\"secondary\">\r\n        Close\r\n        </Button>\r\n        )}\r\n      </div>\r\n    </Paper>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}