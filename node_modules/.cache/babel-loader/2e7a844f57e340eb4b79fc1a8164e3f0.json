{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterDatePickerCompletetion.js\";\nimport React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport moment from \"moment\";\nimport { NavigationContext } from \"../NavigationContext\"; // DOCUMENTATION FOR THIS COMPONENT IS ON FILTERDATEPICKERPERMIT\n\nconst useStyles = makeStyles(theme => ({\n  root: {// display: \"flex\",\n    // flexWrap: \"wrap\",\n    // flexDirection: \"column\",\n    // justifyContent: \"space-around\",\n    // flexGrow: 1\n  },\n  datesRow: {\n    display: \"flex\",\n    flexDirection: \"row\" // flex: 1,\n    // flexGrow: 1\n\n  },\n  datePicker: {\n    margin: \"15px\",\n    // minWidth: 175,\n    // maxWidth: 176,\n    \"&& span\": {\n      pointerEvents: \"none\"\n    }\n  },\n  chips: {\n    display: \"flex\",\n    flexWrap: \"wrap\"\n  },\n  chip: {\n    margin: 10\n  }\n}));\nexport default function FilterDatePickerCompletetion(props) {\n  const classes = useStyles();\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [selectedStartDate, handleStartDateChang] = useState(moment().subtract(120, \"Years\"));\n  const [selectedEndDate, handleEndDateChange] = useState(moment());\n  const [completetionFromDate, setCompletetionFromDate] = useState({\n    check: false,\n    date: moment()\n  });\n  const [completetionToDate, setCompletetionToDate] = useState({\n    check: false,\n    date: moment()\n  });\n  const [dateTypeName, setDateTypeName] = useState(stateNav.dateTypeName ? stateNav.dateTypeName : []);\n  const setFilterName = useCallback(() => {\n    let filter;\n\n    if (completetionFromDate.date._isValid === true && completetionToDate.date._isValid === true) {\n      const checkDate = moment.parseZone(completetionToDate.date).utc(true).valueOf();\n      const fromDate = moment.parseZone(completetionFromDate.date.utc(true)).valueOf();\n\n      if (completetionFromDate.check && !completetionToDate.check) {\n        filter = [\"all\", [\">=\", [\"get\", \"completionDate\"], fromDate], [\"<=\", [\"get\", \"completionDate\"], checkDate]];\n      } else if (!completetionFromDate.check && completetionToDate.check) {\n        let checkDate = moment().subtract(120, 'Years');\n        let fromDate = moment.parseZone(checkDate).utc(true).valueOf();\n        const toDate = moment.parseZone(completetionToDate.date).utc(true).valueOf();\n        filter = [\"all\", [\">=\", [\"get\", \"completionDate\"], fromDate], [\"<=\", [\"get\", \"completionDate\"], toDate]];\n      } else {\n        const fromDate = moment.parseZone(completetionFromDate.date).utc(true).valueOf();\n        const toDate = moment.parseZone(completetionToDate.date).utc(true).valueOf();\n        filter = [\"all\", [\">=\", [\"get\", \"completionDate\"], fromDate], [\"<=\", [\"get\", \"completionDate\"], toDate]];\n      }\n    } else {\n      filter = null;\n    }\n\n    console.log(\"Completetion Range dates change filter\", filter);\n    setStateNav(stateNav => ({ ...stateNav,\n      filterCompletetionDateRange: filter\n    }));\n  }, [completetionFromDate.date, completetionToDate.date, setStateNav]);\n  useEffect(() => {\n    if (completetionFromDate.check === true) {\n      setFilterName();\n    }\n\n    if (completetionToDate.check === true) {\n      setFilterName();\n    }\n  }, [completetionFromDate.check, completetionToDate.check, setFilterName]);\n  const setvaluesFrom = useCallback(() => {\n    if (stateNav.completetionDateFrom === null) {\n      return;\n    } else {\n      handleStartDateChang(stateNav.completetionDateFrom);\n      setCompletetionFromDate({\n        check: true,\n        date: stateNav.completetionDateFrom\n      });\n    }\n  }, [stateNav.completetionDateFrom]);\n  const setvaluesTo = useCallback(() => {\n    if (stateNav.completetionDateTo === null) {\n      return;\n    } else {\n      handleEndDateChange(stateNav.completetionDateTo);\n      setCompletetionToDate({\n        check: true,\n        date: stateNav.completetionDateTo\n      });\n    }\n  }, [stateNav.completetionDateTo]);\n  useEffect(() => {\n    if (dateTypeName.length > 0) {\n      setvaluesFrom();\n      setvaluesTo();\n    }\n  }, [setvaluesTo, dateTypeName, setvaluesFrom]);\n\n  const handleStartDate = date => {\n    if (date === null) {\n      const formatDateReset = moment().subtract(120, \"Years\");\n      setStateNav(stateNav => ({ ...stateNav,\n        completetionDateFrom: null,\n        filterCompletetionDateRange: null\n      }));\n      handleStartDateChang(formatDateReset);\n    } else {\n      const formatDateAfter = moment(date);\n      let dateName = [];\n      setCompletetionFromDate({\n        check: true,\n        date: formatDateAfter\n      });\n      handleStartDateChang(formatDateAfter);\n      dateName.push(\"CompletetionDate\");\n      setDateTypeName(dateName);\n      setStateNav(stateNav => ({ ...stateNav,\n        completetionDateFrom: formatDateAfter,\n        dateTypeName: dateName\n      }));\n    }\n  };\n\n  const handleEndDate = date => {\n    if (date === null) {\n      const formatDateReset = moment();\n      setStateNav(stateNav => ({ ...stateNav,\n        completetionDateTo: null,\n        filterCompletetionDateRange: null\n      }));\n      handleEndDateChange(formatDateReset);\n      return;\n    } else {\n      const newDateAfter = moment(date);\n      let dateName = [];\n      setCompletetionToDate({\n        check: true,\n        date: newDateAfter\n      });\n      handleEndDateChange(newDateAfter);\n      dateName.push(\"CompletetionDate\");\n      setDateTypeName(dateName);\n      setStateNav(stateNav => ({ ...stateNav,\n        completetionDateTo: newDateAfter,\n        dateTypeName: dateName\n      }));\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.datesRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n    label: props.labelDates + \" \" + \"From\",\n    className: classes.datePicker,\n    maxDate: moment().subtract(1, \"day\"),\n    variant: \"inline\",\n    value: selectedStartDate,\n    onChange: date => handleStartDate(date) //inputVariant=\"outlined\"\n    ,\n    minDateMessage: \"Date should not be before minimal date\",\n    maxDateMessage: \"Date should not be after max date\",\n    disableToolbar: true,\n    KeyboardButtonProps: {\n      \"aria-label\": \"change date\"\n    },\n    autoOk: \"true\",\n    format: \"MM/DD/YYYY\",\n    PopoverProps: {\n      disablePortal: true\n    },\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n    label: props.labelDates + \" \" + \"To\",\n    className: classes.datePicker,\n    variant: \"inline\",\n    value: selectedEndDate,\n    onChange: date => handleEndDate(date) //inputVariant=\"outlined\"\n    ,\n    minDateMessage: \"Date should not be before minimal date\",\n    maxDateMessage: \"Date should not be after max date\",\n    disableToolbar: true,\n    KeyboardButtonProps: {\n      \"aria-label\": \"change date\"\n    },\n    autoOk: \"true\",\n    format: \"MM/DD/YYYY\",\n    PopoverProps: {\n      disablePortal: true\n    },\n    fullWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterDatePickerCompletetion.js"],"names":["React","useState","useContext","useEffect","useCallback","makeStyles","KeyboardDatePicker","moment","NavigationContext","useStyles","theme","root","datesRow","display","flexDirection","datePicker","margin","pointerEvents","chips","flexWrap","chip","FilterDatePickerCompletetion","props","classes","stateNav","setStateNav","selectedStartDate","handleStartDateChang","subtract","selectedEndDate","handleEndDateChange","completetionFromDate","setCompletetionFromDate","check","date","completetionToDate","setCompletetionToDate","dateTypeName","setDateTypeName","setFilterName","filter","_isValid","checkDate","parseZone","utc","valueOf","fromDate","toDate","console","log","filterCompletetionDateRange","setvaluesFrom","completetionDateFrom","setvaluesTo","completetionDateTo","length","handleStartDate","formatDateReset","formatDateAfter","dateName","push","handleEndDate","newDateAfter","labelDates","disablePortal"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport moment from \"moment\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\n\r\n// DOCUMENTATION FOR THIS COMPONENT IS ON FILTERDATEPICKERPERMIT\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    // display: \"flex\",\r\n    // flexWrap: \"wrap\",\r\n    // flexDirection: \"column\",\r\n    // justifyContent: \"space-around\",\r\n    // flexGrow: 1\r\n  },\r\n  datesRow: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\"\r\n    // flex: 1,\r\n    // flexGrow: 1\r\n  },\r\n  datePicker: {\r\n    margin: \"15px\",\r\n    // minWidth: 175,\r\n    // maxWidth: 176,\r\n    \"&& span\": {\r\n      pointerEvents: \"none\"\r\n    }\r\n  },\r\n  chips: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\"\r\n  },\r\n  chip: {\r\n    margin: 10\r\n  }\r\n}));\r\n\r\nexport default function FilterDatePickerCompletetion(props) {\r\n  const classes = useStyles();\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [selectedStartDate, handleStartDateChang] = useState(\r\n    moment().subtract(120, \"Years\")\r\n  );\r\n  const [selectedEndDate, handleEndDateChange] = useState(moment());\r\n  const [completetionFromDate, setCompletetionFromDate] = useState({\r\n    check: false,\r\n    date: moment()\r\n  });\r\n  const [completetionToDate, setCompletetionToDate] = useState({\r\n    check: false,\r\n    date: moment()\r\n  });\r\n\r\n  const [dateTypeName, setDateTypeName] = useState(\r\n    stateNav.dateTypeName ? stateNav.dateTypeName : []\r\n  );\r\n\r\n  const setFilterName = useCallback(() => {\r\n    let filter;\r\n    if (\r\n      completetionFromDate.date._isValid === true &&\r\n      completetionToDate.date._isValid === true\r\n    ) {\r\n      const checkDate = moment.parseZone(completetionToDate.date).utc(true).valueOf();\r\n      const fromDate = moment.parseZone(completetionFromDate.date.utc(true)).valueOf();\r\n      if (completetionFromDate.check && !completetionToDate.check) {\r\n        filter = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"completionDate\"], fromDate],\r\n          [\"<=\", [\"get\", \"completionDate\"], checkDate]\r\n        ];\r\n      } else if (!completetionFromDate.check && completetionToDate.check) {\r\n        let checkDate = moment().subtract(120, 'Years')\r\n        let fromDate = moment.parseZone(checkDate).utc(true).valueOf()\r\n        const toDate =  moment.parseZone(completetionToDate.date).utc(true).valueOf()\r\n        filter = [\"all\", [\">=\",[\"get\", \"completionDate\"] ,fromDate], [\"<=\",[\"get\", \"completionDate\"] , toDate]];\r\n      }\r\n      else {\r\n        const fromDate = moment.parseZone(completetionFromDate.date).utc(true).valueOf();\r\n        const toDate = moment.parseZone(completetionToDate.date).utc(true).valueOf();\r\n        filter = [\r\n          \"all\",\r\n          [\">=\", [\"get\", \"completionDate\"], fromDate],\r\n          [\"<=\", [\"get\", \"completionDate\"], toDate]\r\n        ];\r\n      }\r\n    } else {\r\n      filter = null;\r\n    }\r\n    console.log(\"Completetion Range dates change filter\", filter);\r\n    setStateNav(stateNav => ({\r\n      ...stateNav,\r\n      filterCompletetionDateRange: filter\r\n    }));\r\n  }, [completetionFromDate.date, completetionToDate.date, setStateNav]);\r\n\r\n  useEffect(() => {\r\n    if (completetionFromDate.check === true) {\r\n      setFilterName();\r\n    }\r\n    if (completetionToDate.check === true) {\r\n      setFilterName();\r\n    }\r\n  }, [completetionFromDate.check, completetionToDate.check, setFilterName]);\r\n\r\n  const setvaluesFrom = useCallback(() => {\r\n    if (stateNav.completetionDateFrom === null) {\r\n      return;\r\n    } else {\r\n      handleStartDateChang(stateNav.completetionDateFrom);\r\n      setCompletetionFromDate({ check: true, date: stateNav.completetionDateFrom });\r\n    }\r\n  }, [stateNav.completetionDateFrom]);\r\n\r\n  const setvaluesTo = useCallback(() => {\r\n    if (stateNav.completetionDateTo === null) {\r\n      return;\r\n    } else {\r\n      handleEndDateChange(stateNav.completetionDateTo);\r\n      setCompletetionToDate({ check: true, date: stateNav.completetionDateTo });\r\n    }\r\n  }, [stateNav.completetionDateTo]);\r\n\r\n  useEffect(() => {\r\n    if (dateTypeName.length > 0) {\r\n      setvaluesFrom();\r\n      setvaluesTo();\r\n    }\r\n  }, [setvaluesTo, dateTypeName, setvaluesFrom]);\r\n\r\n  const handleStartDate = date => {\r\n    if (date === null) {\r\n      const formatDateReset = moment().subtract(120, \"Years\");\r\n      setStateNav(stateNav => ({\r\n        ...stateNav,\r\n        completetionDateFrom: null,\r\n        filterCompletetionDateRange: null\r\n      }));\r\n      handleStartDateChang(formatDateReset);\r\n    } else {\r\n      const formatDateAfter = moment(date);\r\n      let dateName = [];\r\n      setCompletetionFromDate({ check: true, date: formatDateAfter });\r\n      handleStartDateChang(formatDateAfter);\r\n      dateName.push(\"CompletetionDate\");\r\n      setDateTypeName(dateName);\r\n      setStateNav(stateNav => ({\r\n        ...stateNav,\r\n        completetionDateFrom: formatDateAfter,\r\n        dateTypeName: dateName\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleEndDate = date => {\r\n    if (date === null) {\r\n      const formatDateReset = moment();\r\n      setStateNav(stateNav => ({\r\n        ...stateNav,\r\n        completetionDateTo: null,\r\n        filterCompletetionDateRange: null\r\n      }));\r\n      handleEndDateChange(formatDateReset);\r\n      return;\r\n    } else {\r\n      const newDateAfter = moment(date);\r\n      let dateName = [];\r\n      setCompletetionToDate({ check: true, date: newDateAfter });\r\n      handleEndDateChange(newDateAfter);\r\n      dateName.push(\"CompletetionDate\");\r\n      setDateTypeName(dateName);\r\n      setStateNav(stateNav => ({\r\n        ...stateNav,\r\n        completetionDateTo: newDateAfter,\r\n        dateTypeName: dateName\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <div className={classes.datesRow}>\r\n        <KeyboardDatePicker\r\n          label={props.labelDates + \" \" + \"From\"}\r\n          className={classes.datePicker}\r\n          maxDate={moment().subtract(1, \"day\")}\r\n          variant=\"inline\"\r\n          value={selectedStartDate}\r\n          onChange={date => handleStartDate(date)}\r\n          //inputVariant=\"outlined\"\r\n          minDateMessage=\"Date should not be before minimal date\"\r\n          maxDateMessage=\"Date should not be after max date\"\r\n          disableToolbar\r\n          KeyboardButtonProps={{ \"aria-label\": \"change date\" }}\r\n          autoOk=\"true\"\r\n          format=\"MM/DD/YYYY\"\r\n          PopoverProps={{ disablePortal: true }}\r\n          fullWidth={true}\r\n        />\r\n\r\n        <KeyboardDatePicker\r\n          label={props.labelDates + \" \" + \"To\"}\r\n          className={classes.datePicker}\r\n          variant=\"inline\"\r\n          value={selectedEndDate}\r\n          onChange={date => handleEndDate(date)}\r\n          //inputVariant=\"outlined\"\r\n          minDateMessage=\"Date should not be before minimal date\"\r\n          maxDateMessage=\"Date should not be after max date\"\r\n          disableToolbar\r\n          KeyboardButtonProps={{ \"aria-label\": \"change date\" }}\r\n          autoOk=\"true\"\r\n          format=\"MM/DD/YYYY\"\r\n          PopoverProps={{ disablePortal: true }}\r\n          fullWidth={true}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}