{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport CellAction from './CellAction';\nexport default function CellActions(_a) {\n  var cellMetaData = _a.cellMetaData,\n      column = _a.column,\n      rowData = _a.rowData;\n\n  if (cellMetaData.getCellActions) {\n    var cellActionButtons = cellMetaData.getCellActions(column, rowData);\n\n    if (cellActionButtons && cellActionButtons.length > 0) {\n      var actionButtons = cellActionButtons.map(function (action, index) {\n        return React.createElement(CellAction, __assign({\n          key: index,\n          isFirst: index === 0\n        }, action));\n      });\n      return React.createElement(React.Fragment, null, actionButtons);\n    }\n  }\n\n  return null;\n}","map":{"version":3,"sources":["../../src/Cell/CellActions.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB;AAEA,OAAO,UAAP,MAAuB,cAAvB;AASA,eAAc,SAAU,WAAV,CAAyB,EAAzB,EAA+E;MAApD,YAAA,GAAA,EAAA,CAAA,Y;MAAc,MAAA,GAAA,EAAA,CAAA,M;MAAQ,OAAA,GAAA,EAAA,CAAA,O;;AAC7D,MAAI,YAAY,CAAC,cAAjB,EAAiC;AAC/B,QAAM,iBAAiB,GAAG,YAAY,CAAC,cAAb,CAA4B,MAA5B,EAAoC,OAApC,CAA1B;;AACA,QAAI,iBAAiB,IAAI,iBAAiB,CAAC,MAAlB,GAA2B,CAApD,EAAuD;AACrD,UAAM,aAAa,GAAG,iBAAiB,CAAC,GAAlB,CAAsB,UAAC,MAAD,EAAS,KAAT,EAAc;AACxD,eAAO,KAAA,CAAA,aAAA,CAAC,UAAD,EAAW,QAAA,CAAA;AAAC,UAAA,GAAG,EAAE,KAAN;AAAa,UAAA,OAAO,EAAE,KAAK,KAAK;AAAhC,SAAA,EAAuC,MAAvC,CAAX,CAAP;AACD,OAFqB,CAAtB;AAIA,aAAO,KAAA,CAAA,aAAA,CAAA,KAAA,CAAA,QAAA,EAAA,IAAA,EAAG,aAAH,CAAP;AACD;AACF;;AACD,SAAO,IAAP;AACD","sourcesContent":["import React from 'react';\n\nimport CellAction from './CellAction';\nimport { Props as CellProps } from '../Cell';\n\ntype CellActionsProps<R> = Pick<CellProps<R>,\n'cellMetaData'\n| 'column'\n| 'rowData'\n>;\n\nexport default function CellActions<R>({ cellMetaData, column, rowData }: CellActionsProps<R>) {\n  if (cellMetaData.getCellActions) {\n    const cellActionButtons = cellMetaData.getCellActions(column, rowData);\n    if (cellActionButtons && cellActionButtons.length > 0) {\n      const actionButtons = cellActionButtons.map((action, index) => {\n        return <CellAction key={index} isFirst={index === 0} {...action} />;\n      });\n\n      return <>{actionButtons}</>;\n    }\n  }\n  return null;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}