{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\MapControls\\\\components\\\\TrackedWellsMapCard.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport Typography from \"@material-ui/core/Typography\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { AppContext } from \"../../../AppContext\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport { WELLSQUERY } from \"../../../graphQL/useQueryWells\";\nimport { TRACKSBYUSERANDOBJECTTYPE } from \"../../../graphQL/useQueryTracksByUserAndObjectType\";\nimport { USERBYEMAIL } from \"../../../graphQL/useQueryUserByEmail\"; //////////////temporary while signed user fixed\n\nimport Draggable from \"react-draggable\";\nconst useStyles = makeStyles(theme => ({\n  rootList: {\n    width: \"250px\",\n    height: \"10vh\",\n    position: \"relative\",\n    top: \"5vh\",\n    left: \"82px\"\n  },\n  wellList: {\n    // width: \"250px\",\n    // height: \"10vh\",\n    // position: \"relative\",\n    // top: \"5vh\",\n    // left: \"82px\",\n    zIndex: 4,\n    background: \"rgba(255,255,255,0)\",\n    color: \"rgba(23, 170, 221, 1)\",\n    overflowY: \"auto\",\n    padding: 0\n  },\n  wellListItem: {\n    fontFamily: \"Poppins\",\n    \"&:hover\": {\n      background: \"#4B618F\"\n    },\n    backgroundColor: \"rgba(38, 52, 81, 1.0)\",\n    \"& .MuiListItemIcon-root, & .MuiListItemText-primary\": {\n      color: theme.palette.common.white\n    },\n    \"& .MuiListItemText-secondary\": {\n      color: \"rgba(23, 170, 221, 1)\"\n    }\n  },\n  subHeader: {\n    color: \"white\",\n    backgroundColor: \"#011133 !important\"\n  }\n}));\nexport default function TrackedWellsMapCard(props) {\n  const classes = useStyles();\n  const [stateApp, setStateApp] = useContext(AppContext);\n  const [rows, setRows] = React.useState([]);\n  const [loading, setLoading] = useState(true);\n  const [getWells, {\n    data: dataWells\n  }] = useLazyQuery(WELLSQUERY);\n  const [tracksByUserAndObjectType, {\n    data: dataTracks\n  }] = useLazyQuery(TRACKSBYUSERANDOBJECTTYPE);\n  useEffect(() => {\n    if (stateApp.user && stateApp.user.mongoId) {\n      setLoading(true);\n      tracksByUserAndObjectType({\n        variables: {\n          userId: stateApp.user.mongoId,\n          objectType: \"well\"\n        }\n      });\n    }\n  }, [stateApp.user]);\n  useEffect(() => {\n    if (dataTracks && dataTracks.tracksByUserAndObjectType) {\n      if (dataTracks.tracksByUserAndObjectType.length !== 0) {\n        const tracksIdArray = dataTracks.tracksByUserAndObjectType.map(track => track.trackOn);\n        getWells({\n          variables: {\n            wellIdArray: tracksIdArray,\n            authToken: stateApp.user.authToken\n          }\n        });\n      } else {\n        setRows([]);\n        setLoading(false);\n      }\n    }\n  }, [dataTracks]);\n  useEffect(() => {\n    if (dataWells) {\n      if (dataWells.wells && dataWells.wells.results && dataWells.wells.results.length > 0) {\n        console.log(dataWells);\n        setRows(dataWells.wells.results);\n        setStateApp(state => ({ ...state,\n          trackedwells: dataWells.wells.results\n        }));\n      } else {\n        setRows([]);\n      }\n\n      setLoading(false);\n    }\n  }, [dataWells]);\n\n  const handleListClick = well => {\n    setStateApp(state => ({ ...state,\n      popupOpen: false,\n      selectedWell: null,\n      selectedWellId: well.id,\n      flyTo: well ? {\n        longitude: well.longitude,\n        latitude: well.latitude\n      } : null\n    }));\n  };\n\n  return rows && rows.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mapWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Draggable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.rootList,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    dense: true,\n    className: classes.wellList,\n    \"aria-label\": \"secondary wells\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    className: classes.subHeader,\n    key: \"subheader\",\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    primary: `Tracked Wells (${rows.length})`,\n    secondary: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  })), rows.map(well => /*#__PURE__*/React.createElement(ListItem, {\n    onClick: () => handleListClick(well),\n    className: classes.wellListItem,\n    key: well.wellName,\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    primary: well.wellName,\n    secondary: well.operator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 17\n    }\n  }))))))) : loading ? /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 80,\n    disableShrink: true,\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }) : /*#__PURE__*/React.createElement(Skeleton, {\n    variant: \"rect\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, \"Not Available\"));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/MapControls/components/TrackedWellsMapCard.js"],"names":["React","useState","useContext","useEffect","makeStyles","CircularProgress","Skeleton","Typography","List","ListItem","ListItemText","AppContext","useLazyQuery","WELLSQUERY","TRACKSBYUSERANDOBJECTTYPE","USERBYEMAIL","Draggable","useStyles","theme","rootList","width","height","position","top","left","wellList","zIndex","background","color","overflowY","padding","wellListItem","fontFamily","backgroundColor","palette","common","white","subHeader","TrackedWellsMapCard","props","classes","stateApp","setStateApp","rows","setRows","loading","setLoading","getWells","data","dataWells","tracksByUserAndObjectType","dataTracks","user","mongoId","variables","userId","objectType","length","tracksIdArray","map","track","trackOn","wellIdArray","authToken","wells","results","console","log","state","trackedwells","handleListClick","well","popupOpen","selectedWell","selectedWellId","id","flyTo","longitude","latitude","mapWrapper","wellName","operator"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport { AppContext } from \"../../../AppContext\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\nimport { WELLSQUERY } from \"../../../graphQL/useQueryWells\";\r\nimport { TRACKSBYUSERANDOBJECTTYPE } from \"../../../graphQL/useQueryTracksByUserAndObjectType\";\r\nimport { USERBYEMAIL } from \"../../../graphQL/useQueryUserByEmail\"; //////////////temporary while signed user fixed\r\nimport Draggable from \"react-draggable\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n\r\n  rootList: {\r\n    width: \"250px\",\r\n    height: \"10vh\",\r\n    position: \"relative\",\r\n    top: \"5vh\",\r\n    left: \"82px\",\r\n  },\r\n  wellList: {\r\n    // width: \"250px\",\r\n    // height: \"10vh\",\r\n    // position: \"relative\",\r\n    // top: \"5vh\",\r\n    // left: \"82px\",\r\n    zIndex: 4,\r\n    background: \"rgba(255,255,255,0)\",\r\n    color: \"rgba(23, 170, 221, 1)\",\r\n    overflowY: \"auto\",\r\n    padding: 0,\r\n  },\r\n  wellListItem: {\r\n    fontFamily: \"Poppins\",\r\n    \"&:hover\": {\r\n      background: \"#4B618F\",\r\n    },\r\n    backgroundColor: \"rgba(38, 52, 81, 1.0)\",\r\n    \"& .MuiListItemIcon-root, & .MuiListItemText-primary\": {\r\n      color: theme.palette.common.white,\r\n    },\r\n    \"& .MuiListItemText-secondary\": {\r\n      color: \"rgba(23, 170, 221, 1)\",\r\n    },\r\n  },\r\n  subHeader: {\r\n    color: \"white\",\r\n    backgroundColor: \"#011133 !important\",\r\n  },\r\n}));\r\n\r\nexport default function TrackedWellsMapCard(props) {\r\n  const classes = useStyles();\r\n  const [stateApp, setStateApp] = useContext(AppContext);\r\n  const [rows, setRows] = React.useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const [getWells, { data: dataWells }] = useLazyQuery(WELLSQUERY);\r\n  const [tracksByUserAndObjectType, { data: dataTracks }] = useLazyQuery(\r\n    TRACKSBYUSERANDOBJECTTYPE\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (stateApp.user && stateApp.user.mongoId) {\r\n      setLoading(true);\r\n\r\n      tracksByUserAndObjectType({\r\n        variables: {\r\n          userId: stateApp.user.mongoId,\r\n          objectType: \"well\",\r\n        },\r\n      });\r\n    }\r\n  }, [stateApp.user]);\r\n\r\n  useEffect(() => {\r\n    if (dataTracks && dataTracks.tracksByUserAndObjectType) {\r\n      if (dataTracks.tracksByUserAndObjectType.length !== 0) {\r\n        const tracksIdArray = dataTracks.tracksByUserAndObjectType.map(\r\n          (track) => track.trackOn\r\n        );\r\n\r\n        getWells({\r\n          variables: {\r\n            wellIdArray: tracksIdArray,\r\n            authToken: stateApp.user.authToken,\r\n          },\r\n        });\r\n      } else {\r\n        setRows([]);\r\n        setLoading(false);\r\n      }\r\n    }\r\n  }, [dataTracks]);\r\n\r\n  useEffect(() => {\r\n    if (dataWells) {\r\n      if (\r\n        dataWells.wells &&\r\n        dataWells.wells.results &&\r\n        dataWells.wells.results.length > 0\r\n      ) {\r\n        console.log(dataWells);\r\n        setRows(dataWells.wells.results);\r\n\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          trackedwells: dataWells.wells.results,\r\n        }));\r\n      } else {\r\n        setRows([]);\r\n      }\r\n      setLoading(false);\r\n    }\r\n  }, [dataWells]);\r\n\r\n  const handleListClick = (well) => {\r\n    setStateApp((state) => ({ \r\n      ...state,\r\n      popupOpen: false,\r\n      selectedWell: null,\r\n      selectedWellId: well.id,\r\n      flyTo: well ? {longitude: well.longitude, latitude: well.latitude} : null\r\n    }));\r\n  };\r\n\r\n  return rows && rows.length > 0 ? (\r\n\r\n    <div className={classes.mapWrapper}>\r\n      <Draggable>\r\n\r\n        <div className={classes.rootList}>\r\n          <List dense className={classes.wellList} aria-label=\"secondary wells\">\r\n            <ListItem className={classes.subHeader} key=\"subheader\" button>\r\n              <ListItemText\r\n                primary={`Tracked Wells (${rows.length})`}\r\n                secondary=\"\"\r\n              />\r\n            </ListItem>\r\n            {rows.map((well) => (\r\n              <ListItem\r\n                onClick={() => handleListClick(well)}\r\n                className={classes.wellListItem}\r\n                key={well.wellName}\r\n                button\r\n              >\r\n                <ListItemText primary={well.wellName} secondary={well.operator} />\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        </div>\r\n\r\n      </Draggable>\r\n    </div>\r\n\r\n  ) : loading ? (\r\n    <CircularProgress size={80} disableShrink color=\"secondary\" />\r\n  ) : (\r\n    <Skeleton variant=\"rect\" height={300}>\r\n      <Typography variant=\"button\">Not Available</Typography>\r\n    </Skeleton>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}