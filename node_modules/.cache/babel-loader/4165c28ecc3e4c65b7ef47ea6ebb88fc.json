{"ast":null,"code":"import { isFrozen } from '../ColumnUtils';\nexport function getColumnScrollPosition(columns, idx, currentScrollLeft, currentClientWidth) {\n  var left = 0;\n  var frozen = 0;\n\n  for (var i = 0; i < idx; i++) {\n    var column = columns[i];\n\n    if (column) {\n      if (column.width) {\n        left += column.width;\n      }\n\n      if (isFrozen(column)) {\n        frozen += column.width;\n      }\n    }\n  }\n\n  var selectedColumn = columns[idx];\n\n  if (selectedColumn) {\n    var scrollLeft = left - frozen - currentScrollLeft;\n    var scrollRight = left + selectedColumn.width - currentScrollLeft;\n\n    if (scrollLeft < 0) {\n      return scrollLeft;\n    }\n\n    if (scrollRight > currentClientWidth) {\n      return scrollRight - currentClientWidth;\n    }\n  }\n\n  return 0;\n}","map":{"version":3,"sources":["../../src/utils/canvasUtils.ts"],"names":[],"mappings":"AAAA,SAAS,QAAT,QAAyB,gBAAzB;AAGA,OAAM,SAAU,uBAAV,CAAqC,OAArC,EAAqE,GAArE,EAAkF,iBAAlF,EAA6G,kBAA7G,EAAuI;AAC3I,MAAI,IAAI,GAAG,CAAX;AACA,MAAI,MAAM,GAAG,CAAb;;AAEA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAC5B,QAAM,MAAM,GAAG,OAAO,CAAC,CAAD,CAAtB;;AACA,QAAI,MAAJ,EAAY;AACV,UAAI,MAAM,CAAC,KAAX,EAAkB;AAChB,QAAA,IAAI,IAAI,MAAM,CAAC,KAAf;AACD;;AACD,UAAI,QAAQ,CAAC,MAAD,CAAZ,EAAsB;AACpB,QAAA,MAAM,IAAI,MAAM,CAAC,KAAjB;AACD;AACF;AACF;;AAED,MAAM,cAAc,GAAG,OAAO,CAAC,GAAD,CAA9B;;AACA,MAAI,cAAJ,EAAoB;AAClB,QAAM,UAAU,GAAG,IAAI,GAAG,MAAP,GAAgB,iBAAnC;AACA,QAAM,WAAW,GAAG,IAAI,GAAG,cAAc,CAAC,KAAtB,GAA8B,iBAAlD;;AAEA,QAAI,UAAU,GAAG,CAAjB,EAAoB;AAClB,aAAO,UAAP;AACD;;AACD,QAAI,WAAW,GAAG,kBAAlB,EAAsC;AACpC,aAAO,WAAW,GAAG,kBAArB;AACD;AACF;;AAED,SAAO,CAAP;AACD","sourcesContent":["import { isFrozen } from '../ColumnUtils';\nimport { CalculatedColumn } from '../common/types';\n\nexport function getColumnScrollPosition<R>(columns: CalculatedColumn<R>[], idx: number, currentScrollLeft: number, currentClientWidth: number): number {\n  let left = 0;\n  let frozen = 0;\n\n  for (let i = 0; i < idx; i++) {\n    const column = columns[i];\n    if (column) {\n      if (column.width) {\n        left += column.width;\n      }\n      if (isFrozen(column)) {\n        frozen += column.width;\n      }\n    }\n  }\n\n  const selectedColumn = columns[idx];\n  if (selectedColumn) {\n    const scrollLeft = left - frozen - currentScrollLeft;\n    const scrollRight = left + selectedColumn.width - currentScrollLeft;\n\n    if (scrollLeft < 0) {\n      return scrollLeft;\n    }\n    if (scrollRight > currentClientWidth) {\n      return scrollRight - currentClientWidth;\n    }\n  }\n\n  return 0;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}