{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport React, { forwardRef } from 'react';\nimport { EventTypes } from './common/enums';\nvar RowGroup = forwardRef(function RowGroup(props, ref) {\n  function onRowExpandToggle(expand) {\n    var onRowExpandToggle = props.cellMetaData.onRowExpandToggle;\n\n    if (onRowExpandToggle) {\n      var shouldExpand = expand == null ? !props.isExpanded : expand;\n      onRowExpandToggle({\n        rowIdx: props.idx,\n        shouldExpand: shouldExpand,\n        columnGroupName: props.columnGroupName,\n        name: props.name\n      });\n    }\n  }\n\n  function onRowExpandClick() {\n    onRowExpandToggle(!props.isExpanded);\n  }\n\n  function onClick() {\n    props.eventBus.dispatch(EventTypes.SELECT_CELL, {\n      rowIdx: props.idx,\n      idx: 0\n    });\n  }\n\n  var lastColumn = props.columns[props.columns.length - 1];\n  var style = {\n    width: lastColumn.left + lastColumn.width\n  };\n  var Renderer = props.renderer || DefaultBase;\n  return React.createElement(\"div\", {\n    className: \"react-grid-row-group\",\n    style: style,\n    onClick: onClick\n  }, React.createElement(Renderer, __assign({}, props, {\n    ref: ref,\n    onRowExpandClick: onRowExpandClick,\n    onRowExpandToggle: onRowExpandToggle\n  })));\n});\nexport default RowGroup;\nvar DefaultBase = forwardRef(function DefaultBase(props, ref) {\n  function onKeyDown(_a) {\n    var key = _a.key;\n    var onRowExpandToggle = props.onRowExpandToggle;\n\n    if (key === 'ArrowLeft') {\n      onRowExpandToggle(false);\n    }\n\n    if (key === 'ArrowRight') {\n      onRowExpandToggle(true);\n    }\n\n    if (key === 'Enter') {\n      onRowExpandToggle(!props.isExpanded);\n    }\n  }\n\n  var _a = props.treeDepth,\n      treeDepth = _a === void 0 ? 0 : _a,\n      height = props.height,\n      onRowExpandClick = props.onRowExpandClick,\n      isExpanded = props.isExpanded,\n      columnGroupDisplayName = props.columnGroupDisplayName,\n      name = props.name;\n  var marginLeft = treeDepth * 20;\n  return React.createElement(\"div\", {\n    className: \"rdg-row-group-default\",\n    style: {\n      height: height\n    },\n    onKeyDown: onKeyDown,\n    tabIndex: 0,\n    ref: ref\n  }, React.createElement(\"span\", {\n    className: \"row-expand-icon\",\n    style: {\n      marginLeft: marginLeft\n    },\n    onClick: onRowExpandClick\n  }, isExpanded ? String.fromCharCode(9660) : String.fromCharCode(9658)), React.createElement(\"strong\", null, columnGroupDisplayName, \": \", name));\n});","map":{"version":3,"sources":["../src/RowGroup.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { forwardRef } from 'react';\nimport { EventTypes } from './common/enums';\nimport { CellMetaData, RowRendererProps, CalculatedColumn } from './common/types';\nimport EventBus from './masks/EventBus';\n\ninterface Props<R> {\n  height: number;\n  columns: CalculatedColumn<R>[];\n  row: unknown;\n  cellRenderer?(): void;\n  cellMetaData: CellMetaData<R>;\n  isSelected?: boolean;\n  idx: number;\n  extraClasses?: string;\n  forceUpdate?: boolean;\n  subRowDetails?: unknown;\n  isRowHovered?: boolean;\n  colVisibleStartIdx: number;\n  colVisibleEndIdx: number;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  isScrolling: boolean;\n  columnGroupDisplayName: string;\n  columnGroupName: string;\n  isExpanded: boolean;\n  treeDepth?: number;\n  name: string;\n  renderer?: React.ComponentType;\n  eventBus: EventBus;\n  renderBaseRow(p: RowRendererProps<R>): React.ReactElement;\n}\n\nconst RowGroup = forwardRef<HTMLDivElement, Props<any>>(function RowGroup(props, ref) {\n  function onRowExpandToggle(expand?: boolean) {\n    const { onRowExpandToggle } = props.cellMetaData;\n    if (onRowExpandToggle) {\n      const shouldExpand = expand == null ? !props.isExpanded : expand;\n      onRowExpandToggle({ rowIdx: props.idx, shouldExpand, columnGroupName: props.columnGroupName, name: props.name });\n    }\n  }\n\n  function onRowExpandClick() {\n    onRowExpandToggle(!props.isExpanded);\n  }\n\n  function onClick() {\n    props.eventBus.dispatch(EventTypes.SELECT_CELL, { rowIdx: props.idx, idx: 0 });\n  }\n\n  const lastColumn = props.columns[props.columns.length - 1];\n  const style = { width: lastColumn!.left + lastColumn!.width };\n  const Renderer = props.renderer || DefaultBase;\n\n  return (\n    <div className=\"react-grid-row-group\" style={style} onClick={onClick}>\n      <Renderer {...props} ref={ref} onRowExpandClick={onRowExpandClick} onRowExpandToggle={onRowExpandToggle} />\n    </div>\n  );\n});\n\nexport default RowGroup;\n\ninterface DefaultBaseProps extends Props<any> {\n  onRowExpandClick(): void;\n  onRowExpandToggle(expand?: boolean): void;\n}\n\nconst DefaultBase = forwardRef<HTMLDivElement, DefaultBaseProps>(function DefaultBase(props, ref) {\n  function onKeyDown({ key }: React.KeyboardEvent) {\n    const { onRowExpandToggle } = props;\n    if (key === 'ArrowLeft') {\n      onRowExpandToggle(false);\n    }\n    if (key === 'ArrowRight') {\n      onRowExpandToggle(true);\n    }\n    if (key === 'Enter') {\n      onRowExpandToggle(!props.isExpanded);\n    }\n  }\n\n  const { treeDepth = 0, height, onRowExpandClick, isExpanded, columnGroupDisplayName, name } = props;\n  const marginLeft = treeDepth * 20;\n\n  return (\n    <div\n      className=\"rdg-row-group-default\"\n      style={{ height }}\n      onKeyDown={onKeyDown}\n      tabIndex={0}\n      ref={ref}\n    >\n      <span\n        className=\"row-expand-icon\"\n        style={{ marginLeft }}\n        onClick={onRowExpandClick}\n      >\n        {isExpanded ? String.fromCharCode(9660) : String.fromCharCode(9658)}\n      </span>\n      <strong>{columnGroupDisplayName}: {name}</strong>\n    </div>\n  );\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}