{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\TitleOpinion\\\\components\\\\SectionTable.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { TitleOpinionContext } from \"../TitleOpinionContext\";\nimport ReactDataGrid from \"react-data-grid-m1n-version\";\nimport { range } from \"lodash\";\nimport \"react-data-grid-m1n-version/dist/react-data-grid.css\";\n\nconst defaultParsePaste = str => str.split(/\\r\\n|\\n|\\r/).map(row => row.split(\"\\t\"));\n\nexport default function SectionTable(props) {\n  const [stateTitleOpinion, setStateTitleOpinion] = useContext(TitleOpinionContext); /////////////////////cells width//////////\n\n  const formatColumns = data => {\n    const gridWidth = parseInt(document.querySelector(\"#root\").clientWidth, 10); //selector for grid\n\n    let combinedColumnWidth = 0;\n\n    for (let i = 0; i < data.columns.length; i++) {\n      data.columns[i].width = getTextWidth(data, i);\n      combinedColumnWidth += data.columns[i].width;\n    }\n\n    if (combinedColumnWidth < gridWidth) {\n      data.columns = distributeRemainingSpace(combinedColumnWidth, data.columns, gridWidth);\n    }\n\n    return data;\n  };\n\n  const getTextWidth = (data, i) => {\n    const rowValues = [];\n\n    const reducer = (a, b) => a ? a.length : 0 > b ? b.length : 0 ? a : b;\n\n    const cellPadding = 16;\n    const arrowWidth = 18;\n    let longestCellData, longestCellDataWidth, longestColName, longestColNameWidth, longestString;\n\n    for (let row of data.rows) {\n      rowValues.push(row[data.columns[i].key]);\n    }\n\n    longestCellData = rowValues.reduce(reducer);\n    longestColName = data.columns[i].name;\n    longestCellDataWidth = Math.ceil(getCanvas().measureText(longestCellData).width);\n    longestColNameWidth = Math.ceil(getCanvas(\"bold \").measureText(longestColName).width) + arrowWidth;\n    longestString = Math.max(longestCellDataWidth, longestColNameWidth);\n    return longestString + cellPadding;\n  };\n\n  const getCanvas = (fontWeight = \"\") => {\n    var canvas = document.createElement(\"canvas\");\n    var canvasContext = canvas.getContext(\"2d\");\n\n    if (!canvas) {\n      canvas = document.createElement(\"canvas\");\n      canvasContext = canvas.getContext(\"2d\");\n    }\n\n    canvasContext.font = `${fontWeight}16px sans-serif`;\n    return canvasContext;\n  };\n\n  const distributeRemainingSpace = (combinedColumnWidth, columns, gridWidth) => {\n    const spaceLeftOver = gridWidth - combinedColumnWidth;\n    const remainder = spaceLeftOver % columns.length;\n    const equalSpaceLeft = spaceLeftOver - remainder;\n    columns[0].width += remainder; //any remaining space after distributing equally should go on first column\n\n    for (let col of columns) {\n      col.width += equalSpaceLeft / columns.length;\n    }\n\n    return columns;\n  }; //////////////////////////////////////////\n\n\n  let dataSec = { ...formatColumns(props.sectionData)\n  };\n  let columns = dataSec.columns;\n  let rows = dataSec.rows;\n  const [stateSectionTable, setStateSectionTable] = useState({\n    rows,\n    columns,\n    topLeft: {},\n    botRight: {},\n    pasting: false\n  });\n  useEffect(() => {\n    let dataSec = { ...formatColumns(props.sectionData)\n    };\n    let columns = dataSec.columns;\n    let rows = dataSec.rows;\n    setStateSectionTable({ ...stateSectionTable,\n      columns,\n      rows\n    });\n  }, [stateTitleOpinion.TOData.MORSections, stateTitleOpinion.TOData.runsheetSections]);\n  useEffect(() => {\n    document.addEventListener(\"copy\", handleCopy);\n    document.addEventListener(\"paste\", handlePaste);\n    return function cleanup() {\n      removeAllListeners();\n    };\n  });\n\n  const removeAllListeners = () => {\n    document.removeEventListener(\"copy\", handleCopy);\n    document.removeEventListener(\"paste\", handlePaste);\n  };\n\n  const rowGetter = i => {\n    const {\n      rows\n    } = stateSectionTable;\n    return rows[i];\n  };\n\n  const updateRows = (startIdx, newRows) => {\n    setStateTitleOpinion(stateTitleOpinion => {\n      const rows = stateSectionTable.rows.slice();\n\n      for (let i = 0; i < newRows.length; i++) {\n        if (startIdx + i < rows.length) {\n          rows[startIdx + i] = { ...rows[startIdx + i],\n            ...newRows[i]\n          };\n        }\n      }\n\n      const tempSections = [...(props.MOR ? stateTitleOpinion.TOData.MORSections : stateTitleOpinion.TOData.runsheetSections)];\n      tempSections[props.sectionNumber] = { ...tempSections[props.sectionNumber],\n        rows\n      };\n      return { ...stateTitleOpinion,\n        edited: true,\n        TOData: { ...stateTitleOpinion.TOData,\n          [props.MOR ? \"MORSections\" : \"runsheetSections\"]: [...tempSections]\n        }\n      };\n    });\n  };\n\n  const handleCopy = e => {\n    if (stateTitleOpinion.lastClickedSection === props.sectionData.name + props.sectionNumber) {\n      console.debug(\"handleCopy Called\");\n      e.preventDefault();\n      const {\n        topLeft,\n        botRight\n      } = stateSectionTable; // Loop through each row\n\n      const text = range(topLeft.rowIdx, botRight.rowIdx + 1).map( // Loop through each column\n      rowIdx => stateSectionTable.columns.slice(topLeft.colIdx, botRight.colIdx + 1).map( // Grab the row values and make a text string\n      col => rowGetter(rowIdx)[col.key]).join(\"\\t\")).join(\"\\n\");\n      console.debug(\"text\", text);\n      e.clipboardData.setData(\"text/plain\", text);\n    }\n  };\n\n  const handlePaste = e => {\n    if (stateTitleOpinion.lastClickedSection === props.sectionData.name + props.sectionNumber) {\n      console.debug(\"handlePaste Called\");\n      e.preventDefault();\n      setStateSectionTable(stateSectionTable => {\n        return { ...stateSectionTable,\n          pasting: true\n        };\n      });\n      const {\n        topLeft\n      } = stateSectionTable;\n      const newRows = [];\n      const pasteData = defaultParsePaste(e.clipboardData.getData(\"text/plain\"));\n      console.debug(\"pasteData\", pasteData);\n      pasteData.forEach(row => {\n        const rowData = {}; // Merge the values from pasting and the keys from the columns\n\n        stateSectionTable.columns.slice(topLeft.colIdx, topLeft.colIdx + row.length).forEach((col, j) => {\n          // Create the key-value pair for the row\n          rowData[col.key] = row[j];\n        }); // Push the new row to the changes\n\n        newRows.push(rowData);\n      });\n      console.debug(\"newRows\", newRows);\n      updateRows(topLeft.rowIdx, newRows);\n    }\n  };\n\n  const onGridRowsUpdated = ({\n    fromRow,\n    toRow,\n    updated,\n    action\n  }) => {\n    console.debug(\"onGridRowsUpdated!\", action);\n    console.debug(\"updated\", updated);\n\n    if (action !== \"COPY_PASTE\") {\n      setStateTitleOpinion(stateTitleOpinion => {\n        let rigthUpdate = {};\n\n        for (let key in updated) {\n          rigthUpdate = { ...rigthUpdate,\n            [`id${stateSectionTable.topLeft.colIdx}`]: updated[key]\n          };\n        }\n\n        const rows = stateSectionTable.rows.slice();\n        rows[stateSectionTable.topLeft.rowIdx] = { ...rows[stateSectionTable.topLeft.rowIdx],\n          ...rigthUpdate\n        };\n        const tempSections = [...(props.MOR ? stateTitleOpinion.TOData.MORSections : stateTitleOpinion.TOData.runsheetSections)];\n        tempSections[props.sectionNumber] = { ...tempSections[props.sectionNumber],\n          rows\n        };\n        return { ...stateTitleOpinion,\n          edited: true,\n          TOData: { ...stateTitleOpinion.TOData,\n            [props.MOR ? \"MORSections\" : \"runsheetSections\"]: [...tempSections]\n          }\n        };\n      });\n    }\n  };\n\n  const setSelection = args => {\n    setStateSectionTable({ ...stateSectionTable,\n      topLeft: {\n        rowIdx: args.topLeft.rowIdx,\n        colIdx: args.topLeft.idx\n      },\n      botRight: {\n        rowIdx: args.bottomRight.rowIdx,\n        colIdx: args.bottomRight.idx\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ReactDataGrid, {\n    columns: stateSectionTable.columns,\n    rowGetter: i => stateSectionTable.rows[i],\n    rowsCount: stateSectionTable.rows.length,\n    onGridRowsUpdated: onGridRowsUpdated,\n    enableCellSelect: true,\n    enableCellAutoFocus: false,\n    minColumnWidth: 40,\n    minHeight: stateSectionTable.rows.length * 35 + 59,\n    cellRangeSelection: {\n      onComplete: setSelection\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/TitleOpinion/components/SectionTable.js"],"names":["React","useContext","useState","useEffect","TitleOpinionContext","ReactDataGrid","range","defaultParsePaste","str","split","map","row","SectionTable","props","stateTitleOpinion","setStateTitleOpinion","formatColumns","data","gridWidth","parseInt","document","querySelector","clientWidth","combinedColumnWidth","i","columns","length","width","getTextWidth","distributeRemainingSpace","rowValues","reducer","a","b","cellPadding","arrowWidth","longestCellData","longestCellDataWidth","longestColName","longestColNameWidth","longestString","rows","push","key","reduce","name","Math","ceil","getCanvas","measureText","max","fontWeight","canvas","createElement","canvasContext","getContext","font","spaceLeftOver","remainder","equalSpaceLeft","col","dataSec","sectionData","stateSectionTable","setStateSectionTable","topLeft","botRight","pasting","TOData","MORSections","runsheetSections","addEventListener","handleCopy","handlePaste","cleanup","removeAllListeners","removeEventListener","rowGetter","updateRows","startIdx","newRows","slice","tempSections","MOR","sectionNumber","edited","e","lastClickedSection","console","debug","preventDefault","text","rowIdx","colIdx","join","clipboardData","setData","pasteData","getData","forEach","rowData","j","onGridRowsUpdated","fromRow","toRow","updated","action","rigthUpdate","setSelection","args","idx","bottomRight","onComplete"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\nimport { TitleOpinionContext } from \"../TitleOpinionContext\";\r\nimport ReactDataGrid from \"react-data-grid-m1n-version\";\r\nimport { range } from \"lodash\";\r\nimport \"react-data-grid-m1n-version/dist/react-data-grid.css\";\r\n\r\nconst defaultParsePaste = str =>\r\n  str.split(/\\r\\n|\\n|\\r/).map(row => row.split(\"\\t\"));\r\n\r\nexport default function SectionTable(props) {\r\n  const [stateTitleOpinion, setStateTitleOpinion] = useContext(\r\n    TitleOpinionContext\r\n  );\r\n\r\n  /////////////////////cells width//////////\r\n  const formatColumns = data => {\r\n    const gridWidth = parseInt(document.querySelector(\"#root\").clientWidth, 10); //selector for grid\r\n    let combinedColumnWidth = 0;\r\n\r\n    for (let i = 0; i < data.columns.length; i++) {\r\n      data.columns[i].width = getTextWidth(data, i);\r\n      combinedColumnWidth += data.columns[i].width;\r\n    }\r\n\r\n    if (combinedColumnWidth < gridWidth) {\r\n      data.columns = distributeRemainingSpace(\r\n        combinedColumnWidth,\r\n        data.columns,\r\n        gridWidth\r\n      );\r\n    }\r\n\r\n    return data;\r\n  };\r\n\r\n  const getTextWidth = (data, i) => {\r\n    const rowValues = [];\r\n    const reducer = (a, b) => (a ? a.length : 0 > b ? b.length : 0 ? a : b);\r\n    const cellPadding = 16;\r\n    const arrowWidth = 18;\r\n    let longestCellData,\r\n      longestCellDataWidth,\r\n      longestColName,\r\n      longestColNameWidth,\r\n      longestString;\r\n\r\n    for (let row of data.rows) {\r\n      rowValues.push(row[data.columns[i].key]);\r\n    }\r\n\r\n    longestCellData = rowValues.reduce(reducer);\r\n    longestColName = data.columns[i].name;\r\n    longestCellDataWidth = Math.ceil(\r\n      getCanvas().measureText(longestCellData).width\r\n    );\r\n    longestColNameWidth =\r\n      Math.ceil(getCanvas(\"bold \").measureText(longestColName).width) +\r\n      arrowWidth;\r\n\r\n    longestString = Math.max(longestCellDataWidth, longestColNameWidth);\r\n\r\n    return longestString + cellPadding;\r\n  };\r\n\r\n  const getCanvas = (fontWeight = \"\") => {\r\n    var canvas = document.createElement(\"canvas\");\r\n    var canvasContext = canvas.getContext(\"2d\");\r\n\r\n    if (!canvas) {\r\n      canvas = document.createElement(\"canvas\");\r\n      canvasContext = canvas.getContext(\"2d\");\r\n    }\r\n    canvasContext.font = `${fontWeight}16px sans-serif`;\r\n\r\n    return canvasContext;\r\n  };\r\n\r\n  const distributeRemainingSpace = (\r\n    combinedColumnWidth,\r\n    columns,\r\n    gridWidth\r\n  ) => {\r\n    const spaceLeftOver = gridWidth - combinedColumnWidth;\r\n    const remainder = spaceLeftOver % columns.length;\r\n    const equalSpaceLeft = spaceLeftOver - remainder;\r\n\r\n    columns[0].width += remainder; //any remaining space after distributing equally should go on first column\r\n\r\n    for (let col of columns) {\r\n      col.width += equalSpaceLeft / columns.length;\r\n    }\r\n    return columns;\r\n  };\r\n  //////////////////////////////////////////\r\n\r\n  let dataSec = { ...formatColumns(props.sectionData) };\r\n  let columns = dataSec.columns;\r\n  let rows = dataSec.rows;\r\n\r\n  const [stateSectionTable, setStateSectionTable] = useState({\r\n    rows,\r\n    columns,\r\n    topLeft: {},\r\n    botRight: {},\r\n    pasting: false\r\n  });\r\n\r\n  useEffect(() => {\r\n    let dataSec = { ...formatColumns(props.sectionData) };\r\n    let columns = dataSec.columns;\r\n    let rows = dataSec.rows;\r\n\r\n    setStateSectionTable({ ...stateSectionTable, columns, rows });\r\n  }, [\r\n    stateTitleOpinion.TOData.MORSections,\r\n    stateTitleOpinion.TOData.runsheetSections\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    document.addEventListener(\"copy\", handleCopy);\r\n    document.addEventListener(\"paste\", handlePaste);\r\n\r\n    return function cleanup() {\r\n      removeAllListeners();\r\n    };\r\n  });\r\n\r\n  const removeAllListeners = () => {\r\n    document.removeEventListener(\"copy\", handleCopy);\r\n    document.removeEventListener(\"paste\", handlePaste);\r\n  };\r\n\r\n  const rowGetter = i => {\r\n    const { rows } = stateSectionTable;\r\n    return rows[i];\r\n  };\r\n\r\n  const updateRows = (startIdx, newRows) => {\r\n    setStateTitleOpinion(stateTitleOpinion => {\r\n      const rows = stateSectionTable.rows.slice();\r\n\r\n      for (let i = 0; i < newRows.length; i++) {\r\n        if (startIdx + i < rows.length) {\r\n          rows[startIdx + i] = { ...rows[startIdx + i], ...newRows[i] };\r\n        }\r\n      }\r\n\r\n      const tempSections = [\r\n        ...(props.MOR\r\n          ? stateTitleOpinion.TOData.MORSections\r\n          : stateTitleOpinion.TOData.runsheetSections)\r\n      ];\r\n      tempSections[props.sectionNumber] = {\r\n        ...tempSections[props.sectionNumber],\r\n        rows\r\n      };\r\n\r\n      return {\r\n        ...stateTitleOpinion,\r\n        edited: true,\r\n        TOData: {\r\n          ...stateTitleOpinion.TOData,\r\n          [props.MOR ? \"MORSections\" : \"runsheetSections\"]: [...tempSections]\r\n        }\r\n      };\r\n    });\r\n  };\r\n\r\n  const handleCopy = e => {\r\n    if (\r\n      stateTitleOpinion.lastClickedSection ===\r\n      props.sectionData.name + props.sectionNumber\r\n    ) {\r\n      console.debug(\"handleCopy Called\");\r\n      e.preventDefault();\r\n      const { topLeft, botRight } = stateSectionTable;\r\n\r\n      // Loop through each row\r\n      const text = range(topLeft.rowIdx, botRight.rowIdx + 1)\r\n        .map(\r\n          // Loop through each column\r\n          rowIdx =>\r\n            stateSectionTable.columns\r\n              .slice(topLeft.colIdx, botRight.colIdx + 1)\r\n              .map(\r\n                // Grab the row values and make a text string\r\n                col => rowGetter(rowIdx)[col.key]\r\n              )\r\n              .join(\"\\t\")\r\n        )\r\n        .join(\"\\n\");\r\n      console.debug(\"text\", text);\r\n      e.clipboardData.setData(\"text/plain\", text);\r\n    }\r\n  };\r\n\r\n  const handlePaste = e => {\r\n    if (\r\n      stateTitleOpinion.lastClickedSection ===\r\n      props.sectionData.name + props.sectionNumber\r\n    ) {\r\n      console.debug(\"handlePaste Called\");\r\n      e.preventDefault();\r\n\r\n      setStateSectionTable(stateSectionTable => {\r\n        return { ...stateSectionTable, pasting: true };\r\n      });\r\n      const { topLeft } = stateSectionTable;\r\n\r\n      const newRows = [];\r\n      const pasteData = defaultParsePaste(\r\n        e.clipboardData.getData(\"text/plain\")\r\n      );\r\n\r\n      console.debug(\"pasteData\", pasteData);\r\n\r\n      pasteData.forEach(row => {\r\n        const rowData = {};\r\n        // Merge the values from pasting and the keys from the columns\r\n        stateSectionTable.columns\r\n          .slice(topLeft.colIdx, topLeft.colIdx + row.length)\r\n          .forEach((col, j) => {\r\n            // Create the key-value pair for the row\r\n            rowData[col.key] = row[j];\r\n          });\r\n        // Push the new row to the changes\r\n        newRows.push(rowData);\r\n      });\r\n\r\n      console.debug(\"newRows\", newRows);\r\n\r\n      updateRows(topLeft.rowIdx, newRows);\r\n    }\r\n  };\r\n\r\n  const onGridRowsUpdated = ({ fromRow, toRow, updated, action }) => {\r\n    console.debug(\"onGridRowsUpdated!\", action);\r\n    console.debug(\"updated\", updated);\r\n    if (action !== \"COPY_PASTE\") {\r\n      setStateTitleOpinion(stateTitleOpinion => {\r\n        let rigthUpdate = {};\r\n        for (let key in updated) {\r\n          rigthUpdate = {\r\n            ...rigthUpdate,\r\n            [`id${stateSectionTable.topLeft.colIdx}`]: updated[key]\r\n          };\r\n        }\r\n\r\n        const rows = stateSectionTable.rows.slice();\r\n\r\n        rows[stateSectionTable.topLeft.rowIdx] = {\r\n          ...rows[stateSectionTable.topLeft.rowIdx],\r\n          ...rigthUpdate\r\n        };\r\n\r\n        const tempSections = [\r\n          ...(props.MOR\r\n            ? stateTitleOpinion.TOData.MORSections\r\n            : stateTitleOpinion.TOData.runsheetSections)\r\n        ];\r\n        tempSections[props.sectionNumber] = {\r\n          ...tempSections[props.sectionNumber],\r\n          rows\r\n        };\r\n\r\n        return {\r\n          ...stateTitleOpinion,\r\n          edited: true,\r\n          TOData: {\r\n            ...stateTitleOpinion.TOData,\r\n            [props.MOR ? \"MORSections\" : \"runsheetSections\"]: [...tempSections]\r\n          }\r\n        };\r\n      });\r\n    }\r\n  };\r\n\r\n  const setSelection = args => {\r\n    setStateSectionTable({\r\n      ...stateSectionTable,\r\n      topLeft: {\r\n        rowIdx: args.topLeft.rowIdx,\r\n        colIdx: args.topLeft.idx\r\n      },\r\n      botRight: {\r\n        rowIdx: args.bottomRight.rowIdx,\r\n        colIdx: args.bottomRight.idx\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <ReactDataGrid\r\n        columns={stateSectionTable.columns}\r\n        rowGetter={i => stateSectionTable.rows[i]}\r\n        rowsCount={stateSectionTable.rows.length}\r\n        onGridRowsUpdated={onGridRowsUpdated}\r\n        enableCellSelect\r\n        enableCellAutoFocus={false}\r\n        minColumnWidth={40}\r\n        minHeight={stateSectionTable.rows.length * 35 + 59}\r\n        cellRangeSelection={{\r\n          onComplete: setSelection\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}