{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Shared\\\\M1nTable\\\\M1nTable.js\";\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////                TO USE THIS TABLE:\n//// 1-Send to this component a prop called 'parent' with a trackOwners/trackWells/Contacts/OwnersPerWell...\n////  -if it is OwnersPerWell use case add another prop \"selectedWell\" with the well\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\n////                TO USE THIS TABLE IN A NEW USE CASE:\n//// 1-Send to this component a prop called 'parent' with a string you choose to identify your use case.\n//// 2-Define your HeadCells const, for your columns, in the HeadCells section.\n//// 3-Add your query in the queries section.\n//// 4-At the end, but before the return line, add your own section where you will run your queries\n////   and you will set all necessaries local states for your use case and the table,\n////   look at the Tracked Owners section as example.\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//////////////////external table package info: https://github.com/gregnb/mui-datatables /////////////////////\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AppContext } from \"../../../AppContext\";\nimport { Container } from \"@material-ui/core\";\nimport Table from \"./components/Table\";\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport { WELLOWNERSQUERY } from \"../../../graphQL/useQueryWellOwners\";\nimport { OWNERSQUERY } from \"../../../graphQL/useQueryOwners\";\nimport { WELLSQUERY } from \"../../../graphQL/useQueryWells\";\nimport { CONTACTSQUERY } from \"../../../graphQL/useQueryContacts\";\nimport { TRACKSBYUSERANDOBJECTTYPE } from \"../../../graphQL/useQueryTracksByUserAndObjectType\";\nimport { TAGSAMPLES } from \"../../../graphQL/useQueryTagSamples\";\nimport { COMMENTSCOUNTER } from \"../../../graphQL/useQueryCommentsCounter\";\nimport { CONTACSCOUNTER } from \"../../../graphQL/useQueryContactsCounter\";\nimport { CONTACTSBYOWNERSID } from \"../../../graphQL/useQueryContactsByOwnerId\";\nimport { OWNERSWELLSQUERY } from \"../../../graphQL/useQueryOwnersWells\";\nimport { ADDREMOVEOWNERTOACONTACT } from \"../../../graphQL/useMutationAddRemoveOwnerToAContact\";\nimport { CONTACT } from \"../../../graphQL/useQueryContact\";\nimport { REMOVECONTACT } from \"../../../graphQL/useMutationRemoveContact\";\nconst useStyles = makeStyles(theme => ({\n  container: {\n    padding: \"0 !important\"\n  }\n})); ////////////HeadCells begin///////////////////////////////////////////////\n\nconst TrackedOwnersHeadCells = [{\n  name: \"id\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"name\",\n  label: \"Name\"\n}, {\n  name: \"ownershipType\",\n  label: \"Entity\"\n}, // { name: \"interestType\", label: \"Type\" },\n// {\n//   name: \"ownershipPercentage\",\n//   label: \"Interest\",\n// },\n// TEMPORARY COMMENT OUT. DO NOT DELETE\n// WILL BE ADDED IN AFTER DEVELOPING A SYSTEM TO\n// AGGREGATE OWNERS\n// {\n//   name: \"appraisedValue\",\n//   label: \"Appraised Value\",\n// },\n{\n  name: \"tags\",\n  label: \"Tags \",\n  options: {\n    sort: false,\n    download: false,\n    print: false,\n    filterOptions: {\n      names: [],\n\n      logic(rowVal, pickedTags) {\n        let containIts = true;\n        pickedTags.map(pickedTag => {\n          if (rowVal[0].indexOf(pickedTag) === -1) {\n            containIts = false;\n          }\n        });\n        return !containIts;\n      }\n\n    }\n  }\n}, {\n  name: \"contactsCounter\",\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n},\n/* \r\n// TEMPORARY COMMENT OUT. DO NOT DELETE \r\n// WILL BE RE-ADDED ONCE WE FIGURE OUT HOW TO DRAW AGGREGATIONS \r\n// FOR UNIVERSAL OWNERS\r\n\r\n// {\r\n//   name: \"wellsCounter\",\r\n//   label: \" \",\r\n//   options: {\r\n//     filter: false,\r\n//     searchable: false,\r\n//     sort: false,\r\n//     download: false,\r\n//     print: false,\r\n//     viewColumns: false,\r\n//   },\r\n// },\r\n*/\n{\n  name: \"commentsCounter\",\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"isTracked\",\n  label: \" \",\n  options: {\n    filter: false,\n    sort: false,\n    searchable: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}];\nconst WellsHeadCells = [{\n  name: \"id\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"wellName\",\n  label: \"Well\"\n}, {\n  name: \"api\",\n  label: \"API\"\n}, {\n  name: \"operator\",\n  label: \"Operator\"\n}, {\n  name: \"wellType\",\n  label: \"Type\"\n}, {\n  name: \"wellBoreProfile\",\n  label: \"Profile\"\n}, {\n  name: \"tags\",\n  label: \"Tags \",\n  options: {\n    sort: false,\n    download: false,\n    print: false,\n    filterOptions: {\n      names: [],\n\n      logic(rowVal, pickedTags) {\n        let containIts = true;\n        pickedTags.map(pickedTag => {\n          if (rowVal[0].indexOf(pickedTag) === -1) {\n            containIts = false;\n          }\n        });\n        return !containIts;\n      }\n\n    }\n  }\n}, {\n  name: \"ownerCount\",\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"commentsCounter\",\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"isTracked\",\n  label: \" \",\n  options: {\n    filter: false,\n    sort: false,\n    searchable: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}];\nconst OwnersPerWellHeadCells = [{\n  name: \"id\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"name\",\n  label: \"Name\"\n}, {\n  name: \"ownershipType\",\n  label: \"Entity\"\n}, {\n  name: \"interestType\",\n  label: \"Type\"\n}, {\n  name: \"ownershipPercentage\",\n  label: \"Interest\"\n}, {\n  name: \"appraisedValue\",\n  label: \"Appraised Value\"\n}, {\n  name: \"tags\",\n  label: \"Tags \",\n  options: {\n    sort: false,\n    download: false,\n    print: false,\n    filterOptions: {\n      names: [],\n\n      logic(rowVal, pickedTags) {\n        let containIts = true;\n        pickedTags.map(pickedTag => {\n          if (rowVal[0].indexOf(pickedTag) === -1) {\n            containIts = false;\n          }\n        });\n        return !containIts;\n      }\n\n    }\n  }\n}, {\n  name: \"contactsCounter\",\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n},\n/*   \r\n// TEMPORARY COMMENT OUT. DO NOT DELETE \r\n// WILL BE RE-ADDED ONCE WE HAVE A WAY OF AGGREGATING A \r\n// UNIVERSAL OWNER \r\n  // {\r\n//   name: \"wellsCounter\",\r\n//   label: \" \",\r\n//   options: {\r\n//     filter: false,\r\n//     searchable: false,\r\n//     sort: false,\r\n//     download: false,\r\n//     print: false,\r\n//     viewColumns: false,\r\n//   },\r\n// }, \r\n*/\n{\n  name: \"commentsCounter\",\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"isTracked\",\n  label: \"Track\",\n  options: {\n    searchable: false,\n    download: false,\n    print: false,\n    filterOptions: {\n      names: [\"Tracked\", \"Untracked\"],\n\n      logic(tracked, filterVal) {\n        return !(filterVal.indexOf(\"Tracked\") >= 0 && tracked || filterVal.indexOf(\"Untracked\") >= 0 && !tracked);\n      }\n\n    },\n    filterType: \"dropdown\"\n  }\n}];\nconst OwnersPerContactsHeadCells = [{\n  name: \"id\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"name\",\n  label: \"Name\"\n}, {\n  name: \"ownershipType\",\n  label: \"Entity\"\n}, {\n  name: \"appraisedValue\",\n  label: \"Appraised Value\"\n}, {\n  name: \"tags\",\n  label: \"Tags \",\n  options: {\n    sort: false,\n    download: false,\n    print: false,\n    filterOptions: {\n      names: [],\n\n      logic(rowVal, pickedTags) {\n        let containIts = true;\n        pickedTags.map(pickedTag => {\n          if (rowVal[0].indexOf(pickedTag) === -1) {\n            containIts = false;\n          }\n        });\n        return !containIts;\n      }\n\n    }\n  }\n}, {\n  name: \"contactsCounter\",\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n},\n/*   \r\n// TEMPORARY COMMENT OUT. DO NOT REMOVE \r\n// WILL BE UNCOMMENTED ONCE WE UNDERSTAND A MORE \r\n// UNIVERSAL OWNER ID. \r\n  // {\r\n//   name: \"wellsCounter\",\r\n//   label: \" \",\r\n//   options: {\r\n//     filter: false,\r\n//     searchable: false,\r\n//     sort: false,\r\n//     download: false,\r\n//     print: false,\r\n//     viewColumns: false,\r\n//   },\r\n// },\r\n*/\n{\n  name: \"commentsCounter\",\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"isTracked\",\n  label: \"Track\",\n  options: {\n    searchable: false,\n    download: false,\n    print: false,\n    filterOptions: {\n      names: [\"Tracked\", \"Untracked\"],\n\n      logic(tracked, filterVal) {\n        return !(filterVal.indexOf(\"Tracked\") >= 0 && tracked || filterVal.indexOf(\"Untracked\") >= 0 && !tracked);\n      }\n\n    },\n    filterType: \"dropdown\"\n  }\n}];\nconst ContactsHeadCells = [{\n  name: \"_id\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"address1\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"address2\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"city\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"state\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"zip\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"country\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"name\",\n  label: \"Name\",\n  editable: true\n}, {\n  name: \"fullContactAddress\",\n  label: \"Primary Address\",\n  editable: true\n}, {\n  name: \"leadSource\",\n  label: \"Lead Source\",\n  editable: true\n}, {\n  name: \"lastUpdateBy.name\",\n  label: \"Updated By\"\n}, {\n  name: \"lastUpdateAt\",\n  label: \"Last Updated\"\n}, // { name: \"primaryEmail\", label: \"Primary Email\" },\n// {\n//   name: \"mobilePhone\",\n//   label: \"Mobile Phone\",\n// },\n// {\n//   name: \"homePhone\",\n//   label: \"Home Phone\",\n// },\n// {\n{\n  name: \"tags\",\n  label: \"Tags \",\n  options: {\n    sort: false,\n    download: false,\n    print: false,\n    filterOptions: {\n      names: [],\n\n      logic(rowVal, pickedTags) {\n        let containIts = true;\n        pickedTags.map(pickedTag => {\n          if (rowVal[0].indexOf(pickedTag) === -1) {\n            containIts = false;\n          }\n        });\n        return !containIts;\n      }\n\n    }\n  }\n}, {\n  name: \"owners\",\n  //ownerPerContactCount\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"commentsCounter\",\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n} // {\n//   name: \"isTracked\",\n//   label: \"Track\",\n//   options: {\n//     searchable: false,\n//     download: false,\n//     print: false,\n//     filterOptions: {\n//       names: [\"Tracked\", \"Untracked\"],\n//       logic(tracked, filterVal) {\n//         return !(\n//           (filterVal.indexOf(\"Tracked\") >= 0 && tracked) ||\n//           (filterVal.indexOf(\"Untracked\") >= 0 && !tracked)\n//         );\n//       },\n//     },\n//     filterType: \"dropdown\",\n//   },\n// },\n];\nconst SearchsHeadCells = [{\n  name: \"id\",\n  options: {\n    display: false,\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, //////////\n{\n  name: \"tags\",\n  label: \"Tags \",\n  options: {\n    sort: false,\n    download: false,\n    print: false,\n    filterOptions: {\n      names: [],\n\n      logic(rowVal, pickedTags) {\n        let containIts = true;\n        pickedTags.map(pickedTag => {\n          if (rowVal[0].indexOf(pickedTag) === -1) {\n            containIts = false;\n          }\n        });\n        return !containIts;\n      }\n\n    }\n  }\n}, {\n  name: \"commentsCounter\",\n  label: \" \",\n  options: {\n    filter: false,\n    searchable: false,\n    sort: false,\n    download: false,\n    print: false,\n    viewColumns: false\n  }\n}, {\n  name: \"isTracked\",\n  label: \" \",\n  options: {\n    searchable: false,\n    download: false,\n    print: false,\n    filterOptions: {\n      names: [\"Tracked\", \"Untracked\"],\n\n      logic(tracked, filterVal) {\n        return !(filterVal.indexOf(\"Tracked\") >= 0 && tracked || filterVal.indexOf(\"Untracked\") >= 0 && !tracked);\n      }\n\n    },\n    filterType: \"dropdown\"\n  }\n}]; ////////////HeadCells end///////////////////////////////////////////////\n\nconst capitalizeFirstLetter = string => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\nconst joinAddress = row => {\n  let rowData = {\n    address1: row.address1,\n    address2: row.address2,\n    city: row.city,\n    state: row.state,\n    zip: row.zip,\n    country: row.country\n  };\n  let textArray = [];\n\n  for (const key in rowData) {\n    if (rowData.hasOwnProperty(key) && rowData[key] && rowData[key] !== \"\") {\n      if (key === \"zip\" || key === \"country\") {\n        textArray = [[textArray.join(\", \"), capitalizeFirstLetter(rowData[key])].join(\" \")];\n      } else textArray.push(capitalizeFirstLetter(rowData[key]));\n    }\n  }\n\n  return textArray.join(\", \");\n};\n\nexport default function M1nTable(props) {\n  const classes = useStyles();\n  const [stateApp, setStateApp] = useContext(AppContext);\n  const [rows, setRows] = useState();\n  const [header, setHeader] = useState(\"\");\n  const [columns, setColumns] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [addAble, setAddAble] = useState(true);\n  const [uploadIcon, setUploadIcon] = useState(null);\n  const [targetLabel, setTargetLabel] = useState(null);\n  const [deleteFunc, setDeleteFunc] = useState(null);\n  const [showTracks, setShowTracks] = useState(true);\n  const [orderByTracks, setOrderByTracks] = useState(true);\n  const [startPaginationAt, setStartPaginationAt] = useState(); ////////////Queries begin///////////////////////////////////////////////\n\n  const [tracksByUserAndObjectType, {\n    data: dataTracks\n  }] = useLazyQuery(TRACKSBYUSERANDOBJECTTYPE, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [getCommentsCounter, {\n    data: dataCommentsCounter\n  }] = useLazyQuery(COMMENTSCOUNTER, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [getTagSamples, {\n    data: dataTagSamples\n  }] = useLazyQuery(TAGSAMPLES, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [getContactsCounter, {\n    data: dataContactsCounter\n  }] = useLazyQuery(CONTACSCOUNTER, {\n    fetchPolicy: \"cache-and-network\"\n  }); //////////\n\n  const [getOwners, {\n    data: dataOwners\n  }] = useLazyQuery(OWNERSQUERY);\n  const [getOwnersWells, {\n    data: dataOwnersWells\n  }] = useLazyQuery(OWNERSWELLSQUERY); //////////\n\n  const [getWells, {\n    data: dataWells\n  }] = useLazyQuery(WELLSQUERY); //////////\n\n  const [getWellOwners, {\n    data: dataWellOwners\n  }] = useLazyQuery(WELLOWNERSQUERY); //////////\n\n  const [getContactsByOwnerId, {\n    data: dataContactsByOwnerId\n  }] = useLazyQuery(CONTACTSBYOWNERSID, {\n    fetchPolicy: \"cache-and-network\"\n  }); //////////\n\n  const [getContactInM1nTable, {\n    data: dataContact\n  }] = useLazyQuery(CONTACT, {\n    fetchPolicy: \"cache-and-network\"\n  }); //////////\n\n  const [getContacts, {\n    data: dataContacts\n  }] = useLazyQuery(CONTACTSQUERY, {\n    fetchPolicy: \"cache-and-network\"\n  }); //////////\n\n  const [addRemoveOwnerToAContact] = useMutation(ADDREMOVEOWNERTOACONTACT); //////////\n\n  const [removeContact] = useMutation(REMOVECONTACT); ////////////Queries end///////////////////////////////////////////////\n  ////////////General begin///////////////////////////////////////////////\n\n  useEffect(() => {\n    if (targetLabel && stateApp.user && stateApp.user.mongoId && showTracks) {\n      setLoading(true);\n      tracksByUserAndObjectType({\n        variables: {\n          userId: stateApp.user.mongoId,\n          objectType: targetLabel\n        }\n      });\n    }\n  }, [stateApp.user, targetLabel, showTracks]); ////////////General end///////////////////////////////////////////////\n  ////////////Tracked Owners begin///////////////////////////////////////////////\n\n  useEffect(() => {\n    if (props.parent && props.parent === \"trackOwners\") {\n      setTargetLabel(\"owner\");\n\n      if (props.header) {\n        setHeader(props.header);\n      } else {\n        setHeader(\"Owners\");\n      }\n\n      setAddAble(false);\n    }\n  }, [props.parent, props.header]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"trackOwners\" && dataTracks && dataTracks.tracksByUserAndObjectType) {\n      if (dataTracks.tracksByUserAndObjectType.length !== 0) {\n        const tracksIdArray = dataTracks.tracksByUserAndObjectType.map(track => track.trackOn);\n        getOwners({\n          variables: {\n            ownerIdArray: tracksIdArray,\n            authToken: stateApp.user.authToken\n          }\n        });\n        getOwnersWells({\n          variables: {\n            ownersIds: tracksIdArray\n          }\n        });\n        getCommentsCounter({\n          variables: {\n            objectsIdsArray: tracksIdArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        getTagSamples({\n          variables: {\n            objectsIdsArray: tracksIdArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        getContactsCounter({\n          variables: {\n            objectsIdsArray: tracksIdArray\n          }\n        });\n      } else {\n        setRows([]);\n        setLoading(false);\n      }\n    }\n  }, [dataTracks]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"trackOwners\" && dataOwners) {\n      if (dataOwners.owners && dataOwners.owners.results && dataOwners.owners.results.length > 0 && dataCommentsCounter && dataCommentsCounter.commentsCounter && dataContactsCounter && dataContactsCounter.contactsCounter && dataTagSamples && dataTagSamples.tagSamples && dataOwnersWells) {\n        dataOwners.owners.results.forEach(owner => {\n          owner.isTracked = true;\n          owner.commentsCounter = 0;\n          owner.tags = [[], 0];\n          owner.contactsCounter = 0;\n          owner.wellsCounter = [];\n\n          if (dataOwnersWells.ownersWells) {\n            for (let i = 0; i < dataOwnersWells.ownersWells.length; i++) {\n              if (owner.id === dataOwnersWells.ownersWells[i].ownerId) {\n                owner.wellsCounter = dataOwnersWells.ownersWells[i].wells.map(well => well.wellId);\n                break;\n              }\n            }\n          }\n\n          for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\n            if (owner.id === dataCommentsCounter.commentsCounter[i]._id) {\n              owner.commentsCounter = dataCommentsCounter.commentsCounter[i].total;\n              break;\n            }\n          }\n\n          for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\n            if (owner.id === dataTagSamples.tagSamples[i]._id) {\n              owner.tags = [dataTagSamples.tagSamples[i].tags, dataTagSamples.tagSamples[i].total];\n              break;\n            }\n          }\n\n          for (let i = 0; i < dataContactsCounter.contactsCounter.length; i++) {\n            if (owner.id === dataContactsCounter.contactsCounter[i]._id) {\n              owner.contactsCounter = dataContactsCounter.contactsCounter[i].total;\n              break;\n            }\n          }\n        });\n        let availableTags = [];\n        dataTagSamples.tagSamples.map(sample => {\n          availableTags = [...availableTags, ...sample.tags];\n        });\n        const cleanAvailableTags = [...new Set(availableTags)];\n        setRows(dataOwners.owners.results);\n        setColumns(cleanAvailableTags.length > 0 ? TrackedOwnersHeadCells.map(column => {\n          if (column.name === \"tags\") {\n            return { ...column,\n              options: { ...column.options,\n                filterOptions: { ...column.options.filterOptions,\n                  names: cleanAvailableTags\n                }\n              }\n            };\n          }\n\n          return column;\n        }) : TrackedOwnersHeadCells.map(column => {\n          if (column.name === \"tags\") {\n            return { ...column,\n              options: { ...column.options,\n                filter: false\n              }\n            };\n          }\n\n          return column;\n        }));\n        setStateApp(state => ({ ...state,\n          owners: dataOwners.owners.results\n        }));\n        setLoading(false);\n      } else {\n        if (dataOwners.owners && dataOwners.owners.results && dataOwners.owners.results.length === 0) {\n          setRows([]);\n          setLoading(false);\n        }\n      }\n    }\n  }, [dataOwners, dataTagSamples, dataCommentsCounter, dataContactsCounter, dataOwnersWells]); ////////////Tracked Owners end///////////////////////////////////////////////\n  ////////////Tracked Wells begin///////////////////////////////////////////////\n\n  useEffect(() => {\n    if (props.parent && props.parent === \"trackWells\") {\n      setTargetLabel(\"well\");\n\n      if (props.header) {\n        setHeader(props.header);\n      } else {\n        setHeader(\"Wells\");\n      }\n\n      setAddAble(false);\n    }\n  }, [props.parent, props.header]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"trackWells\" && dataTracks && dataTracks.tracksByUserAndObjectType) {\n      if (dataTracks.tracksByUserAndObjectType.length !== 0) {\n        const tracksIdArray = dataTracks.tracksByUserAndObjectType.map(track => track.trackOn);\n        getWells({\n          variables: {\n            wellIdArray: tracksIdArray,\n            authToken: stateApp.user.authToken\n          }\n        });\n        getCommentsCounter({\n          variables: {\n            objectsIdsArray: tracksIdArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        getTagSamples({\n          variables: {\n            objectsIdsArray: tracksIdArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n      } else {\n        setRows([]);\n        setLoading(false);\n      }\n    }\n  }, [dataTracks]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"trackWells\" && dataWells) {\n      if (dataWells.wells && dataWells.wells.results && dataWells.wells.results.length > 0 && dataCommentsCounter && dataCommentsCounter.commentsCounter && dataTagSamples && dataTagSamples.tagSamples) {\n        dataWells.wells.results.forEach(well => {\n          well.isTracked = true;\n          well.commentsCounter = 0;\n          well.tags = [[], 0];\n\n          for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\n            if (well.id === dataCommentsCounter.commentsCounter[i]._id) {\n              well.commentsCounter = dataCommentsCounter.commentsCounter[i].total;\n              break;\n            }\n          }\n\n          for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\n            if (well.id === dataTagSamples.tagSamples[i]._id) {\n              well.tags = [dataTagSamples.tagSamples[i].tags, dataTagSamples.tagSamples[i].total];\n              break;\n            }\n          }\n        });\n        let availableTags = [];\n        dataTagSamples.tagSamples.map(sample => {\n          availableTags = [...availableTags, ...sample.tags];\n        });\n        const cleanAvailableTags = [...new Set(availableTags)];\n        setRows(dataWells.wells.results);\n        setColumns(cleanAvailableTags.length > 0 ? WellsHeadCells.map(column => {\n          if (column.name === \"tags\") {\n            return { ...column,\n              options: { ...column.options,\n                filterOptions: { ...column.options.filterOptions,\n                  names: cleanAvailableTags\n                }\n              }\n            };\n          }\n\n          return column;\n        }) : WellsHeadCells.map(column => {\n          if (column.name === \"tags\") {\n            return { ...column,\n              options: { ...column.options,\n                filter: false\n              }\n            };\n          }\n\n          return column;\n        }));\n        setStateApp(state => ({ ...state,\n          trackedwells: dataWells.wells.results\n        }));\n        setLoading(false);\n      } else {\n        if (dataWells.wells && dataWells.wells.results && dataWells.wells.results.length === 0) {\n          setRows([]);\n          setLoading(false);\n        }\n      }\n    }\n  }, [dataWells, dataTagSamples, dataCommentsCounter]); ////////////Tracked Wells end///////////////////////////////////////////////\n  ////////////Wells Per Owner begin///////////////////////////////////////////\n\n  useEffect(() => {\n    if (props.parent && props.parent === \"WellsPerOwner\" && props.wellsIdsArray && stateApp.user && stateApp.user.mongoId) {\n      setTargetLabel(\"well\");\n      setHeader(\"Wells\");\n      setAddAble(false);\n      getWells({\n        variables: {\n          wellIdArray: props.wellsIdsArray,\n          authToken: stateApp.user.authToken\n        }\n      });\n      getCommentsCounter({\n        variables: {\n          objectsIdsArray: props.wellsIdsArray,\n          userId: stateApp.user.mongoId\n        }\n      });\n      getTagSamples({\n        variables: {\n          objectsIdsArray: props.wellsIdsArray,\n          userId: stateApp.user.mongoId\n        }\n      });\n    }\n  }, [props.wellsIdsArray, stateApp.user]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"WellsPerOwner\" && dataWells) {\n      if (dataWells.wells && dataWells.wells.results && dataWells.wells.results.length > 0 && dataCommentsCounter && dataCommentsCounter.commentsCounter && dataTagSamples && dataTagSamples.tagSamples && dataTracks && dataTracks.tracksByUserAndObjectType) {\n        dataWells.wells.results.forEach(well => {\n          well.isTracked = false;\n          well.commentsCounter = 0;\n          well.tags = [[], 0];\n\n          for (let i = 0; i < dataTracks.tracksByUserAndObjectType.length; i++) {\n            if (well.id === dataTracks.tracksByUserAndObjectType[i].trackOn) {\n              well.isTracked = true;\n              break;\n            }\n          }\n\n          for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\n            if (well.id === dataCommentsCounter.commentsCounter[i]._id) {\n              well.commentsCounter = dataCommentsCounter.commentsCounter[i].total;\n              break;\n            }\n          }\n\n          for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\n            if (well.id === dataTagSamples.tagSamples[i]._id) {\n              well.tags = [dataTagSamples.tagSamples[i].tags, dataTagSamples.tagSamples[i].total];\n              break;\n            }\n          }\n        });\n        let availableTags = [];\n        dataTagSamples.tagSamples.map(sample => {\n          availableTags = [...availableTags, ...sample.tags];\n        });\n        const cleanAvailableTags = [...new Set(availableTags)];\n        setRows(dataWells.wells.results);\n        setColumns(cleanAvailableTags.length > 0 ? WellsHeadCells.map(column => {\n          if (column.name === \"tags\") {\n            return { ...column,\n              options: { ...column.options,\n                filterOptions: { ...column.options.filterOptions,\n                  names: cleanAvailableTags\n                }\n              }\n            };\n          }\n\n          return column;\n        }) : WellsHeadCells.map(column => {\n          if (column.name === \"tags\") {\n            return { ...column,\n              options: { ...column.options,\n                filter: false\n              }\n            };\n          }\n\n          return column;\n        }));\n        setStateApp(state => ({ ...state,\n          wells: dataWells.wells.results\n        }));\n      } else {\n        setRows([]);\n      }\n\n      setLoading(false);\n    }\n  }, [dataWells, dataTagSamples, dataCommentsCounter, dataTracks]); //////////// Wells Per Owner end///////////////////////////////////////////////\n  ////////////Owners Per Well begin///////////////////////////////////////////////\n\n  useEffect(() => {\n    if (props.parent && props.parent === \"OwnersPerWell\") {\n      setTargetLabel(\"owner\");\n      setHeader(\"Owners Per Well\");\n      setAddAble(false);\n      getWellOwners({\n        variables: {\n          id: props.selectedWell.id\n        }\n      });\n    }\n  }, [props.selectedWell]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"OwnersPerWell\" && dataWellOwners && dataTracks && dataTracks.tracksByUserAndObjectType) {\n      if (dataWellOwners.wellOwners && dataWellOwners.wellOwners.length > 0) {\n        const objectsIdsArray = [];\n        dataWellOwners.wellOwners.forEach(wellOwner => {\n          wellOwner.isTracked = false;\n          objectsIdsArray.push(wellOwner.id);\n\n          for (let i = 0; i < dataTracks.tracksByUserAndObjectType.length; i++) {\n            if (wellOwner.id === dataTracks.tracksByUserAndObjectType[i].trackOn) {\n              wellOwner.isTracked = true;\n              break;\n            }\n          }\n        });\n        getOwnersWells({\n          variables: {\n            ownersIds: objectsIdsArray\n          }\n        });\n        getCommentsCounter({\n          variables: {\n            objectsIdsArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        getTagSamples({\n          variables: {\n            objectsIdsArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        getContactsCounter({\n          variables: {\n            objectsIdsArray: objectsIdsArray\n          }\n        });\n      } else {\n        setLoading(false);\n        setRows([]);\n      }\n    }\n  }, [dataWellOwners, dataTracks]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"OwnersPerWell\" && dataWellOwners && dataWellOwners.wellOwners && dataWellOwners.wellOwners.length > 0 && dataCommentsCounter && dataCommentsCounter.commentsCounter && dataContactsCounter && dataContactsCounter.contactsCounter && dataTagSamples && dataTagSamples.tagSamples && dataOwnersWells) {\n      dataWellOwners.wellOwners.forEach(wellOwner => {\n        wellOwner.commentsCounter = 0;\n        wellOwner.tags = [[], 0];\n        wellOwner.contactsCounter = 0;\n        wellOwner.wellsCounter = [];\n\n        if (dataOwnersWells.ownersWells) {\n          for (let i = 0; i < dataOwnersWells.ownersWells.length; i++) {\n            if (wellOwner.id === dataOwnersWells.ownersWells[i].ownerId) {\n              wellOwner.wellsCounter = dataOwnersWells.ownersWells[i].wells.map(well => well.wellId);\n              break;\n            }\n          }\n        }\n\n        for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\n          if (wellOwner.id === dataCommentsCounter.commentsCounter[i]._id) {\n            wellOwner.commentsCounter = dataCommentsCounter.commentsCounter[i].total;\n            break;\n          }\n        }\n\n        for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\n          if (wellOwner.id === dataTagSamples.tagSamples[i]._id) {\n            wellOwner.tags = [dataTagSamples.tagSamples[i].tags, dataTagSamples.tagSamples[i].total];\n            break;\n          }\n        }\n\n        for (let i = 0; i < dataContactsCounter.contactsCounter.length; i++) {\n          if (wellOwner.id === dataContactsCounter.contactsCounter[i]._id) {\n            wellOwner.contactsCounter = dataContactsCounter.contactsCounter[i].total;\n            break;\n          }\n        }\n      });\n      let availableTags = [];\n      dataTagSamples.tagSamples.map(sample => {\n        availableTags = [...availableTags, ...sample.tags];\n      });\n      const cleanAvailableTags = [...new Set(availableTags)];\n      setColumns(cleanAvailableTags.length > 0 ? OwnersPerWellHeadCells.map(column => {\n        if (column.name === \"tags\") {\n          return { ...column,\n            options: { ...column.options,\n              filterOptions: { ...column.options.filterOptions,\n                names: cleanAvailableTags\n              }\n            }\n          };\n        }\n\n        return column;\n      }) : OwnersPerWellHeadCells.map(column => {\n        if (column.name === \"tags\") {\n          return { ...column,\n            options: { ...column.options,\n              filter: false\n            }\n          };\n        }\n\n        return column;\n      }));\n      setRows(dataWellOwners.wellOwners);\n      setLoading(false);\n    }\n  }, [dataWellOwners, dataTracks, dataTagSamples, dataCommentsCounter, dataContactsCounter, dataOwnersWells]); ////////////Owners Per Well end///////////////////////////////////////////////\n  ////////////Owners Per Contact begin///////////////////////////////////////////////\n\n  useEffect(() => {\n    if (props.parent && props.parent === \"ownersPerContacts\" && props.contactId) {\n      setTargetLabel(\"owner\");\n      setHeader(\"Interest Owners Tied to Contact\");\n      getContactInM1nTable({\n        variables: {\n          contactId: props.contactId\n        }\n      });\n    }\n  }, [props.contactId]);\n  useEffect(() => {\n    if (props.contactId && props.parent && props.parent === \"ownersPerContacts\" && dataContact && dataContact.contact) {\n      if (dataContact.contact.owners && dataContact.contact.owners.length > 0) {\n        getOwners({\n          variables: {\n            ownerIdArray: dataContact.contact.owners,\n            authToken: stateApp.user.authToken\n          }\n        });\n        getOwnersWells({\n          variables: {\n            ownersIds: dataContact.contact.owners\n          }\n        });\n      } else {\n        setLoading(false);\n        setRows([]);\n        setStateApp(state => ({ ...state,\n          universalCircularLoaderAct: false\n        }));\n      }\n\n      setAddAble({\n        parent: props.contactId,\n        type: \"ownerToContact\",\n        existingOwners: dataContact.contact.owners ? dataContact.contact.owners : []\n      });\n    }\n  }, [props.contactId, dataContact]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"ownersPerContacts\" && dataOwners && dataTracks && dataTracks.tracksByUserAndObjectType && dataOwnersWells) {\n      if (dataOwners.owners && dataOwners.owners && dataOwners.owners.results.length > 0) {\n        const objectsIdsArray = [];\n        dataOwners.owners.results.forEach(wellOwner => {\n          wellOwner.isTracked = false;\n          objectsIdsArray.push(wellOwner.id);\n\n          for (let i = 0; i < dataTracks.tracksByUserAndObjectType.length; i++) {\n            if (wellOwner.id === dataTracks.tracksByUserAndObjectType[i].trackOn) {\n              wellOwner.isTracked = true;\n              break;\n            }\n          }\n\n          wellOwner.wellsCounter = [];\n\n          if (dataOwnersWells.ownersWells) {\n            for (let i = 0; i < dataOwnersWells.ownersWells.length; i++) {\n              if (wellOwner.id === dataOwnersWells.ownersWells[i].ownerId) {\n                wellOwner.wellsCounter = dataOwnersWells.ownersWells[i].wells.map(well => well.wellId);\n                break;\n              }\n            }\n          }\n        });\n        getCommentsCounter({\n          variables: {\n            objectsIdsArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        getTagSamples({\n          variables: {\n            objectsIdsArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        getContactsCounter({\n          variables: {\n            objectsIdsArray: objectsIdsArray\n          }\n        });\n      } else {\n        setLoading(false);\n        setRows([]);\n        setStateApp(state => ({ ...state,\n          universalCircularLoaderAct: false\n        }));\n      }\n    }\n  }, [dataOwners, dataTracks, dataOwnersWells]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"ownersPerContacts\" && dataOwners && dataOwners.owners && dataOwners.owners.results && dataOwners.owners.results.length > 0 && dataCommentsCounter && dataCommentsCounter.commentsCounter && dataContactsCounter && dataContactsCounter.contactsCounter && dataTagSamples && dataTagSamples.tagSamples) {\n      dataOwners.owners.results.forEach(wellOwner => {\n        wellOwner.commentsCounter = 0;\n        wellOwner.tags = [[], 0];\n        wellOwner.contactsCounter = 0;\n\n        for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\n          if (wellOwner.id === dataCommentsCounter.commentsCounter[i]._id) {\n            wellOwner.commentsCounter = dataCommentsCounter.commentsCounter[i].total;\n            break;\n          }\n        }\n\n        for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\n          if (wellOwner.id === dataTagSamples.tagSamples[i]._id) {\n            wellOwner.tags = [dataTagSamples.tagSamples[i].tags, dataTagSamples.tagSamples[i].total];\n            break;\n          }\n        }\n\n        for (let i = 0; i < dataContactsCounter.contactsCounter.length; i++) {\n          if (wellOwner.id === dataContactsCounter.contactsCounter[i]._id) {\n            wellOwner.contactsCounter = dataContactsCounter.contactsCounter[i].total;\n            break;\n          }\n        }\n      });\n      let availableTags = [];\n      dataTagSamples.tagSamples.map(sample => {\n        availableTags = [...availableTags, ...sample.tags];\n      });\n      const cleanAvailableTags = [...new Set(availableTags)];\n      setColumns(cleanAvailableTags.length > 0 ? OwnersPerContactsHeadCells.map(column => {\n        if (column.name === \"tags\") {\n          return { ...column,\n            options: { ...column.options,\n              filterOptions: { ...column.options.filterOptions,\n                names: cleanAvailableTags\n              }\n            }\n          };\n        }\n\n        return column;\n      }) : OwnersPerContactsHeadCells.map(column => {\n        if (column.name === \"tags\") {\n          return { ...column,\n            options: { ...column.options,\n              filter: false\n            }\n          };\n        }\n\n        return column;\n      }));\n      setRows(dataOwners.owners.results);\n      setLoading(false);\n      setStateApp(state => ({ ...state,\n        universalCircularLoaderAct: false\n      }));\n    }\n  }, [dataOwners, dataTracks, dataTagSamples, dataCommentsCounter, dataContactsCounter]); ////////////Owners Per Contact begin//////////Delete//////////////////////////////\n\n  useEffect(() => {\n    if (props.parent && props.parent === \"ownersPerContacts\" && props.contactId) {\n      setDeleteFunc(() => ownersIdsToDelete => {\n        if (ownersIdsToDelete) {\n          setStateApp(state => ({ ...state,\n            universalCircularLoaderAct: true\n          }));\n\n          for (let i = 0; i < ownersIdsToDelete.length; i++) {\n            addRemoveOwnerToAContact({\n              variables: {\n                contactId: props.contactId,\n                ownerId: ownersIdsToDelete[i]\n              },\n              refetchQueries: [\"getContacts\", \"getContactsByOwnerId\", \"getContactsCounter\", \"getContact\", \"getContactInM1nTable\"],\n              awaitRefetchQueries: true\n            });\n          }\n        }\n      });\n    }\n  }, [props.parent, props.contactId]); ////////////Owners Per Contact end/////////////////////////////////////////////////\n  ////////////Contacts Per Owner begin///////////////////////////////////////////////\n\n  useEffect(() => {\n    if (props.parent && props.parent === \"ownerContacts\" && props.ownerId) {\n      setTargetLabel(\"contact\");\n      setHeader(\"Owner's Contacts\");\n      setAddAble({\n        parent: props.ownerId,\n        type: \"contactToOwner\"\n      });\n      getContactsByOwnerId({\n        variables: {\n          objectId: props.ownerId\n        }\n      });\n    }\n  }, [props.ownerId]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"ownerContacts\" && dataContactsByOwnerId && dataTracks && dataTracks.tracksByUserAndObjectType) {\n      if (dataContactsByOwnerId.contactsByOwnerId && dataContactsByOwnerId.contactsByOwnerId.length > 0) {\n        const objectsIdsArray = [];\n        dataContactsByOwnerId.contactsByOwnerId.forEach(contact => {\n          contact.isTracked = false;\n          objectsIdsArray.push(contact._id);\n\n          for (let i = 0; i < dataTracks.tracksByUserAndObjectType.length; i++) {\n            if (contact.id === dataTracks.tracksByUserAndObjectType[i].trackOn) {\n              contact.isTracked = true;\n              break;\n            }\n          }\n        });\n        getCommentsCounter({\n          variables: {\n            objectsIdsArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        getTagSamples({\n          variables: {\n            objectsIdsArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n      } else {\n        setLoading(false);\n        setRows([]);\n      }\n    }\n  }, [dataContactsByOwnerId, dataTracks]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"ownerContacts\" && dataContactsByOwnerId && dataContactsByOwnerId.contactsByOwnerId && dataContactsByOwnerId.contactsByOwnerId.length > 0 && dataCommentsCounter && dataCommentsCounter.commentsCounter && dataTagSamples && dataTagSamples.tagSamples) {\n      dataContactsByOwnerId.contactsByOwnerId.forEach(contact => {\n        contact.commentsCounter = 0;\n        contact.tags = [[], 0]; // contact.fullContactAddress = joinAddress(contact);\n        // contact.contactName = contact.name;\n\n        for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\n          if (contact._id === dataCommentsCounter.commentsCounter[i]._id) {\n            contact.commentsCounter = dataCommentsCounter.commentsCounter[i].total;\n            break;\n          }\n        }\n\n        for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\n          if (contact._id === dataTagSamples.tagSamples[i]._id) {\n            contact.tags = [dataTagSamples.tagSamples[i].tags, dataTagSamples.tagSamples[i].total];\n            break;\n          }\n        }\n      });\n      let availableTags = [];\n      dataTagSamples.tagSamples.map(sample => {\n        availableTags = [...availableTags, ...sample.tags];\n      });\n      const cleanAvailableTags = [...new Set(availableTags)];\n      setColumns(cleanAvailableTags.length > 0 ? ContactsHeadCells.map(column => {\n        if (column.name === \"tags\") {\n          return { ...column,\n            options: { ...column.options,\n              filterOptions: { ...column.options.filterOptions,\n                names: cleanAvailableTags\n              }\n            }\n          };\n        }\n\n        return column;\n      }) : ContactsHeadCells.map(column => {\n        if (column.name === \"tags\") {\n          return { ...column,\n            options: { ...column.options,\n              filter: false\n            }\n          };\n        }\n\n        return column;\n      }));\n      setRows([...dataContactsByOwnerId.contactsByOwnerId]);\n      setLoading(false);\n    }\n  }, [dataContactsByOwnerId, dataTracks, dataTagSamples, dataCommentsCounter]); ////////////Contact Per Owner begin//////////Delete//////////////////////////////\n\n  useEffect(() => {\n    if (props.parent && props.parent === \"ownerContacts\" && props.ownerId) {\n      setDeleteFunc(() => (contactsIdsToDelete, completelyDelete) => {\n        if (contactsIdsToDelete) {\n          if (completelyDelete) {// for (let i = 0; i < contactsIdsToDelete.length; i++) {\n            //   removeContact({\n            //     variables: {\n            //       contactId: contactsIdsToDelete[i],\n            //     },\n            //     refetchQueries: [\n            //       \"getContacts\",\n            //       \"getContactsByOwnerId\",\n            //       \"getContactsCounter\",\n            //       \"getContact\",\n            //     ],\n            //     awaitRefetchQueries: true,\n            //   });\n            // }\n          } else {\n            for (let i = 0; i < contactsIdsToDelete.length; i++) {\n              addRemoveOwnerToAContact({\n                variables: {\n                  contactId: contactsIdsToDelete[i],\n                  ownerId: props.ownerId\n                },\n                refetchQueries: [\"getContacts\", \"getContactsByOwnerId\", \"getContactsCounter\", \"getContact\", \"getContactInM1nTable\"],\n                awaitRefetchQueries: true\n              });\n            }\n          }\n        }\n      });\n    }\n  }, [props.parent, props.ownerId]); ////////////Contacts Per Owner end///////////////////////////////////////////////\n  ////////////Contacts begin///////////////////////////////////////////////\n\n  useEffect(() => {\n    if (props.parent && props.parent === \"Contacts\") {\n      setTargetLabel(\"contact\");\n      setHeader(\"Contacts\");\n      setAddAble({\n        parent: false,\n        type: \"contact\"\n      });\n      getContacts();\n      setUploadIcon(true);\n      setStartPaginationAt(100);\n    }\n  }, [props.parent]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"Contacts\" && dataContacts && dataTracks && dataTracks.tracksByUserAndObjectType) {\n      if (dataContacts.contacts && dataContacts.contacts.length > 0) {\n        const objectsIdsArray = [];\n        dataContacts.contacts.forEach(contact => {\n          contact.isTracked = false;\n          objectsIdsArray.push(contact._id);\n\n          for (let i = 0; i < dataTracks.tracksByUserAndObjectType.length; i++) {\n            if (contact.id === dataTracks.tracksByUserAndObjectType[i].trackOn) {\n              contact.isTracked = true;\n              break;\n            }\n          }\n        });\n        getCommentsCounter({\n          variables: {\n            objectsIdsArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        getTagSamples({\n          variables: {\n            objectsIdsArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n      } else {\n        setLoading(false);\n        setRows([]);\n      }\n    }\n  }, [dataContacts, dataTracks]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"Contacts\" && dataContacts && dataContacts.contacts && dataContacts.contacts.length > 0 && dataCommentsCounter && dataCommentsCounter.commentsCounter && dataTagSamples && dataTagSamples.tagSamples) {\n      dataContacts.contacts.forEach(contact => {\n        contact.commentsCounter = 0;\n        contact.tags = [[], 0]; // contact.fullContactAddress = joinAddress(contact);\n        // contact.contactName = contact.name;\n\n        for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\n          if (contact._id === dataCommentsCounter.commentsCounter[i]._id) {\n            contact.commentsCounter = dataCommentsCounter.commentsCounter[i].total;\n            break;\n          }\n        }\n\n        for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\n          if (contact._id === dataTagSamples.tagSamples[i]._id) {\n            contact.tags = [dataTagSamples.tagSamples[i].tags, dataTagSamples.tagSamples[i].total];\n            break;\n          }\n        }\n      });\n      let availableTags = [];\n      dataTagSamples.tagSamples.map(sample => {\n        availableTags = [...availableTags, ...sample.tags];\n      });\n      const cleanAvailableTags = [...new Set(availableTags)];\n      setColumns(cleanAvailableTags.length > 0 ? ContactsHeadCells.map(column => {\n        if (column.name === \"tags\") {\n          return { ...column,\n            options: { ...column.options,\n              filterOptions: { ...column.options.filterOptions,\n                names: cleanAvailableTags\n              }\n            }\n          };\n        }\n\n        return column;\n      }) : ContactsHeadCells.map(column => {\n        if (column.name === \"tags\") {\n          return { ...column,\n            options: { ...column.options,\n              filter: false\n            }\n          };\n        }\n\n        return column;\n      }));\n      setRows([...dataContacts.contacts]);\n      setLoading(false);\n    }\n  }, [dataContacts, dataTracks, dataTagSamples, dataCommentsCounter]); ////////////Contact Delete begin////////////////////////////////////////\n\n  useEffect(() => {\n    if (props.parent && props.parent === \"Contacts\") {\n      setDeleteFunc(() => contactsIdsToDelete => {\n        if (contactsIdsToDelete) {\n          for (let i = 0; i < contactsIdsToDelete.length; i++) {\n            removeContact({\n              variables: {\n                contactId: contactsIdsToDelete[i]\n              },\n              refetchQueries: [\"getContacts\", \"getContactsByOwnerId\", \"getContactsCounter\", \"getContact\"],\n              awaitRefetchQueries: true\n            });\n          }\n        }\n      });\n    }\n  }, [props.parent]); ////////////Contacts end///////////////////////////////////////////////\n  //////////// Search begin///////////////////////////////////////////////\n\n  useEffect(() => {\n    if (stateApp.searchloading) {\n      setLoading(true);\n    }\n  }, [stateApp.searchloading]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"search\" && props.header && props.targetLabel && stateApp && stateApp.searchResultData && stateApp.user && stateApp.user.mongoId) {\n      setTargetLabel(props.targetLabel);\n      setHeader(props.header);\n      setAddAble(false);\n      setOrderByTracks(false);\n      setStartPaginationAt(100);\n\n      if (stateApp.searchResultData.length > 0) {\n        // setLoading(true);\n        const objectsIdsArray = stateApp.searchResultData.map(result => result.Id);\n        if (props.showComments) getCommentsCounter({\n          variables: {\n            objectsIdsArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        if (props.showTags) getTagSamples({\n          variables: {\n            objectsIdsArray,\n            userId: stateApp.user.mongoId\n          }\n        });\n        if (props.showTracks) setShowTracks(true);\n      } else {\n        setShowTracks(false);\n\n        if (!stateApp.searchloading) {\n          setRows([]);\n          setLoading(false);\n        }\n      }\n    }\n  }, [props.parent, props.header, props.targetLabel, stateApp.searchResultData, stateApp.user, props.showTracks, props.showComments, props.showTags, stateApp.searchloading]);\n  useEffect(() => {\n    if (props.parent && props.parent === \"search\" && stateApp && stateApp.searchResultData && (!props.showComments || dataCommentsCounter && dataCommentsCounter.commentsCounter) && (!props.showTags || dataTagSamples && dataTagSamples.tagSamples) && (!props.showTracks || dataTracks && dataTracks.tracksByUserAndObjectType) && props.privateColumns) {\n      if (stateApp.searchResultData.length > 0) {\n        stateApp.searchResultData.forEach(result => {\n          result.id = result.Id;\n\n          if (props.showComments) {\n            result.commentsCounter = 0;\n\n            for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\n              if (result.Id === dataCommentsCounter.commentsCounter[i]._id) {\n                result.commentsCounter = dataCommentsCounter.commentsCounter[i].total;\n                break;\n              }\n            }\n          }\n\n          if (props.showTags) {\n            result.tags = [[], 0];\n\n            for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\n              if (result.Id === dataTagSamples.tagSamples[i]._id) {\n                result.tags = [dataTagSamples.tagSamples[i].tags, dataTagSamples.tagSamples[i].total];\n                break;\n              }\n            }\n          }\n\n          if (props.showTracks) {\n            result.isTracked = false;\n\n            for (let i = 0; i < dataTracks.tracksByUserAndObjectType.length; i++) {\n              if (result.Id === dataTracks.tracksByUserAndObjectType[i].trackOn) {\n                result.isTracked = true;\n                break;\n              }\n            }\n          }\n        });\n        const buildingColumns = [SearchsHeadCells[0], ...props.privateColumns];\n\n        if (props.showTags) {\n          let availableTags = [];\n          dataTagSamples.tagSamples.map(sample => {\n            availableTags = [...availableTags, ...sample.tags];\n          });\n          const cleanAvailableTags = [...new Set(availableTags)];\n          buildingColumns.push(cleanAvailableTags.length > 0 ? { ...SearchsHeadCells[1],\n            options: { ...SearchsHeadCells[1].options,\n              filterOptions: { ...SearchsHeadCells[1].options.filterOptions,\n                names: cleanAvailableTags\n              }\n            }\n          } : { ...SearchsHeadCells[1],\n            options: { ...SearchsHeadCells[1].options,\n              filter: false\n            }\n          });\n        }\n\n        if (props.showComments) buildingColumns.push(SearchsHeadCells[2]);\n        if (props.showTracks) buildingColumns.push(SearchsHeadCells[3]);\n        setColumns([...buildingColumns]);\n        setRows([...stateApp.searchResultData]);\n        setLoading(false);\n      }\n    }\n  }, [props.parent, stateApp.searchResultData, dataTracks, dataTagSamples, dataCommentsCounter, props.privateColumns, props.showTracks, props.showComments, props.showTags]); //////////// Search end///////////////////////////////////////////////\n  ////////////-----Add your code section here-----///////////////////////\n\n  return /*#__PURE__*/React.createElement(Container, {\n    maxWidth: false,\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 2214,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    style: {\n      backgroundColor: \"#fff\"\n    },\n    header: header,\n    columns: columns,\n    rows: rows,\n    loading: loading,\n    addAble: addAble,\n    targetLabel: targetLabel,\n    deleteFunc: deleteFunc,\n    uploadIcon: uploadIcon,\n    dense: props.dense ? props.dense : undefined,\n    orderByTracks: orderByTracks,\n    startPaginationAt: startPaginationAt,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 2215,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Shared/M1nTable/M1nTable.js"],"names":["React","useContext","useState","useEffect","makeStyles","AppContext","Container","Table","useLazyQuery","useMutation","WELLOWNERSQUERY","OWNERSQUERY","WELLSQUERY","CONTACTSQUERY","TRACKSBYUSERANDOBJECTTYPE","TAGSAMPLES","COMMENTSCOUNTER","CONTACSCOUNTER","CONTACTSBYOWNERSID","OWNERSWELLSQUERY","ADDREMOVEOWNERTOACONTACT","CONTACT","REMOVECONTACT","useStyles","theme","container","padding","TrackedOwnersHeadCells","name","options","display","filter","searchable","sort","download","print","viewColumns","label","filterOptions","names","logic","rowVal","pickedTags","containIts","map","pickedTag","indexOf","WellsHeadCells","OwnersPerWellHeadCells","tracked","filterVal","filterType","OwnersPerContactsHeadCells","ContactsHeadCells","editable","SearchsHeadCells","capitalizeFirstLetter","string","charAt","toUpperCase","slice","joinAddress","row","rowData","address1","address2","city","state","zip","country","textArray","key","hasOwnProperty","join","push","M1nTable","props","classes","stateApp","setStateApp","rows","setRows","header","setHeader","columns","setColumns","loading","setLoading","addAble","setAddAble","uploadIcon","setUploadIcon","targetLabel","setTargetLabel","deleteFunc","setDeleteFunc","showTracks","setShowTracks","orderByTracks","setOrderByTracks","startPaginationAt","setStartPaginationAt","tracksByUserAndObjectType","data","dataTracks","fetchPolicy","getCommentsCounter","dataCommentsCounter","getTagSamples","dataTagSamples","getContactsCounter","dataContactsCounter","getOwners","dataOwners","getOwnersWells","dataOwnersWells","getWells","dataWells","getWellOwners","dataWellOwners","getContactsByOwnerId","dataContactsByOwnerId","getContactInM1nTable","dataContact","getContacts","dataContacts","addRemoveOwnerToAContact","removeContact","user","mongoId","variables","userId","objectType","parent","length","tracksIdArray","track","trackOn","ownerIdArray","authToken","ownersIds","objectsIdsArray","owners","results","commentsCounter","contactsCounter","tagSamples","forEach","owner","isTracked","tags","wellsCounter","ownersWells","i","id","ownerId","wells","well","wellId","_id","total","availableTags","sample","cleanAvailableTags","Set","column","wellIdArray","trackedwells","wellsIdsArray","selectedWell","wellOwners","wellOwner","contactId","contact","universalCircularLoaderAct","type","existingOwners","ownersIdsToDelete","refetchQueries","awaitRefetchQueries","objectId","contactsByOwnerId","contactsIdsToDelete","completelyDelete","contacts","searchloading","searchResultData","result","Id","showComments","showTags","privateColumns","buildingColumns","backgroundColor","dense","undefined"],"mappings":"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","sourcesContent":["////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////                TO USE THIS TABLE:\r\n//// 1-Send to this component a prop called 'parent' with a trackOwners/trackWells/Contacts/OwnersPerWell...\r\n////  -if it is OwnersPerWell use case add another prop \"selectedWell\" with the well\r\n////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n////                TO USE THIS TABLE IN A NEW USE CASE:\r\n//// 1-Send to this component a prop called 'parent' with a string you choose to identify your use case.\r\n//// 2-Define your HeadCells const, for your columns, in the HeadCells section.\r\n//// 3-Add your query in the queries section.\r\n//// 4-At the end, but before the return line, add your own section where you will run your queries\r\n////   and you will set all necessaries local states for your use case and the table,\r\n////   look at the Tracked Owners section as example.\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n//////////////////external table package info: https://github.com/gregnb/mui-datatables /////////////////////\r\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\nimport React, { useContext, useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { AppContext } from \"../../../AppContext\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport Table from \"./components/Table\";\r\n\r\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\r\nimport { WELLOWNERSQUERY } from \"../../../graphQL/useQueryWellOwners\";\r\nimport { OWNERSQUERY } from \"../../../graphQL/useQueryOwners\";\r\nimport { WELLSQUERY } from \"../../../graphQL/useQueryWells\";\r\nimport { CONTACTSQUERY } from \"../../../graphQL/useQueryContacts\";\r\nimport { TRACKSBYUSERANDOBJECTTYPE } from \"../../../graphQL/useQueryTracksByUserAndObjectType\";\r\nimport { TAGSAMPLES } from \"../../../graphQL/useQueryTagSamples\";\r\nimport { COMMENTSCOUNTER } from \"../../../graphQL/useQueryCommentsCounter\";\r\nimport { CONTACSCOUNTER } from \"../../../graphQL/useQueryContactsCounter\";\r\nimport { CONTACTSBYOWNERSID } from \"../../../graphQL/useQueryContactsByOwnerId\";\r\nimport { OWNERSWELLSQUERY } from \"../../../graphQL/useQueryOwnersWells\";\r\nimport { ADDREMOVEOWNERTOACONTACT } from \"../../../graphQL/useMutationAddRemoveOwnerToAContact\";\r\nimport { CONTACT } from \"../../../graphQL/useQueryContact\";\r\nimport { REMOVECONTACT } from \"../../../graphQL/useMutationRemoveContact\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: { padding: \"0 !important\" },\r\n}));\r\n\r\n////////////HeadCells begin///////////////////////////////////////////////\r\nconst TrackedOwnersHeadCells = [\r\n  {\r\n    name: \"id\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  { name: \"name\", label: \"Name\" },\r\n  {\r\n    name: \"ownershipType\",\r\n    label: \"Entity\",\r\n  },\r\n  // { name: \"interestType\", label: \"Type\" },\r\n  // {\r\n  //   name: \"ownershipPercentage\",\r\n  //   label: \"Interest\",\r\n  // },\r\n\r\n  // TEMPORARY COMMENT OUT. DO NOT DELETE\r\n  // WILL BE ADDED IN AFTER DEVELOPING A SYSTEM TO\r\n  // AGGREGATE OWNERS\r\n  // {\r\n  //   name: \"appraisedValue\",\r\n  //   label: \"Appraised Value\",\r\n  // },\r\n\r\n  {\r\n    name: \"tags\",\r\n    label: \"Tags \",\r\n    options: {\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      filterOptions: {\r\n        names: [],\r\n        logic(rowVal, pickedTags) {\r\n          let containIts = true;\r\n          pickedTags.map((pickedTag) => {\r\n            if (rowVal[0].indexOf(pickedTag) === -1) {\r\n              containIts = false;\r\n            }\r\n          });\r\n          return !containIts;\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"contactsCounter\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n\r\n  /* \r\n  // TEMPORARY COMMENT OUT. DO NOT DELETE \r\n  // WILL BE RE-ADDED ONCE WE FIGURE OUT HOW TO DRAW AGGREGATIONS \r\n  // FOR UNIVERSAL OWNERS\r\n\r\n\r\n  // {\r\n  //   name: \"wellsCounter\",\r\n  //   label: \" \",\r\n  //   options: {\r\n  //     filter: false,\r\n  //     searchable: false,\r\n  //     sort: false,\r\n  //     download: false,\r\n  //     print: false,\r\n  //     viewColumns: false,\r\n  //   },\r\n  // },\r\n */\r\n\r\n  {\r\n    name: \"commentsCounter\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"isTracked\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      sort: false,\r\n      searchable: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n];\r\n\r\nconst WellsHeadCells = [\r\n  {\r\n    name: \"id\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  { name: \"wellName\", label: \"Well\" },\r\n  { name: \"api\", label: \"API\" },\r\n  { name: \"operator\", label: \"Operator\" },\r\n  { name: \"wellType\", label: \"Type\" },\r\n  {\r\n    name: \"wellBoreProfile\",\r\n    label: \"Profile\",\r\n  },\r\n  {\r\n    name: \"tags\",\r\n    label: \"Tags \",\r\n    options: {\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      filterOptions: {\r\n        names: [],\r\n        logic(rowVal, pickedTags) {\r\n          let containIts = true;\r\n          pickedTags.map((pickedTag) => {\r\n            if (rowVal[0].indexOf(pickedTag) === -1) {\r\n              containIts = false;\r\n            }\r\n          });\r\n          return !containIts;\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"ownerCount\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"commentsCounter\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"isTracked\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      sort: false,\r\n      searchable: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n];\r\n\r\nconst OwnersPerWellHeadCells = [\r\n  {\r\n    name: \"id\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  { name: \"name\", label: \"Name\" },\r\n  {\r\n    name: \"ownershipType\",\r\n    label: \"Entity\",\r\n  },\r\n  { name: \"interestType\", label: \"Type\" },\r\n  {\r\n    name: \"ownershipPercentage\",\r\n    label: \"Interest\",\r\n  },\r\n  {\r\n    name: \"appraisedValue\",\r\n    label: \"Appraised Value\",\r\n  },\r\n  {\r\n    name: \"tags\",\r\n    label: \"Tags \",\r\n    options: {\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      filterOptions: {\r\n        names: [],\r\n        logic(rowVal, pickedTags) {\r\n          let containIts = true;\r\n          pickedTags.map((pickedTag) => {\r\n            if (rowVal[0].indexOf(pickedTag) === -1) {\r\n              containIts = false;\r\n            }\r\n          });\r\n          return !containIts;\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"contactsCounter\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n\r\n  /*   \r\n// TEMPORARY COMMENT OUT. DO NOT DELETE \r\n  // WILL BE RE-ADDED ONCE WE HAVE A WAY OF AGGREGATING A \r\n  // UNIVERSAL OWNER \r\n\r\n  // {\r\n  //   name: \"wellsCounter\",\r\n  //   label: \" \",\r\n  //   options: {\r\n  //     filter: false,\r\n  //     searchable: false,\r\n  //     sort: false,\r\n  //     download: false,\r\n  //     print: false,\r\n  //     viewColumns: false,\r\n  //   },\r\n  // }, \r\n  */\r\n\r\n  {\r\n    name: \"commentsCounter\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"isTracked\",\r\n    label: \"Track\",\r\n    options: {\r\n      searchable: false,\r\n      download: false,\r\n      print: false,\r\n      filterOptions: {\r\n        names: [\"Tracked\", \"Untracked\"],\r\n        logic(tracked, filterVal) {\r\n          return !(\r\n            (filterVal.indexOf(\"Tracked\") >= 0 && tracked) ||\r\n            (filterVal.indexOf(\"Untracked\") >= 0 && !tracked)\r\n          );\r\n        },\r\n      },\r\n      filterType: \"dropdown\",\r\n    },\r\n  },\r\n];\r\n\r\nconst OwnersPerContactsHeadCells = [\r\n  {\r\n    name: \"id\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  { name: \"name\", label: \"Name\" },\r\n  {\r\n    name: \"ownershipType\",\r\n    label: \"Entity\",\r\n  },\r\n  {\r\n    name: \"appraisedValue\",\r\n    label: \"Appraised Value\",\r\n  },\r\n  {\r\n    name: \"tags\",\r\n    label: \"Tags \",\r\n    options: {\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      filterOptions: {\r\n        names: [],\r\n        logic(rowVal, pickedTags) {\r\n          let containIts = true;\r\n          pickedTags.map((pickedTag) => {\r\n            if (rowVal[0].indexOf(pickedTag) === -1) {\r\n              containIts = false;\r\n            }\r\n          });\r\n          return !containIts;\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"contactsCounter\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n\r\n  /*   \r\n  // TEMPORARY COMMENT OUT. DO NOT REMOVE \r\n  // WILL BE UNCOMMENTED ONCE WE UNDERSTAND A MORE \r\n  // UNIVERSAL OWNER ID. \r\n\r\n  // {\r\n  //   name: \"wellsCounter\",\r\n  //   label: \" \",\r\n  //   options: {\r\n  //     filter: false,\r\n  //     searchable: false,\r\n  //     sort: false,\r\n  //     download: false,\r\n  //     print: false,\r\n  //     viewColumns: false,\r\n  //   },\r\n  // },\r\n */\r\n\r\n  {\r\n    name: \"commentsCounter\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"isTracked\",\r\n    label: \"Track\",\r\n    options: {\r\n      searchable: false,\r\n      download: false,\r\n      print: false,\r\n      filterOptions: {\r\n        names: [\"Tracked\", \"Untracked\"],\r\n        logic(tracked, filterVal) {\r\n          return !(\r\n            (filterVal.indexOf(\"Tracked\") >= 0 && tracked) ||\r\n            (filterVal.indexOf(\"Untracked\") >= 0 && !tracked)\r\n          );\r\n        },\r\n      },\r\n      filterType: \"dropdown\",\r\n    },\r\n  },\r\n];\r\n\r\nconst ContactsHeadCells = [\r\n  {\r\n    name: \"_id\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"address1\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"address2\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"city\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"state\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"zip\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"country\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n\r\n  { name: \"name\", label: \"Name\", editable: true },\r\n  { name: \"fullContactAddress\", label: \"Primary Address\", editable: true },\r\n  { name: \"leadSource\", label: \"Lead Source\", editable: true },\r\n  { name: \"lastUpdateBy.name\", label: \"Updated By\" },\r\n  { name: \"lastUpdateAt\", label: \"Last Updated\" },\r\n  // { name: \"primaryEmail\", label: \"Primary Email\" },\r\n  // {\r\n  //   name: \"mobilePhone\",\r\n  //   label: \"Mobile Phone\",\r\n  // },\r\n  // {\r\n  //   name: \"homePhone\",\r\n  //   label: \"Home Phone\",\r\n  // },\r\n  // {\r\n\r\n  {\r\n    name: \"tags\",\r\n    label: \"Tags \",\r\n    options: {\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      filterOptions: {\r\n        names: [],\r\n        logic(rowVal, pickedTags) {\r\n          let containIts = true;\r\n          pickedTags.map((pickedTag) => {\r\n            if (rowVal[0].indexOf(pickedTag) === -1) {\r\n              containIts = false;\r\n            }\r\n          });\r\n          return !containIts;\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"owners\", //ownerPerContactCount\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"commentsCounter\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  // {\r\n  //   name: \"isTracked\",\r\n  //   label: \"Track\",\r\n  //   options: {\r\n  //     searchable: false,\r\n  //     download: false,\r\n  //     print: false,\r\n  //     filterOptions: {\r\n  //       names: [\"Tracked\", \"Untracked\"],\r\n  //       logic(tracked, filterVal) {\r\n  //         return !(\r\n  //           (filterVal.indexOf(\"Tracked\") >= 0 && tracked) ||\r\n  //           (filterVal.indexOf(\"Untracked\") >= 0 && !tracked)\r\n  //         );\r\n  //       },\r\n  //     },\r\n  //     filterType: \"dropdown\",\r\n  //   },\r\n  // },\r\n];\r\n\r\nconst SearchsHeadCells = [\r\n  {\r\n    name: \"id\",\r\n    options: {\r\n      display: false,\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  //////////\r\n  {\r\n    name: \"tags\",\r\n    label: \"Tags \",\r\n    options: {\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      filterOptions: {\r\n        names: [],\r\n        logic(rowVal, pickedTags) {\r\n          let containIts = true;\r\n          pickedTags.map((pickedTag) => {\r\n            if (rowVal[0].indexOf(pickedTag) === -1) {\r\n              containIts = false;\r\n            }\r\n          });\r\n          return !containIts;\r\n        },\r\n      },\r\n    },\r\n  },\r\n  {\r\n    name: \"commentsCounter\",\r\n    label: \" \",\r\n    options: {\r\n      filter: false,\r\n      searchable: false,\r\n      sort: false,\r\n      download: false,\r\n      print: false,\r\n      viewColumns: false,\r\n    },\r\n  },\r\n  {\r\n    name: \"isTracked\",\r\n    label: \" \",\r\n    options: {\r\n      searchable: false,\r\n      download: false,\r\n      print: false,\r\n      filterOptions: {\r\n        names: [\"Tracked\", \"Untracked\"],\r\n        logic(tracked, filterVal) {\r\n          return !(\r\n            (filterVal.indexOf(\"Tracked\") >= 0 && tracked) ||\r\n            (filterVal.indexOf(\"Untracked\") >= 0 && !tracked)\r\n          );\r\n        },\r\n      },\r\n      filterType: \"dropdown\",\r\n    },\r\n  },\r\n];\r\n\r\n////////////HeadCells end///////////////////////////////////////////////\r\n\r\nconst capitalizeFirstLetter = (string) => {\r\n  return string.charAt(0).toUpperCase() + string.slice(1);\r\n};\r\n\r\nconst joinAddress = (row) => {\r\n  let rowData = {\r\n    address1: row.address1,\r\n    address2: row.address2,\r\n    city: row.city,\r\n    state: row.state,\r\n    zip: row.zip,\r\n    country: row.country,\r\n  };\r\n  let textArray = [];\r\n  for (const key in rowData) {\r\n    if (rowData.hasOwnProperty(key) && rowData[key] && rowData[key] !== \"\") {\r\n      if (key === \"zip\" || key === \"country\") {\r\n        textArray = [\r\n          [textArray.join(\", \"), capitalizeFirstLetter(rowData[key])].join(\" \"),\r\n        ];\r\n      } else textArray.push(capitalizeFirstLetter(rowData[key]));\r\n    }\r\n  }\r\n\r\n  return textArray.join(\", \");\r\n};\r\n\r\nexport default function M1nTable(props) {\r\n  const classes = useStyles();\r\n  const [stateApp, setStateApp] = useContext(AppContext);\r\n  const [rows, setRows] = useState();\r\n  const [header, setHeader] = useState(\"\");\r\n  const [columns, setColumns] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [addAble, setAddAble] = useState(true);\r\n  const [uploadIcon, setUploadIcon] = useState(null);\r\n  const [targetLabel, setTargetLabel] = useState(null);\r\n  const [deleteFunc, setDeleteFunc] = useState(null);\r\n  const [showTracks, setShowTracks] = useState(true);\r\n  const [orderByTracks, setOrderByTracks] = useState(true);\r\n  const [startPaginationAt, setStartPaginationAt] = useState();\r\n\r\n  ////////////Queries begin///////////////////////////////////////////////\r\n\r\n  const [tracksByUserAndObjectType, { data: dataTracks }] = useLazyQuery(\r\n    TRACKSBYUSERANDOBJECTTYPE,\r\n    {\r\n      fetchPolicy: \"cache-and-network\",\r\n    }\r\n  );\r\n  const [getCommentsCounter, { data: dataCommentsCounter }] = useLazyQuery(\r\n    COMMENTSCOUNTER,\r\n    {\r\n      fetchPolicy: \"cache-and-network\",\r\n    }\r\n  );\r\n  const [getTagSamples, { data: dataTagSamples }] = useLazyQuery(TAGSAMPLES, {\r\n    fetchPolicy: \"cache-and-network\",\r\n  });\r\n  const [getContactsCounter, { data: dataContactsCounter }] = useLazyQuery(\r\n    CONTACSCOUNTER,\r\n    {\r\n      fetchPolicy: \"cache-and-network\",\r\n    }\r\n  );\r\n  //////////\r\n  const [getOwners, { data: dataOwners }] = useLazyQuery(OWNERSQUERY);\r\n  const [getOwnersWells, { data: dataOwnersWells }] = useLazyQuery(\r\n    OWNERSWELLSQUERY\r\n  );\r\n  //////////\r\n  const [getWells, { data: dataWells }] = useLazyQuery(WELLSQUERY);\r\n  //////////\r\n  const [getWellOwners, { data: dataWellOwners }] = useLazyQuery(\r\n    WELLOWNERSQUERY\r\n  );\r\n  //////////\r\n  const [getContactsByOwnerId, { data: dataContactsByOwnerId }] = useLazyQuery(\r\n    CONTACTSBYOWNERSID,\r\n    {\r\n      fetchPolicy: \"cache-and-network\",\r\n    }\r\n  );\r\n  //////////\r\n  const [getContactInM1nTable, { data: dataContact }] = useLazyQuery(CONTACT, {\r\n    fetchPolicy: \"cache-and-network\",\r\n  });\r\n  //////////\r\n  const [getContacts, { data: dataContacts }] = useLazyQuery(CONTACTSQUERY, {\r\n    fetchPolicy: \"cache-and-network\",\r\n  });\r\n  //////////\r\n  const [addRemoveOwnerToAContact] = useMutation(ADDREMOVEOWNERTOACONTACT);\r\n  //////////\r\n  const [removeContact] = useMutation(REMOVECONTACT);\r\n\r\n  ////////////Queries end///////////////////////////////////////////////\r\n\r\n  ////////////General begin///////////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (targetLabel && stateApp.user && stateApp.user.mongoId && showTracks) {\r\n      setLoading(true);\r\n\r\n      tracksByUserAndObjectType({\r\n        variables: {\r\n          userId: stateApp.user.mongoId,\r\n          objectType: targetLabel,\r\n        },\r\n      });\r\n    }\r\n  }, [stateApp.user, targetLabel, showTracks]);\r\n\r\n  ////////////General end///////////////////////////////////////////////\r\n\r\n  ////////////Tracked Owners begin///////////////////////////////////////////////\r\n  useEffect(() => {\r\n    if (props.parent && props.parent === \"trackOwners\") {\r\n      setTargetLabel(\"owner\");\r\n\r\n      if (props.header) {\r\n        setHeader(props.header);\r\n      } else {\r\n        setHeader(\"Owners\");\r\n      }\r\n      setAddAble(false);\r\n    }\r\n  }, [props.parent, props.header]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"trackOwners\" &&\r\n      dataTracks &&\r\n      dataTracks.tracksByUserAndObjectType\r\n    ) {\r\n      if (dataTracks.tracksByUserAndObjectType.length !== 0) {\r\n        const tracksIdArray = dataTracks.tracksByUserAndObjectType.map(\r\n          (track) => track.trackOn\r\n        );\r\n\r\n        getOwners({\r\n          variables: {\r\n            ownerIdArray: tracksIdArray,\r\n            authToken: stateApp.user.authToken,\r\n          },\r\n        });\r\n        getOwnersWells({\r\n          variables: {\r\n            ownersIds: tracksIdArray,\r\n          },\r\n        });\r\n        getCommentsCounter({\r\n          variables: {\r\n            objectsIdsArray: tracksIdArray,\r\n            userId: stateApp.user.mongoId,\r\n          },\r\n        });\r\n        getTagSamples({\r\n          variables: {\r\n            objectsIdsArray: tracksIdArray,\r\n            userId: stateApp.user.mongoId,\r\n          },\r\n        });\r\n        getContactsCounter({\r\n          variables: { objectsIdsArray: tracksIdArray },\r\n        });\r\n      } else {\r\n        setRows([]);\r\n        setLoading(false);\r\n      }\r\n    }\r\n  }, [dataTracks]);\r\n\r\n  useEffect(() => {\r\n    if (props.parent && props.parent === \"trackOwners\" && dataOwners) {\r\n      if (\r\n        dataOwners.owners &&\r\n        dataOwners.owners.results &&\r\n        dataOwners.owners.results.length > 0 &&\r\n        dataCommentsCounter &&\r\n        dataCommentsCounter.commentsCounter &&\r\n        dataContactsCounter &&\r\n        dataContactsCounter.contactsCounter &&\r\n        dataTagSamples &&\r\n        dataTagSamples.tagSamples &&\r\n        dataOwnersWells\r\n      ) {\r\n        dataOwners.owners.results.forEach((owner) => {\r\n          owner.isTracked = true;\r\n          owner.commentsCounter = 0;\r\n          owner.tags = [[], 0];\r\n          owner.contactsCounter = 0;\r\n          owner.wellsCounter = [];\r\n\r\n          if (dataOwnersWells.ownersWells) {\r\n            for (let i = 0; i < dataOwnersWells.ownersWells.length; i++) {\r\n              if (owner.id === dataOwnersWells.ownersWells[i].ownerId) {\r\n                owner.wellsCounter = dataOwnersWells.ownersWells[i].wells.map(\r\n                  (well) => well.wellId\r\n                );\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\r\n            if (owner.id === dataCommentsCounter.commentsCounter[i]._id) {\r\n              owner.commentsCounter =\r\n                dataCommentsCounter.commentsCounter[i].total;\r\n              break;\r\n            }\r\n          }\r\n\r\n          for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\r\n            if (owner.id === dataTagSamples.tagSamples[i]._id) {\r\n              owner.tags = [\r\n                dataTagSamples.tagSamples[i].tags,\r\n                dataTagSamples.tagSamples[i].total,\r\n              ];\r\n\r\n              break;\r\n            }\r\n          }\r\n\r\n          for (let i = 0; i < dataContactsCounter.contactsCounter.length; i++) {\r\n            if (owner.id === dataContactsCounter.contactsCounter[i]._id) {\r\n              owner.contactsCounter =\r\n                dataContactsCounter.contactsCounter[i].total;\r\n              break;\r\n            }\r\n          }\r\n        });\r\n\r\n        let availableTags = [];\r\n        dataTagSamples.tagSamples.map((sample) => {\r\n          availableTags = [...availableTags, ...sample.tags];\r\n        });\r\n        const cleanAvailableTags = [...new Set(availableTags)];\r\n\r\n        setRows(dataOwners.owners.results);\r\n\r\n        setColumns(\r\n          cleanAvailableTags.length > 0\r\n            ? TrackedOwnersHeadCells.map((column) => {\r\n                if (column.name === \"tags\") {\r\n                  return {\r\n                    ...column,\r\n                    options: {\r\n                      ...column.options,\r\n                      filterOptions: {\r\n                        ...column.options.filterOptions,\r\n                        names: cleanAvailableTags,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return column;\r\n              })\r\n            : TrackedOwnersHeadCells.map((column) => {\r\n                if (column.name === \"tags\") {\r\n                  return {\r\n                    ...column,\r\n                    options: {\r\n                      ...column.options,\r\n                      filter: false,\r\n                    },\r\n                  };\r\n                }\r\n                return column;\r\n              })\r\n        );\r\n\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          owners: dataOwners.owners.results,\r\n        }));\r\n        setLoading(false);\r\n      } else {\r\n        if (\r\n          dataOwners.owners &&\r\n          dataOwners.owners.results &&\r\n          dataOwners.owners.results.length === 0\r\n        ) {\r\n          setRows([]);\r\n          setLoading(false);\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    dataOwners,\r\n    dataTagSamples,\r\n    dataCommentsCounter,\r\n    dataContactsCounter,\r\n    dataOwnersWells,\r\n  ]);\r\n  ////////////Tracked Owners end///////////////////////////////////////////////\r\n\r\n  ////////////Tracked Wells begin///////////////////////////////////////////////\r\n  useEffect(() => {\r\n    if (props.parent && props.parent === \"trackWells\") {\r\n      setTargetLabel(\"well\");\r\n\r\n      if (props.header) {\r\n        setHeader(props.header);\r\n      } else {\r\n        setHeader(\"Wells\");\r\n      }\r\n      setAddAble(false);\r\n    }\r\n  }, [props.parent, props.header]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"trackWells\" &&\r\n      dataTracks &&\r\n      dataTracks.tracksByUserAndObjectType\r\n    ) {\r\n      if (dataTracks.tracksByUserAndObjectType.length !== 0) {\r\n        const tracksIdArray = dataTracks.tracksByUserAndObjectType.map(\r\n          (track) => track.trackOn\r\n        );\r\n\r\n        getWells({\r\n          variables: {\r\n            wellIdArray: tracksIdArray,\r\n            authToken: stateApp.user.authToken,\r\n          },\r\n        });\r\n        getCommentsCounter({\r\n          variables: {\r\n            objectsIdsArray: tracksIdArray,\r\n            userId: stateApp.user.mongoId,\r\n          },\r\n        });\r\n        getTagSamples({\r\n          variables: {\r\n            objectsIdsArray: tracksIdArray,\r\n            userId: stateApp.user.mongoId,\r\n          },\r\n        });\r\n      } else {\r\n        setRows([]);\r\n        setLoading(false);\r\n      }\r\n    }\r\n  }, [dataTracks]);\r\n\r\n  useEffect(() => {\r\n    if (props.parent && props.parent === \"trackWells\" && dataWells) {\r\n      if (\r\n        dataWells.wells &&\r\n        dataWells.wells.results &&\r\n        dataWells.wells.results.length > 0 &&\r\n        dataCommentsCounter &&\r\n        dataCommentsCounter.commentsCounter &&\r\n        dataTagSamples &&\r\n        dataTagSamples.tagSamples\r\n      ) {\r\n        dataWells.wells.results.forEach((well) => {\r\n          well.isTracked = true;\r\n          well.commentsCounter = 0;\r\n          well.tags = [[], 0];\r\n\r\n          for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\r\n            if (well.id === dataCommentsCounter.commentsCounter[i]._id) {\r\n              well.commentsCounter =\r\n                dataCommentsCounter.commentsCounter[i].total;\r\n              break;\r\n            }\r\n          }\r\n          for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\r\n            if (well.id === dataTagSamples.tagSamples[i]._id) {\r\n              well.tags = [\r\n                dataTagSamples.tagSamples[i].tags,\r\n                dataTagSamples.tagSamples[i].total,\r\n              ];\r\n\r\n              break;\r\n            }\r\n          }\r\n        });\r\n\r\n        let availableTags = [];\r\n        dataTagSamples.tagSamples.map((sample) => {\r\n          availableTags = [...availableTags, ...sample.tags];\r\n        });\r\n        const cleanAvailableTags = [...new Set(availableTags)];\r\n\r\n        setRows(dataWells.wells.results);\r\n\r\n        setColumns(\r\n          cleanAvailableTags.length > 0\r\n            ? WellsHeadCells.map((column) => {\r\n                if (column.name === \"tags\") {\r\n                  return {\r\n                    ...column,\r\n                    options: {\r\n                      ...column.options,\r\n                      filterOptions: {\r\n                        ...column.options.filterOptions,\r\n                        names: cleanAvailableTags,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return column;\r\n              })\r\n            : WellsHeadCells.map((column) => {\r\n                if (column.name === \"tags\") {\r\n                  return {\r\n                    ...column,\r\n                    options: {\r\n                      ...column.options,\r\n                      filter: false,\r\n                    },\r\n                  };\r\n                }\r\n                return column;\r\n              })\r\n        );\r\n\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          trackedwells: dataWells.wells.results,\r\n        }));\r\n        setLoading(false);\r\n      } else {\r\n        if (\r\n          dataWells.wells &&\r\n          dataWells.wells.results &&\r\n          dataWells.wells.results.length === 0\r\n        ) {\r\n          setRows([]);\r\n          setLoading(false);\r\n        }\r\n      }\r\n    }\r\n  }, [dataWells, dataTagSamples, dataCommentsCounter]);\r\n  ////////////Tracked Wells end///////////////////////////////////////////////\r\n\r\n  ////////////Wells Per Owner begin///////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"WellsPerOwner\" &&\r\n      props.wellsIdsArray &&\r\n      stateApp.user &&\r\n      stateApp.user.mongoId\r\n    ) {\r\n      setTargetLabel(\"well\");\r\n      setHeader(\"Wells\");\r\n      setAddAble(false);\r\n      getWells({\r\n        variables: {\r\n          wellIdArray: props.wellsIdsArray,\r\n          authToken: stateApp.user.authToken,\r\n        },\r\n      });\r\n      getCommentsCounter({\r\n        variables: {\r\n          objectsIdsArray: props.wellsIdsArray,\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n      getTagSamples({\r\n        variables: {\r\n          objectsIdsArray: props.wellsIdsArray,\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n    }\r\n  }, [props.wellsIdsArray, stateApp.user]);\r\n\r\n  useEffect(() => {\r\n    if (props.parent && props.parent === \"WellsPerOwner\" && dataWells) {\r\n      if (\r\n        dataWells.wells &&\r\n        dataWells.wells.results &&\r\n        dataWells.wells.results.length > 0 &&\r\n        dataCommentsCounter &&\r\n        dataCommentsCounter.commentsCounter &&\r\n        dataTagSamples &&\r\n        dataTagSamples.tagSamples &&\r\n        dataTracks &&\r\n        dataTracks.tracksByUserAndObjectType\r\n      ) {\r\n        dataWells.wells.results.forEach((well) => {\r\n          well.isTracked = false;\r\n          well.commentsCounter = 0;\r\n          well.tags = [[], 0];\r\n\r\n          for (\r\n            let i = 0;\r\n            i < dataTracks.tracksByUserAndObjectType.length;\r\n            i++\r\n          ) {\r\n            if (well.id === dataTracks.tracksByUserAndObjectType[i].trackOn) {\r\n              well.isTracked = true;\r\n              break;\r\n            }\r\n          }\r\n          for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\r\n            if (well.id === dataCommentsCounter.commentsCounter[i]._id) {\r\n              well.commentsCounter =\r\n                dataCommentsCounter.commentsCounter[i].total;\r\n              break;\r\n            }\r\n          }\r\n          for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\r\n            if (well.id === dataTagSamples.tagSamples[i]._id) {\r\n              well.tags = [\r\n                dataTagSamples.tagSamples[i].tags,\r\n                dataTagSamples.tagSamples[i].total,\r\n              ];\r\n\r\n              break;\r\n            }\r\n          }\r\n        });\r\n\r\n        let availableTags = [];\r\n        dataTagSamples.tagSamples.map((sample) => {\r\n          availableTags = [...availableTags, ...sample.tags];\r\n        });\r\n        const cleanAvailableTags = [...new Set(availableTags)];\r\n\r\n        setRows(dataWells.wells.results);\r\n\r\n        setColumns(\r\n          cleanAvailableTags.length > 0\r\n            ? WellsHeadCells.map((column) => {\r\n                if (column.name === \"tags\") {\r\n                  return {\r\n                    ...column,\r\n                    options: {\r\n                      ...column.options,\r\n                      filterOptions: {\r\n                        ...column.options.filterOptions,\r\n                        names: cleanAvailableTags,\r\n                      },\r\n                    },\r\n                  };\r\n                }\r\n                return column;\r\n              })\r\n            : WellsHeadCells.map((column) => {\r\n                if (column.name === \"tags\") {\r\n                  return {\r\n                    ...column,\r\n                    options: {\r\n                      ...column.options,\r\n                      filter: false,\r\n                    },\r\n                  };\r\n                }\r\n                return column;\r\n              })\r\n        );\r\n\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          wells: dataWells.wells.results,\r\n        }));\r\n      } else {\r\n        setRows([]);\r\n      }\r\n\r\n      setLoading(false);\r\n    }\r\n  }, [dataWells, dataTagSamples, dataCommentsCounter, dataTracks]);\r\n\r\n  //////////// Wells Per Owner end///////////////////////////////////////////////\r\n\r\n  ////////////Owners Per Well begin///////////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (props.parent && props.parent === \"OwnersPerWell\") {\r\n      setTargetLabel(\"owner\");\r\n      setHeader(\"Owners Per Well\");\r\n      setAddAble(false);\r\n      getWellOwners({\r\n        variables: { id: props.selectedWell.id },\r\n      });\r\n    }\r\n  }, [props.selectedWell]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"OwnersPerWell\" &&\r\n      dataWellOwners &&\r\n      dataTracks &&\r\n      dataTracks.tracksByUserAndObjectType\r\n    ) {\r\n      if (dataWellOwners.wellOwners && dataWellOwners.wellOwners.length > 0) {\r\n        const objectsIdsArray = [];\r\n        dataWellOwners.wellOwners.forEach((wellOwner) => {\r\n          wellOwner.isTracked = false;\r\n          objectsIdsArray.push(wellOwner.id);\r\n\r\n          for (\r\n            let i = 0;\r\n            i < dataTracks.tracksByUserAndObjectType.length;\r\n            i++\r\n          ) {\r\n            if (\r\n              wellOwner.id === dataTracks.tracksByUserAndObjectType[i].trackOn\r\n            ) {\r\n              wellOwner.isTracked = true;\r\n              break;\r\n            }\r\n          }\r\n        });\r\n\r\n        getOwnersWells({\r\n          variables: {\r\n            ownersIds: objectsIdsArray,\r\n          },\r\n        });\r\n        getCommentsCounter({\r\n          variables: { objectsIdsArray, userId: stateApp.user.mongoId },\r\n        });\r\n        getTagSamples({\r\n          variables: { objectsIdsArray, userId: stateApp.user.mongoId },\r\n        });\r\n        getContactsCounter({\r\n          variables: { objectsIdsArray: objectsIdsArray },\r\n        });\r\n      } else {\r\n        setLoading(false);\r\n        setRows([]);\r\n      }\r\n    }\r\n  }, [dataWellOwners, dataTracks]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"OwnersPerWell\" &&\r\n      dataWellOwners &&\r\n      dataWellOwners.wellOwners &&\r\n      dataWellOwners.wellOwners.length > 0 &&\r\n      dataCommentsCounter &&\r\n      dataCommentsCounter.commentsCounter &&\r\n      dataContactsCounter &&\r\n      dataContactsCounter.contactsCounter &&\r\n      dataTagSamples &&\r\n      dataTagSamples.tagSamples &&\r\n      dataOwnersWells\r\n    ) {\r\n      dataWellOwners.wellOwners.forEach((wellOwner) => {\r\n        wellOwner.commentsCounter = 0;\r\n        wellOwner.tags = [[], 0];\r\n        wellOwner.contactsCounter = 0;\r\n        wellOwner.wellsCounter = [];\r\n\r\n        if (dataOwnersWells.ownersWells) {\r\n          for (let i = 0; i < dataOwnersWells.ownersWells.length; i++) {\r\n            if (wellOwner.id === dataOwnersWells.ownersWells[i].ownerId) {\r\n              wellOwner.wellsCounter = dataOwnersWells.ownersWells[i].wells.map(\r\n                (well) => well.wellId\r\n              );\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\r\n          if (wellOwner.id === dataCommentsCounter.commentsCounter[i]._id) {\r\n            wellOwner.commentsCounter =\r\n              dataCommentsCounter.commentsCounter[i].total;\r\n            break;\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\r\n          if (wellOwner.id === dataTagSamples.tagSamples[i]._id) {\r\n            wellOwner.tags = [\r\n              dataTagSamples.tagSamples[i].tags,\r\n              dataTagSamples.tagSamples[i].total,\r\n            ];\r\n\r\n            break;\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < dataContactsCounter.contactsCounter.length; i++) {\r\n          if (wellOwner.id === dataContactsCounter.contactsCounter[i]._id) {\r\n            wellOwner.contactsCounter =\r\n              dataContactsCounter.contactsCounter[i].total;\r\n            break;\r\n          }\r\n        }\r\n      });\r\n\r\n      let availableTags = [];\r\n      dataTagSamples.tagSamples.map((sample) => {\r\n        availableTags = [...availableTags, ...sample.tags];\r\n      });\r\n      const cleanAvailableTags = [...new Set(availableTags)];\r\n\r\n      setColumns(\r\n        cleanAvailableTags.length > 0\r\n          ? OwnersPerWellHeadCells.map((column) => {\r\n              if (column.name === \"tags\") {\r\n                return {\r\n                  ...column,\r\n                  options: {\r\n                    ...column.options,\r\n                    filterOptions: {\r\n                      ...column.options.filterOptions,\r\n                      names: cleanAvailableTags,\r\n                    },\r\n                  },\r\n                };\r\n              }\r\n              return column;\r\n            })\r\n          : OwnersPerWellHeadCells.map((column) => {\r\n              if (column.name === \"tags\") {\r\n                return {\r\n                  ...column,\r\n                  options: {\r\n                    ...column.options,\r\n                    filter: false,\r\n                  },\r\n                };\r\n              }\r\n              return column;\r\n            })\r\n      );\r\n\r\n      setRows(dataWellOwners.wellOwners);\r\n      setLoading(false);\r\n    }\r\n  }, [\r\n    dataWellOwners,\r\n    dataTracks,\r\n    dataTagSamples,\r\n    dataCommentsCounter,\r\n    dataContactsCounter,\r\n    dataOwnersWells,\r\n  ]);\r\n\r\n  ////////////Owners Per Well end///////////////////////////////////////////////\r\n\r\n  ////////////Owners Per Contact begin///////////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"ownersPerContacts\" &&\r\n      props.contactId\r\n    ) {\r\n      setTargetLabel(\"owner\");\r\n      setHeader(\"Interest Owners Tied to Contact\");\r\n      getContactInM1nTable({\r\n        variables: {\r\n          contactId: props.contactId,\r\n        },\r\n      });\r\n    }\r\n  }, [props.contactId]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.contactId &&\r\n      props.parent &&\r\n      props.parent === \"ownersPerContacts\" &&\r\n      dataContact &&\r\n      dataContact.contact\r\n    ) {\r\n      if (dataContact.contact.owners && dataContact.contact.owners.length > 0) {\r\n        getOwners({\r\n          variables: {\r\n            ownerIdArray: dataContact.contact.owners,\r\n            authToken: stateApp.user.authToken,\r\n          },\r\n        });\r\n        getOwnersWells({\r\n          variables: {\r\n            ownersIds: dataContact.contact.owners,\r\n          },\r\n        });\r\n      } else {\r\n        setLoading(false);\r\n        setRows([]);\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          universalCircularLoaderAct: false,\r\n        }));\r\n      }\r\n\r\n      setAddAble({\r\n        parent: props.contactId,\r\n        type: \"ownerToContact\",\r\n        existingOwners: dataContact.contact.owners\r\n          ? dataContact.contact.owners\r\n          : [],\r\n      });\r\n    }\r\n  }, [props.contactId, dataContact]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"ownersPerContacts\" &&\r\n      dataOwners &&\r\n      dataTracks &&\r\n      dataTracks.tracksByUserAndObjectType &&\r\n      dataOwnersWells\r\n    ) {\r\n      if (\r\n        dataOwners.owners &&\r\n        dataOwners.owners &&\r\n        dataOwners.owners.results.length > 0\r\n      ) {\r\n        const objectsIdsArray = [];\r\n        dataOwners.owners.results.forEach((wellOwner) => {\r\n          wellOwner.isTracked = false;\r\n          objectsIdsArray.push(wellOwner.id);\r\n\r\n          for (\r\n            let i = 0;\r\n            i < dataTracks.tracksByUserAndObjectType.length;\r\n            i++\r\n          ) {\r\n            if (\r\n              wellOwner.id === dataTracks.tracksByUserAndObjectType[i].trackOn\r\n            ) {\r\n              wellOwner.isTracked = true;\r\n              break;\r\n            }\r\n          }\r\n\r\n          wellOwner.wellsCounter = [];\r\n\r\n          if (dataOwnersWells.ownersWells) {\r\n            for (let i = 0; i < dataOwnersWells.ownersWells.length; i++) {\r\n              if (wellOwner.id === dataOwnersWells.ownersWells[i].ownerId) {\r\n                wellOwner.wellsCounter = dataOwnersWells.ownersWells[\r\n                  i\r\n                ].wells.map((well) => well.wellId);\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        getCommentsCounter({\r\n          variables: { objectsIdsArray, userId: stateApp.user.mongoId },\r\n        });\r\n        getTagSamples({\r\n          variables: { objectsIdsArray, userId: stateApp.user.mongoId },\r\n        });\r\n        getContactsCounter({\r\n          variables: { objectsIdsArray: objectsIdsArray },\r\n        });\r\n      } else {\r\n        setLoading(false);\r\n        setRows([]);\r\n        setStateApp((state) => ({\r\n          ...state,\r\n          universalCircularLoaderAct: false,\r\n        }));\r\n      }\r\n    }\r\n  }, [dataOwners, dataTracks, dataOwnersWells]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"ownersPerContacts\" &&\r\n      dataOwners &&\r\n      dataOwners.owners &&\r\n      dataOwners.owners.results &&\r\n      dataOwners.owners.results.length > 0 &&\r\n      dataCommentsCounter &&\r\n      dataCommentsCounter.commentsCounter &&\r\n      dataContactsCounter &&\r\n      dataContactsCounter.contactsCounter &&\r\n      dataTagSamples &&\r\n      dataTagSamples.tagSamples\r\n    ) {\r\n      dataOwners.owners.results.forEach((wellOwner) => {\r\n        wellOwner.commentsCounter = 0;\r\n        wellOwner.tags = [[], 0];\r\n        wellOwner.contactsCounter = 0;\r\n\r\n        for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\r\n          if (wellOwner.id === dataCommentsCounter.commentsCounter[i]._id) {\r\n            wellOwner.commentsCounter =\r\n              dataCommentsCounter.commentsCounter[i].total;\r\n            break;\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\r\n          if (wellOwner.id === dataTagSamples.tagSamples[i]._id) {\r\n            wellOwner.tags = [\r\n              dataTagSamples.tagSamples[i].tags,\r\n              dataTagSamples.tagSamples[i].total,\r\n            ];\r\n\r\n            break;\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < dataContactsCounter.contactsCounter.length; i++) {\r\n          if (wellOwner.id === dataContactsCounter.contactsCounter[i]._id) {\r\n            wellOwner.contactsCounter =\r\n              dataContactsCounter.contactsCounter[i].total;\r\n            break;\r\n          }\r\n        }\r\n      });\r\n\r\n      let availableTags = [];\r\n      dataTagSamples.tagSamples.map((sample) => {\r\n        availableTags = [...availableTags, ...sample.tags];\r\n      });\r\n      const cleanAvailableTags = [...new Set(availableTags)];\r\n\r\n      setColumns(\r\n        cleanAvailableTags.length > 0\r\n          ? OwnersPerContactsHeadCells.map((column) => {\r\n              if (column.name === \"tags\") {\r\n                return {\r\n                  ...column,\r\n                  options: {\r\n                    ...column.options,\r\n                    filterOptions: {\r\n                      ...column.options.filterOptions,\r\n                      names: cleanAvailableTags,\r\n                    },\r\n                  },\r\n                };\r\n              }\r\n              return column;\r\n            })\r\n          : OwnersPerContactsHeadCells.map((column) => {\r\n              if (column.name === \"tags\") {\r\n                return {\r\n                  ...column,\r\n                  options: {\r\n                    ...column.options,\r\n                    filter: false,\r\n                  },\r\n                };\r\n              }\r\n              return column;\r\n            })\r\n      );\r\n      setRows(dataOwners.owners.results);\r\n      setLoading(false);\r\n      setStateApp((state) => ({ ...state, universalCircularLoaderAct: false }));\r\n    }\r\n  }, [\r\n    dataOwners,\r\n    dataTracks,\r\n    dataTagSamples,\r\n    dataCommentsCounter,\r\n    dataContactsCounter,\r\n  ]);\r\n  ////////////Owners Per Contact begin//////////Delete//////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"ownersPerContacts\" &&\r\n      props.contactId\r\n    ) {\r\n      setDeleteFunc(() => (ownersIdsToDelete) => {\r\n        if (ownersIdsToDelete) {\r\n          setStateApp((state) => ({\r\n            ...state,\r\n            universalCircularLoaderAct: true,\r\n          }));\r\n          for (let i = 0; i < ownersIdsToDelete.length; i++) {\r\n            addRemoveOwnerToAContact({\r\n              variables: {\r\n                contactId: props.contactId,\r\n                ownerId: ownersIdsToDelete[i],\r\n              },\r\n              refetchQueries: [\r\n                \"getContacts\",\r\n                \"getContactsByOwnerId\",\r\n                \"getContactsCounter\",\r\n                \"getContact\",\r\n                \"getContactInM1nTable\",\r\n              ],\r\n              awaitRefetchQueries: true,\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [props.parent, props.contactId]);\r\n\r\n  ////////////Owners Per Contact end/////////////////////////////////////////////////\r\n\r\n  ////////////Contacts Per Owner begin///////////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (props.parent && props.parent === \"ownerContacts\" && props.ownerId) {\r\n      setTargetLabel(\"contact\");\r\n      setHeader(\"Owner's Contacts\");\r\n      setAddAble({ parent: props.ownerId, type: \"contactToOwner\" });\r\n      getContactsByOwnerId({\r\n        variables: { objectId: props.ownerId },\r\n      });\r\n    }\r\n  }, [props.ownerId]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"ownerContacts\" &&\r\n      dataContactsByOwnerId &&\r\n      dataTracks &&\r\n      dataTracks.tracksByUserAndObjectType\r\n    ) {\r\n      if (\r\n        dataContactsByOwnerId.contactsByOwnerId &&\r\n        dataContactsByOwnerId.contactsByOwnerId.length > 0\r\n      ) {\r\n        const objectsIdsArray = [];\r\n        dataContactsByOwnerId.contactsByOwnerId.forEach((contact) => {\r\n          contact.isTracked = false;\r\n          objectsIdsArray.push(contact._id);\r\n\r\n          for (\r\n            let i = 0;\r\n            i < dataTracks.tracksByUserAndObjectType.length;\r\n            i++\r\n          ) {\r\n            if (\r\n              contact.id === dataTracks.tracksByUserAndObjectType[i].trackOn\r\n            ) {\r\n              contact.isTracked = true;\r\n              break;\r\n            }\r\n          }\r\n        });\r\n\r\n        getCommentsCounter({\r\n          variables: { objectsIdsArray, userId: stateApp.user.mongoId },\r\n        });\r\n        getTagSamples({\r\n          variables: { objectsIdsArray, userId: stateApp.user.mongoId },\r\n        });\r\n      } else {\r\n        setLoading(false);\r\n        setRows([]);\r\n      }\r\n    }\r\n  }, [dataContactsByOwnerId, dataTracks]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"ownerContacts\" &&\r\n      dataContactsByOwnerId &&\r\n      dataContactsByOwnerId.contactsByOwnerId &&\r\n      dataContactsByOwnerId.contactsByOwnerId.length > 0 &&\r\n      dataCommentsCounter &&\r\n      dataCommentsCounter.commentsCounter &&\r\n      dataTagSamples &&\r\n      dataTagSamples.tagSamples\r\n    ) {\r\n      dataContactsByOwnerId.contactsByOwnerId.forEach((contact) => {\r\n        contact.commentsCounter = 0;\r\n        contact.tags = [[], 0];\r\n        // contact.fullContactAddress = joinAddress(contact);\r\n        // contact.contactName = contact.name;\r\n\r\n        for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\r\n          if (contact._id === dataCommentsCounter.commentsCounter[i]._id) {\r\n            contact.commentsCounter =\r\n              dataCommentsCounter.commentsCounter[i].total;\r\n            break;\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\r\n          if (contact._id === dataTagSamples.tagSamples[i]._id) {\r\n            contact.tags = [\r\n              dataTagSamples.tagSamples[i].tags,\r\n              dataTagSamples.tagSamples[i].total,\r\n            ];\r\n\r\n            break;\r\n          }\r\n        }\r\n      });\r\n\r\n      let availableTags = [];\r\n      dataTagSamples.tagSamples.map((sample) => {\r\n        availableTags = [...availableTags, ...sample.tags];\r\n      });\r\n      const cleanAvailableTags = [...new Set(availableTags)];\r\n\r\n      setColumns(\r\n        cleanAvailableTags.length > 0\r\n          ? ContactsHeadCells.map((column) => {\r\n              if (column.name === \"tags\") {\r\n                return {\r\n                  ...column,\r\n                  options: {\r\n                    ...column.options,\r\n                    filterOptions: {\r\n                      ...column.options.filterOptions,\r\n                      names: cleanAvailableTags,\r\n                    },\r\n                  },\r\n                };\r\n              }\r\n              return column;\r\n            })\r\n          : ContactsHeadCells.map((column) => {\r\n              if (column.name === \"tags\") {\r\n                return {\r\n                  ...column,\r\n                  options: {\r\n                    ...column.options,\r\n                    filter: false,\r\n                  },\r\n                };\r\n              }\r\n              return column;\r\n            })\r\n      );\r\n      setRows([...dataContactsByOwnerId.contactsByOwnerId]);\r\n      setLoading(false);\r\n    }\r\n  }, [dataContactsByOwnerId, dataTracks, dataTagSamples, dataCommentsCounter]);\r\n\r\n  ////////////Contact Per Owner begin//////////Delete//////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (props.parent && props.parent === \"ownerContacts\" && props.ownerId) {\r\n      setDeleteFunc(() => (contactsIdsToDelete, completelyDelete) => {\r\n        if (contactsIdsToDelete) {\r\n          if (completelyDelete) {\r\n            // for (let i = 0; i < contactsIdsToDelete.length; i++) {\r\n            //   removeContact({\r\n            //     variables: {\r\n            //       contactId: contactsIdsToDelete[i],\r\n            //     },\r\n            //     refetchQueries: [\r\n            //       \"getContacts\",\r\n            //       \"getContactsByOwnerId\",\r\n            //       \"getContactsCounter\",\r\n            //       \"getContact\",\r\n            //     ],\r\n            //     awaitRefetchQueries: true,\r\n            //   });\r\n            // }\r\n          } else {\r\n            for (let i = 0; i < contactsIdsToDelete.length; i++) {\r\n              addRemoveOwnerToAContact({\r\n                variables: {\r\n                  contactId: contactsIdsToDelete[i],\r\n                  ownerId: props.ownerId,\r\n                },\r\n                refetchQueries: [\r\n                  \"getContacts\",\r\n                  \"getContactsByOwnerId\",\r\n                  \"getContactsCounter\",\r\n                  \"getContact\",\r\n                  \"getContactInM1nTable\",\r\n                ],\r\n                awaitRefetchQueries: true,\r\n              });\r\n            }\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [props.parent, props.ownerId]);\r\n\r\n  ////////////Contacts Per Owner end///////////////////////////////////////////////\r\n\r\n  ////////////Contacts begin///////////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (props.parent && props.parent === \"Contacts\") {\r\n      setTargetLabel(\"contact\");\r\n      setHeader(\"Contacts\");\r\n      setAddAble({ parent: false, type: \"contact\" });\r\n      getContacts();\r\n      setUploadIcon(true);\r\n      setStartPaginationAt(100);\r\n    }\r\n  }, [props.parent]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"Contacts\" &&\r\n      dataContacts &&\r\n      dataTracks &&\r\n      dataTracks.tracksByUserAndObjectType\r\n    ) {\r\n      if (dataContacts.contacts && dataContacts.contacts.length > 0) {\r\n        const objectsIdsArray = [];\r\n        dataContacts.contacts.forEach((contact) => {\r\n          contact.isTracked = false;\r\n          objectsIdsArray.push(contact._id);\r\n\r\n          for (\r\n            let i = 0;\r\n            i < dataTracks.tracksByUserAndObjectType.length;\r\n            i++\r\n          ) {\r\n            if (\r\n              contact.id === dataTracks.tracksByUserAndObjectType[i].trackOn\r\n            ) {\r\n              contact.isTracked = true;\r\n              break;\r\n            }\r\n          }\r\n        });\r\n\r\n        getCommentsCounter({\r\n          variables: { objectsIdsArray, userId: stateApp.user.mongoId },\r\n        });\r\n        getTagSamples({\r\n          variables: { objectsIdsArray, userId: stateApp.user.mongoId },\r\n        });\r\n      } else {\r\n        setLoading(false);\r\n        setRows([]);\r\n      }\r\n    }\r\n  }, [dataContacts, dataTracks]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"Contacts\" &&\r\n      dataContacts &&\r\n      dataContacts.contacts &&\r\n      dataContacts.contacts.length > 0 &&\r\n      dataCommentsCounter &&\r\n      dataCommentsCounter.commentsCounter &&\r\n      dataTagSamples &&\r\n      dataTagSamples.tagSamples\r\n    ) {\r\n      dataContacts.contacts.forEach((contact) => {\r\n        contact.commentsCounter = 0;\r\n        contact.tags = [[], 0];\r\n        // contact.fullContactAddress = joinAddress(contact);\r\n        // contact.contactName = contact.name;\r\n\r\n        for (let i = 0; i < dataCommentsCounter.commentsCounter.length; i++) {\r\n          if (contact._id === dataCommentsCounter.commentsCounter[i]._id) {\r\n            contact.commentsCounter =\r\n              dataCommentsCounter.commentsCounter[i].total;\r\n            break;\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\r\n          if (contact._id === dataTagSamples.tagSamples[i]._id) {\r\n            contact.tags = [\r\n              dataTagSamples.tagSamples[i].tags,\r\n              dataTagSamples.tagSamples[i].total,\r\n            ];\r\n\r\n            break;\r\n          }\r\n        }\r\n      });\r\n\r\n      let availableTags = [];\r\n      dataTagSamples.tagSamples.map((sample) => {\r\n        availableTags = [...availableTags, ...sample.tags];\r\n      });\r\n      const cleanAvailableTags = [...new Set(availableTags)];\r\n\r\n      setColumns(\r\n        cleanAvailableTags.length > 0\r\n          ? ContactsHeadCells.map((column) => {\r\n              if (column.name === \"tags\") {\r\n                return {\r\n                  ...column,\r\n                  options: {\r\n                    ...column.options,\r\n                    filterOptions: {\r\n                      ...column.options.filterOptions,\r\n                      names: cleanAvailableTags,\r\n                    },\r\n                  },\r\n                };\r\n              }\r\n              return column;\r\n            })\r\n          : ContactsHeadCells.map((column) => {\r\n              if (column.name === \"tags\") {\r\n                return {\r\n                  ...column,\r\n                  options: {\r\n                    ...column.options,\r\n                    filter: false,\r\n                  },\r\n                };\r\n              }\r\n              return column;\r\n            })\r\n      );\r\n      setRows([...dataContacts.contacts]);\r\n      setLoading(false);\r\n    }\r\n  }, [dataContacts, dataTracks, dataTagSamples, dataCommentsCounter]);\r\n\r\n  ////////////Contact Delete begin////////////////////////////////////////\r\n\r\n  useEffect(() => {\r\n    if (props.parent && props.parent === \"Contacts\") {\r\n      setDeleteFunc(() => (contactsIdsToDelete) => {\r\n        if (contactsIdsToDelete) {\r\n          for (let i = 0; i < contactsIdsToDelete.length; i++) {\r\n            removeContact({\r\n              variables: {\r\n                contactId: contactsIdsToDelete[i],\r\n              },\r\n              refetchQueries: [\r\n                \"getContacts\",\r\n                \"getContactsByOwnerId\",\r\n                \"getContactsCounter\",\r\n                \"getContact\",\r\n              ],\r\n              awaitRefetchQueries: true,\r\n            });\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }, [props.parent]);\r\n\r\n  ////////////Contacts end///////////////////////////////////////////////\r\n\r\n  //////////// Search begin///////////////////////////////////////////////\r\n  useEffect(() => {\r\n    if (stateApp.searchloading) {\r\n      setLoading(true);\r\n    }\r\n  }, [stateApp.searchloading]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"search\" &&\r\n      props.header &&\r\n      props.targetLabel &&\r\n      stateApp &&\r\n      stateApp.searchResultData &&\r\n      stateApp.user &&\r\n      stateApp.user.mongoId\r\n    ) {\r\n      setTargetLabel(props.targetLabel);\r\n      setHeader(props.header);\r\n      setAddAble(false);\r\n      setOrderByTracks(false);\r\n      setStartPaginationAt(100);\r\n      if (stateApp.searchResultData.length > 0) {\r\n        // setLoading(true);\r\n        const objectsIdsArray = stateApp.searchResultData.map(\r\n          (result) => result.Id\r\n        );\r\n        if (props.showComments)\r\n          getCommentsCounter({\r\n            variables: { objectsIdsArray, userId: stateApp.user.mongoId },\r\n          });\r\n        if (props.showTags)\r\n          getTagSamples({\r\n            variables: { objectsIdsArray, userId: stateApp.user.mongoId },\r\n          });\r\n        if (props.showTracks) setShowTracks(true);\r\n      } else {\r\n        setShowTracks(false);\r\n        if (!stateApp.searchloading) {\r\n          setRows([]);\r\n          setLoading(false);\r\n        }\r\n      }\r\n    }\r\n  }, [\r\n    props.parent,\r\n    props.header,\r\n    props.targetLabel,\r\n    stateApp.searchResultData,\r\n    stateApp.user,\r\n    props.showTracks,\r\n    props.showComments,\r\n    props.showTags,\r\n    stateApp.searchloading,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      props.parent &&\r\n      props.parent === \"search\" &&\r\n      stateApp &&\r\n      stateApp.searchResultData &&\r\n      (!props.showComments ||\r\n        (dataCommentsCounter && dataCommentsCounter.commentsCounter)) &&\r\n      (!props.showTags || (dataTagSamples && dataTagSamples.tagSamples)) &&\r\n      (!props.showTracks ||\r\n        (dataTracks && dataTracks.tracksByUserAndObjectType)) &&\r\n      props.privateColumns\r\n    ) {\r\n      if (stateApp.searchResultData.length > 0) {\r\n        stateApp.searchResultData.forEach((result) => {\r\n          result.id = result.Id;\r\n\r\n          if (props.showComments) {\r\n            result.commentsCounter = 0;\r\n            for (\r\n              let i = 0;\r\n              i < dataCommentsCounter.commentsCounter.length;\r\n              i++\r\n            ) {\r\n              if (result.Id === dataCommentsCounter.commentsCounter[i]._id) {\r\n                result.commentsCounter =\r\n                  dataCommentsCounter.commentsCounter[i].total;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (props.showTags) {\r\n            result.tags = [[], 0];\r\n            for (let i = 0; i < dataTagSamples.tagSamples.length; i++) {\r\n              if (result.Id === dataTagSamples.tagSamples[i]._id) {\r\n                result.tags = [\r\n                  dataTagSamples.tagSamples[i].tags,\r\n                  dataTagSamples.tagSamples[i].total,\r\n                ];\r\n\r\n                break;\r\n              }\r\n            }\r\n          }\r\n\r\n          if (props.showTracks) {\r\n            result.isTracked = false;\r\n            for (\r\n              let i = 0;\r\n              i < dataTracks.tracksByUserAndObjectType.length;\r\n              i++\r\n            ) {\r\n              if (\r\n                result.Id === dataTracks.tracksByUserAndObjectType[i].trackOn\r\n              ) {\r\n                result.isTracked = true;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n        });\r\n\r\n        const buildingColumns = [SearchsHeadCells[0], ...props.privateColumns];\r\n\r\n        if (props.showTags) {\r\n          let availableTags = [];\r\n          dataTagSamples.tagSamples.map((sample) => {\r\n            availableTags = [...availableTags, ...sample.tags];\r\n          });\r\n          const cleanAvailableTags = [...new Set(availableTags)];\r\n\r\n          buildingColumns.push(\r\n            cleanAvailableTags.length > 0\r\n              ? {\r\n                  ...SearchsHeadCells[1],\r\n                  options: {\r\n                    ...SearchsHeadCells[1].options,\r\n                    filterOptions: {\r\n                      ...SearchsHeadCells[1].options.filterOptions,\r\n                      names: cleanAvailableTags,\r\n                    },\r\n                  },\r\n                }\r\n              : {\r\n                  ...SearchsHeadCells[1],\r\n                  options: {\r\n                    ...SearchsHeadCells[1].options,\r\n                    filter: false,\r\n                  },\r\n                }\r\n          );\r\n        }\r\n        if (props.showComments) buildingColumns.push(SearchsHeadCells[2]);\r\n        if (props.showTracks) buildingColumns.push(SearchsHeadCells[3]);\r\n\r\n        setColumns([...buildingColumns]);\r\n        setRows([...stateApp.searchResultData]);\r\n        setLoading(false);\r\n      }\r\n    }\r\n  }, [\r\n    props.parent,\r\n    stateApp.searchResultData,\r\n    dataTracks,\r\n    dataTagSamples,\r\n    dataCommentsCounter,\r\n    props.privateColumns,\r\n    props.showTracks,\r\n    props.showComments,\r\n    props.showTags,\r\n  ]);\r\n  //////////// Search end///////////////////////////////////////////////\r\n\r\n  ////////////-----Add your code section here-----///////////////////////\r\n\r\n  return (\r\n    <Container maxWidth={false} className={classes.container}>\r\n      <Table\r\n        style={{ backgroundColor: \"#fff\" }}\r\n        header={header}\r\n        columns={columns}\r\n        rows={rows}\r\n        loading={loading}\r\n        addAble={addAble}\r\n        targetLabel={targetLabel}\r\n        deleteFunc={deleteFunc}\r\n        uploadIcon={uploadIcon}\r\n        dense={props.dense ? props.dense : undefined}\r\n        orderByTracks={orderByTracks}\r\n        startPaginationAt={startPaginationAt}\r\n      />\r\n    </Container>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}