{"ast":null,"code":"import { __assign } from \"tslib\";\nimport React from 'react';\nimport { isElement, isValidElementType } from 'react-is';\nimport { SimpleCellFormatter } from '../formatters';\nexport default function CellValue(_a) {\n  var rowIdx = _a.rowIdx,\n      rowData = _a.rowData,\n      column = _a.column,\n      value = _a.value,\n      isScrolling = _a.isScrolling;\n\n  function getFormatterDependencies(row) {\n    // convention based method to get corresponding Id or Name of any Name or Id property\n    var getRowMetaData = column.getRowMetaData;\n\n    if (getRowMetaData) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('getRowMetaData for formatters is deprecated and will be removed in a future version of ReactDataGrid. Instead access row prop of formatter');\n      }\n\n      return getRowMetaData(row, column);\n    }\n  }\n\n  function getFormatterProps() {\n    return {\n      value: value,\n      column: column,\n      rowIdx: rowIdx,\n      isScrolling: isScrolling,\n      row: rowData,\n      dependentValues: getFormatterDependencies(rowData)\n    };\n  }\n\n  var formatter = column.formatter;\n\n  if (isElement(formatter)) {\n    return React.cloneElement(formatter, getFormatterProps());\n  }\n\n  if (isValidElementType(formatter)) {\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    return React.createElement(formatter, __assign(__assign({}, getFormatterProps()), {\n      value: value\n    })); //FIXME: fix value type\n  }\n\n  return React.createElement(SimpleCellFormatter, {\n    value: value\n  });\n}","map":{"version":3,"sources":["../../src/Cell/CellValue.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,SAAS,SAAT,EAAoB,kBAApB,QAA8C,UAA9C;AAEA,SAAS,mBAAT,QAAoC,eAApC;AAWA,eAAc,SAAU,SAAV,CAAuB,EAAvB,EAAyF;MAAhE,MAAA,GAAA,EAAA,CAAA,M;MAAQ,OAAA,GAAA,EAAA,CAAA,O;MAAS,MAAA,GAAA,EAAA,CAAA,M;MAAQ,KAAA,GAAA,EAAA,CAAA,K;MAAO,WAAA,GAAA,EAAA,CAAA,W;;AACrE,WAAS,wBAAT,CAAkC,GAAlC,EAAwC;AACtC;AACQ,QAAA,cAAA,GAAA,MAAA,CAAA,cAAA;;AACR,QAAI,cAAJ,EAAoB;AAClB,UAAI,OAAO,CAAC,GAAR,CAAY,QAAZ,KAAyB,aAA7B,EAA4C;AAC1C,QAAA,OAAO,CAAC,IAAR,CAAa,4IAAb;AACD;;AACD,aAAO,cAAc,CAAC,GAAD,EAAM,MAAN,CAArB;AACD;AACF;;AAED,WAAS,iBAAT,GAA0B;AACxB,WAAO;AACL,MAAA,KAAK,EAAA,KADA;AAEL,MAAA,MAAM,EAAA,MAFD;AAGL,MAAA,MAAM,EAAA,MAHD;AAIL,MAAA,WAAW,EAAA,WAJN;AAKL,MAAA,GAAG,EAAE,OALA;AAML,MAAA,eAAe,EAAE,wBAAwB,CAAC,OAAD;AANpC,KAAP;AAQD;;AAEO,MAAA,SAAA,GAAA,MAAA,CAAA,SAAA;;AAER,MAAI,SAAS,CAAC,SAAD,CAAb,EAA0B;AACxB,WAAO,KAAK,CAAC,YAAN,CAAmB,SAAnB,EAA8B,iBAAiB,EAA/C,CAAP;AACD;;AAED,MAAI,kBAAkB,CAAC,SAAD,CAAtB,EAAmC;AACjC;AACA,WAAO,KAAK,CAAC,aAAN,CAAoB,SAApB,EAA6B,QAAA,CAAA,QAAA,CAAA,EAAA,EAAO,iBAAiB,EAAxB,CAAA,EAA0B;AAAE,MAAA,KAAK,EAAE;AAAT,KAA1B,CAA7B,CAAP,CAFiC,CAEuD;AACzF;;AAED,SAAO,KAAA,CAAA,aAAA,CAAC,mBAAD,EAAoB;AAAC,IAAA,KAAK,EAAE;AAAR,GAApB,CAAP;AACD","sourcesContent":["import React from 'react';\nimport { isElement, isValidElementType } from 'react-is';\n\nimport { SimpleCellFormatter } from '../formatters';\nimport { CellContentProps } from './CellContent';\n\ntype CellValueProps<R> = Pick<CellContentProps<R>,\n'rowIdx'\n| 'rowData'\n| 'column'\n| 'value'\n| 'isScrolling'\n>;\n\nexport default function CellValue<R>({ rowIdx, rowData, column, value, isScrolling }: CellValueProps<R>) {\n  function getFormatterDependencies(row: R) {\n    // convention based method to get corresponding Id or Name of any Name or Id property\n    const { getRowMetaData } = column;\n    if (getRowMetaData) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn('getRowMetaData for formatters is deprecated and will be removed in a future version of ReactDataGrid. Instead access row prop of formatter');\n      }\n      return getRowMetaData(row, column);\n    }\n  }\n\n  function getFormatterProps() {\n    return {\n      value,\n      column,\n      rowIdx,\n      isScrolling,\n      row: rowData,\n      dependentValues: getFormatterDependencies(rowData)\n    };\n  }\n\n  const { formatter } = column;\n\n  if (isElement(formatter)) {\n    return React.cloneElement(formatter, getFormatterProps());\n  }\n\n  if (isValidElementType(formatter)) {\n    /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n    return React.createElement(formatter, { ...getFormatterProps(), value: value as any }); //FIXME: fix value type\n  }\n\n  return <SimpleCellFormatter value={value as string} />;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}