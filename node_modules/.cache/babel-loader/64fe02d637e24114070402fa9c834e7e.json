{"ast":null,"code":"import Immutable from 'immutable';\nexport function isColumnsImmutable(columns) {\n  return Immutable.List.isList(columns);\n}\nexport function isEmptyArray(obj) {\n  return Array.isArray(obj) && obj.length === 0;\n}\nexport function isFunction(functionToCheck) {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\nexport function isEmptyObject(obj) {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\nexport function isImmutableCollection(objToVerify) {\n  return Immutable.Iterable.isIterable(objToVerify);\n}\nexport function getMixedTypeValueRetriever(isImmutable) {\n  return {\n    getValue: isImmutable ? function (immutable, key) {\n      return immutable.get(key);\n    } : function (item, key) {\n      return item[key];\n    }\n  };\n}\nexport var isImmutableMap = Immutable.Map.isMap;","map":{"version":3,"sources":["../../../src/common/utils/index.ts"],"names":[],"mappings":"AAAA,OAAO,SAAP,MAAsB,WAAtB;AAEA,OAAM,SAAU,kBAAV,CAA6B,OAA7B,EAA6C;AACjD,SAAO,SAAS,CAAC,IAAV,CAAe,MAAf,CAAsB,OAAtB,CAAP;AACD;AAED,OAAM,SAAU,YAAV,CAAuB,GAAvB,EAAmC;AACvC,SAAO,KAAK,CAAC,OAAN,CAAc,GAAd,KAAsB,GAAG,CAAC,MAAJ,KAAe,CAA5C;AACD;AAED,OAAM,SAAU,UAAV,CAAwB,eAAxB,EAA0C;AAC9C,SAAO,eAAe,IAAI,GAAG,QAAH,CAAY,IAAZ,CAAiB,eAAjB,MAAsC,mBAAhE;AACD;AAED,OAAM,SAAU,aAAV,CAAsC,GAAtC,EAA4C;AAChD,SAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,EAAiB,MAAjB,KAA4B,CAA5B,IAAiC,GAAG,CAAC,WAAJ,KAAoB,MAA5D;AACD;AAED,OAAM,SAAU,qBAAV,CAAmC,WAAnC,EAAiD;AACrD,SAAO,SAAS,CAAC,QAAV,CAAmB,UAAnB,CAA8B,WAA9B,CAAP;AACD;AAED,OAAM,SAAU,0BAAV,CAAqC,WAArC,EAAyD;AAC7D,SAAO;AACL,IAAA,QAAQ,EAAE,WAAW,GACjB,UAAC,SAAD,EAA4C,GAA5C,EAAuD;AAAK,aAAA,SAAS,CAAC,GAAV,CAAA,GAAA,CAAA;AAAkB,KAD7D,GAEjB,UAAI,IAAJ,EAAa,GAAb,EAAyB;AAAoB,aAAA,IAAI,CAAJ,GAAI,CAAJ;AAAS;AAHrD,GAAP;AAKD;AAED,OAAO,IAAM,cAAc,GAAG,SAAS,CAAC,GAAV,CAAc,KAArC","sourcesContent":["import Immutable from 'immutable';\n\nexport function isColumnsImmutable(columns: unknown): columns is Immutable.List<unknown> {\n  return Immutable.List.isList(columns);\n}\n\nexport function isEmptyArray(obj: unknown): boolean {\n  return Array.isArray(obj) && obj.length === 0;\n}\n\nexport function isFunction<T>(functionToCheck: T): boolean {\n  return functionToCheck && {}.toString.call(functionToCheck) === '[object Function]';\n}\n\nexport function isEmptyObject<T extends {}>(obj: T): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}\n\nexport function isImmutableCollection<T>(objToVerify: T): boolean {\n  return Immutable.Iterable.isIterable(objToVerify);\n}\n\nexport function getMixedTypeValueRetriever(isImmutable: boolean) {\n  return {\n    getValue: isImmutable\n      ? (immutable: Immutable.Map<string, unknown>, key: string) => immutable.get(key)\n      : <T>(item: T, key: keyof T): T[typeof key] => item[key]\n  };\n}\n\nexport const isImmutableMap = Immutable.Map.isMap;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}