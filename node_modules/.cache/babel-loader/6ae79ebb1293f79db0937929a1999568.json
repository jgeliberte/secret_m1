{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\ProdMinMax.js\";\nimport React, { useState, useContext, useCallback, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport NumberFormat from \"react-number-format\";\nimport { NavigationContext } from \"../NavigationContext\";\nimport { FormLabel } from \"@material-ui/core\";\nconst useStyles = makeStyles({\n  divBordersMinMax: {\n    padding: \"3.5px 15px 5.5px 9px\",\n    border: \"1px solid #C4C4C4\",\n    borderRadius: \"4px\",\n    \"&:hover\": {\n      border: \"1px solid black\"\n    },\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  input: {\n    marginLeft: \"30px\",\n    width: \"160px\",\n    float: \"right\",\n    \"& input\": {\n      color: \"#17AADD\"\n    }\n  },\n  inputLabel: {\n    float: \"left\",\n    display: \"block\",\n    width: \"200px\",\n    textAlign: \"center\",\n    lineHeight: \"1.2\"\n  }\n});\nexport default function FirstMonthWater(props) {\n  const classes = useStyles();\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [valueMinDisplay, setValueMinDisplay] = useState(\"\");\n  const [valueMaxDisplay, setValueMaxDisplay] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [errorText, setErrorText] = useState(\"\");\n  const [id, setId] = useState(props.id);\n  const [type, setType] = useState(\"\");\n  const [filterName, setFilterName] = useState(props.filter);\n  const [name, setName] = useState(props.name);\n  useEffect(() => {\n    if (name.includes(\"Gas\")) {\n      setType(\"(MCF)\");\n    } else {\n      setType(\"(BBL)\");\n    }\n  }, [name]);\n  const setFilter = useCallback(() => {\n    let filter;\n    let min = parseInt(valueMinDisplay);\n    let max = parseInt(valueMaxDisplay);\n\n    if (!min && !max) {\n      filter = null;\n    }\n\n    if (!min && max) {\n      filter = [\"all\", [\"<=\", [\"get\", id.toString()], max]];\n      console.log(\"add filter\", filter);\n    } else if (min && !max) {\n      filter = [\"all\", [\">=\", [\"get\", id.toString()], min]];\n      console.log(\"add filter\", filter);\n    } else if (min && max) {\n      if (min < max) {\n        filter = [\"all\", [\">=\", [\"get\", id.toString()], min], [\"<=\", [\"get\", id.toString()], max]];\n        console.log(\"add filter\", filter);\n      }\n    } else {\n      filter = null;\n    }\n\n    setStateNav(stateNav => ({ ...stateNav,\n      [filterName]: filter\n    }));\n  }, [filterName, id, setStateNav, valueMaxDisplay, valueMinDisplay]);\n  useEffect(() => {\n    const recall = () => {\n      let checkStateNav = stateNav[filterName];\n\n      if (!valueMinDisplay && !valueMaxDisplay) {\n        if (checkStateNav && checkStateNav.length === 3) {\n          const recallMin = checkStateNav[1][2];\n          const recallMax = checkStateNav[2][2];\n          setValueMinDisplay(recallMin);\n          setValueMaxDisplay(recallMax);\n        }\n      }\n\n      if (!valueMaxDisplay) {\n        if (checkStateNav && checkStateNav[1][0] === \"<=\") {\n          const recallMax = checkStateNav[1][2];\n          setValueMaxDisplay(recallMax);\n        }\n      }\n\n      if (!valueMinDisplay) {\n        if (checkStateNav && checkStateNav[1][0] === \">=\") {\n          const recallMin = checkStateNav[1][2];\n          setValueMinDisplay(recallMin);\n        }\n      }\n    };\n\n    recall();\n    return () => {\n      recall();\n    };\n  }, [filterName, stateNav, valueMaxDisplay, valueMinDisplay]);\n  useEffect(() => {\n    if (stateNav.prodOptions) {\n      setFilter();\n    }\n  }, [setFilter, stateNav.prodOptions]);\n\n  const handleChangeMin = event => {\n    setValueMinDisplay(event.target.value.replace(/,/g, \"\"));\n\n    if (event.target.value === \"\") {\n      setStateNav(stateNav => ({ ...stateNav,\n        [filterName]: null\n      }));\n    }\n  };\n\n  const handleChangeMax = event => {\n    setValueMaxDisplay(event.target.value.replace(/,/g, \"\"));\n\n    if (event.target.value === \"\") {\n      setStateNav(stateNav => ({ ...stateNav,\n        [filterName]: null\n      }));\n    }\n  };\n\n  useEffect(() => {\n    if (valueMinDisplay && valueMaxDisplay) {\n      if (valueMinDisplay >= valueMaxDisplay) {\n        setError(true);\n        setErrorText(\"Min value is greater than Max value\");\n      } else {\n        setError(false);\n        setErrorText(\"\");\n      }\n    }\n  }, [valueMaxDisplay, valueMinDisplay]);\n\n  const allowNumbersOnly = e => {\n    let code = e.which ? e.which : e.keyCode;\n\n    if (code > 31 && (code < 48 || code > 57)) {\n      e.preventDefault();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.divBordersMinMax,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FormLabel, {\n    className: classes.inputLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }\n  }, name, \" \", type), /*#__PURE__*/React.createElement(NumberFormat, {\n    value: valueMinDisplay,\n    onChange: handleChangeMin,\n    thousandSeparator: true,\n    customInput: TextField,\n    id: id,\n    className: classes.input,\n    \"aria-labelledby\": \"range-number\",\n    type: \"text\",\n    label: \"Min\",\n    size: \"small\",\n    onKeyPress: e => allowNumbersOnly(e),\n    InputProps: {\n      inputProps: {\n        min: Number.MIN_SAFE_INTEGER,\n        max: Number.MAX_SAFE_INTEGER - 1,\n        step: 1000\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(NumberFormat, {\n    value: valueMaxDisplay,\n    onChange: handleChangeMax,\n    thousandSeparator: true,\n    customInput: TextField,\n    id: id,\n    className: classes.input,\n    \"aria-labelledby\": \"range-number\",\n    type: \"text\",\n    label: \"Max\",\n    size: \"small\",\n    onKeyPress: e => allowNumbersOnly(e),\n    error: error,\n    helperText: errorText,\n    InputProps: {\n      inputProps: {\n        min: Number.MIN_SAFE_INTEGER + 1,\n        max: Number.MAX_SAFE_INTEGER,\n        step: 1000\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/ProdMinMax.js"],"names":["React","useState","useContext","useCallback","useEffect","makeStyles","TextField","NumberFormat","NavigationContext","FormLabel","useStyles","divBordersMinMax","padding","border","borderRadius","display","alignItems","input","marginLeft","width","float","color","inputLabel","textAlign","lineHeight","FirstMonthWater","props","classes","stateNav","setStateNav","valueMinDisplay","setValueMinDisplay","valueMaxDisplay","setValueMaxDisplay","error","setError","errorText","setErrorText","id","setId","type","setType","filterName","setFilterName","filter","name","setName","includes","setFilter","min","parseInt","max","toString","console","log","recall","checkStateNav","length","recallMin","recallMax","prodOptions","handleChangeMin","event","target","value","replace","handleChangeMax","allowNumbersOnly","e","code","which","keyCode","preventDefault","inputProps","Number","MIN_SAFE_INTEGER","MAX_SAFE_INTEGER","step"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useCallback, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\nimport { FormLabel } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles({\r\n  divBordersMinMax: {\r\n    padding: \"3.5px 15px 5.5px 9px\",\r\n    border: \"1px solid #C4C4C4\",\r\n    borderRadius: \"4px\",\r\n    \"&:hover\": {\r\n      border: \"1px solid black\",\r\n    },\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  input: {\r\n    marginLeft: \"30px\",\r\n    width: \"160px\",\r\n    float: \"right\",\r\n    \"& input\": { color: \"#17AADD\" },\r\n  },\r\n  inputLabel: {\r\n    float: \"left\",\r\n    display: \"block\",\r\n    width: \"200px\",\r\n    textAlign: \"center\",\r\n    lineHeight: \"1.2\",\r\n  },\r\n});\r\n\r\nexport default function FirstMonthWater(props) {\r\n  const classes = useStyles();\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [valueMinDisplay, setValueMinDisplay] = useState(\"\");\r\n  const [valueMaxDisplay, setValueMaxDisplay] = useState(\"\");\r\n  const [error, setError] = useState(false);\r\n  const [errorText, setErrorText] = useState(\"\");\r\n  const [id, setId] = useState(props.id);\r\n  const [type, setType] = useState(\"\");\r\n  const [filterName, setFilterName] = useState(props.filter);\r\n  const [name, setName] = useState(props.name);\r\n\r\n  useEffect(() => {\r\n    if (name.includes(\"Gas\")) {\r\n      setType(\"(MCF)\");\r\n    } else {\r\n      setType(\"(BBL)\");\r\n    }\r\n  }, [name]);\r\n\r\n  const setFilter = useCallback(() => {\r\n    let filter;\r\n    let min = parseInt(valueMinDisplay);\r\n    let max = parseInt(valueMaxDisplay);\r\n    if (!min && !max) {\r\n      filter = null;\r\n    }\r\n    if (!min && max) {\r\n      filter = [\"all\", [\"<=\", [\"get\", id.toString()], max]];\r\n      console.log(\"add filter\", filter);\r\n    } else if (min && !max) {\r\n      filter = [\"all\", [\">=\", [\"get\", id.toString()], min]];\r\n      console.log(\"add filter\", filter);\r\n    } else if (min && max) {\r\n      if (min < max) {\r\n        filter = [\r\n          \"all\",\r\n          [\">=\", [\"get\", id.toString()], min],\r\n          [\"<=\", [\"get\", id.toString()], max],\r\n        ];\r\n        console.log(\"add filter\", filter);\r\n      }\r\n    } else {\r\n      filter = null;\r\n    }\r\n\r\n    setStateNav((stateNav) => ({\r\n      ...stateNav,\r\n      [filterName]: filter,\r\n    }));\r\n  }, [filterName, id, setStateNav, valueMaxDisplay, valueMinDisplay]);\r\n\r\n  useEffect(() => {\r\n    const recall = () => {\r\n      let checkStateNav = stateNav[filterName];\r\n      if (!valueMinDisplay && !valueMaxDisplay) {\r\n        if (checkStateNav && checkStateNav.length === 3) {\r\n          const recallMin = checkStateNav[1][2];\r\n          const recallMax = checkStateNav[2][2];\r\n          setValueMinDisplay(recallMin);\r\n          setValueMaxDisplay(recallMax);\r\n        }\r\n      }\r\n      if (!valueMaxDisplay) {\r\n        if (checkStateNav && checkStateNav[1][0] === \"<=\") {\r\n          const recallMax = checkStateNav[1][2];\r\n          setValueMaxDisplay(recallMax);\r\n        }\r\n      }\r\n      if (!valueMinDisplay) {\r\n        if (checkStateNav && checkStateNav[1][0] === \">=\") {\r\n          const recallMin = checkStateNav[1][2];\r\n          setValueMinDisplay(recallMin);\r\n        }\r\n      }\r\n    };\r\n    recall();\r\n    return () => {\r\n      recall();\r\n    };\r\n  }, [filterName, stateNav, valueMaxDisplay, valueMinDisplay]);\r\n\r\n  useEffect(() => {\r\n    if (stateNav.prodOptions) {\r\n      setFilter();\r\n    }\r\n  }, [setFilter, stateNav.prodOptions]);\r\n\r\n  const handleChangeMin = (event) => {\r\n    setValueMinDisplay(event.target.value.replace(/,/g, \"\"));\r\n    if (event.target.value === \"\") {\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        [filterName]: null,\r\n      }));\r\n    }\r\n  };\r\n\r\n  const handleChangeMax = (event) => {\r\n    setValueMaxDisplay(event.target.value.replace(/,/g, \"\"));\r\n    if (event.target.value === \"\") {\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        [filterName]: null,\r\n      }));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (valueMinDisplay && valueMaxDisplay) {\r\n      if (valueMinDisplay >= valueMaxDisplay) {\r\n        setError(true);\r\n        setErrorText(\"Min value is greater than Max value\");\r\n      } else {\r\n        setError(false);\r\n        setErrorText(\"\");\r\n      }\r\n    }\r\n  }, [valueMaxDisplay, valueMinDisplay]);\r\n\r\n  const allowNumbersOnly = (e) => {\r\n    let code = e.which ? e.which : e.keyCode;\r\n    if (code > 31 && (code < 48 || code > 57)) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={classes.divBordersMinMax}>\r\n      <FormLabel className={classes.inputLabel}>\r\n        {name} {type}\r\n      </FormLabel>\r\n\r\n      <NumberFormat\r\n        value={valueMinDisplay}\r\n        onChange={handleChangeMin}\r\n        thousandSeparator={true}\r\n        customInput={TextField}\r\n        id={id}\r\n        className={classes.input}\r\n        aria-labelledby=\"range-number\"\r\n        type=\"text\"\r\n        label=\"Min\"\r\n        size=\"small\"\r\n        onKeyPress={(e) => allowNumbersOnly(e)}\r\n        InputProps={{\r\n          inputProps: {\r\n            min: Number.MIN_SAFE_INTEGER,\r\n            max: Number.MAX_SAFE_INTEGER - 1,\r\n            step: 1000,\r\n          },\r\n        }}\r\n      />\r\n      <NumberFormat\r\n        value={valueMaxDisplay}\r\n        onChange={handleChangeMax}\r\n        thousandSeparator={true}\r\n        customInput={TextField}\r\n        id={id}\r\n        className={classes.input}\r\n        aria-labelledby=\"range-number\"\r\n        type=\"text\"\r\n        label=\"Max\"\r\n        size=\"small\"\r\n        onKeyPress={(e) => allowNumbersOnly(e)}\r\n        error={error}\r\n        helperText={errorText}\r\n        InputProps={{\r\n          inputProps: {\r\n            min: Number.MIN_SAFE_INTEGER + 1,\r\n            max: Number.MAX_SAFE_INTEGER,\r\n            step: 1000,\r\n          },\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}