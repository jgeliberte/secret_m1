{"ast":null,"code":"import { __assign, __read, __spread, __values } from \"tslib\";\nexport { sameColumn } from './ColumnComparer';\nimport { getSize, isFrozen } from './ColumnUtils';\nimport getScrollbarSize from './getScrollbarSize';\nimport { isColumnsImmutable } from './common/utils';\n\nfunction cloneColumns(columns) {\n  if (Array.isArray(columns)) {\n    return columns.map(function (c) {\n      return __assign({}, c);\n    });\n  }\n\n  return cloneColumns(columns.toArray());\n}\n\nfunction setColumnWidths(columns, totalWidth) {\n  var e_1, _a;\n\n  try {\n    for (var columns_1 = __values(columns), columns_1_1 = columns_1.next(); !columns_1_1.done; columns_1_1 = columns_1.next()) {\n      var column = columns_1_1.value;\n\n      if (typeof column.width === 'string' && /^\\d+%$/.test(column.width)) {\n        column.width = Math.floor(totalWidth * column.width / 100);\n      }\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (columns_1_1 && !columns_1_1.done && (_a = columns_1.return)) _a.call(columns_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n}\n\nfunction setDefferedColumnWidths(columns, unallocatedWidth, minColumnWidth) {\n  var e_2, _a;\n\n  var defferedColumns = columns.filter(function (c) {\n    return !c.width;\n  });\n  var columnWidth = Math.floor(unallocatedWidth / defferedColumns.length);\n\n  try {\n    for (var columns_2 = __values(columns), columns_2_1 = columns_2.next(); !columns_2_1.done; columns_2_1 = columns_2.next()) {\n      var column = columns_2_1.value;\n      if (column.width) continue;\n\n      if (unallocatedWidth <= 0) {\n        column.width = minColumnWidth;\n      }\n\n      column.width = columnWidth < minColumnWidth ? minColumnWidth : columnWidth;\n    }\n  } catch (e_2_1) {\n    e_2 = {\n      error: e_2_1\n    };\n  } finally {\n    try {\n      if (columns_2_1 && !columns_2_1.done && (_a = columns_2.return)) _a.call(columns_2);\n    } finally {\n      if (e_2) throw e_2.error;\n    }\n  }\n}\n\nfunction setColumnOffsets(columns) {\n  var e_3, _a;\n\n  var left = 0;\n\n  try {\n    for (var _b = __values(columns), _c = _b.next(); !_c.done; _c = _b.next()) {\n      var column = _c.value;\n      column.left = left;\n      left += column.width;\n    }\n  } catch (e_3_1) {\n    e_3 = {\n      error: e_3_1\n    };\n  } finally {\n    try {\n      if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n    } finally {\n      if (e_3) throw e_3.error;\n    }\n  }\n}\n\nfunction getTotalColumnWidth(columns) {\n  return columns.reduce(function (acc, c) {\n    return acc + (c.width || 0);\n  }, 0);\n}\n\nexport function recalculate(metrics) {\n  // clone columns so we can safely edit them:\n  var columns = cloneColumns(metrics.columns); // compute width for columns which specify width\n\n  setColumnWidths(columns, metrics.totalWidth);\n  var width = getTotalColumnWidth(columns);\n  var unallocatedWidth = metrics.totalWidth - width - getScrollbarSize(); // compute width for columns which doesn't specify width\n\n  setDefferedColumnWidths(columns, unallocatedWidth, metrics.minColumnWidth); // compute left offset\n\n  setColumnOffsets(columns);\n  var frozenColumns = columns.filter(function (c) {\n    return isFrozen(c);\n  });\n  var nonFrozenColumns = columns.filter(function (c) {\n    return !isFrozen(c);\n  });\n  var calculatedColumns = frozenColumns.concat(nonFrozenColumns);\n  calculatedColumns.forEach(function (c, i) {\n    return c.idx = i;\n  });\n  return {\n    width: width,\n    columns: calculatedColumns,\n    totalWidth: metrics.totalWidth,\n    totalColumnWidth: getTotalColumnWidth(columns),\n    minColumnWidth: metrics.minColumnWidth\n  };\n}\n/**\r\n * Update column metrics calculation by resizing a column.\r\n */\n\nexport function resizeColumn(metrics, index, width) {\n  var updatedColumn = __assign({}, metrics.columns[index]);\n\n  updatedColumn.width = Math.max(width, metrics.minColumnWidth);\n\n  var updatedMetrics = __assign({}, metrics);\n\n  updatedMetrics.columns = __spread(metrics.columns);\n  updatedMetrics.columns.splice(index, 1, updatedColumn);\n  return recalculate(updatedMetrics);\n}\n\nfunction compareEachColumn(prevColumns, nextColumns, isSameColumn) {\n  var e_4, _a, e_5, _b, e_6, _c;\n\n  if (getSize(prevColumns) !== getSize(nextColumns)) return false;\n  var keys = new Set();\n  var prevColumnsMap = new Map();\n  var nextColumnsMap = new Map();\n\n  try {\n    for (var prevColumns_1 = __values(prevColumns), prevColumns_1_1 = prevColumns_1.next(); !prevColumns_1_1.done; prevColumns_1_1 = prevColumns_1.next()) {\n      var column = prevColumns_1_1.value;\n      keys.add(column.key);\n      prevColumnsMap.set(column.key, column);\n    }\n  } catch (e_4_1) {\n    e_4 = {\n      error: e_4_1\n    };\n  } finally {\n    try {\n      if (prevColumns_1_1 && !prevColumns_1_1.done && (_a = prevColumns_1.return)) _a.call(prevColumns_1);\n    } finally {\n      if (e_4) throw e_4.error;\n    }\n  }\n\n  try {\n    for (var nextColumns_1 = __values(nextColumns), nextColumns_1_1 = nextColumns_1.next(); !nextColumns_1_1.done; nextColumns_1_1 = nextColumns_1.next()) {\n      var column = nextColumns_1_1.value;\n      keys.add(column.key);\n      nextColumnsMap.set(column.key, column);\n    }\n  } catch (e_5_1) {\n    e_5 = {\n      error: e_5_1\n    };\n  } finally {\n    try {\n      if (nextColumns_1_1 && !nextColumns_1_1.done && (_b = nextColumns_1.return)) _b.call(nextColumns_1);\n    } finally {\n      if (e_5) throw e_5.error;\n    }\n  }\n\n  if (keys.size > prevColumnsMap.size) return false;\n\n  try {\n    for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {\n      var key = keys_1_1.value;\n      if (!prevColumnsMap.has(key) || !nextColumnsMap.has(key)) return false;\n      var prevColumn = prevColumnsMap.get(key);\n      var nextColumn = nextColumnsMap.get(key);\n      if (!isSameColumn(prevColumn, nextColumn)) return false;\n    }\n  } catch (e_6_1) {\n    e_6 = {\n      error: e_6_1\n    };\n  } finally {\n    try {\n      if (keys_1_1 && !keys_1_1.done && (_c = keys_1.return)) _c.call(keys_1);\n    } finally {\n      if (e_6) throw e_6.error;\n    }\n  }\n\n  return true;\n}\n\nexport function sameColumns(prevColumns, nextColumns, isSameColumn) {\n  if (isColumnsImmutable(prevColumns) && isColumnsImmutable(nextColumns)) {\n    return prevColumns === nextColumns;\n  }\n\n  return compareEachColumn(prevColumns, nextColumns, isSameColumn);\n}","map":{"version":3,"sources":["../src/ColumnMetrics.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,kBAA3B;AACA,SAAS,OAAT,EAAkB,QAAlB,QAAkC,eAAlC;AACA,OAAO,gBAAP,MAA6B,oBAA7B;AACA,SAAS,kBAAT,QAAmC,gBAAnC;;AAOA,SAAS,YAAT,CAAyB,OAAzB,EAA+C;AAC7C,MAAI,KAAK,CAAC,OAAN,CAAc,OAAd,CAAJ,EAA4B;AAC1B,WAAO,OAAO,CAAC,GAAR,CAAY,UAAA,CAAA,EAAC;AAAI,aAAA,QAAA,CAAA,EAAA,EAAA,CAAA,CAAA;AAAU,KAA3B,CAAP;AACD;;AACD,SAAO,YAAY,CAAC,OAAO,CAAC,OAAR,EAAD,CAAnB;AACD;;AAED,SAAS,eAAT,CAA4B,OAA5B,EAAkD,UAAlD,EAAoE;;;;AAClE,SAAqB,IAAA,SAAA,GAAA,QAAA,CAAA,OAAA,CAAA,EAAO,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA4B,CAAA,WAAA,CAAA,IAA5B,EAA4B,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA8B;AAAzB,UAAM,MAAM,GAAA,WAAA,CAAA,KAAZ;;AACH,UAAI,OAAO,MAAM,CAAC,KAAd,KAAwB,QAAxB,IAAoC,SAAS,IAAT,CAAc,MAAM,CAAC,KAArB,CAAxC,EAAqE;AACnE,QAAA,MAAM,CAAC,KAAP,GAAe,IAAI,CAAC,KAAL,CAAW,UAAU,GAAG,MAAM,CAAC,KAApB,GAA4B,GAAvC,CAAf;AACD;AACF;;;;;;;;;;;;AACF;;AAED,SAAS,uBAAT,CAAoC,OAApC,EAA0D,gBAA1D,EAAoF,cAApF,EAA0G;;;AACxG,MAAM,eAAe,GAAG,OAAO,CAAC,MAAR,CAAe,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,CAAC,CAAF,KAAA;AAAQ,GAA5B,CAAxB;AACA,MAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAAW,gBAAgB,GAAG,eAAe,CAAC,MAA9C,CAApB;;;AAEA,SAAqB,IAAA,SAAA,GAAA,QAAA,CAAA,OAAA,CAAA,EAAO,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA4B,CAAA,WAAA,CAAA,IAA5B,EAA4B,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA8B;AAAzB,UAAM,MAAM,GAAA,WAAA,CAAA,KAAZ;AACH,UAAI,MAAM,CAAC,KAAX,EAAkB;;AAElB,UAAI,gBAAgB,IAAI,CAAxB,EAA2B;AACzB,QAAA,MAAM,CAAC,KAAP,GAAe,cAAf;AACD;;AAED,MAAA,MAAM,CAAC,KAAP,GAAe,WAAW,GAAG,cAAd,GAA+B,cAA/B,GAAgD,WAA/D;AACD;;;;;;;;;;;;AACF;;AAED,SAAS,gBAAT,CAA6B,OAA7B,EAAiD;;;AAC/C,MAAI,IAAI,GAAG,CAAX;;;AACA,SAAqB,IAAA,EAAA,GAAA,QAAA,CAAA,OAAA,CAAA,EAAgC,EAAA,GAAA,EAAA,CAAA,IAAA,EAArD,EAAqD,CAAA,EAAA,CAAA,IAArD,EAAqD,EAAA,GAAA,EAAA,CAAA,IAAA,EAArD,EAAuD;AAAlD,UAAM,MAAM,GAAA,EAAA,CAAA,KAAZ;AACH,MAAA,MAAM,CAAC,IAAP,GAAc,IAAd;AACA,MAAA,IAAI,IAAI,MAAM,CAAC,KAAf;AACD;;;;;;;;;;;;AACF;;AAED,SAAS,mBAAT,CAAgC,OAAhC,EAAoD;AAClD,SAAO,OAAO,CAAC,MAAR,CAAe,UAAC,GAAD,EAAM,CAAN,EAAO;AAAK,WAAA,GAAG,IAAI,CAAC,CAAC,KAAF,IAAP,CAAG,CAAH;AAAoB,GAA/C,EAAiD,CAAjD,CAAP;AACD;;AAED,OAAM,SAAU,WAAV,CAAyB,OAAzB,EAA4C;AAChD;AACA,MAAM,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC,OAAT,CAA5B,CAFgD,CAGhD;;AACA,EAAA,eAAe,CAAC,OAAD,EAAU,OAAO,CAAC,UAAlB,CAAf;AAEA,MAAM,KAAK,GAAG,mBAAmB,CAAC,OAAD,CAAjC;AACA,MAAM,gBAAgB,GAAG,OAAO,CAAC,UAAR,GAAqB,KAArB,GAA6B,gBAAgB,EAAtE,CAPgD,CAShD;;AACA,EAAA,uBAAuB,CAAC,OAAD,EAAU,gBAAV,EAA4B,OAAO,CAAC,cAApC,CAAvB,CAVgD,CAYhD;;AACA,EAAA,gBAAgB,CAAC,OAAD,CAAhB;AAEA,MAAM,aAAa,GAAG,OAAO,CAAC,MAAR,CAAe,UAAA,CAAA,EAAC;AAAI,WAAA,QAAQ,CAAR,CAAQ,CAAR;AAAW,GAA/B,CAAtB;AACA,MAAM,gBAAgB,GAAG,OAAO,CAAC,MAAR,CAAe,UAAA,CAAA,EAAC;AAAI,WAAA,CAAC,QAAQ,CAAT,CAAS,CAAT;AAAY,GAAhC,CAAzB;AACA,MAAM,iBAAiB,GAAG,aAAa,CAAC,MAAd,CAAqB,gBAArB,CAA1B;AACA,EAAA,iBAAiB,CAAC,OAAlB,CAA0B,UAAC,CAAD,EAAI,CAAJ,EAAK;AAAK,WAAA,CAAC,CAAC,GAAF,GAAA,CAAA;AAAS,GAA7C;AACA,SAAO;AACL,IAAA,KAAK,EAAA,KADA;AAEL,IAAA,OAAO,EAAE,iBAFJ;AAGL,IAAA,UAAU,EAAE,OAAO,CAAC,UAHf;AAIL,IAAA,gBAAgB,EAAE,mBAAmB,CAAC,OAAD,CAJhC;AAKL,IAAA,cAAc,EAAE,OAAO,CAAC;AALnB,GAAP;AAOD;AAED;;;;AAGA,OAAM,SAAU,YAAV,CAA0B,OAA1B,EAAqD,KAArD,EAAoE,KAApE,EAAiF;AACrF,MAAM,aAAa,GAAA,QAAA,CAAA,EAAA,EAAQ,OAAO,CAAC,OAAR,CAAgB,KAAhB,CAAR,CAAnB;;AACA,EAAA,aAAa,CAAC,KAAd,GAAsB,IAAI,CAAC,GAAL,CAAS,KAAT,EAAgB,OAAO,CAAC,cAAxB,CAAtB;;AACA,MAAM,cAAc,GAAA,QAAA,CAAA,EAAA,EAAQ,OAAR,CAApB;;AACA,EAAA,cAAc,CAAC,OAAf,GAAsB,QAAA,CAAO,OAAO,CAAC,OAAf,CAAtB;AACA,EAAA,cAAc,CAAC,OAAf,CAAuB,MAAvB,CAA8B,KAA9B,EAAqC,CAArC,EAAwC,aAAxC;AAEA,SAAO,WAAW,CAAC,cAAD,CAAlB;AACD;;AAID,SAAS,iBAAT,CAA8B,WAA9B,EAA0D,WAA1D,EAAsF,YAAtF,EAAqH;;;AACnH,MAAI,OAAO,CAAC,WAAD,CAAP,KAAyB,OAAO,CAAC,WAAD,CAApC,EAAmD,OAAO,KAAP;AAEnD,MAAM,IAAI,GAAG,IAAI,GAAJ,EAAb;AACA,MAAM,cAAc,GAAG,IAAI,GAAJ,EAAvB;AACA,MAAM,cAAc,GAAG,IAAI,GAAJ,EAAvB;;;AAEA,SAAqB,IAAA,aAAA,GAAA,QAAA,CAAA,WAAA,CAAA,EAAW,eAAA,GAAA,aAAA,CAAA,IAAA,EAAhC,EAAgC,CAAA,eAAA,CAAA,IAAhC,EAAgC,eAAA,GAAA,aAAA,CAAA,IAAA,EAAhC,EAAkC;AAA7B,UAAM,MAAM,GAAA,eAAA,CAAA,KAAZ;AACH,MAAA,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,GAAhB;AACA,MAAA,cAAc,CAAC,GAAf,CAAmB,MAAM,CAAC,GAA1B,EAA+B,MAA/B;AACD;;;;;;;;;;;;;;AAED,SAAqB,IAAA,aAAA,GAAA,QAAA,CAAA,WAAA,CAAA,EAAW,eAAA,GAAA,aAAA,CAAA,IAAA,EAAhC,EAAgC,CAAA,eAAA,CAAA,IAAhC,EAAgC,eAAA,GAAA,aAAA,CAAA,IAAA,EAAhC,EAAkC;AAA7B,UAAM,MAAM,GAAA,eAAA,CAAA,KAAZ;AACH,MAAA,IAAI,CAAC,GAAL,CAAS,MAAM,CAAC,GAAhB;AACA,MAAA,cAAc,CAAC,GAAf,CAAmB,MAAM,CAAC,GAA1B,EAA+B,MAA/B;AACD;;;;;;;;;;;;;AAED,MAAI,IAAI,CAAC,IAAL,GAAY,cAAc,CAAC,IAA/B,EAAqC,OAAO,KAAP;;;AAErC,SAAkB,IAAA,MAAA,GAAA,QAAA,CAAA,IAAA,CAAA,EAAI,QAAA,GAAA,MAAA,CAAA,IAAA,EAAtB,EAAsB,CAAA,QAAA,CAAA,IAAtB,EAAsB,QAAA,GAAA,MAAA,CAAA,IAAA,EAAtB,EAAwB;AAAnB,UAAM,GAAG,GAAA,QAAA,CAAA,KAAT;AACH,UAAI,CAAC,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAD,IAA4B,CAAC,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAjC,EAA0D,OAAO,KAAP;AAC1D,UAAM,UAAU,GAAG,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAnB;AACA,UAAM,UAAU,GAAG,cAAc,CAAC,GAAf,CAAmB,GAAnB,CAAnB;AACA,UAAI,CAAC,YAAY,CAAC,UAAD,EAAa,UAAb,CAAjB,EAA2C,OAAO,KAAP;AAC5C;;;;;;;;;;;;;AAED,SAAO,IAAP;AACD;;AAED,OAAM,SAAU,WAAV,CAAyB,WAAzB,EAAqD,WAArD,EAAiF,YAAjF,EAAgH;AACpH,MAAI,kBAAkB,CAAC,WAAD,CAAlB,IAAmC,kBAAkB,CAAC,WAAD,CAAzD,EAAwE;AACtE,WAAO,WAAW,KAAK,WAAvB;AACD;;AAED,SAAO,iBAAiB,CAAC,WAAD,EAAc,WAAd,EAA2B,YAA3B,CAAxB;AACD","sourcesContent":["export { sameColumn } from './ColumnComparer';\nimport { getSize, isFrozen } from './ColumnUtils';\nimport getScrollbarSize from './getScrollbarSize';\nimport { isColumnsImmutable } from './common/utils';\nimport { Column, CalculatedColumn, ColumnList, ColumnMetrics } from './common/types';\n\ntype Metrics<R> = Pick<ColumnMetrics<R>, 'totalWidth' | 'minColumnWidth'> & {\n  columns: ColumnList<R>;\n};\n\nfunction cloneColumns<R>(columns: ColumnList<R>): Column<R>[] {\n  if (Array.isArray(columns)) {\n    return columns.map(c => ({ ...c }));\n  }\n  return cloneColumns(columns.toArray());\n}\n\nfunction setColumnWidths<R>(columns: Column<R>[], totalWidth: number): void {\n  for (const column of columns) {\n    if (typeof column.width === 'string' && /^\\d+%$/.test(column.width)) {\n      column.width = Math.floor(totalWidth * column.width / 100);\n    }\n  }\n}\n\nfunction setDefferedColumnWidths<R>(columns: Column<R>[], unallocatedWidth: number, minColumnWidth: number): void {\n  const defferedColumns = columns.filter(c => !c.width);\n  const columnWidth = Math.floor(unallocatedWidth / defferedColumns.length);\n\n  for (const column of columns) {\n    if (column.width) continue;\n\n    if (unallocatedWidth <= 0) {\n      column.width = minColumnWidth;\n    }\n\n    column.width = columnWidth < minColumnWidth ? minColumnWidth : columnWidth;\n  }\n}\n\nfunction setColumnOffsets<R>(columns: Column<R>[]): void {\n  let left = 0;\n  for (const column of columns as CalculatedColumn<R>[]) {\n    column.left = left;\n    left += column.width;\n  }\n}\n\nfunction getTotalColumnWidth<R>(columns: Column<R>[]): number {\n  return columns.reduce((acc, c) => acc + (c.width || 0), 0);\n}\n\nexport function recalculate<R>(metrics: Metrics<R>): ColumnMetrics<R> {\n  // clone columns so we can safely edit them:\n  const columns = cloneColumns(metrics.columns);\n  // compute width for columns which specify width\n  setColumnWidths(columns, metrics.totalWidth);\n\n  const width = getTotalColumnWidth(columns);\n  const unallocatedWidth = metrics.totalWidth - width - getScrollbarSize();\n\n  // compute width for columns which doesn't specify width\n  setDefferedColumnWidths(columns, unallocatedWidth, metrics.minColumnWidth);\n\n  // compute left offset\n  setColumnOffsets(columns);\n\n  const frozenColumns = columns.filter(c => isFrozen(c));\n  const nonFrozenColumns = columns.filter(c => !isFrozen(c));\n  const calculatedColumns = frozenColumns.concat(nonFrozenColumns) as CalculatedColumn<R>[];\n  calculatedColumns.forEach((c, i) => c.idx = i);\n  return {\n    width,\n    columns: calculatedColumns,\n    totalWidth: metrics.totalWidth,\n    totalColumnWidth: getTotalColumnWidth(columns),\n    minColumnWidth: metrics.minColumnWidth\n  };\n}\n\n/**\n * Update column metrics calculation by resizing a column.\n */\nexport function resizeColumn<R>(metrics: ColumnMetrics<R>, index: number, width: number): ColumnMetrics<R> {\n  const updatedColumn = { ...metrics.columns[index] };\n  updatedColumn.width = Math.max(width, metrics.minColumnWidth);\n  const updatedMetrics = { ...metrics };\n  updatedMetrics.columns = [...metrics.columns];\n  updatedMetrics.columns.splice(index, 1, updatedColumn);\n\n  return recalculate(updatedMetrics);\n}\n\ntype ColumnComparer<R> = (colA: Column<R>, colB: Column<R>) => boolean;\n\nfunction compareEachColumn<R>(prevColumns: ColumnList<R>, nextColumns: ColumnList<R>, isSameColumn: ColumnComparer<R>): boolean {\n  if (getSize(prevColumns) !== getSize(nextColumns)) return false;\n\n  const keys = new Set<keyof R>();\n  const prevColumnsMap = new Map<keyof R, Column<R>>();\n  const nextColumnsMap = new Map<keyof R, Column<R>>();\n\n  for (const column of prevColumns) {\n    keys.add(column.key);\n    prevColumnsMap.set(column.key, column);\n  }\n\n  for (const column of nextColumns) {\n    keys.add(column.key);\n    nextColumnsMap.set(column.key, column);\n  }\n\n  if (keys.size > prevColumnsMap.size) return false;\n\n  for (const key of keys) {\n    if (!prevColumnsMap.has(key) || !nextColumnsMap.has(key)) return false;\n    const prevColumn = prevColumnsMap.get(key) as Column<R>;\n    const nextColumn = nextColumnsMap.get(key) as Column<R>;\n    if (!isSameColumn(prevColumn, nextColumn)) return false;\n  }\n\n  return true;\n}\n\nexport function sameColumns<R>(prevColumns: ColumnList<R>, nextColumns: ColumnList<R>, isSameColumn: ColumnComparer<R>): boolean {\n  if (isColumnsImmutable(prevColumns) && isColumnsImmutable(nextColumns)) {\n    return prevColumns === nextColumns;\n  }\n\n  return compareEachColumn(prevColumns, nextColumns, isSameColumn);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}