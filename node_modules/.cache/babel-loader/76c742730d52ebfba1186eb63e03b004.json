{"ast":null,"code":"import { __read, __spread } from \"tslib\";\n\nvar EventBus =\n/** @class */\nfunction () {\n  function EventBus() {\n    this.subscribers = new Map();\n  }\n\n  EventBus.prototype.subscribe = function (type, handler) {\n    if (!this.subscribers.has(type)) {\n      this.subscribers.set(type, new Set());\n    }\n\n    var handlers = this.subscribers.get(type);\n    handlers.add(handler);\n    return function () {\n      handlers.delete(handler);\n    };\n  };\n\n  EventBus.prototype.dispatch = function (type) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var handlers = this.subscribers.get(type);\n\n    if (handlers) {\n      // handler needed a type assertion to fix type bug\n      handlers.forEach(function (handler) {\n        return handler.apply(void 0, __spread(args));\n      });\n    }\n  };\n\n  return EventBus;\n}();\n\nexport default EventBus;","map":{"version":3,"sources":["../../src/masks/EventBus.ts"],"names":[],"mappings":";;AAaA,IAAA,QAAA;AAAA;AAAA,YAAA;AAAA,WAAA,QAAA,GAAA;AACW,SAAA,WAAA,GAAc,IAAI,GAAJ,EAAd;AAsBV;;AApBC,EAAA,QAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAA+B,IAA/B,EAAwC,OAAxC,EAA4D;AAC1D,QAAI,CAAC,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAL,EAAiC;AAC/B,WAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,EAA2B,IAAI,GAAJ,EAA3B;AACD;;AAED,QAAM,QAAQ,GAAG,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAjB;AACA,IAAA,QAAQ,CAAC,GAAT,CAAa,OAAb;AAEA,WAAO,YAAA;AACL,MAAA,QAAQ,CAAC,MAAT,CAAgB,OAAhB;AACD,KAFD;AAGD,GAXD;;AAaA,EAAA,QAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAA8B,IAA9B,EAAqC;AAAE,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAgC;AAAhC,MAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACrC,QAAM,QAAQ,GAAG,KAAK,WAAL,CAAiB,GAAjB,CAAqB,IAArB,CAAjB;;AACA,QAAI,QAAJ,EAAc;AACZ;AACA,MAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,OAAA,EAAO;AAAI,eAAC,OAAsD,CAAA,KAAtD,CAAsD,KAAA,CAAtD,EAAsD,QAAA,CAAvD,IAAuD,CAAtD,CAAD;AAAgE,OAA5F;AACD;AACF,GAND;;AAOF,SAAA,QAAA;AAAC,CAvBD,EAAA","sourcesContent":["import { Position } from '../common/types';\n\ninterface EventMap {\n  SELECT_CELL(cell: Position, openEditor?: boolean): void;\n  SELECT_START(selectedPosition: Position): void;\n  SELECT_UPDATE(cellPosition: Position, isFromKeyboard?: boolean, callback?: () => void): void;\n  SELECT_END(): void;\n  DRAG_ENTER(overRowIdx: number): void;\n  SCROLL_TO_COLUMN(idx: number): void;\n}\n\ntype EventName = keyof EventMap;\n\nexport default class EventBus {\n  readonly subscribers = new Map<EventName, Set<EventMap[EventName]>>();\n\n  subscribe<T extends EventName>(type: T, handler: EventMap[T]) {\n    if (!this.subscribers.has(type)) {\n      this.subscribers.set(type, new Set());\n    }\n\n    const handlers = this.subscribers.get(type)!;\n    handlers.add(handler);\n\n    return () => {\n      handlers.delete(handler);\n    };\n  }\n\n  dispatch<T extends EventName>(type: T, ...args: Parameters<EventMap[T]>) {\n    const handlers = this.subscribers.get(type);\n    if (handlers) {\n      // handler needed a type assertion to fix type bug\n      handlers.forEach(handler => (handler as (...args: Parameters<EventMap[T]>) => void)(...args));\n    }\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}