{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\TitleOpinion\\\\components\\\\GeneralInfoForm.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport { TitleOpinionContext } from \"../TitleOpinionContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { Grid } from \"@material-ui/core\";\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\nimport stateNamesAb from \"../../Navigation/components/Utils/USAStates\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport useQueryCountiesByState from \"../../../graphQL/useQueryCountiesByState\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    \"& > *\": {\n      margin: theme.spacing(1)\n    }\n  },\n  GIWrapper: {\n    width: \"100%\",\n    padding: \"20px\",\n    maxWidth: \"1200px !important\"\n  },\n  maxWidth: {\n    width: \"100%\"\n  },\n  logo: {\n    maxWidth: \"94%\",\n    maxHeight: \"56px\"\n  },\n  logoGrid: {\n    height: \"72px\"\n  }\n}));\nexport default function GeneralInfoForm() {\n  const [stateTitleOpinion, setStateTitleOpinion] = useContext(TitleOpinionContext);\n  const {\n    TOData\n  } = stateTitleOpinion; // useEffect(() => {\n  //   ////////////////query all projects and clients from the logged user;\n  // }, []);\n\n  let shortStateName = \"\";\n  let USAstates = stateNamesAb.map(state => {\n    if (state[1] === TOData.state) {\n      shortStateName = state[0];\n    }\n\n    return state[1];\n  });\n  const [queryCounties, {\n    data\n  }] = useQueryCountiesByState(shortStateName);\n  const counties = data && data.counties ? data.counties.map(element => {\n    return element.county;\n  }) : []; ///////fetching counties when the USAstate change\n\n  useEffect(() => {\n    if (TOData.state !== \"\") {\n      queryCounties();\n    }\n  }, [stateTitleOpinion.TOData.state]);\n  let classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: `${classes.root} ${classes.GIWrapper}`,\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    className: classes.maxWidth,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    xs: 12,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: classes.maxWidth,\n    label: \"Client\",\n    variant: \"outlined\",\n    value: TOData.client,\n    onChange: e => {\n      setStateTitleOpinion({ ...stateTitleOpinion,\n        edited: true,\n        TOData: { ...TOData,\n          client: e.target.value\n        }\n      });\n    },\n    id: \"clientInput\",\n    onClick: e => {\n      e.preventDefault();\n      document.getElementById(\"clientInput\").focus();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    className: classes.logoGrid,\n    style: {\n      textAlign: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    className: classes.logo,\n    alt: \"onshore logo\",\n    src: \"http://nebula.wsimg.com/9b0c125775869dac3257ba77bac0a8f5?AccessKeyId=8231CD0B34125240677C&disposition=0&alloworigin=1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: classes.maxWidth,\n    label: \"Project\",\n    variant: \"outlined\",\n    value: TOData.project,\n    onChange: e => {\n      setStateTitleOpinion({ ...stateTitleOpinion,\n        edited: true,\n        TOData: { ...TOData,\n          project: e.target.value\n        }\n      });\n    },\n    id: \"projectInput\",\n    onClick: e => {\n      e.preventDefault();\n      document.getElementById(\"projectInput\").focus();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    className: classes.maxWidth,\n    options: USAstates,\n    getOptionLabel: option => option,\n    autoComplete: true,\n    autoSelect: true,\n    disableClearable: true,\n    includeInputInList: true,\n    value: TOData.state,\n    onChange: (e, newValue) => {\n      e.preventDefault();\n      setStateTitleOpinion({ ...stateTitleOpinion,\n        edited: true,\n        TOData: { ...TOData,\n          state: newValue === null ? \"\" : newValue,\n          county: \"\"\n        }\n      });\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"State\",\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: classes.maxWidth,\n    label: \"Legal Description\",\n    multiline: true,\n    variant: \"outlined\",\n    value: TOData.legalDescription,\n    onChange: e => {\n      setStateTitleOpinion({ ...stateTitleOpinion,\n        edited: true,\n        TOData: { ...TOData,\n          legalDescription: e.target.value\n        }\n      });\n    },\n    id: \"legalDesc\",\n    onClick: e => {\n      e.preventDefault();\n      document.getElementById(\"legalDesc\").focus();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    className: classes.maxWidth,\n    options: counties,\n    getOptionLabel: option => option,\n    autoComplete: true,\n    autoSelect: true,\n    disableClearable: true,\n    includeInputInList: true,\n    value: TOData.county,\n    disabled: counties.length === 0,\n    onChange: (e, newValue) => {\n      setStateTitleOpinion({ ...stateTitleOpinion,\n        edited: true,\n        TOData: { ...TOData,\n          county: newValue === null ? \"\" : newValue\n        }\n      });\n    },\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      label: \"County\",\n      variant: \"outlined\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: classes.maxWidth,\n    label: \"Prepared By\",\n    variant: \"outlined\",\n    value: TOData.preparedBy,\n    onChange: e => {\n      setStateTitleOpinion({ ...stateTitleOpinion,\n        edited: true,\n        TOData: { ...TOData,\n          preparedBy: e.target.value\n        }\n      });\n    },\n    id: \"preparedBy\",\n    onClick: e => {\n      e.preventDefault();\n      document.getElementById(\"preparedBy\").focus();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(KeyboardDatePicker, {\n    label: \"Certified Date\",\n    className: classes.maxWidth,\n    inputVariant: \"outlined\",\n    autoOk: true,\n    variant: \"inline\",\n    value: TOData.certifiedDate,\n    onChange: date => {\n      setStateTitleOpinion({ ...stateTitleOpinion,\n        edited: true,\n        TOData: { ...TOData,\n          certifiedDate: date.format(\"MM-DD-YYYY\")\n        }\n      });\n    },\n    format: \"MM-DD-YYYY\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  })))));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/TitleOpinion/components/GeneralInfoForm.js"],"names":["React","useContext","useEffect","TitleOpinionContext","makeStyles","TextField","Grid","KeyboardDatePicker","stateNamesAb","Autocomplete","useQueryCountiesByState","useStyles","theme","root","margin","spacing","GIWrapper","width","padding","maxWidth","logo","maxHeight","logoGrid","height","GeneralInfoForm","stateTitleOpinion","setStateTitleOpinion","TOData","shortStateName","USAstates","map","state","queryCounties","data","counties","element","county","classes","client","e","edited","target","value","preventDefault","document","getElementById","focus","textAlign","project","option","newValue","params","legalDescription","length","preparedBy","certifiedDate","date","format"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport { TitleOpinionContext } from \"../TitleOpinionContext\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { KeyboardDatePicker } from \"@material-ui/pickers\";\r\nimport stateNamesAb from \"../../Navigation/components/Utils/USAStates\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport useQueryCountiesByState from \"../../../graphQL/useQueryCountiesByState\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    \"& > *\": {\r\n      margin: theme.spacing(1)\r\n    }\r\n  },\r\n  GIWrapper: {\r\n    width: \"100%\",\r\n    padding: \"20px\",\r\n    maxWidth: \"1200px !important\"\r\n  },\r\n  maxWidth: { width: \"100%\" },\r\n  logo: {\r\n    maxWidth: \"94%\",\r\n    maxHeight: \"56px\"\r\n  },\r\n  logoGrid: {\r\n    height: \"72px\"\r\n  }\r\n}));\r\n\r\nexport default function GeneralInfoForm() {\r\n  const [stateTitleOpinion, setStateTitleOpinion] = useContext(\r\n    TitleOpinionContext\r\n  );\r\n  const { TOData } = stateTitleOpinion;\r\n\r\n  // useEffect(() => {\r\n  //   ////////////////query all projects and clients from the logged user;\r\n  // }, []);\r\n\r\n  let shortStateName = \"\";\r\n  let USAstates = stateNamesAb.map(state => {\r\n    if (state[1] === TOData.state) {\r\n      shortStateName = state[0];\r\n    }\r\n    return state[1];\r\n  });\r\n\r\n  const [queryCounties, { data }] = useQueryCountiesByState(shortStateName);\r\n  const counties =\r\n    data && data.counties\r\n      ? data.counties.map(element => {\r\n          return element.county;\r\n        })\r\n      : [];\r\n\r\n  ///////fetching counties when the USAstate change\r\n  useEffect(() => {\r\n    if (TOData.state !== \"\") {\r\n      queryCounties();\r\n    }\r\n  }, [stateTitleOpinion.TOData.state]);\r\n\r\n  let classes = useStyles();\r\n\r\n  return (\r\n    <form\r\n      className={`${classes.root} ${classes.GIWrapper}`}\r\n      noValidate\r\n      autoComplete=\"off\"\r\n    >\r\n      <Grid container className={classes.maxWidth} spacing={1}>\r\n        <Grid container item xs={12} spacing={2}>\r\n          <Grid item xs={8}>\r\n            <TextField\r\n              className={classes.maxWidth}\r\n              label=\"Client\"\r\n              variant=\"outlined\"\r\n              value={TOData.client}\r\n              onChange={e => {\r\n                setStateTitleOpinion({\r\n                  ...stateTitleOpinion,\r\n                  edited: true,\r\n                  TOData: { ...TOData, client: e.target.value }\r\n                });\r\n              }}\r\n              id=\"clientInput\"\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                document.getElementById(\"clientInput\").focus();\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            xs={4}\r\n            className={classes.logoGrid}\r\n            style={{ textAlign: \"center\" }}\r\n          >\r\n            <img\r\n              className={classes.logo}\r\n              alt=\"onshore logo\"\r\n              src=\"http://nebula.wsimg.com/9b0c125775869dac3257ba77bac0a8f5?AccessKeyId=8231CD0B34125240677C&disposition=0&alloworigin=1\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={8}>\r\n            <TextField\r\n              className={classes.maxWidth}\r\n              label=\"Project\"\r\n              variant=\"outlined\"\r\n              value={TOData.project}\r\n              onChange={e => {\r\n                setStateTitleOpinion({\r\n                  ...stateTitleOpinion,\r\n                  edited: true,\r\n                  TOData: { ...TOData, project: e.target.value }\r\n                });\r\n              }}\r\n              id=\"projectInput\"\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                document.getElementById(\"projectInput\").focus();\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Autocomplete\r\n              className={classes.maxWidth}\r\n              options={USAstates}\r\n              getOptionLabel={option => option}\r\n              autoComplete\r\n              autoSelect\r\n              disableClearable\r\n              includeInputInList\r\n              value={TOData.state}\r\n              onChange={(e, newValue) => {\r\n                e.preventDefault();\r\n\r\n                setStateTitleOpinion({\r\n                  ...stateTitleOpinion,\r\n                  edited: true,\r\n                  TOData: {\r\n                    ...TOData,\r\n                    state: newValue === null ? \"\" : newValue,\r\n                    county: \"\"\r\n                  }\r\n                });\r\n              }}\r\n              renderInput={params => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"State\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={8}>\r\n            <TextField\r\n              className={classes.maxWidth}\r\n              label=\"Legal Description\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={TOData.legalDescription}\r\n              onChange={e => {\r\n                setStateTitleOpinion({\r\n                  ...stateTitleOpinion,\r\n                  edited: true,\r\n                  TOData: { ...TOData, legalDescription: e.target.value }\r\n                });\r\n              }}\r\n              id=\"legalDesc\"\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                document.getElementById(\"legalDesc\").focus();\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <Autocomplete\r\n              className={classes.maxWidth}\r\n              options={counties}\r\n              getOptionLabel={option => option}\r\n              autoComplete\r\n              autoSelect\r\n              disableClearable\r\n              includeInputInList\r\n              value={TOData.county}\r\n              disabled={counties.length === 0}\r\n              onChange={(e, newValue) => {\r\n                setStateTitleOpinion({\r\n                  ...stateTitleOpinion,\r\n                  edited: true,\r\n                  TOData: {\r\n                    ...TOData,\r\n                    county: newValue === null ? \"\" : newValue\r\n                  }\r\n                });\r\n              }}\r\n              renderInput={params => (\r\n                <TextField\r\n                  {...params}\r\n                  label=\"County\"\r\n                  variant=\"outlined\"\r\n                  fullWidth\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={8}>\r\n            <TextField\r\n              className={classes.maxWidth}\r\n              label=\"Prepared By\"\r\n              variant=\"outlined\"\r\n              value={TOData.preparedBy}\r\n              onChange={e => {\r\n                setStateTitleOpinion({\r\n                  ...stateTitleOpinion,\r\n                  edited: true,\r\n                  TOData: { ...TOData, preparedBy: e.target.value }\r\n                });\r\n              }}\r\n              id=\"preparedBy\"\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                document.getElementById(\"preparedBy\").focus();\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={4}>\r\n            <KeyboardDatePicker\r\n              label=\"Certified Date\"\r\n              className={classes.maxWidth}\r\n              inputVariant=\"outlined\"\r\n              autoOk\r\n              variant=\"inline\"\r\n              value={TOData.certifiedDate}\r\n              onChange={date => {\r\n                setStateTitleOpinion({\r\n                  ...stateTitleOpinion,\r\n                  edited: true,\r\n                  TOData: {\r\n                    ...TOData,\r\n                    certifiedDate: date.format(\"MM-DD-YYYY\")\r\n                  }\r\n                });\r\n              }}\r\n              format=\"MM-DD-YYYY\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}"]},"metadata":{},"sourceType":"module"}