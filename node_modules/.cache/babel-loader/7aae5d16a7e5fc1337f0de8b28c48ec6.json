{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterFormProduction.js\";\nimport React, { useState, useContext, useEffect, useCallback } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { NavigationContext } from \"../NavigationContext\";\nimport ProdMinMax from \"./ProdMinMax\";\nimport Grid from \"@material-ui/core/Grid\";\nconst useStyles = makeStyles(theme => ({\n  loader: {\n    marginLeft: \"40%\",\n    marginTop: \"25%\"\n  },\n  displayNone: {\n    display: \"none\"\n  }\n}));\nconst listOptions = [{\n  name: \"Cumulative  -  Oil\",\n  filterName: \"filterCumulativeOil\",\n  id: \"cumulativeOil\",\n  display: false\n}, {\n  name: \"Cumulative  -  Gas\",\n  filterName: \"filterCumulativeGas\",\n  id: \"cumulativeGas\",\n  display: false\n}, {\n  name: \"Cumulative  -  Water\",\n  filterName: \"filterCumulativeWater\",\n  id: \"cumulativeWater\",\n  display: false\n}, {\n  name: \"First Month  -  Oil\",\n  filterName: \"filterFirstMonthOil\",\n  id: \"firstMonthOil\",\n  display: false\n}, {\n  name: \"First Month  -  Gas\",\n  filterName: \"filterFirstMonthGas\",\n  id: \"firstMonthGas\",\n  display: false\n}, {\n  name: \"First Month  -  Water\",\n  filterName: \"filterFirstMonthWater\",\n  id: \"firstMonthWater\",\n  display: false\n}, {\n  name: \"First Three Months  -  Oil\",\n  filterName: \"filterFirstThreeMonthOil\",\n  id: \"firstThreeMonthOil\",\n  display: false\n}, {\n  name: \"First Three Months  -  Gas\",\n  filterName: \"filterFirstThreeMonthGas\",\n  id: \"firstThreeMonthGas\",\n  display: false\n}, {\n  name: \"First Three Months  -  Water\",\n  filterName: \"filterFirstThreeMonthWater\",\n  id: \"firstThreeMonthWater\",\n  display: false\n}, {\n  name: \"First Six Months  -  Oil\",\n  filterName: \"filterFirstSixMonthOil\",\n  id: \"firstSixMonthOil\",\n  display: false\n}, {\n  name: \"First Six Months  -  Gas\",\n  filterName: \"filterFirstSixMonthGas\",\n  id: \"firstSixMonthGas\",\n  display: false\n}, {\n  name: \"First Six Months  -  Water\",\n  filterName: \"filterFirstSixMonthWater\",\n  id: \"firstSixMonthWater\",\n  display: false\n}, {\n  name: \"First Twelve Months  -  Oil\",\n  filterName: \"filterFirstTwelveMonthOil\",\n  id: \"firstTwelveMonthOil\",\n  display: false\n}, {\n  name: \"First Twelve Months  -  Gas\",\n  filterName: \"filterFirstTwelveMonthGas\",\n  id: \"firstTwelveMonthGas\",\n  display: false\n}, {\n  name: \"First Twelve Months  -  Water\",\n  filterName: \"filterFirstTwelveMonthWater\",\n  id: \"firstTwelveMonthWater\",\n  display: false\n}, {\n  name: \"Last Month  -  Oil\",\n  filterName: \"filterLastMonthOil\",\n  id: \"lastMonthOil\",\n  display: false\n}, {\n  name: \"Last Month  -  Gas\",\n  filterName: \"filterLastMonthGas\",\n  id: \"lastMonthGas\",\n  display: false\n}, {\n  name: \"Last Month  -  Water\",\n  filterName: \"filterLastMonthWater\",\n  id: \"lastMonthWater\",\n  display: false\n}, {\n  name: \"Last Six Months  -  Oil\",\n  filterName: \"filterLastSixMonthOil\",\n  id: \"lastSixMonthOil\",\n  display: false\n}, {\n  name: \"Last Six Months  -  Gas\",\n  filterName: \"filterLastSixMonthGas\",\n  id: \"lastSixMonthGas\",\n  display: false\n}, {\n  name: \"Last Six Months  -  Water\",\n  filterName: \"filterLastSixMonthWater\",\n  id: \"lastSixMonthWater\",\n  display: false\n}, {\n  name: \"Last Twelve Months  -  Oil\",\n  filterName: \"filterLastTwelveMonthOil\",\n  id: \"lastTwelveMonthOil\",\n  display: false\n}, {\n  name: \"Last Twelve Months  -  Gas\",\n  filterName: \"filterLastTwelveMonthGas\",\n  id: \"lastTwelveMonthGas\",\n  display: false\n}, {\n  name: \"Last Twelve Months  -  Water\",\n  filterName: \"filterLastTwelveMonthWater\",\n  id: \"lastTwelveMonthWater\",\n  display: false\n}];\nexport default function FilterFormProduction() {\n  const classes = useStyles();\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [prodOptions, setProdOptions] = useState(stateNav.prodOptions ? stateNav.prodOptions : null);\n  const [list, setList] = useState([]);\n  const [optionsCopy, setOptionsCopy] = useState(null);\n  useEffect(() => {\n    if (!optionsCopy) {\n      const listOptionsCopy = [...listOptions];\n      setOptionsCopy(listOptionsCopy);\n    }\n  }, [optionsCopy]);\n\n  const handleSelectedValueToDisplay = value => {\n    setProdOptions(value);\n    setStateNav(stateNav => ({ ...stateNav,\n      prodOptions: value\n    }));\n  };\n\n  useEffect(() => {\n    if (stateNav.prodOptions && optionsCopy) {\n      const check = optionsCopy.map(val => val);\n      const removeFilters = check.filter(name => !stateNav.prodOptions.includes(name.name));\n      removeFilters.forEach(element => {\n        setStateNav(stateNav => ({ ...stateNav,\n          [element.filterName]: null\n        }));\n      });\n    }\n  }, [optionsCopy, setStateNav, stateNav.prodOptions]);\n  useEffect(() => {\n    if (optionsCopy) {\n      let compare = [];\n      let optionUpdate;\n      let elementUpdate; // let matchName = prodOptions.map((option) => option);\n\n      let matchName = [...prodOptions];\n      matchName.forEach(element => {\n        compare.push(element);\n      });\n      const check = optionsCopy.filter(name => compare.includes(name.name));\n      optionsCopy.forEach((element, index) => {\n        check.forEach(option => {\n          if (element.name === option.name) {\n            optionUpdate = option.name;\n            elementUpdate = option.name;\n          }\n        });\n      });\n\n      if (optionUpdate && elementUpdate) {\n        const updateState = optionsCopy.map(item => compare.includes(item.name) ? { ...item,\n          display: true\n        } : item);\n        setList(updateState);\n      } else {\n        const updateState = optionsCopy.map(item => compare.includes(!item.name) ? { ...item,\n          display: false\n        } : item);\n        setList(updateState);\n      }\n    }\n  }, [optionsCopy, prodOptions, stateNav.prodOptions]);\n  const renderFMW = list.filter(item => item.display === true).map(item => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ProdMinMax, {\n    key: item.name,\n    id: item.id,\n    name: item.name,\n    filter: item.filterName,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 9\n    }\n  })));\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    spacing: 2,\n    style: {\n      padding: \"8px\",\n      width: \"100%\",\n      margin: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    ChipProps: {\n      color: \"secondary\"\n    },\n    multiple: true,\n    options: listOptions.map(option => option.name),\n    disableListWrap: true,\n    defaultValue: stateNav.prodOptions,\n    onChange: (event, value) => handleSelectedValueToDisplay(value),\n    renderInput: params => /*#__PURE__*/React.createElement(TextField // className={classes.autoComplete}\n    , Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"Production Filters\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 13\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }\n  })), renderFMW);\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterFormProduction.js"],"names":["React","useState","useContext","useEffect","useCallback","makeStyles","TextField","Autocomplete","NavigationContext","ProdMinMax","Grid","useStyles","theme","loader","marginLeft","marginTop","displayNone","display","listOptions","name","filterName","id","FilterFormProduction","classes","stateNav","setStateNav","prodOptions","setProdOptions","list","setList","optionsCopy","setOptionsCopy","listOptionsCopy","handleSelectedValueToDisplay","value","check","map","val","removeFilters","filter","includes","forEach","element","compare","optionUpdate","elementUpdate","matchName","push","index","option","updateState","item","renderFMW","padding","width","margin","color","event","params"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\nimport ProdMinMax from \"./ProdMinMax\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  loader: {\r\n    marginLeft: \"40%\",\r\n    marginTop: \"25%\",\r\n  },\r\n  displayNone: {\r\n    display: \"none\",\r\n  },\r\n}));\r\n\r\nconst listOptions = [\r\n  {\r\n    name: \"Cumulative  -  Oil\",\r\n    filterName: \"filterCumulativeOil\",\r\n    id: \"cumulativeOil\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Cumulative  -  Gas\",\r\n    filterName: \"filterCumulativeGas\",\r\n    id: \"cumulativeGas\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Cumulative  -  Water\",\r\n    filterName: \"filterCumulativeWater\",\r\n    id: \"cumulativeWater\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Month  -  Oil\",\r\n    filterName: \"filterFirstMonthOil\",\r\n    id: \"firstMonthOil\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Month  -  Gas\",\r\n    filterName: \"filterFirstMonthGas\",\r\n    id: \"firstMonthGas\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Month  -  Water\",\r\n    filterName: \"filterFirstMonthWater\",\r\n    id: \"firstMonthWater\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Three Months  -  Oil\",\r\n    filterName: \"filterFirstThreeMonthOil\",\r\n    id: \"firstThreeMonthOil\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Three Months  -  Gas\",\r\n    filterName: \"filterFirstThreeMonthGas\",\r\n    id: \"firstThreeMonthGas\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Three Months  -  Water\",\r\n    filterName: \"filterFirstThreeMonthWater\",\r\n    id: \"firstThreeMonthWater\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Six Months  -  Oil\",\r\n    filterName: \"filterFirstSixMonthOil\",\r\n    id: \"firstSixMonthOil\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Six Months  -  Gas\",\r\n    filterName: \"filterFirstSixMonthGas\",\r\n    id: \"firstSixMonthGas\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Six Months  -  Water\",\r\n    filterName: \"filterFirstSixMonthWater\",\r\n    id: \"firstSixMonthWater\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Twelve Months  -  Oil\",\r\n    filterName: \"filterFirstTwelveMonthOil\",\r\n    id: \"firstTwelveMonthOil\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Twelve Months  -  Gas\",\r\n    filterName: \"filterFirstTwelveMonthGas\",\r\n    id: \"firstTwelveMonthGas\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"First Twelve Months  -  Water\",\r\n    filterName: \"filterFirstTwelveMonthWater\",\r\n    id: \"firstTwelveMonthWater\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Last Month  -  Oil\",\r\n    filterName: \"filterLastMonthOil\",\r\n    id: \"lastMonthOil\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Last Month  -  Gas\",\r\n    filterName: \"filterLastMonthGas\",\r\n    id: \"lastMonthGas\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Last Month  -  Water\",\r\n    filterName: \"filterLastMonthWater\",\r\n    id: \"lastMonthWater\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Last Six Months  -  Oil\",\r\n    filterName: \"filterLastSixMonthOil\",\r\n    id: \"lastSixMonthOil\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Last Six Months  -  Gas\",\r\n    filterName: \"filterLastSixMonthGas\",\r\n    id: \"lastSixMonthGas\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Last Six Months  -  Water\",\r\n    filterName: \"filterLastSixMonthWater\",\r\n    id: \"lastSixMonthWater\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Last Twelve Months  -  Oil\",\r\n    filterName: \"filterLastTwelveMonthOil\",\r\n    id: \"lastTwelveMonthOil\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Last Twelve Months  -  Gas\",\r\n    filterName: \"filterLastTwelveMonthGas\",\r\n    id: \"lastTwelveMonthGas\",\r\n    display: false,\r\n  },\r\n  {\r\n    name: \"Last Twelve Months  -  Water\",\r\n    filterName: \"filterLastTwelveMonthWater\",\r\n    id: \"lastTwelveMonthWater\",\r\n    display: false,\r\n  },\r\n];\r\n\r\nexport default function FilterFormProduction() {\r\n  const classes = useStyles();\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [prodOptions, setProdOptions] = useState(\r\n    stateNav.prodOptions ? stateNav.prodOptions : null\r\n  );\r\n  const [list, setList] = useState([]);\r\n  const [optionsCopy, setOptionsCopy] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (!optionsCopy) {\r\n      const listOptionsCopy = [...listOptions];\r\n      setOptionsCopy(listOptionsCopy);\r\n    }\r\n  }, [optionsCopy]);\r\n\r\n  const handleSelectedValueToDisplay = (value) => {\r\n    setProdOptions(value);\r\n    setStateNav((stateNav) => ({\r\n      ...stateNav,\r\n      prodOptions: value,\r\n    }));\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (stateNav.prodOptions && optionsCopy) {\r\n      const check = optionsCopy.map((val) => val);\r\n\r\n      const removeFilters = check.filter(\r\n        (name) => !stateNav.prodOptions.includes(name.name)\r\n      );\r\n\r\n      removeFilters.forEach((element) => {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [element.filterName]: null,\r\n        }));\r\n      });\r\n    }\r\n  }, [optionsCopy, setStateNav, stateNav.prodOptions]);\r\n\r\n  useEffect(() => {\r\n    if (optionsCopy) {\r\n      let compare = [];\r\n      let optionUpdate;\r\n      let elementUpdate;\r\n      // let matchName = prodOptions.map((option) => option);\r\n      let matchName = [...prodOptions];\r\n      matchName.forEach((element) => {\r\n        compare.push(element);\r\n      });\r\n\r\n      const check = optionsCopy.filter((name) => compare.includes(name.name));\r\n      optionsCopy.forEach((element, index) => {\r\n        check.forEach((option) => {\r\n          if (element.name === option.name) {\r\n            optionUpdate = option.name;\r\n            elementUpdate = option.name;\r\n          }\r\n        });\r\n      });\r\n      if (optionUpdate && elementUpdate) {\r\n        const updateState = optionsCopy.map((item) =>\r\n          compare.includes(item.name) ? { ...item, display: true } : item\r\n        );\r\n        setList(updateState);\r\n      } else {\r\n        const updateState = optionsCopy.map((item) =>\r\n          compare.includes(!item.name) ? { ...item, display: false } : item\r\n        );\r\n        setList(updateState);\r\n      }\r\n    }\r\n  }, [optionsCopy, prodOptions, stateNav.prodOptions]);\r\n\r\n  const renderFMW = list\r\n    .filter((item) => item.display === true)\r\n    .map((item) => (\r\n      <Grid item sm={12}>\r\n        <ProdMinMax\r\n          key={item.name}\r\n          id={item.id}\r\n          name={item.name}\r\n          filter={item.filterName}\r\n        />\r\n      </Grid>\r\n    ));\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      spacing={2}\r\n      style={{ padding: \"8px\", width: \"100%\", margin: \"0\" }}\r\n    >\r\n      <Grid item sm={12}>\r\n        <Autocomplete\r\n          ChipProps={{ color: \"secondary\" }}\r\n          multiple\r\n          options={listOptions.map((option) => option.name)}\r\n          disableListWrap\r\n          defaultValue={stateNav.prodOptions}\r\n          onChange={(event, value) => handleSelectedValueToDisplay(value)}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              // className={classes.autoComplete}\r\n              {...params}\r\n              variant=\"outlined\"\r\n              label=\"Production Filters\"\r\n              fullWidth={true}\r\n            />\r\n          )}\r\n        />\r\n      </Grid>\r\n\r\n      {renderFMW}\r\n    </Grid>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}