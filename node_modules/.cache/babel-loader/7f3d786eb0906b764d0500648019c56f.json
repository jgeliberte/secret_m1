{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Profile\\\\ImageModalContent.js\";\nimport { Grid } from \"@material-ui/core\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Button from \"@material-ui/core/Button\";\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport React, { Fragment, useCallback, useContext, useEffect, useRef, useState } from \"react\";\nimport ReactCrop from \"react-image-crop\";\nimport \"react-image-crop/dist/ReactCrop.css\";\nimport { ProfileContext } from \"./ProfileContext\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    margin: 0 // padding: theme.spacing(2),\n\n  },\n  image: {\n    width: \"400px\" // height: \"300px\",\n\n  },\n  thumb: {\n    width: \"128px\",\n    height: \"128px\"\n  },\n  preview: {\n    width: \"100%\",\n    maxWidth: \"36ch\"\n  },\n  inline: {\n    display: \"inline\"\n  },\n  ptitle: {\n    paddingTop: 8,\n    paddingBottom: 8\n  },\n  actions: {\n    margin: 0,\n    padding: theme.spacing(1)\n  }\n}));\n\nconst getResizedCanvas = (canvas, newWidth, newHeight) => {\n  const tmpCanvas = document.createElement(\"canvas\");\n  tmpCanvas.width = newWidth;\n  tmpCanvas.height = newHeight;\n  const ctx = tmpCanvas.getContext(\"2d\");\n  ctx.drawImage(canvas, 0, 0, canvas.width, canvas.height, 0, 0, newWidth, newHeight);\n  return tmpCanvas;\n};\n\nfunction getCroppedImg(previewCanvas, crop) {\n  if (!crop || !previewCanvas) {\n    return;\n  }\n\n  const dpr = window.devicePixelRatio || 1;\n  const canvas = dpr !== 1 ? getResizedCanvas(previewCanvas, crop.width, crop.height) : previewCanvas;\n  return canvas.toDataURL(\"image/png\");\n}\n\nconst ImageModalContent = () => {\n  const classes = useStyles();\n  const imgRef = useRef(null);\n  const previewCanvasRef = useRef(null);\n  const [stateProfile, setStateProfile] = useContext(ProfileContext);\n  const [crop, setCrop] = useState({\n    unit: \"%\",\n    width: 70,\n    aspect: 1\n  });\n  const [completedCrop, setCompletedCrop] = useState(null);\n  const {\n    selectedImage,\n    fields: {\n      fullname,\n      displayname\n    }\n  } = stateProfile;\n  const onLoad = useCallback(img => {\n    imgRef.current = img;\n  }, []);\n  useEffect(() => {\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\n      return;\n    }\n\n    const image = imgRef.current;\n    const canvas = previewCanvasRef.current;\n    const crop = completedCrop;\n    const dpr = window.devicePixelRatio || 1;\n    const scaleX = image.naturalWidth / image.width;\n    const scaleY = image.naturalHeight / image.height;\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = crop.width * dpr;\n    canvas.height = crop.height * dpr;\n    ctx.drawImage(image, crop.x * scaleX, crop.y * scaleY, crop.width * scaleX, crop.height * scaleY, 0, 0, crop.width * dpr, crop.height * dpr);\n  }, [completedCrop]);\n\n  const handleSave = async () => {\n    const profileImage = await getCroppedImg(previewCanvasRef.current, completedCrop);\n    await setStateProfile({ ...stateProfile,\n      fields: { ...stateProfile.fields,\n        profileImage\n      },\n      isImageModalOpen: false\n    });\n  };\n\n  const handleClose = async () => {\n    imgRef.current = null;\n    await setStateProfile({ ...stateProfile,\n      selectedImage: null,\n      isImageModalOpen: false\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(MuiDialogContent, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 11\n    }\n  }, selectedImage ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(ReactCrop, {\n    src: selectedImage,\n    onImageLoaded: onLoad,\n    crop: crop,\n    onChange: c => setCrop(c),\n    onComplete: c => setCompletedCrop(c),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  })) : /*#__PURE__*/React.createElement(Skeleton, {\n    variant: \"rect\",\n    className: classes.image,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: classes.ptitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 13\n    }\n  }, \"Preview\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.preview,\n    elevation: 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    wrap: \"nowrap\",\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  }, previewCanvasRef ? /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: previewCanvasRef,\n    style: {\n      width: 64,\n      height: 64\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 21\n    }\n  }) : /*#__PURE__*/React.createElement(Avatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 21\n    }\n  }, fullname)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: true,\n    zeroMinWidth: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    noWrap: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 19\n    }\n  }, fullname), /*#__PURE__*/React.createElement(Typography, {\n    noWrap: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 19\n    }\n  }, displayname))))))), /*#__PURE__*/React.createElement(MuiDialogActions, {\n    style: {\n      root: classes.actions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outlined\",\n    onClick: handleClose,\n    color: \"primary\",\n    style: {\n      textTransform: \"none\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      textTransform: \"none\",\n      color: \"white\",\n      background: \"#0e5721\"\n    },\n    variant: \"outlined\",\n    onClick: handleSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, \"Save\")));\n};\n\nexport default ImageModalContent;","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Profile/ImageModalContent.js"],"names":["Grid","Avatar","Button","MuiDialogActions","MuiDialogContent","Paper","makeStyles","Typography","Skeleton","React","Fragment","useCallback","useContext","useEffect","useRef","useState","ReactCrop","ProfileContext","useStyles","theme","root","margin","image","width","thumb","height","preview","maxWidth","inline","display","ptitle","paddingTop","paddingBottom","actions","padding","spacing","getResizedCanvas","canvas","newWidth","newHeight","tmpCanvas","document","createElement","ctx","getContext","drawImage","getCroppedImg","previewCanvas","crop","dpr","window","devicePixelRatio","toDataURL","ImageModalContent","classes","imgRef","previewCanvasRef","stateProfile","setStateProfile","setCrop","unit","aspect","completedCrop","setCompletedCrop","selectedImage","fields","fullname","displayname","onLoad","img","current","scaleX","naturalWidth","scaleY","naturalHeight","x","y","handleSave","profileImage","isImageModalOpen","handleClose","c","textTransform","color","background"],"mappings":"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","sourcesContent":["import { Grid } from \"@material-ui/core\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport MuiDialogActions from \"@material-ui/core/DialogActions\";\r\nimport MuiDialogContent from \"@material-ui/core/DialogContent\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport React, {\r\n  Fragment,\r\n  useCallback,\r\n  useContext,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport ReactCrop from \"react-image-crop\";\r\nimport \"react-image-crop/dist/ReactCrop.css\";\r\nimport { ProfileContext } from \"./ProfileContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    margin: 0,\r\n    // padding: theme.spacing(2),\r\n  },\r\n  image: {\r\n    width: \"400px\",\r\n    // height: \"300px\",\r\n  },\r\n  thumb: {\r\n    width: \"128px\",\r\n    height: \"128px\",\r\n  },\r\n  preview: {\r\n    width: \"100%\",\r\n    maxWidth: \"36ch\",\r\n  },\r\n  inline: {\r\n    display: \"inline\",\r\n  },\r\n  ptitle: {\r\n    paddingTop: 8,\r\n    paddingBottom: 8,\r\n  },\r\n  actions: {\r\n    margin: 0,\r\n    padding: theme.spacing(1),\r\n  },\r\n}));\r\n\r\nconst getResizedCanvas = (canvas, newWidth, newHeight) => {\r\n  const tmpCanvas = document.createElement(\"canvas\");\r\n  tmpCanvas.width = newWidth;\r\n  tmpCanvas.height = newHeight;\r\n\r\n  const ctx = tmpCanvas.getContext(\"2d\");\r\n  ctx.drawImage(\r\n    canvas,\r\n    0,\r\n    0,\r\n    canvas.width,\r\n    canvas.height,\r\n    0,\r\n    0,\r\n    newWidth,\r\n    newHeight\r\n  );\r\n\r\n  return tmpCanvas;\r\n};\r\n\r\nfunction getCroppedImg(previewCanvas, crop) {\r\n  if (!crop || !previewCanvas) {\r\n    return;\r\n  }\r\n\r\n  const dpr = window.devicePixelRatio || 1;\r\n  const canvas =\r\n    dpr !== 1\r\n      ? getResizedCanvas(previewCanvas, crop.width, crop.height)\r\n      : previewCanvas;\r\n\r\n  return canvas.toDataURL(\"image/png\");\r\n}\r\n\r\nconst ImageModalContent = () => {\r\n  const classes = useStyles();\r\n  const imgRef = useRef(null);\r\n  const previewCanvasRef = useRef(null);\r\n  const [stateProfile, setStateProfile] = useContext(ProfileContext);\r\n  const [crop, setCrop] = useState({ unit: \"%\", width: 70, aspect: 1 });\r\n  const [completedCrop, setCompletedCrop] = useState(null);\r\n\r\n  const {\r\n    selectedImage,\r\n    fields: { fullname, displayname },\r\n  } = stateProfile;\r\n\r\n  const onLoad = useCallback((img) => {\r\n    imgRef.current = img;\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (!completedCrop || !previewCanvasRef.current || !imgRef.current) {\r\n      return;\r\n    }\r\n\r\n    const image = imgRef.current;\r\n    const canvas = previewCanvasRef.current;\r\n    const crop = completedCrop;\r\n    const dpr = window.devicePixelRatio || 1;\r\n\r\n    const scaleX = image.naturalWidth / image.width;\r\n    const scaleY = image.naturalHeight / image.height;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    canvas.width = crop.width * dpr;\r\n    canvas.height = crop.height * dpr;\r\n\r\n    ctx.drawImage(\r\n      image,\r\n      crop.x * scaleX,\r\n      crop.y * scaleY,\r\n      crop.width * scaleX,\r\n      crop.height * scaleY,\r\n      0,\r\n      0,\r\n      crop.width * dpr,\r\n      crop.height * dpr\r\n    );\r\n  }, [completedCrop]);\r\n\r\n  const handleSave = async () => {\r\n    const profileImage = await getCroppedImg(\r\n      previewCanvasRef.current,\r\n      completedCrop\r\n    );\r\n    await setStateProfile({\r\n      ...stateProfile,\r\n      fields: {\r\n        ...stateProfile.fields,\r\n        profileImage\r\n      },\r\n      isImageModalOpen: false,\r\n    });\r\n  };\r\n\r\n  const handleClose = async () => {\r\n    imgRef.current = null;\r\n    await setStateProfile({\r\n      ...stateProfile,\r\n      selectedImage: null,\r\n      isImageModalOpen: false,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <MuiDialogContent className={classes.root}>\r\n        <Grid container direction=\"column\">\r\n          <Grid item>\r\n            {selectedImage ? (\r\n              <div className={classes.image}>\r\n                <ReactCrop\r\n                  src={selectedImage}\r\n                  onImageLoaded={onLoad}\r\n                  crop={crop}\r\n                  onChange={(c) => setCrop(c)}\r\n                  onComplete={(c) => setCompletedCrop(c)}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <Skeleton variant=\"rect\" className={classes.image} />\r\n            )}\r\n          </Grid>\r\n          <Grid item className={classes.ptitle}>\r\n            <Typography variant=\"body2\">Preview</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Paper className={classes.preview} elevation={0}>\r\n              <Grid container wrap=\"nowrap\" spacing={2}>\r\n                <Grid item>\r\n                  {previewCanvasRef ? (\r\n                    <canvas\r\n                      ref={previewCanvasRef}\r\n                      style={{\r\n                        width: 64,\r\n                        height: 64,\r\n                      }}\r\n                    />\r\n                  ) : (\r\n                    <Avatar>{fullname}</Avatar>\r\n                  )}\r\n                </Grid>\r\n                <Grid item xs zeroMinWidth>\r\n                  <Typography noWrap>{fullname}</Typography>\r\n                  <Typography noWrap>{displayname}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Paper>\r\n          </Grid>\r\n        </Grid>\r\n      </MuiDialogContent>\r\n      <MuiDialogActions style={{ root: classes.actions }}>\r\n        <Button\r\n          variant=\"outlined\"\r\n          onClick={handleClose}\r\n          color=\"primary\"\r\n          style={{ textTransform: \"none\" }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          style={{\r\n            textTransform: \"none\",\r\n            color: \"white\",\r\n            background: \"#0e5721\",\r\n          }}\r\n          variant=\"outlined\"\r\n          onClick={handleSave}\r\n        >\r\n          Save\r\n        </Button>\r\n      </MuiDialogActions>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default ImageModalContent;\r\n"]},"metadata":{},"sourceType":"module"}