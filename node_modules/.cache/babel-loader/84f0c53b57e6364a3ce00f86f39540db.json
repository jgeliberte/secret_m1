{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterCountyName.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { NavigationContext } from \"../NavigationContext\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport { COUNTIES } from \"../../../graphQL/useQueryCountiesBySta\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    minWidth: 249,\n    color: \"black\"\n  },\n  loader: {\n    marginLeft: \"50%\"\n  },\n  autoC: {\n    \"& input\": {\n      color: \"#17AADD\"\n    }\n  }\n}));\nexport default function FilterCountyName() {\n  const classes = useStyles();\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [countyList, setCountyList] = useState([]);\n  const [getCounties, {\n    loading,\n    data\n  }] = useLazyQuery(COUNTIES);\n  useEffect(() => {\n    if (stateNav.stateName) {\n      getCounties({\n        variables: {\n          state: stateNav.stateName\n        }\n      });\n    } else {\n      setCountyList([]);\n    }\n  }, [stateNav.stateName]);\n  const nullDesc = {\n    GrId1: null,\n    GrId2: null,\n    GrId3: null,\n    GrId4: null,\n    GrId5: null,\n    filterGeography: null\n  };\n  useEffect(() => {\n    if (data) {\n      if (data.counties) {\n        setCountyList(data.counties);\n\n        const countyBelongState = () => {\n          for (let i = 0; i < data.counties.length; i++) {\n            if (data.counties[i].county === stateNav.countyName) return true;\n          }\n\n          return false;\n        };\n\n        if (stateNav.countyName === false && !countyBelongState()) {\n          setStateNav(stateNav => ({ ...stateNav,\n            countyName: data.counties[0].county\n          }));\n        }\n      } else {\n        setCountyList([]);\n        setStateNav(stateNav => ({ ...stateNav,\n          countyName: null,\n          ...nullDesc\n        }));\n      }\n    }\n  }, [data]);\n\n  const handleCountyNameChange = (event, newValue) => {\n    if (newValue == null) {\n      setStateNav(stateNav => ({ ...stateNav,\n        countyName: null,\n        ...nullDesc\n      }));\n    } else {\n      if (newValue && newValue.county) {\n        setStateNav(stateNav => ({ ...stateNav,\n          countyName: newValue.county,\n          ...nullDesc\n        }));\n      }\n    }\n  };\n\n  const onEnterKey = event => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"56px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"secondary\",\n    className: classes.loader,\n    size: 28,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(Autocomplete, {\n    className: classes.autoC,\n    options: countyList,\n    getOptionLabel: option => option && option.county ? option.county : option ? option : \"\",\n    disabled: !stateNav.stateName || countyList.length === 0,\n    autoComplete: true,\n    autoSelect: true,\n    disableListWrap: true,\n    includeInputInList: true,\n    value: countyList.length === 0 ? \"\" : stateNav.countyName,\n    onChange: (event, newValue) => {\n      handleCountyNameChange(event, newValue);\n    },\n    onKeyDown: event => onEnterKey(event),\n    renderInput: params => /*#__PURE__*/React.createElement(\"form\", {\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      fullWidth: true,\n      label: \"County\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    }))),\n    renderOption: option => /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, option && option.county ? option.county : option ? option : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterCountyName.js"],"names":["React","useState","useContext","useEffect","makeStyles","Typography","FormControl","TextField","Autocomplete","CircularProgress","NavigationContext","useLazyQuery","COUNTIES","useStyles","theme","formControl","minWidth","color","loader","marginLeft","autoC","FilterCountyName","classes","stateNav","setStateNav","countyList","setCountyList","getCounties","loading","data","stateName","variables","state","nullDesc","GrId1","GrId2","GrId3","GrId4","GrId5","filterGeography","counties","countyBelongState","i","length","county","countyName","handleCountyNameChange","event","newValue","onEnterKey","keyCode","preventDefault","height","option","params"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\nimport { COUNTIES } from \"../../../graphQL/useQueryCountiesBySta\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    minWidth: 249,\r\n    color: \"black\",\r\n  },\r\n  loader: {\r\n    marginLeft: \"50%\",\r\n  },\r\n  autoC: { \"& input\": { color: \"#17AADD\" } },\r\n}));\r\n\r\nexport default function FilterCountyName() {\r\n  const classes = useStyles();\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n\r\n  const [countyList, setCountyList] = useState([]);\r\n  const [getCounties, { loading, data }] = useLazyQuery(COUNTIES);\r\n\r\n  useEffect(() => {\r\n    if (stateNav.stateName) {\r\n      getCounties({\r\n        variables: {\r\n          state: stateNav.stateName,\r\n        },\r\n      });\r\n    } else {\r\n      setCountyList([]);\r\n    }\r\n  }, [stateNav.stateName]);\r\n\r\n  const nullDesc = {\r\n    GrId1: null,\r\n    GrId2: null,\r\n    GrId3: null,\r\n    GrId4: null,\r\n    GrId5: null,\r\n    filterGeography: null,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      if (data.counties) {\r\n        setCountyList(data.counties);\r\n\r\n        const countyBelongState = () => {\r\n          for (let i = 0; i < data.counties.length; i++) {\r\n            if (data.counties[i].county === stateNav.countyName) return true;\r\n          }\r\n\r\n          return false;\r\n        };\r\n\r\n        if (stateNav.countyName === false && !countyBelongState()) {\r\n          setStateNav((stateNav) => ({\r\n            ...stateNav,\r\n            countyName: data.counties[0].county,\r\n          }));\r\n        }\r\n      } else {\r\n        setCountyList([]);\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          countyName: null,\r\n          ...nullDesc,\r\n        }));\r\n      }\r\n    }\r\n  }, [data]);\r\n\r\n  const handleCountyNameChange = (event, newValue) => {\r\n    if (newValue == null) {\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        countyName: null,\r\n        ...nullDesc,\r\n      }));\r\n    } else {\r\n      if (newValue && newValue.county) {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          countyName: newValue.county,\r\n          ...nullDesc,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEnterKey = (event) => {\r\n    if (event.keyCode === 13) {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n      {loading ? (\r\n        <div style={{ height: \"56px\" }}>\r\n          <CircularProgress\r\n            color=\"secondary\"\r\n            className={classes.loader}\r\n            size={28}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <Autocomplete\r\n          className={classes.autoC}\r\n          options={countyList}\r\n          getOptionLabel={(option) =>\r\n            option && option.county ? option.county : option ? option : \"\"\r\n          }\r\n          disabled={!stateNav.stateName || countyList.length === 0}\r\n          autoComplete\r\n          autoSelect\r\n          disableListWrap\r\n          includeInputInList\r\n          value={countyList.length === 0 ? \"\" : stateNav.countyName}\r\n          onChange={(event, newValue) => {\r\n            handleCountyNameChange(event, newValue);\r\n          }}\r\n          onKeyDown={(event) => onEnterKey(event)}\r\n          renderInput={(params) => (\r\n            <form autoComplete=\"off\">\r\n              <TextField\r\n                {...params}\r\n                fullWidth\r\n                label=\"County\"\r\n                variant=\"outlined\"\r\n              />\r\n            </form>\r\n          )}\r\n          renderOption={(option) => (\r\n            <Typography>\r\n              {option && option.county ? option.county : option ? option : \"\"}\r\n            </Typography>\r\n          )}\r\n        />\r\n      )}\r\n    </FormControl>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}