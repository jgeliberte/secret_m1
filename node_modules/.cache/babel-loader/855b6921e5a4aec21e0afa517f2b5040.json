{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\TitleOpinion\\\\components\\\\MapShape.js\";\nimport React, { useContext, useState, useRef, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport mapboxgl from \"mapbox-gl\";\nimport { TitleOpinionContext } from \"../TitleOpinionContext\";\nconst useStyles = makeStyles(theme => ({\n  MSWrapper: {\n    width: \"100%\",\n    //height: \"100% !important\",\n    overflow: \"hidden !important\"\n  },\n  map: {\n    width: \"100%\",\n    //height: \"100%\",\n    overflow: \"hidden !important\",\n    \"& a.mapboxgl-ctrl-logo, .mapboxgl-ctrl.mapboxgl-ctrl-attrib\": {\n      display: \"none\"\n    }\n  },\n  footerLeftLogo: {\n    position: \"absolute\",\n    bottom: \"5px\",\n    zIndex: \"1\",\n    left: \"10px\" // textShadow: \"1px 0 0 black, -1px 0 0 black, 0 1px 0 black, 0 -1px 0 black\",\n    // color: \"#ffffff\",\n    // fontSize: \"16px\",\n    // fontWeight: \"bold\",\n    // opacity: \"0.82\",\n    // \"& img\": {\n    //   padding: \"2px 2px 4px 2px\",\n    //   backgroundImage:\n    //     \"radial-gradient(#ffffff00,rgba(0, 0, 0, 0.671), #ffffff00,  #ffffff00)\",\n    //   position: \"absolute\",\n    //   bottom: \"-40px\"\n    // },\n    // \"& p\": {\n    //   position: \"absolute\",\n    //   left: \"23px\"\n    //}\n\n  }\n}));\nexport default function MapShape() {\n  const [stateTitleOpinion] = useContext(TitleOpinionContext);\n  const [map, setMap] = useState(null);\n  const mapEl = useRef(null);\n  const [mapStyles, setMapStyles] = useState([]);\n  mapboxgl.accessToken = \"pk.eyJ1IjoibTFuZXJhbCIsImEiOiJjanYycGJxbG8yN3JsM3lsYTdnMXZoeHh1In0.tTNECYKDPtcrzivWTiZcIQ\";\n  useEffect(() => {\n    const req = new Request(\"https://api.mapbox.com/styles/v1/m1neral?access_token=sk.eyJ1IjoibTFuZXJhbCIsImEiOiJjazdkbGg1YXAwMjVqM2VwanZzbm95Z2dvIn0.cdoQNZU42xxbybyGxlBNkw\", {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    fetch(req, {\n      signal: signal\n    }).then(results => results.json()).then(data => {\n      setMapStyles(data.slice(0, 5));\n    }); //clean up\n\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  function getIndex(value, arr, prop) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i][prop] === value) {\n        return i;\n      }\n    }\n\n    return -1; //to handle the case where the value doesn't exist\n  } // mapboxgl.accessToken =\n  //   \"pk.eyJ1IjoibTFuZXJhbCIsImEiOiJjanYycGJxbG8yN3JsM3lsYTdnMXZoeHh1In0.tTNECYKDPtcrzivWTiZcIQ\";\n  // useEffect(() => {\n  //   if (mapStyles.length > 0) {\n  //   const SET_INITIAL_MAP_STYLE = \"Satellite\";\n  //   var index = getIndex(SET_INITIAL_MAP_STYLE, mapStyles, \"name\");\n  //   const initializeMap = ({ setMap, mapEl }) => {\n  //     let id = mapEl.current.id;\n  //     // const newMap = new mapboxgl.Map({\n  //     //   container: `${id}`,\n  //     //   style: \"mapbox://styles/m1neral/ck6pe50n80bfs1imr05f0hr82\",\n  //     //   center: [-99.90181, 31.968599],\n  //     //   zoom: 6\n  //     // });\n  //     //newMap.setLayoutProperty('wellpoints', 'visibility', 'none');\n  //     const newMap = new mapboxgl.Map({\n  //       container: `${id}`,\n  //       style: \"mapbox://styles/m1neral/\" + mapStyles[index].id,\n  //       center: mapStyles[index].center,\n  //       zoom: mapStyles[index].zoom,\n  //       pitch: mapStyles[index].pitch,\n  //       bearing: mapStyles[index].bearing\n  //     });\n  //     newMap.on(\"load\", function() {\n  //       // Add a source for the polygons.\n  //       newMap.addSource(\"TOshape\", {\n  //         type: \"geojson\",\n  //         data: {\n  //           type: \"FeatureCollection\",\n  //           features: [stateTitleOpinion.TOData.feature]\n  //         }\n  //       });\n  //       // Add a layer showing the polygons.\n  //       newMap.addLayer({\n  //         id: \"TOshape-layer\",\n  //         type: \"fill\",\n  //         source: \"TOshape\",\n  //         paint: {\n  //           \"fill-color\": \"rgba(65, 174, 196, 0.4)\",\n  //           \"fill-outline-color\": \"rgba(65, 174, 196, 1)\"\n  //         }\n  //       });\n  //     });\n  //     //Fit a map to the shape bounds\n  //     const boundsShape = () => {\n  //       let coordinates =\n  //         stateTitleOpinion.TOData.feature &&\n  //         stateTitleOpinion.TOData.feature.geometry\n  //           ? stateTitleOpinion.TOData.feature.geometry.coordinates[0]\n  //           : [\n  //               [-105.90181, 25.968599],\n  //               [-91.90181, 36.968599]\n  //             ];\n  //       let bounds = {\n  //         latMin: coordinates[0][0],\n  //         latMax: coordinates[0][0],\n  //         lonMin: coordinates[0][1],\n  //         lonMax: coordinates[0][1]\n  //       };\n  //       for (let i = 1; i < coordinates.length; i++) {\n  //         if (coordinates[i][0] < bounds.latMin) {\n  //           bounds.latMin = coordinates[i][0];\n  //         }\n  //         if (coordinates[i][0] > bounds.latMax) {\n  //           bounds.latMax = coordinates[i][0];\n  //         }\n  //         if (coordinates[i][1] < bounds.lonMin) {\n  //           bounds.lonMin = coordinates[i][1];\n  //         }\n  //         if (coordinates[i][1] > bounds.lonMax) {\n  //           bounds.lonMax = coordinates[i][1];\n  //         }\n  //       }\n  //       return bounds;\n  //     };\n  //     const coord = boundsShape();\n  //     newMap.fitBounds([\n  //       [coord.latMin - 0.001, coord.lonMin - 0.001],\n  //       [coord.latMax + 0.001, coord.lonMax + 0.001]\n  //     ]);\n  //   };\n  //   };\n  //   if (!map) {\n  //     initializeMap({ setMap, mapEl });\n  //   }\n  // }, []);\n\n\n  useEffect(() => {\n    const req = new Request(\"https://api.mapbox.com/styles/v1/m1neral?access_token=sk.eyJ1IjoibTFuZXJhbCIsImEiOiJjazdkbGg1YXAwMjVqM2VwanZzbm95Z2dvIn0.cdoQNZU42xxbybyGxlBNkw\", {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    fetch(req, {\n      signal: signal\n    }).then(results => results.json()).then(data => {\n      setMapStyles(data.slice(0, 5));\n    }); //clean up\n\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  function getIndex(value, arr, prop) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i][prop] === value) {\n        return i;\n      }\n    }\n\n    return -1; //to handle the case where the value doesn't exist\n  }\n\n  useEffect(() => {\n    if (mapStyles.length > 0) {\n      const SET_INITIAL_MAP_STYLE = \"Satellite\";\n      var index = getIndex(SET_INITIAL_MAP_STYLE, mapStyles, \"name\");\n\n      const initializeMap = ({\n        setMap,\n        mapEl,\n        setStateApp\n      }) => {\n        let id = mapEl.current.id;\n        const newMap = new mapboxgl.Map({\n          container: `${id}`,\n          style: \"mapbox://styles/m1neral/\" + mapStyles[index].id,\n          center: mapStyles[index].center,\n          zoom: mapStyles[index].zoom,\n          pitch: mapStyles[index].pitch,\n          bearing: mapStyles[index].bearing\n        }); /// optimized interactions w/ map\n\n        newMap.scrollZoom.enable();\n        newMap.dragPan.enable();\n        newMap.dragRotate.enable();\n        newMap.keyboard.enable();\n        newMap.doubleClickZoom.disable();\n        newMap.addControl(new mapboxgl.ScaleControl({\n          maxWidth: 80,\n          unit: 'imperial'\n        }), \"bottom-right\");\n        newMap.addControl(new mapboxgl.NavigationControl(), \"bottom-right\");\n        newMap.addControl(new mapboxgl.FullscreenControl(), \"bottom-right\");\n        newMap.on(\"load\", function () {\n          // Add a source for the polygons.\n          newMap.addSource(\"TOshape\", {\n            type: \"geojson\",\n            data: {\n              type: \"FeatureCollection\",\n              features: [stateTitleOpinion.TOData.feature]\n            }\n          }); // Add a layer showing the polygons.\n\n          newMap.addLayer({\n            id: \"TOshape-layer\",\n            type: \"fill\",\n            source: \"TOshape\",\n            paint: {\n              \"fill-color\": \"rgba(65, 174, 196, 0.4)\",\n              \"fill-outline-color\": \"rgba(65, 174, 196, 1)\"\n            }\n          });\n        }); //Fit a map to the shape bounds\n\n        const boundsShape = () => {\n          let coordinates = stateTitleOpinion.TOData.feature && stateTitleOpinion.TOData.feature.geometry ? stateTitleOpinion.TOData.feature.geometry.coordinates[0] : [[-105.90181, 25.968599], [-91.90181, 36.968599]];\n          let bounds = {\n            latMin: coordinates[0][0],\n            latMax: coordinates[0][0],\n            lonMin: coordinates[0][1],\n            lonMax: coordinates[0][1]\n          };\n\n          for (let i = 1; i < coordinates.length; i++) {\n            if (coordinates[i][0] < bounds.latMin) {\n              bounds.latMin = coordinates[i][0];\n            }\n\n            if (coordinates[i][0] > bounds.latMax) {\n              bounds.latMax = coordinates[i][0];\n            }\n\n            if (coordinates[i][1] < bounds.lonMin) {\n              bounds.lonMin = coordinates[i][1];\n            }\n\n            if (coordinates[i][1] > bounds.lonMax) {\n              bounds.lonMax = coordinates[i][1];\n            }\n          }\n\n          return bounds;\n        };\n\n        const coord = boundsShape();\n        newMap.fitBounds([[coord.latMin - 0.001, coord.lonMin - 0.001], [coord.latMax + 0.001, coord.lonMax + 0.001]]);\n        newMap.on(\"load\", function (e) {\n          setMap(newMap);\n        });\n      };\n\n      if (!map) {\n        initializeMap({\n          setMap,\n          mapEl\n        });\n      } else {\n        // additional map interactions \n        // for some reason these do not work when initializing but do here \n        map.boxZoom.enable();\n        map.touchZoomRotate.enable(); //map.setLayoutProperty('wellpoints', 'visibility', 'none');\n        //map.setLayoutProperty('welllines', 'visibility', 'none');\n      }\n    }\n  }, [map, mapStyles]);\n  let classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.MSWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.map,\n    ref: mapEl,\n    id: \"TOmap\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.footerLeftLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"icons/M1LogoWhiteTransparent.png\",\n    alt: \"logo\",\n    width: \"75\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 11\n    }\n  }))));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/TitleOpinion/components/MapShape.js"],"names":["React","useContext","useState","useRef","useEffect","makeStyles","mapboxgl","TitleOpinionContext","useStyles","theme","MSWrapper","width","overflow","map","display","footerLeftLogo","position","bottom","zIndex","left","MapShape","stateTitleOpinion","setMap","mapEl","mapStyles","setMapStyles","accessToken","req","Request","method","mode","headers","Accept","abortController","AbortController","signal","fetch","then","results","json","data","slice","cleanup","abort","getIndex","value","arr","prop","i","length","SET_INITIAL_MAP_STYLE","index","initializeMap","setStateApp","id","current","newMap","Map","container","style","center","zoom","pitch","bearing","scrollZoom","enable","dragPan","dragRotate","keyboard","doubleClickZoom","disable","addControl","ScaleControl","maxWidth","unit","NavigationControl","FullscreenControl","on","addSource","type","features","TOData","feature","addLayer","source","paint","boundsShape","coordinates","geometry","bounds","latMin","latMax","lonMin","lonMax","coord","fitBounds","e","boxZoom","touchZoomRotate","classes"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useRef, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { TitleOpinionContext } from \"../TitleOpinionContext\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  MSWrapper: {\r\n    width: \"100%\",\r\n    //height: \"100% !important\",\r\n    overflow: \"hidden !important\"\r\n  },\r\n  map: {\r\n    width: \"100%\",\r\n    //height: \"100%\",\r\n    overflow: \"hidden !important\",\r\n    \"& a.mapboxgl-ctrl-logo, .mapboxgl-ctrl.mapboxgl-ctrl-attrib\": {\r\n      display: \"none\"\r\n    }\r\n  },\r\n  footerLeftLogo: {\r\n    position: \"absolute\",\r\n    bottom: \"5px\",\r\n    zIndex: \"1\",\r\n    left: \"10px\",\r\n    // textShadow: \"1px 0 0 black, -1px 0 0 black, 0 1px 0 black, 0 -1px 0 black\",\r\n    // color: \"#ffffff\",\r\n    // fontSize: \"16px\",\r\n    // fontWeight: \"bold\",\r\n    // opacity: \"0.82\",\r\n    // \"& img\": {\r\n    //   padding: \"2px 2px 4px 2px\",\r\n    //   backgroundImage:\r\n    //     \"radial-gradient(#ffffff00,rgba(0, 0, 0, 0.671), #ffffff00,  #ffffff00)\",\r\n    //   position: \"absolute\",\r\n    //   bottom: \"-40px\"\r\n    // },\r\n    // \"& p\": {\r\n    //   position: \"absolute\",\r\n    //   left: \"23px\"\r\n    //}\r\n  }\r\n}));\r\n\r\nexport default function MapShape() {\r\n  const [stateTitleOpinion] = useContext(TitleOpinionContext);\r\n  const [map, setMap] = useState(null);\r\n\r\n  const mapEl = useRef(null);\r\n  const [mapStyles, setMapStyles] = useState([]);\r\n\r\n  mapboxgl.accessToken =\r\n  \"pk.eyJ1IjoibTFuZXJhbCIsImEiOiJjanYycGJxbG8yN3JsM3lsYTdnMXZoeHh1In0.tTNECYKDPtcrzivWTiZcIQ\";\r\n\r\n\r\n  useEffect(() => {\r\n    const req = new Request(\r\n      \"https://api.mapbox.com/styles/v1/m1neral?access_token=sk.eyJ1IjoibTFuZXJhbCIsImEiOiJjazdkbGg1YXAwMjVqM2VwanZzbm95Z2dvIn0.cdoQNZU42xxbybyGxlBNkw\",\r\n      {\r\n        method: \"GET\",\r\n        mode: \"cors\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }\r\n    );\r\n  \r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n  \r\n    fetch(req, { signal: signal })\r\n      .then(results => results.json())\r\n      .then(data => {\r\n        setMapStyles(data.slice(0, 5));\r\n      });\r\n  \r\n    //clean up\r\n    return function cleanup() {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n\r\n  function getIndex(value, arr, prop) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i][prop] === value) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1; //to handle the case where the value doesn't exist\r\n  }\r\n\r\n\r\n\r\n  // mapboxgl.accessToken =\r\n  //   \"pk.eyJ1IjoibTFuZXJhbCIsImEiOiJjanYycGJxbG8yN3JsM3lsYTdnMXZoeHh1In0.tTNECYKDPtcrzivWTiZcIQ\";\r\n\r\n\r\n\r\n\r\n\r\n  // useEffect(() => {\r\n  //   if (mapStyles.length > 0) {\r\n\r\n  //   const SET_INITIAL_MAP_STYLE = \"Satellite\";\r\n  //   var index = getIndex(SET_INITIAL_MAP_STYLE, mapStyles, \"name\");\r\n\r\n  //   const initializeMap = ({ setMap, mapEl }) => {\r\n  //     let id = mapEl.current.id;\r\n\r\n  //     // const newMap = new mapboxgl.Map({\r\n  //     //   container: `${id}`,\r\n  //     //   style: \"mapbox://styles/m1neral/ck6pe50n80bfs1imr05f0hr82\",\r\n  //     //   center: [-99.90181, 31.968599],\r\n  //     //   zoom: 6\r\n  //     // });\r\n\r\n  //     //newMap.setLayoutProperty('wellpoints', 'visibility', 'none');\r\n  //     const newMap = new mapboxgl.Map({\r\n  //       container: `${id}`,\r\n  //       style: \"mapbox://styles/m1neral/\" + mapStyles[index].id,\r\n  //       center: mapStyles[index].center,\r\n  //       zoom: mapStyles[index].zoom,\r\n  //       pitch: mapStyles[index].pitch,\r\n  //       bearing: mapStyles[index].bearing\r\n  //     });\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  //     newMap.on(\"load\", function() {\r\n  //       // Add a source for the polygons.\r\n  //       newMap.addSource(\"TOshape\", {\r\n  //         type: \"geojson\",\r\n  //         data: {\r\n  //           type: \"FeatureCollection\",\r\n  //           features: [stateTitleOpinion.TOData.feature]\r\n  //         }\r\n  //       });\r\n\r\n  //       // Add a layer showing the polygons.\r\n  //       newMap.addLayer({\r\n  //         id: \"TOshape-layer\",\r\n  //         type: \"fill\",\r\n  //         source: \"TOshape\",\r\n  //         paint: {\r\n  //           \"fill-color\": \"rgba(65, 174, 196, 0.4)\",\r\n  //           \"fill-outline-color\": \"rgba(65, 174, 196, 1)\"\r\n  //         }\r\n  //       });\r\n  //     });\r\n\r\n\r\n\r\n\r\n\r\n  //     //Fit a map to the shape bounds\r\n  //     const boundsShape = () => {\r\n  //       let coordinates =\r\n  //         stateTitleOpinion.TOData.feature &&\r\n  //         stateTitleOpinion.TOData.feature.geometry\r\n  //           ? stateTitleOpinion.TOData.feature.geometry.coordinates[0]\r\n  //           : [\r\n  //               [-105.90181, 25.968599],\r\n  //               [-91.90181, 36.968599]\r\n  //             ];\r\n  //       let bounds = {\r\n  //         latMin: coordinates[0][0],\r\n  //         latMax: coordinates[0][0],\r\n  //         lonMin: coordinates[0][1],\r\n  //         lonMax: coordinates[0][1]\r\n  //       };\r\n\r\n  //       for (let i = 1; i < coordinates.length; i++) {\r\n  //         if (coordinates[i][0] < bounds.latMin) {\r\n  //           bounds.latMin = coordinates[i][0];\r\n  //         }\r\n  //         if (coordinates[i][0] > bounds.latMax) {\r\n  //           bounds.latMax = coordinates[i][0];\r\n  //         }\r\n  //         if (coordinates[i][1] < bounds.lonMin) {\r\n  //           bounds.lonMin = coordinates[i][1];\r\n  //         }\r\n  //         if (coordinates[i][1] > bounds.lonMax) {\r\n  //           bounds.lonMax = coordinates[i][1];\r\n  //         }\r\n  //       }\r\n\r\n  //       return bounds;\r\n  //     };\r\n  //     const coord = boundsShape();\r\n  //     newMap.fitBounds([\r\n  //       [coord.latMin - 0.001, coord.lonMin - 0.001],\r\n  //       [coord.latMax + 0.001, coord.lonMax + 0.001]\r\n  //     ]);\r\n\r\n\r\n\r\n  //   };\r\n  //   };\r\n  \r\n  \r\n  //   if (!map) {\r\n  //     initializeMap({ setMap, mapEl });\r\n  //   }\r\n  // }, []);\r\n\r\n\r\n\r\n\r\n  \r\n  useEffect(() => {\r\n    const req = new Request(\r\n      \"https://api.mapbox.com/styles/v1/m1neral?access_token=sk.eyJ1IjoibTFuZXJhbCIsImEiOiJjazdkbGg1YXAwMjVqM2VwanZzbm95Z2dvIn0.cdoQNZU42xxbybyGxlBNkw\",\r\n      {\r\n        method: \"GET\",\r\n        mode: \"cors\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }\r\n    );\r\n\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n\r\n    fetch(req, { signal: signal })\r\n      .then(results => results.json())\r\n      .then(data => {\r\n        setMapStyles(data.slice(0, 5));\r\n      });\r\n\r\n    //clean up\r\n    return function cleanup() {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n\r\n\r\n\r\n\r\n\r\n  function getIndex(value, arr, prop) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i][prop] === value) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1; //to handle the case where the value doesn't exist\r\n  }\r\n\r\n\r\n  \r\n  useEffect(() => {\r\n    if (mapStyles.length > 0) {\r\n      const SET_INITIAL_MAP_STYLE = \"Satellite\";\r\n      var index = getIndex(SET_INITIAL_MAP_STYLE, mapStyles, \"name\");\r\n\r\n      const initializeMap = ({ setMap, mapEl, setStateApp }) => {\r\n        let id = mapEl.current.id;\r\n\r\n        const newMap = new mapboxgl.Map({\r\n          container: `${id}`,\r\n          style: \"mapbox://styles/m1neral/\" + mapStyles[index].id,\r\n          center: mapStyles[index].center,\r\n          zoom: mapStyles[index].zoom,\r\n          pitch: mapStyles[index].pitch,\r\n          bearing: mapStyles[index].bearing\r\n        });\r\n        \r\n        /// optimized interactions w/ map\r\n        newMap.scrollZoom.enable()\r\n        newMap.dragPan.enable();\r\n        newMap.dragRotate.enable();\r\n        newMap.keyboard.enable();\r\n        newMap.doubleClickZoom.disable();\r\n\r\n        newMap.addControl(\r\n          new mapboxgl.ScaleControl({\r\n            maxWidth: 80,\r\n            unit: 'imperial'\r\n          }),\"bottom-right\");\r\n      \r\n        newMap.addControl(\r\n          new mapboxgl.NavigationControl()\r\n          , \"bottom-right\");\r\n\r\n        newMap.addControl(\r\n          new mapboxgl.FullscreenControl()\r\n          , \"bottom-right\");\r\n        \r\n\r\n        \r\n\r\n\r\n\r\n\r\n      newMap.on(\"load\", function() {\r\n        // Add a source for the polygons.\r\n        newMap.addSource(\"TOshape\", {\r\n          type: \"geojson\",\r\n          data: {\r\n            type: \"FeatureCollection\",\r\n            features: [stateTitleOpinion.TOData.feature]\r\n          }\r\n        });\r\n\r\n        // Add a layer showing the polygons.\r\n        newMap.addLayer({\r\n          id: \"TOshape-layer\",\r\n          type: \"fill\",\r\n          source: \"TOshape\",\r\n          paint: {\r\n            \"fill-color\": \"rgba(65, 174, 196, 0.4)\",\r\n            \"fill-outline-color\": \"rgba(65, 174, 196, 1)\"\r\n          }\r\n        });\r\n      });\r\n\r\n\r\n\r\n\r\n\r\n\r\n      //Fit a map to the shape bounds\r\n      const boundsShape = () => {\r\n        let coordinates =\r\n          stateTitleOpinion.TOData.feature &&\r\n          stateTitleOpinion.TOData.feature.geometry\r\n            ? stateTitleOpinion.TOData.feature.geometry.coordinates[0]\r\n            : [\r\n                [-105.90181, 25.968599],\r\n                [-91.90181, 36.968599]\r\n              ];\r\n        let bounds = {\r\n          latMin: coordinates[0][0],\r\n          latMax: coordinates[0][0],\r\n          lonMin: coordinates[0][1],\r\n          lonMax: coordinates[0][1]\r\n        };\r\n\r\n        for (let i = 1; i < coordinates.length; i++) {\r\n          if (coordinates[i][0] < bounds.latMin) {\r\n            bounds.latMin = coordinates[i][0];\r\n          }\r\n          if (coordinates[i][0] > bounds.latMax) {\r\n            bounds.latMax = coordinates[i][0];\r\n          }\r\n          if (coordinates[i][1] < bounds.lonMin) {\r\n            bounds.lonMin = coordinates[i][1];\r\n          }\r\n          if (coordinates[i][1] > bounds.lonMax) {\r\n            bounds.lonMax = coordinates[i][1];\r\n          }\r\n        }\r\n\r\n        return bounds;\r\n      };\r\n      const coord = boundsShape();\r\n      newMap.fitBounds([\r\n        [coord.latMin - 0.001, coord.lonMin - 0.001],\r\n        [coord.latMax + 0.001, coord.lonMax + 0.001]\r\n      ]);\r\n\r\n\r\n        newMap.on(\"load\", function(e) {\r\n          setMap(newMap);\r\n        });\r\n\r\n\r\n\r\n\r\n      };\r\n\r\n      if (!map) {\r\n        initializeMap({ setMap, mapEl });\r\n      } else {\r\n\r\n\r\n\r\n      // additional map interactions \r\n      // for some reason these do not work when initializing but do here \r\n      map.boxZoom.enable()\r\n      map.touchZoomRotate.enable();\r\n      \r\n      //map.setLayoutProperty('wellpoints', 'visibility', 'none');\r\n      //map.setLayoutProperty('welllines', 'visibility', 'none');\r\n\r\n\r\n\r\n      }\r\n    }\r\n  }, [map, mapStyles,]);\r\n\r\n\r\n  let classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.MSWrapper}>\r\n      <div className={classes.map} ref={mapEl} id=\"TOmap\">\r\n        <div className={classes.footerLeftLogo}>\r\n          <img src=\"icons/M1LogoWhiteTransparent.png\" alt=\"logo\" width=\"75\" />\r\n        </div> \r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}