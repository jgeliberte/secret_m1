{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport ChildRowDeleteButton from '../ChildRowDeleteButton';\nimport CellValue from './CellValue';\nexport default function CellContent(_a) {\n  var idx = _a.idx,\n      tooltip = _a.tooltip,\n      expandableOptions = _a.expandableOptions,\n      height = _a.height,\n      cellMetaData = _a.cellMetaData,\n      cellControls = _a.cellControls,\n      props = __rest(_a, [\"idx\", \"tooltip\", \"expandableOptions\", \"height\", \"cellMetaData\", \"cellControls\"]);\n\n  var column = props.column;\n  var isExpandCell = expandableOptions ? expandableOptions.field === column.key : false;\n  var treeDepth = expandableOptions ? expandableOptions.treeDepth : 0;\n  var marginLeft = expandableOptions && isExpandCell ? expandableOptions.treeDepth * 30 : 0;\n\n  function handleDeleteSubRow() {\n    if (cellMetaData.onDeleteSubRow) {\n      cellMetaData.onDeleteSubRow({\n        idx: idx,\n        rowIdx: props.rowIdx,\n        rowData: props.rowData,\n        expandArgs: expandableOptions\n      });\n    }\n  }\n\n  var cellDeleter = expandableOptions && treeDepth > 0 && isExpandCell && React.createElement(ChildRowDeleteButton, {\n    treeDepth: treeDepth,\n    cellHeight: height,\n    onDeleteSubRow: handleDeleteSubRow,\n    isDeleteSubRowEnabled: !!cellMetaData.onDeleteSubRow\n  });\n  var classes = classNames('react-grid-Cell__value', {\n    'cell-tooltip': !!tooltip\n  });\n  return React.createElement(\"div\", {\n    className: classes\n  }, cellDeleter, React.createElement(\"div\", {\n    className: \"react-grid-Cell__container\",\n    style: {\n      marginLeft: marginLeft\n    }\n  }, React.createElement(\"span\", null, React.createElement(CellValue, __assign({}, props))), cellControls), tooltip && React.createElement(\"span\", {\n    className: \"cell-tooltip-text\"\n  }, tooltip));\n}","map":{"version":3,"sources":["../../src/Cell/CellContent.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAP,MAAkB,OAAlB;AACA,OAAO,UAAP,MAAuB,YAAvB;AAEA,OAAO,oBAAP,MAAiC,yBAAjC;AAEA,OAAO,SAAP,MAAsB,aAAtB;AAiBA,eAAc,SAAU,WAAV,CAAyB,EAAzB,EAA+H;AAApG,MAAA,GAAA,GAAA,EAAA,CAAA,GAAA;AAAA,MAAK,OAAA,GAAA,EAAA,CAAA,OAAL;AAAA,MAAc,iBAAA,GAAA,EAAA,CAAA,iBAAd;AAAA,MAAiC,MAAA,GAAA,EAAA,CAAA,MAAjC;AAAA,MAAyC,YAAA,GAAA,EAAA,CAAA,YAAzC;AAAA,MAAuD,YAAA,GAAA,EAAA,CAAA,YAAvD;AAAA,MAAqE,KAAA,GAAA,MAAA,CAAA,EAAA,EAAA,CAAA,KAAA,EAAA,SAAA,EAAA,mBAAA,EAAA,QAAA,EAAA,cAAA,EAAA,cAAA,CAAA,CAArE;;AAC/B,MAAA,MAAA,GAAA,KAAA,CAAA,MAAA;AACR,MAAM,YAAY,GAAG,iBAAiB,GAAG,iBAAiB,CAAC,KAAlB,KAA4B,MAAM,CAAC,GAAtC,GAA4C,KAAlF;AACA,MAAM,SAAS,GAAG,iBAAiB,GAAG,iBAAiB,CAAC,SAArB,GAAiC,CAApE;AACA,MAAM,UAAU,GAAG,iBAAiB,IAAI,YAArB,GAAoC,iBAAiB,CAAC,SAAlB,GAA8B,EAAlE,GAAuE,CAA1F;;AAEA,WAAS,kBAAT,GAA2B;AACzB,QAAI,YAAY,CAAC,cAAjB,EAAiC;AAC/B,MAAA,YAAY,CAAC,cAAb,CAA4B;AAC1B,QAAA,GAAG,EAAA,GADuB;AAE1B,QAAA,MAAM,EAAE,KAAK,CAAC,MAFY;AAG1B,QAAA,OAAO,EAAE,KAAK,CAAC,OAHW;AAI1B,QAAA,UAAU,EAAE;AAJc,OAA5B;AAMD;AACF;;AAED,MAAM,WAAW,GAAG,iBAAiB,IAAI,SAAS,GAAG,CAAjC,IAAsC,YAAtC,IAClB,KAAA,CAAA,aAAA,CAAC,oBAAD,EAAqB;AACnB,IAAA,SAAS,EAAE,SADQ;AAEnB,IAAA,UAAU,EAAE,MAFO;AAGnB,IAAA,cAAc,EAAE,kBAHG;AAInB,IAAA,qBAAqB,EAAE,CAAC,CAAC,YAAY,CAAC;AAJnB,GAArB,CADF;AASA,MAAM,OAAO,GAAG,UAAU,CAAC,wBAAD,EACxB;AAAE,oBAAgB,CAAC,CAAC;AAApB,GADwB,CAA1B;AAIA,SACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAE;AAAhB,GAAA,EACG,WADH,EAEE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;AAAK,IAAA,SAAS,EAAC,4BAAf;AAA4C,IAAA,KAAK,EAAE;AAAE,MAAA,UAAU,EAAA;AAAZ;AAAnD,GAAA,EACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,IAAA,EAAM,KAAA,CAAA,aAAA,CAAC,SAAD,EAAU,QAAA,CAAA,EAAA,EAAQ,KAAR,CAAV,CAAN,CADF,EAEG,YAFH,CAFF,EAMG,OAAO,IAAI,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,SAAS,EAAC;AAAhB,GAAA,EAAqC,OAArC,CANd,CADF;AAUD","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport ChildRowDeleteButton from '../ChildRowDeleteButton';\nimport { Props as CellProps } from '../Cell';\nimport CellValue from './CellValue';\n\nexport type CellContentProps<R> = Pick<CellProps<R>,\n'idx'\n| 'rowIdx'\n| 'rowData'\n| 'column'\n| 'value'\n| 'isScrolling'\n| 'expandableOptions'\n| 'tooltip'\n| 'height'\n| 'cellControls'\n| 'cellMetaData'\n>;\n\n\nexport default function CellContent<R>({ idx, tooltip, expandableOptions, height, cellMetaData, cellControls, ...props }: CellContentProps<R>) {\n  const { column } = props;\n  const isExpandCell = expandableOptions ? expandableOptions.field === column.key : false;\n  const treeDepth = expandableOptions ? expandableOptions.treeDepth : 0;\n  const marginLeft = expandableOptions && isExpandCell ? expandableOptions.treeDepth * 30 : 0;\n\n  function handleDeleteSubRow() {\n    if (cellMetaData.onDeleteSubRow) {\n      cellMetaData.onDeleteSubRow({\n        idx,\n        rowIdx: props.rowIdx,\n        rowData: props.rowData,\n        expandArgs: expandableOptions\n      });\n    }\n  }\n\n  const cellDeleter = expandableOptions && treeDepth > 0 && isExpandCell && (\n    <ChildRowDeleteButton\n      treeDepth={treeDepth}\n      cellHeight={height}\n      onDeleteSubRow={handleDeleteSubRow}\n      isDeleteSubRowEnabled={!!cellMetaData.onDeleteSubRow}\n    />\n  );\n\n  const classes = classNames('react-grid-Cell__value',\n    { 'cell-tooltip': !!tooltip }\n  );\n\n  return (\n    <div className={classes}>\n      {cellDeleter}\n      <div className=\"react-grid-Cell__container\" style={{ marginLeft }}>\n        <span><CellValue<R> {...props} /></span>\n        {cellControls}\n      </div>\n      {tooltip && <span className=\"cell-tooltip-text\">{tooltip}</span>}\n    </div>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}