{"ast":null,"code":"import { __assign, __extends, __values } from \"tslib\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport rowComparer from './common/utils/RowComparer';\nimport Cell from './Cell';\nimport { isFrozen } from './ColumnUtils';\nimport * as rowUtils from './RowUtils';\n\nvar Row =\n/** @class */\nfunction (_super) {\n  __extends(Row, _super);\n\n  function Row() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.row = React.createRef();\n    _this.cells = new Map();\n\n    _this.handleDragEnter = function (e) {\n      // Prevent default to allow drop\n      e.preventDefault();\n      var _a = _this.props,\n          idx = _a.idx,\n          cellMetaData = _a.cellMetaData;\n      cellMetaData.onDragEnter(idx);\n    };\n\n    _this.handleDragOver = function (e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = 'copy';\n    };\n\n    _this.handleDrop = function (e) {\n      // The default in Firefox is to treat data in dataTransfer as a URL and perform navigation on it, even if the data type used is 'text'\n      // To bypass this, we need to capture and prevent the drop event.\n      e.preventDefault();\n    };\n\n    return _this;\n  }\n\n  Row.prototype.shouldComponentUpdate = function (nextProps) {\n    return rowComparer(nextProps, this.props);\n  };\n\n  Row.prototype.getCell = function (column) {\n    var _this = this;\n\n    var Renderer = this.props.cellRenderer;\n    var _a = this.props,\n        idx = _a.idx,\n        cellMetaData = _a.cellMetaData,\n        isScrolling = _a.isScrolling,\n        row = _a.row,\n        isSelected = _a.isSelected,\n        scrollLeft = _a.scrollLeft,\n        lastFrozenColumnIndex = _a.lastFrozenColumnIndex;\n    var key = column.key;\n    var cellProps = {\n      ref: function (cell) {\n        return cell ? _this.cells.set(key, cell) : _this.cells.delete(key);\n      },\n      idx: column.idx,\n      rowIdx: idx,\n      height: this.getRowHeight(),\n      column: column,\n      cellMetaData: cellMetaData,\n      value: this.getCellValue(key || String(column.idx)),\n      rowData: row,\n      isRowSelected: isSelected,\n      expandableOptions: this.getExpandableOptions(key),\n      isScrolling: isScrolling,\n      scrollLeft: scrollLeft,\n      lastFrozenColumnIndex: lastFrozenColumnIndex\n    };\n    return React.createElement(Renderer, __assign({\n      key: key + \"-\" + idx\n    }, cellProps)); // FIXME: fix key type\n  };\n\n  Row.prototype.getCells = function () {\n    var _this = this;\n\n    var _a = this.props,\n        colOverscanStartIdx = _a.colOverscanStartIdx,\n        colOverscanEndIdx = _a.colOverscanEndIdx,\n        columns = _a.columns;\n    var frozenColumns = columns.filter(function (c) {\n      return isFrozen(c);\n    });\n    var nonFrozenColumn = columns.slice(colOverscanStartIdx, colOverscanEndIdx + 1).filter(function (c) {\n      return !isFrozen(c);\n    });\n    return nonFrozenColumn.concat(frozenColumns).map(function (c) {\n      return _this.getCell(c);\n    });\n  };\n\n  Row.prototype.getRowTop = function () {\n    var current = this.row.current;\n    return current ? current.offsetTop : 0;\n  };\n\n  Row.prototype.getRowHeight = function () {\n    return this.props.height;\n  };\n\n  Row.prototype.getCellValue = function (key) {\n    var _a = this.props,\n        isSelected = _a.isSelected,\n        row = _a.row;\n\n    if (key === 'select-row') {\n      return isSelected;\n    }\n\n    return rowUtils.get(row, key);\n  };\n\n  Row.prototype.getExpandableOptions = function (columnKey) {\n    var subRowDetails = this.props.subRowDetails;\n    if (!subRowDetails) return;\n    var field = subRowDetails.field,\n        expanded = subRowDetails.expanded,\n        children = subRowDetails.children,\n        treeDepth = subRowDetails.treeDepth;\n    return {\n      canExpand: field === columnKey && (children && children.length > 0 || subRowDetails.group === true),\n      field: field,\n      expanded: expanded,\n      children: children,\n      treeDepth: treeDepth,\n      subRowDetails: subRowDetails\n    };\n  };\n\n  Row.prototype.setScrollLeft = function (scrollLeft) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(this.props.columns), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var column = _c.value;\n        var key = column.key;\n\n        if (isFrozen(column) && this.cells.has(key)) {\n          this.cells.get(key).setScrollLeft(scrollLeft);\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  Row.prototype.render = function () {\n    var className = classNames('react-grid-Row', \"react-grid-Row--\" + (this.props.idx % 2 === 0 ? 'even' : 'odd'), {\n      'row-selected': this.props.isSelected\n    }, this.props.extraClasses, {\n      'rdg-scrolling': this.props.isScrolling\n    });\n    return React.createElement(\"div\", {\n      ref: this.row,\n      className: className,\n      style: {\n        height: this.getRowHeight()\n      },\n      onDragEnter: this.handleDragEnter,\n      onDragOver: this.handleDragOver,\n      onDrop: this.handleDrop\n    }, this.getCells());\n  };\n\n  Row.displayName = 'Row';\n  Row.defaultProps = {\n    cellRenderer: Cell,\n    isSelected: false,\n    height: 35\n  };\n  return Row;\n}(React.Component);\n\nexport default Row;","map":{"version":3,"sources":["../src/Row.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\n\nimport rowComparer from './common/utils/RowComparer';\nimport Cell from './Cell';\nimport { isFrozen } from './ColumnUtils';\nimport * as rowUtils from './RowUtils';\nimport { RowRenderer, RowRendererProps, CellRenderer, CellRendererProps, CalculatedColumn } from './common/types';\n\nexport default class Row<R> extends React.Component<RowRendererProps<R>> implements RowRenderer<R> {\n  static displayName = 'Row';\n\n  static defaultProps = {\n    cellRenderer: Cell,\n    isSelected: false,\n    height: 35\n  };\n\n  private readonly row = React.createRef<HTMLDivElement>();\n  private readonly cells = new Map<keyof R, CellRenderer>();\n\n  shouldComponentUpdate(nextProps: RowRendererProps<R>) {\n    return rowComparer(nextProps, this.props);\n  }\n\n  handleDragEnter = (e: React.DragEvent<HTMLDivElement>) => {\n    // Prevent default to allow drop\n    e.preventDefault();\n    const { idx, cellMetaData } = this.props;\n    cellMetaData.onDragEnter(idx);\n  };\n\n  handleDragOver = (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'copy';\n  };\n\n  handleDrop = (e: React.DragEvent<HTMLDivElement>) => {\n    // The default in Firefox is to treat data in dataTransfer as a URL and perform navigation on it, even if the data type used is 'text'\n    // To bypass this, we need to capture and prevent the drop event.\n    e.preventDefault();\n  };\n\n  getCell(column: CalculatedColumn<R>) {\n    const Renderer = this.props.cellRenderer!;\n    const { idx, cellMetaData, isScrolling, row, isSelected, scrollLeft, lastFrozenColumnIndex } = this.props;\n    const { key } = column;\n\n    const cellProps: CellRendererProps<R> & { ref: (cell: CellRenderer | null) => void } = {\n      ref: (cell) => cell ? this.cells.set(key, cell) : this.cells.delete(key),\n      idx: column.idx,\n      rowIdx: idx,\n      height: this.getRowHeight(),\n      column,\n      cellMetaData,\n      value: this.getCellValue(key || String(column.idx) as keyof R) as R[keyof R], // FIXME: fix types\n      rowData: row,\n      isRowSelected: isSelected,\n      expandableOptions: this.getExpandableOptions(key),\n      isScrolling,\n      scrollLeft,\n      lastFrozenColumnIndex\n    };\n\n    return <Renderer key={`${key as keyof R}-${idx}`} {...cellProps} />; // FIXME: fix key type\n  }\n\n  getCells() {\n    const { colOverscanStartIdx, colOverscanEndIdx, columns } = this.props;\n    const frozenColumns = columns.filter(c => isFrozen(c));\n    const nonFrozenColumn = columns.slice(colOverscanStartIdx, colOverscanEndIdx + 1).filter(c => !isFrozen(c));\n    return nonFrozenColumn.concat(frozenColumns).map(c => this.getCell(c));\n  }\n\n  getRowTop(): number {\n    const { current } = this.row;\n    return current ? current.offsetTop : 0;\n  }\n\n  getRowHeight(): number {\n    return this.props.height;\n  }\n\n  getCellValue(key: keyof R) {\n    const { isSelected, row } = this.props;\n    if (key === 'select-row') {\n      return isSelected;\n    }\n\n    return rowUtils.get(row, key);\n  }\n\n  getExpandableOptions(columnKey: keyof R) {\n    const { subRowDetails } = this.props;\n    if (!subRowDetails) return;\n\n    const { field, expanded, children, treeDepth } = subRowDetails;\n    return {\n      canExpand: field === columnKey && ((children && children.length > 0) || subRowDetails.group === true),\n      field,\n      expanded,\n      children,\n      treeDepth,\n      subRowDetails\n    };\n  }\n\n  setScrollLeft(scrollLeft: number) {\n    for (const column of this.props.columns) {\n      const { key } = column;\n      if (isFrozen(column) && this.cells.has(key)) {\n        this.cells.get(key)!.setScrollLeft(scrollLeft);\n      }\n    }\n  }\n\n  render() {\n    const className = classNames(\n      'react-grid-Row',\n      `react-grid-Row--${this.props.idx % 2 === 0 ? 'even' : 'odd'}`,\n      { 'row-selected': this.props.isSelected },\n      this.props.extraClasses,\n      { 'rdg-scrolling': this.props.isScrolling }\n    );\n\n    return (\n      <div\n        ref={this.row}\n        className={className}\n        style={{ height: this.getRowHeight() }}\n        onDragEnter={this.handleDragEnter}\n        onDragOver={this.handleDragOver}\n        onDrop={this.handleDrop}\n      >\n        {this.getCells()}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}