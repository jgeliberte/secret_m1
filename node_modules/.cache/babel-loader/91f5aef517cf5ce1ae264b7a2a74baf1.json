{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\OwnersDetailCard\\\\components\\\\OwnerDetailsCardMap.js\";\nimport React, { useContext, useState, useRef, useEffect, useCallback } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport mapboxgl from \"mapbox-gl\";\nimport { AppContext } from \"../../../AppContext\";\nimport uid from \"uid\";\nimport { WELLSQUERY } from \"../../../graphQL/useQueryWells\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport ExpandableCardProvider from \"../../ExpandableCard/ExpandableCardProvider\";\nimport Portal from \"@material-ui/core/Portal\";\nimport PortalD from \"../../Map/components/Portal\";\nimport Popover from \"@material-ui/core/Popover\";\nimport WellCardProvider from \"../../WellCard/WellCardProvider\"; // import SpatialDataCardEdit from \"../../MapControls/components/spatialDataCardEdit\";\n// import FilterControl from \"../../Map/components/FilterControl\";\n\nconst useStyles = makeStyles(() => ({\n  MSWrapper: {\n    width: \"100%\",\n    height: \"300px !important\" // overflow: \"hidden !important\",\n\n  },\n  map: {\n    width: \"100%\",\n    height: \"100%\",\n    overflow: \"unset\",\n    zIndex: \"1500\",\n    // overflow: \"hidden !important\",\n    \"& canvas\": {\n      height: \"100% !important\",\n      width: \"100% !important\"\n    },\n    \"& .mapboxgl-canvas-container\": {\n      width: \"100% !important\",\n      height: \"100% !important\"\n    },\n    \"& a.mapboxgl-ctrl-logo, .mapboxgl-ctrl.mapboxgl-ctrl-attrib\": {\n      display: \"none\"\n    }\n  },\n  footerLeftLogo: {\n    position: \"absolute\",\n    bottom: \"5px\",\n    zIndex: \"1\",\n    left: \"10px\"\n  }\n}));\nexport default function OwnerDetailsCardMap(props) {\n  let classes = useStyles();\n  const [stateApp, setStateApp] = useContext(AppContext);\n  const [map, setMap] = useState(null);\n  const [mapStyles, setMapStyles] = useState([]);\n  const mapEl = useRef(null);\n  const [getWells, {\n    data: dataWells\n  }] = useLazyQuery(WELLSQUERY);\n  const [showExpandableCard, setShowExpandableCard] = useState(false);\n  const [anchorElPoPOver, setAnchorElPoPOver] = useState(null);\n  const container = useRef(null);\n  mapboxgl.accessToken = stateApp.mapboxglAccessToken;\n  useEffect(() => {\n    if (props.wellsIdsArray) {\n      getWells({\n        variables: {\n          wellIdArray: props.wellsIdsArray,\n          authToken: stateApp.user.authToken\n        }\n      });\n    }\n  }, [props.wellsIdsArray]);\n  useEffect(() => {\n    const req = new Request(\"https://api.mapbox.com/styles/v1/m1neral?access_token=sk.eyJ1IjoibTFuZXJhbCIsImEiOiJjazdkbGg1YXAwMjVqM2VwanZzbm95Z2dvIn0.cdoQNZU42xxbybyGxlBNkw\", {\n      method: \"GET\",\n      mode: \"cors\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const abortController = new AbortController();\n    const signal = abortController.signal;\n    fetch(req, {\n      signal: signal\n    }).then(results => results.json()).then(data => {\n      setMapStyles(data.slice(0, 5));\n    }); //clean up\n\n    return function cleanup() {\n      abortController.abort();\n    };\n  }, []);\n\n  function getIndex(value, arr, prop) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i][prop] === value) {\n        return i;\n      }\n    }\n\n    return -1; //to handle the case where the value doesn't exist\n  }\n\n  useEffect(() => {\n    if (mapStyles.length > 0) {\n      const SET_INITIAL_MAP_STYLE = \"Satellite\";\n      var index = getIndex(SET_INITIAL_MAP_STYLE, mapStyles, \"name\");\n\n      const initializeMap = ({\n        setMap,\n        mapEl\n      }) => {\n        let id = mapEl.current.id;\n        const newMap = new mapboxgl.Map({\n          container: `${id}`,\n          style: \"mapbox://styles/m1neral/\" + mapStyles[index].id,\n          center: [-98.8, 31.6],\n          zoom: 5 // pitch: 70,\n          // bearing: 20,\n\n        }); // var el = document.createElement(\"div\");\n        // el.style.backgroundImage = \"url(icons/favicon-inverted.png)\";\n        // el.style.width = \"28px\";\n        // el.style.height = \"64px\";\n        // new mapboxgl.Marker(el).setLngLat([-98.8, 31.6]).addTo(newMap);\n        // newMap.on(\"load\", function (e) {\n        //   newMap.flyTo({\n        //     center: [-98.8, 31.6],\n        //     zoom: 16,\n        //     speed: 0.4,\n        //     bearing: 0,\n        //   });\n        // });\n        // newMap.on(\"moveend\", function (e) {\n        //   newMap.rotateTo(540, { duration: 100000 });\n        // });\n\n        newMap.on(\"load\", function (e) {\n          setMap(newMap);\n        });\n      };\n\n      if (!map) {\n        initializeMap({\n          setMap,\n          mapEl\n        });\n      } else {}\n    }\n  }, [map, mapStyles]);\n\n  const handleCloseExpandableCard = () => {\n    setShowExpandableCard(false);\n    setAnchorElPoPOver(null);\n    setStateApp(state => ({ ...state,\n      popupOpen: false,\n      // selectedWell: null,\n      expandedCard: false\n    }));\n  };\n\n  const handleOpenExpandableCard = well => {\n    setAnchorElPoPOver(container.current);\n    setShowExpandableCard(true); // //show wellcard in popup Portal\n\n    setStateApp(state => ({ ...state,\n      popupOpen: true,\n      selectedWell: well,\n      expandedCard: false\n    }));\n  };\n\n  const createPopUp = useCallback((coordinates, well) => {\n    let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\n    if (popUps[0]) popUps[0].remove();\n    new mapboxgl.Popup({\n      offset: 0,\n      closeOnClick: false\n    }).setLngLat(coordinates).setMaxWidth(\"none\").setHTML(`<div id=\"popupContainer\"></div>`).addTo(map);\n    handleOpenExpandableCard(well);\n  }, [map, setStateApp]);\n  useEffect(() => {\n    if (map && dataWells && dataWells.wells && dataWells.wells.results && dataWells.wells.results.length > 0) {\n      let layerData = dataWells.wells.results;\n\n      const makeGeoJSON = data => {\n        return {\n          type: \"FeatureCollection\",\n          features: data.map(feature => {\n            return {\n              type: \"Feature\",\n              properties: feature,\n              geometry: {\n                type: \"Point\",\n                coordinates: [feature.longitude, feature.latitude]\n              }\n            };\n          })\n        };\n      };\n\n      const myGeoJSONData = makeGeoJSON(layerData); // -> add source\n\n      map.addSource(\"wells\", {\n        type: \"geojson\",\n        data: myGeoJSONData,\n        cluster: true,\n        clusterRadius: 50,\n        clusterMaxZoom: 6\n      });\n      map.addLayer({\n        id: \"unclustered-point\",\n        type: \"circle\",\n        source: \"wells\",\n        paint: {\n          \"circle-radius\": 5,\n          \"circle-color\": \"#11b4da\",\n          \"circle-stroke-width\": 2,\n          \"circle-stroke-color\": \"#fff\"\n        }\n      });\n      map.addLayer({\n        id: \"clusters\",\n        type: \"circle\",\n        source: \"wells\",\n        filter: [\"has\", \"point_count\"],\n        paint: {\n          \"circle-color\": {\n            property: \"point_count\",\n            type: \"interval\",\n            stops: [[0, \"#11b4da\"], [100, \"#11b4da\"], [750, \"#11b4da\"]]\n          },\n          \"circle-radius\": [\"step\", [\"get\", \"point_count\"], 20, 5, 25, 10, 30, 20, 35],\n          \"circle-stroke-width\": 5,\n          \"circle-stroke-color\": \"#fff\"\n        }\n      });\n      map.addLayer({\n        id: \"cluster-count\",\n        type: \"symbol\",\n        source: \"wells\",\n        filter: [\"has\", \"point_count\"],\n        layout: {\n          \"text-field\": \"{point_count}\",\n          \"text-font\": [\"DIN Offc Pro Bold\", \"Arial Unicode MS Bold\"],\n          \"text-size\": 12\n        }\n      }); // inspect a cluster on click\n\n      map.on(\"click\", \"clusters\", function (e) {\n        var bbox = [[e.point.x - 10, e.point.y - 10], [e.point.x + 10, e.point.y + 10]];\n        let features = map.queryRenderedFeatures(bbox, {\n          layers: [\"clusters\"]\n        });\n        var clusterId = features[0].properties.cluster_id;\n        map.getSource(\"wells\").getClusterExpansionZoom(clusterId, function (err, zoom) {\n          if (err) return;\n          map.flyTo({\n            center: features[0].geometry.coordinates,\n            zoom: zoom\n          });\n        });\n      });\n      map.on(\"click\", \"unclustered-point\", function (e) {\n        var bbox = [[e.point.x - 10, e.point.y - 10], [e.point.x + 10, e.point.y + 10]];\n        let features = map.queryRenderedFeatures(bbox, {\n          layers: [\"unclustered-point\"]\n        });\n        map.flyTo({\n          center: features[0].geometry.coordinates,\n          zoom: 13,\n          speed: 0.8\n        });\n        let rotating = false;\n        map.on(\"moveend\", function (e) {\n          if (!rotating) {\n            rotating = true;\n            map.rotateTo(540, {\n              duration: 100000\n            });\n          }\n        }); //// find the well by id\n\n        for (let i = 0; i < layerData.length; i++) {\n          if (layerData[i].id === features[0].properties.id) {\n            createPopUp(features[0].geometry.coordinates, layerData[i]); // map.resize();\n\n            break;\n          }\n        }\n      });\n      map.on(\"mouseenter\", \"clusters\", function () {\n        map.getCanvas().style.cursor = \"pointer\";\n      });\n      map.on(\"mouseleave\", \"clusters\", function () {\n        map.getCanvas().style.cursor = \"\";\n      });\n      map.on(\"mouseenter\", \"unclustered-point\", function () {\n        map.getCanvas().style.cursor = \"pointer\";\n      });\n      map.on(\"mouseleave\", \"unclustered-point\", function () {\n        map.getCanvas().style.cursor = \"\";\n      });\n      var bbox = [[Math.min(...layerData.map(data => data.longitude)), Math.min(...layerData.map(data => data.latitude))], [Math.max(...layerData.map(data => data.longitude)), Math.max(...layerData.map(data => data.latitude))]];\n      map.fitBounds(bbox, {\n        padding: 30,\n        maxZoom: 13\n      });\n\n      if (bbox[1][0] - bbox[0][0] === 0 && bbox[1][1] - bbox[0][1] === 0) {\n        let rotating = false;\n        map.on(\"moveend\", function (e) {\n          if (!rotating) {\n            rotating = true;\n            map.rotateTo(540, {\n              duration: 100000\n            });\n          }\n        });\n      }\n    }\n  }, [map, dataWells]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.MSWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 391,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.map,\n    ref: mapEl,\n    id: `ownerDetailsCardMap${uid()}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 392,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.footerLeftLogo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: \"icons/M1LogoWhiteTransparent.png\",\n    alt: \"logo\",\n    width: \"75\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 398,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"tempPopupHolder\",\n    className: classes.portal,\n    ref: container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 401,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Portal, {\n    container: container.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }\n  }, stateApp.popupOpen && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 11\n    }\n  }, stateApp.selectedWell && /*#__PURE__*/React.createElement(PortalD, {\n    id: \"popupContainer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 406,\n      columnNumber: 15\n    }\n  }, showExpandableCard && !stateApp.expandedCard ? /*#__PURE__*/React.createElement(ExpandableCardProvider, {\n    expanded: false,\n    handleCloseExpandableCard: handleCloseExpandableCard,\n    component: /*#__PURE__*/React.createElement(WellCardProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 32\n      }\n    }),\n    title: stateApp.selectedWell.wellName,\n    subTitle: stateApp.selectedWell.operator,\n    parent: \"map\",\n    mouseX: 0,\n    mouseY: 0,\n    position: \"relative\",\n    cardLeft: 20,\n    cardTop: 70,\n    zIndex: 99,\n    cardWidth: \"350px\" // cardHeight=\"350px\"\n    ,\n    cardWidthExpanded: \"95vw\",\n    cardHeightExpanded: \"90vh\",\n    targetSourceId: stateApp.selectedWell.id,\n    targetLabel: \"well\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 19\n    }\n  }) : /*#__PURE__*/React.createElement(Popover, {\n    open: stateApp.expandedCard,\n    anchorEl: anchorElPoPOver,\n    anchorReference: \"anchorEl\",\n    style: {\n      width: \"100%\"\n    } //right:30, left: \"-30px\"}}\n    ,\n    BackdropProps: {\n      invisible: false\n    },\n    anchorOrigin: {\n      vertical: \"center\",\n      horizontal: \"center\"\n    },\n    transformOrigin: {\n      vertical: \"center\",\n      horizontal: \"center\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ExpandableCardProvider, {\n    expanded: true,\n    handleCloseExpandableCard: handleCloseExpandableCard,\n    component: /*#__PURE__*/React.createElement(WellCardProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 34\n      }\n    }),\n    title: stateApp.selectedWell.wellName,\n    subTitle: stateApp.selectedWell.operator,\n    parent: \"map\",\n    mouseX: 0,\n    mouseY: 0,\n    position: \"relative\" // cardLeft={\"0px\"}\n    // cardTop={\"0px\"}\n    ,\n    zIndex: 99 // cardWidth=\"380px\"\n    // cardHeight=\"380px\"\n    ,\n    cardWidthExpanded: \"95vw\",\n    cardHeightExpanded: \"95vh\",\n    targetSourceId: stateApp.selectedWell.id,\n    targetLabel: \"well\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 21\n    }\n  }))))));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/OwnersDetailCard/components/OwnerDetailsCardMap.js"],"names":["React","useContext","useState","useRef","useEffect","useCallback","makeStyles","mapboxgl","AppContext","uid","WELLSQUERY","useLazyQuery","ExpandableCardProvider","Portal","PortalD","Popover","WellCardProvider","useStyles","MSWrapper","width","height","map","overflow","zIndex","display","footerLeftLogo","position","bottom","left","OwnerDetailsCardMap","props","classes","stateApp","setStateApp","setMap","mapStyles","setMapStyles","mapEl","getWells","data","dataWells","showExpandableCard","setShowExpandableCard","anchorElPoPOver","setAnchorElPoPOver","container","accessToken","mapboxglAccessToken","wellsIdsArray","variables","wellIdArray","authToken","user","req","Request","method","mode","headers","Accept","abortController","AbortController","signal","fetch","then","results","json","slice","cleanup","abort","getIndex","value","arr","prop","i","length","SET_INITIAL_MAP_STYLE","index","initializeMap","id","current","newMap","Map","style","center","zoom","on","e","handleCloseExpandableCard","state","popupOpen","expandedCard","handleOpenExpandableCard","well","selectedWell","createPopUp","coordinates","popUps","document","getElementsByClassName","remove","Popup","offset","closeOnClick","setLngLat","setMaxWidth","setHTML","addTo","wells","layerData","makeGeoJSON","type","features","feature","properties","geometry","longitude","latitude","myGeoJSONData","addSource","cluster","clusterRadius","clusterMaxZoom","addLayer","source","paint","filter","property","stops","layout","bbox","point","x","y","queryRenderedFeatures","layers","clusterId","cluster_id","getSource","getClusterExpansionZoom","err","flyTo","speed","rotating","rotateTo","duration","getCanvas","cursor","Math","min","max","fitBounds","padding","maxZoom","portal","wellName","operator","invisible","vertical","horizontal"],"mappings":"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","sourcesContent":["import React, {\r\n  useContext,\r\n  useState,\r\n  useRef,\r\n  useEffect,\r\n  useCallback,\r\n} from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport { AppContext } from \"../../../AppContext\";\r\nimport uid from \"uid\";\r\nimport { WELLSQUERY } from \"../../../graphQL/useQueryWells\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\nimport ExpandableCardProvider from \"../../ExpandableCard/ExpandableCardProvider\";\r\nimport Portal from \"@material-ui/core/Portal\";\r\nimport PortalD from \"../../Map/components/Portal\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport WellCardProvider from \"../../WellCard/WellCardProvider\";\r\n// import SpatialDataCardEdit from \"../../MapControls/components/spatialDataCardEdit\";\r\n// import FilterControl from \"../../Map/components/FilterControl\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  MSWrapper: {\r\n    width: \"100%\",\r\n    height: \"300px !important\",\r\n    // overflow: \"hidden !important\",\r\n  },\r\n  map: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    overflow: \"unset\",\r\n    zIndex: \"1500\",\r\n    // overflow: \"hidden !important\",\r\n    \"& canvas\": {\r\n      height: \"100% !important\",\r\n      width: \"100% !important\",\r\n    },\r\n    \"& .mapboxgl-canvas-container\": {\r\n      width: \"100% !important\",\r\n      height: \"100% !important\",\r\n    },\r\n    \"& a.mapboxgl-ctrl-logo, .mapboxgl-ctrl.mapboxgl-ctrl-attrib\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  footerLeftLogo: {\r\n    position: \"absolute\",\r\n    bottom: \"5px\",\r\n    zIndex: \"1\",\r\n    left: \"10px\",\r\n  },\r\n}));\r\n\r\nexport default function OwnerDetailsCardMap(props) {\r\n  let classes = useStyles();\r\n  const [stateApp, setStateApp] = useContext(AppContext);\r\n  const [map, setMap] = useState(null);\r\n  const [mapStyles, setMapStyles] = useState([]);\r\n  const mapEl = useRef(null);\r\n  const [getWells, { data: dataWells }] = useLazyQuery(WELLSQUERY);\r\n  const [showExpandableCard, setShowExpandableCard] = useState(false);\r\n  const [anchorElPoPOver, setAnchorElPoPOver] = useState(null);\r\n  const container = useRef(null);\r\n  mapboxgl.accessToken = stateApp.mapboxglAccessToken;\r\n\r\n  useEffect(() => {\r\n    if (props.wellsIdsArray) {\r\n      getWells({\r\n        variables: {\r\n          wellIdArray: props.wellsIdsArray,\r\n          authToken: stateApp.user.authToken,\r\n        },\r\n      });\r\n    }\r\n  }, [props.wellsIdsArray]);\r\n\r\n  useEffect(() => {\r\n    const req = new Request(\r\n      \"https://api.mapbox.com/styles/v1/m1neral?access_token=sk.eyJ1IjoibTFuZXJhbCIsImEiOiJjazdkbGg1YXAwMjVqM2VwanZzbm95Z2dvIn0.cdoQNZU42xxbybyGxlBNkw\",\r\n      {\r\n        method: \"GET\",\r\n        mode: \"cors\",\r\n        headers: {\r\n          Accept: \"application/json\",\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n\r\n    const abortController = new AbortController();\r\n    const signal = abortController.signal;\r\n\r\n    fetch(req, { signal: signal })\r\n      .then((results) => results.json())\r\n      .then((data) => {\r\n        setMapStyles(data.slice(0, 5));\r\n      });\r\n\r\n    //clean up\r\n    return function cleanup() {\r\n      abortController.abort();\r\n    };\r\n  }, []);\r\n\r\n  function getIndex(value, arr, prop) {\r\n    for (var i = 0; i < arr.length; i++) {\r\n      if (arr[i][prop] === value) {\r\n        return i;\r\n      }\r\n    }\r\n    return -1; //to handle the case where the value doesn't exist\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (mapStyles.length > 0) {\r\n      const SET_INITIAL_MAP_STYLE = \"Satellite\";\r\n      var index = getIndex(SET_INITIAL_MAP_STYLE, mapStyles, \"name\");\r\n\r\n      const initializeMap = ({ setMap, mapEl }) => {\r\n        let id = mapEl.current.id;\r\n\r\n        const newMap = new mapboxgl.Map({\r\n          container: `${id}`,\r\n          style: \"mapbox://styles/m1neral/\" + mapStyles[index].id,\r\n          center: [-98.8, 31.6],\r\n          zoom: 5,\r\n          // pitch: 70,\r\n          // bearing: 20,\r\n        });\r\n\r\n        // var el = document.createElement(\"div\");\r\n        // el.style.backgroundImage = \"url(icons/favicon-inverted.png)\";\r\n        // el.style.width = \"28px\";\r\n        // el.style.height = \"64px\";\r\n\r\n        // new mapboxgl.Marker(el).setLngLat([-98.8, 31.6]).addTo(newMap);\r\n\r\n        // newMap.on(\"load\", function (e) {\r\n        //   newMap.flyTo({\r\n        //     center: [-98.8, 31.6],\r\n        //     zoom: 16,\r\n        //     speed: 0.4,\r\n        //     bearing: 0,\r\n        //   });\r\n        // });\r\n\r\n        // newMap.on(\"moveend\", function (e) {\r\n        //   newMap.rotateTo(540, { duration: 100000 });\r\n        // });\r\n        newMap.on(\"load\", function (e) {\r\n          setMap(newMap);\r\n        });\r\n      };\r\n\r\n      if (!map) {\r\n        initializeMap({ setMap, mapEl });\r\n      } else {\r\n      }\r\n    }\r\n  }, [map, mapStyles]);\r\n\r\n  const handleCloseExpandableCard = () => {\r\n    setShowExpandableCard(false);\r\n    setAnchorElPoPOver(null);\r\n    setStateApp((state) => ({\r\n      ...state,\r\n      popupOpen: false,\r\n      // selectedWell: null,\r\n      expandedCard: false,\r\n    }));\r\n  };\r\n\r\n  const handleOpenExpandableCard = (well) => {\r\n    setAnchorElPoPOver(container.current);\r\n    setShowExpandableCard(true);\r\n    // //show wellcard in popup Portal\r\n    setStateApp((state) => ({\r\n      ...state,\r\n      popupOpen: true,\r\n      selectedWell: well,\r\n      expandedCard: false,\r\n    }));\r\n  };\r\n\r\n  const createPopUp = useCallback(\r\n    (coordinates, well) => {\r\n      let popUps = document.getElementsByClassName(\"mapboxgl-popup\");\r\n      if (popUps[0]) popUps[0].remove();\r\n\r\n      new mapboxgl.Popup({ offset: 0, closeOnClick: false })\r\n        .setLngLat(coordinates)\r\n        .setMaxWidth(\"none\")\r\n        .setHTML(`<div id=\"popupContainer\"></div>`)\r\n        .addTo(map);\r\n\r\n      handleOpenExpandableCard(well);\r\n    },\r\n    [map, setStateApp]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (\r\n      map &&\r\n      dataWells &&\r\n      dataWells.wells &&\r\n      dataWells.wells.results &&\r\n      dataWells.wells.results.length > 0\r\n    ) {\r\n      let layerData = dataWells.wells.results;\r\n      const makeGeoJSON = (data) => {\r\n        return {\r\n          type: \"FeatureCollection\",\r\n          features: data.map((feature) => {\r\n            return {\r\n              type: \"Feature\",\r\n              properties: feature,\r\n              geometry: {\r\n                type: \"Point\",\r\n                coordinates: [feature.longitude, feature.latitude],\r\n              },\r\n            };\r\n          }),\r\n        };\r\n      };\r\n\r\n      const myGeoJSONData = makeGeoJSON(layerData);\r\n\r\n      // -> add source\r\n      map.addSource(\"wells\", {\r\n        type: \"geojson\",\r\n        data: myGeoJSONData,\r\n        cluster: true,\r\n        clusterRadius: 50,\r\n        clusterMaxZoom: 6,\r\n      });\r\n\r\n      map.addLayer({\r\n        id: \"unclustered-point\",\r\n        type: \"circle\",\r\n        source: \"wells\",\r\n        paint: {\r\n          \"circle-radius\": 5,\r\n          \"circle-color\": \"#11b4da\",\r\n          \"circle-stroke-width\": 2,\r\n          \"circle-stroke-color\": \"#fff\",\r\n        },\r\n      });\r\n\r\n      map.addLayer({\r\n        id: \"clusters\",\r\n        type: \"circle\",\r\n        source: \"wells\",\r\n        filter: [\"has\", \"point_count\"],\r\n        paint: {\r\n          \"circle-color\": {\r\n            property: \"point_count\",\r\n            type: \"interval\",\r\n            stops: [\r\n              [0, \"#11b4da\"],\r\n              [100, \"#11b4da\"],\r\n              [750, \"#11b4da\"],\r\n            ],\r\n          },\r\n\r\n          \"circle-radius\": [\r\n            \"step\",\r\n            [\"get\", \"point_count\"],\r\n            20,\r\n            5,\r\n            25,\r\n            10,\r\n            30,\r\n            20,\r\n            35,\r\n          ],\r\n\r\n          \"circle-stroke-width\": 5,\r\n          \"circle-stroke-color\": \"#fff\",\r\n        },\r\n      });\r\n\r\n      map.addLayer({\r\n        id: \"cluster-count\",\r\n        type: \"symbol\",\r\n        source: \"wells\",\r\n        filter: [\"has\", \"point_count\"],\r\n        layout: {\r\n          \"text-field\": \"{point_count}\",\r\n          \"text-font\": [\"DIN Offc Pro Bold\", \"Arial Unicode MS Bold\"],\r\n          \"text-size\": 12,\r\n        },\r\n      });\r\n\r\n      // inspect a cluster on click\r\n      map.on(\"click\", \"clusters\", function (e) {\r\n        var bbox = [\r\n          [e.point.x - 10, e.point.y - 10],\r\n          [e.point.x + 10, e.point.y + 10],\r\n        ];\r\n        let features = map.queryRenderedFeatures(bbox, {\r\n          layers: [\"clusters\"],\r\n        });\r\n\r\n        var clusterId = features[0].properties.cluster_id;\r\n        map\r\n          .getSource(\"wells\")\r\n          .getClusterExpansionZoom(clusterId, function (err, zoom) {\r\n            if (err) return;\r\n            map.flyTo({\r\n              center: features[0].geometry.coordinates,\r\n              zoom: zoom,\r\n            });\r\n          });\r\n      });\r\n\r\n      map.on(\"click\", \"unclustered-point\", function (e) {\r\n        var bbox = [\r\n          [e.point.x - 10, e.point.y - 10],\r\n          [e.point.x + 10, e.point.y + 10],\r\n        ];\r\n        let features = map.queryRenderedFeatures(bbox, {\r\n          layers: [\"unclustered-point\"],\r\n        });\r\n\r\n        map.flyTo({\r\n          center: features[0].geometry.coordinates,\r\n          zoom: 13,\r\n          speed: 0.8,\r\n        });\r\n\r\n        let rotating = false;\r\n        map.on(\"moveend\", function (e) {\r\n          if (!rotating) {\r\n            rotating = true;\r\n            map.rotateTo(540, { duration: 100000 });\r\n          }\r\n        });\r\n\r\n        //// find the well by id\r\n        for (let i = 0; i < layerData.length; i++) {\r\n          if (layerData[i].id === features[0].properties.id) {\r\n            createPopUp(features[0].geometry.coordinates, layerData[i]);\r\n            // map.resize();\r\n            break;\r\n          }\r\n        }\r\n      });\r\n\r\n      map.on(\"mouseenter\", \"clusters\", function () {\r\n        map.getCanvas().style.cursor = \"pointer\";\r\n      });\r\n      map.on(\"mouseleave\", \"clusters\", function () {\r\n        map.getCanvas().style.cursor = \"\";\r\n      });\r\n      map.on(\"mouseenter\", \"unclustered-point\", function () {\r\n        map.getCanvas().style.cursor = \"pointer\";\r\n      });\r\n      map.on(\"mouseleave\", \"unclustered-point\", function () {\r\n        map.getCanvas().style.cursor = \"\";\r\n      });\r\n\r\n      var bbox = [\r\n        [\r\n          Math.min(...layerData.map((data) => data.longitude)),\r\n          Math.min(...layerData.map((data) => data.latitude)),\r\n        ],\r\n        [\r\n          Math.max(...layerData.map((data) => data.longitude)),\r\n          Math.max(...layerData.map((data) => data.latitude)),\r\n        ],\r\n      ];\r\n\r\n      map.fitBounds(bbox, {\r\n        padding: 30,\r\n        maxZoom: 13,\r\n      });\r\n\r\n      if (bbox[1][0] - bbox[0][0] === 0 && bbox[1][1] - bbox[0][1] === 0) {\r\n        let rotating = false;\r\n        map.on(\"moveend\", function (e) {\r\n          if (!rotating) {\r\n            rotating = true;\r\n            map.rotateTo(540, { duration: 100000 });\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }, [map, dataWells]);\r\n\r\n  return (\r\n    <div className={classes.MSWrapper}>\r\n      <div\r\n        className={classes.map}\r\n        ref={mapEl}\r\n        id={`ownerDetailsCardMap${uid()}`}\r\n      >\r\n        <div className={classes.footerLeftLogo}>\r\n          <img src=\"icons/M1LogoWhiteTransparent.png\" alt=\"logo\" width=\"75\" />\r\n        </div>\r\n      </div>\r\n      <div id=\"tempPopupHolder\" className={classes.portal} ref={container} />\r\n      <Portal container={container.current}>\r\n        {stateApp.popupOpen && (\r\n          <div>\r\n            {stateApp.selectedWell && (\r\n              <PortalD id=\"popupContainer\">\r\n                {showExpandableCard && !stateApp.expandedCard ? (\r\n                  <ExpandableCardProvider\r\n                    expanded={false}\r\n                    handleCloseExpandableCard={handleCloseExpandableCard}\r\n                    component={<WellCardProvider></WellCardProvider>}\r\n                    title={stateApp.selectedWell.wellName}\r\n                    subTitle={stateApp.selectedWell.operator}\r\n                    parent=\"map\"\r\n                    mouseX={0}\r\n                    mouseY={0}\r\n                    position=\"relative\"\r\n                    cardLeft={20}\r\n                    cardTop={70}\r\n                    zIndex={99}\r\n                    cardWidth=\"350px\"\r\n                    // cardHeight=\"350px\"\r\n                    cardWidthExpanded=\"95vw\"\r\n                    cardHeightExpanded=\"90vh\"\r\n                    targetSourceId={stateApp.selectedWell.id}\r\n                    targetLabel=\"well\"\r\n                  ></ExpandableCardProvider>\r\n                ) : (\r\n                  <Popover\r\n                    open={stateApp.expandedCard}\r\n                    anchorEl={anchorElPoPOver}\r\n                    anchorReference=\"anchorEl\"\r\n                    style={{ width: \"100%\" }} //right:30, left: \"-30px\"}}\r\n                    BackdropProps={{ invisible: false }}\r\n                    anchorOrigin={{\r\n                      vertical: \"center\",\r\n                      horizontal: \"center\",\r\n                    }}\r\n                    transformOrigin={{\r\n                      vertical: \"center\",\r\n                      horizontal: \"center\",\r\n                    }}\r\n                  >\r\n                    <ExpandableCardProvider\r\n                      expanded={true}\r\n                      handleCloseExpandableCard={handleCloseExpandableCard}\r\n                      component={<WellCardProvider></WellCardProvider>}\r\n                      title={stateApp.selectedWell.wellName}\r\n                      subTitle={stateApp.selectedWell.operator}\r\n                      parent=\"map\"\r\n                      mouseX={0}\r\n                      mouseY={0}\r\n                      position=\"relative\"\r\n                      // cardLeft={\"0px\"}\r\n                      // cardTop={\"0px\"}\r\n                      zIndex={99}\r\n                      // cardWidth=\"380px\"\r\n                      // cardHeight=\"380px\"\r\n                      cardWidthExpanded=\"95vw\"\r\n                      cardHeightExpanded=\"95vh\"\r\n                      targetSourceId={stateApp.selectedWell.id}\r\n                      targetLabel=\"well\"\r\n                    ></ExpandableCardProvider>\r\n                  </Popover>\r\n                )}\r\n              </PortalD>\r\n            )}\r\n          </div>\r\n        )}\r\n      </Portal>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}