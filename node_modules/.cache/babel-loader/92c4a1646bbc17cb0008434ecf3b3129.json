{"ast":null,"code":"import { __extends, __values } from \"tslib\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { isElement } from 'react-is';\nimport { isFrozen } from './ColumnUtils';\nimport { HeaderRowType } from './common/enums';\n\nfunction SimpleCellRenderer(_a) {\n  var column = _a.column,\n      rowType = _a.rowType;\n  var headerText = rowType === HeaderRowType.HEADER ? column.name : '';\n  return React.createElement(\"div\", null, headerText);\n}\n\nvar HeaderCell =\n/** @class */\nfunction (_super) {\n  __extends(HeaderCell, _super);\n\n  function HeaderCell() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.cell = React.createRef();\n\n    _this.onMouseDown = function (event) {\n      if (event.button !== 0) {\n        return;\n      }\n\n      var right = event.currentTarget.getBoundingClientRect().right;\n      var offset = right - event.clientX;\n\n      if (offset > 11) {\n        // +1px to account for the border size\n        return;\n      }\n\n      var onMouseMove = function (event) {\n        _this.onResize(event.clientX + offset);\n      };\n\n      var onMouseUp = function (event) {\n        window.removeEventListener('mousemove', onMouseMove);\n        window.removeEventListener('mouseup', onMouseUp);\n\n        _this.onResizeEnd(event.clientX + offset);\n      };\n\n      event.preventDefault();\n      window.addEventListener('mousemove', onMouseMove);\n      window.addEventListener('mouseup', onMouseUp);\n    };\n\n    _this.onTouchStart = function (event) {\n      var touch = event.changedTouches[0];\n      var identifier = touch.identifier;\n      var right = event.currentTarget.getBoundingClientRect().right;\n      var offset = right - touch.clientX;\n\n      if (offset > 11) {\n        // +1px to account for the border size\n        return;\n      }\n\n      function getTouch(event) {\n        var e_1, _a;\n\n        try {\n          for (var _b = __values(event.changedTouches), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var touch_1 = _c.value;\n            if (touch_1.identifier === identifier) return touch_1;\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n\n        return null;\n      }\n\n      var onTouchMove = function (event) {\n        var touch = getTouch(event);\n\n        if (touch) {\n          _this.onResize(touch.clientX + offset);\n        }\n      };\n\n      var onTouchEnd = function (event) {\n        var touch = getTouch(event);\n        if (!touch) return;\n        window.removeEventListener('touchmove', onTouchMove);\n        window.removeEventListener('touchend', onTouchEnd);\n\n        _this.onResizeEnd(touch.clientX + offset);\n      };\n\n      window.addEventListener('touchmove', onTouchMove);\n      window.addEventListener('touchend', onTouchEnd);\n    };\n\n    return _this;\n  }\n\n  HeaderCell.prototype.onResize = function (x) {\n    var onResize = this.props.onResize;\n\n    if (onResize) {\n      var width = this.getWidthFromMouseEvent(x);\n\n      if (width > 0) {\n        onResize(this.props.column, width);\n      }\n    }\n  };\n\n  HeaderCell.prototype.onResizeEnd = function (x) {\n    var width = this.getWidthFromMouseEvent(x);\n    this.props.onResizeEnd(this.props.column, width);\n  };\n\n  HeaderCell.prototype.getWidthFromMouseEvent = function (x) {\n    return x - this.cell.current.getBoundingClientRect().left;\n  };\n\n  HeaderCell.prototype.getCell = function () {\n    var _a = this.props,\n        height = _a.height,\n        column = _a.column,\n        rowType = _a.rowType;\n    var renderer = this.props.renderer || SimpleCellRenderer;\n\n    if (isElement(renderer)) {\n      // if it is a string, it's an HTML element, and column is not a valid property, so only pass height\n      if (typeof renderer.type === 'string') {\n        return React.cloneElement(renderer, {\n          height: height\n        });\n      }\n\n      return React.cloneElement(renderer, {\n        column: column,\n        height: height\n      });\n    }\n\n    return React.createElement(renderer, {\n      column: column,\n      rowType: rowType\n    });\n  };\n\n  HeaderCell.prototype.setScrollLeft = function (scrollLeft) {\n    var node = this.cell.current;\n\n    if (node) {\n      node.style.transform = \"translateX(\" + scrollLeft + \"px)\";\n    }\n  };\n\n  HeaderCell.prototype.removeScroll = function () {\n    var node = this.cell.current;\n\n    if (node) {\n      node.style.transform = 'none';\n    }\n  };\n\n  HeaderCell.prototype.render = function () {\n    var _a = this.props,\n        column = _a.column,\n        rowType = _a.rowType,\n        height = _a.height;\n    var className = classNames('react-grid-HeaderCell', {\n      'rdg-header-cell-resizable': column.resizable,\n      'react-grid-HeaderCell--frozen': isFrozen(column)\n    }, this.props.className, column.cellClass);\n    var style = {\n      width: column.width,\n      left: column.left,\n      height: height\n    };\n    var cell = React.createElement(\"div\", {\n      className: className,\n      style: style,\n      ref: this.cell,\n      onMouseDown: column.resizable ? this.onMouseDown : undefined,\n      onTouchStart: column.resizable ? this.onTouchStart : undefined\n    }, this.getCell());\n    var DraggableHeaderCell = this.props.draggableHeaderCell;\n\n    if (rowType === HeaderRowType.HEADER && column.draggable && DraggableHeaderCell) {\n      return React.createElement(DraggableHeaderCell, {\n        column: column,\n        onHeaderDrop: this.props.onHeaderDrop\n      }, cell);\n    }\n\n    return cell;\n  };\n\n  return HeaderCell;\n}(React.Component);\n\nexport default HeaderCell;","map":{"version":3,"sources":["../src/HeaderCell.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport { isElement } from 'react-is';\nimport { isFrozen } from './ColumnUtils';\nimport { HeaderRowType } from './common/enums';\nimport { CalculatedColumn, HeaderRowProps } from './common/types';\n\nfunction SimpleCellRenderer<R>({ column, rowType }: HeaderRowProps<R>) {\n  const headerText = rowType === HeaderRowType.HEADER ? column.name : '';\n  return <div>{headerText}</div>;\n}\n\ninterface Props<R> {\n  renderer?: React.ReactElement | React.ComponentType<HeaderRowProps<R>>;\n  column: CalculatedColumn<R>;\n  rowType: HeaderRowType;\n  height: number;\n  onResize(column: CalculatedColumn<R>, width: number): void;\n  onResizeEnd(column: CalculatedColumn<R>, width: number): void;\n  onHeaderDrop?(): void;\n  draggableHeaderCell?: React.ComponentType<{ column: CalculatedColumn<R>; onHeaderDrop(): void }>;\n  className?: string;\n}\n\nexport default class HeaderCell<R> extends React.Component<Props<R>> {\n  private readonly cell = React.createRef<HTMLDivElement>();\n\n  private onMouseDown = (event: React.MouseEvent) => {\n    if (event.button !== 0) {\n      return;\n    }\n\n    const { right } = event.currentTarget.getBoundingClientRect();\n    const offset = right - event.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    const onMouseMove = (event: MouseEvent) => {\n      this.onResize(event.clientX + offset);\n    };\n\n    const onMouseUp = (event: MouseEvent) => {\n      window.removeEventListener('mousemove', onMouseMove);\n      window.removeEventListener('mouseup', onMouseUp);\n      this.onResizeEnd(event.clientX + offset);\n    };\n\n    event.preventDefault();\n    window.addEventListener('mousemove', onMouseMove);\n    window.addEventListener('mouseup', onMouseUp);\n  };\n\n  private onTouchStart = (event: React.TouchEvent) => {\n    const touch = event.changedTouches[0];\n    const { identifier } = touch;\n    const { right } = event.currentTarget.getBoundingClientRect();\n    const offset = right - touch.clientX;\n\n    if (offset > 11) { // +1px to account for the border size\n      return;\n    }\n\n    function getTouch(event: TouchEvent) {\n      for (const touch of event.changedTouches) {\n        if (touch.identifier === identifier) return touch;\n      }\n      return null;\n    }\n\n    const onTouchMove = (event: TouchEvent) => {\n      const touch = getTouch(event);\n      if (touch) {\n        this.onResize(touch.clientX + offset);\n      }\n    };\n\n    const onTouchEnd = (event: TouchEvent) => {\n      const touch = getTouch(event);\n      if (!touch) return;\n      window.removeEventListener('touchmove', onTouchMove);\n      window.removeEventListener('touchend', onTouchEnd);\n      this.onResizeEnd(touch.clientX + offset);\n    };\n\n    window.addEventListener('touchmove', onTouchMove);\n    window.addEventListener('touchend', onTouchEnd);\n  };\n\n  private onResize(x: number) {\n    const { onResize } = this.props;\n    if (onResize) {\n      const width = this.getWidthFromMouseEvent(x);\n      if (width > 0) {\n        onResize(this.props.column, width);\n      }\n    }\n  }\n\n  private onResizeEnd(x: number) {\n    const width = this.getWidthFromMouseEvent(x);\n    this.props.onResizeEnd(this.props.column, width);\n  }\n\n  private getWidthFromMouseEvent(x: number): number {\n    return x - this.cell.current!.getBoundingClientRect().left;\n  }\n\n  getCell() {\n    const { height, column, rowType } = this.props;\n    const renderer = this.props.renderer || SimpleCellRenderer;\n    if (isElement(renderer)) {\n      // if it is a string, it's an HTML element, and column is not a valid property, so only pass height\n      if (typeof renderer.type === 'string') {\n        return React.cloneElement(renderer, { height });\n      }\n      return React.cloneElement(renderer, { column, height });\n    }\n    return React.createElement(renderer, { column, rowType });\n  }\n\n  setScrollLeft(scrollLeft: number) {\n    const node = this.cell.current;\n    if (node) {\n      node.style.transform = `translateX(${scrollLeft}px)`;\n    }\n  }\n\n  removeScroll() {\n    const node = this.cell.current;\n    if (node) {\n      node.style.transform = 'none';\n    }\n  }\n\n  render() {\n    const { column, rowType, height } = this.props;\n\n    const className = classNames('react-grid-HeaderCell', {\n      'rdg-header-cell-resizable': column.resizable,\n      'react-grid-HeaderCell--frozen': isFrozen(column)\n    }, this.props.className, column.cellClass);\n\n    const style: React.CSSProperties = {\n      width: column.width,\n      left: column.left,\n      height\n    };\n\n    const cell = (\n      <div\n        className={className}\n        style={style}\n        ref={this.cell}\n        onMouseDown={column.resizable ? this.onMouseDown : undefined}\n        onTouchStart={column.resizable ? this.onTouchStart : undefined}\n      >\n        {this.getCell()}\n      </div>\n    );\n\n    const DraggableHeaderCell = this.props.draggableHeaderCell;\n    if (rowType === HeaderRowType.HEADER && column.draggable && DraggableHeaderCell) {\n      return (\n        <DraggableHeaderCell\n          column={column}\n          onHeaderDrop={this.props.onHeaderDrop!}\n        >\n          {cell}\n        </DraggableHeaderCell>\n      );\n    }\n\n    return cell;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}