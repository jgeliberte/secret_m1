{"ast":null,"code":"import { __extends } from \"tslib\";\nimport React from 'react';\nimport { isValidElementType } from 'react-is';\nimport Header from './Header';\nimport Viewport from './Viewport';\nimport { isFrozen } from './ColumnUtils';\n\nvar Grid =\n/** @class */\nfunction (_super) {\n  __extends(Grid, _super);\n\n  function Grid() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.header = React.createRef();\n    _this.viewport = React.createRef();\n    _this._scrollLeft = undefined;\n\n    _this.onScroll = function (scrollState) {\n      if (_this.props.onScroll) {\n        _this.props.onScroll(scrollState);\n      }\n\n      var scrollLeft = scrollState.scrollLeft;\n\n      if (_this._scrollLeft !== scrollLeft || _this.areFrozenColumnsScrolledLeft(scrollLeft)) {\n        _this._scrollLeft = scrollLeft;\n\n        _this._onScroll();\n      }\n    };\n\n    return _this;\n  }\n\n  Grid.prototype._onScroll = function () {\n    if (this._scrollLeft !== undefined) {\n      this.header.current.setScrollLeft(this._scrollLeft);\n\n      if (this.viewport.current) {\n        this.viewport.current.setScrollLeft(this._scrollLeft);\n      }\n    }\n  };\n\n  Grid.prototype.areFrozenColumnsScrolledLeft = function (scrollLeft) {\n    return scrollLeft > 0 && this.props.columnMetrics.columns.some(function (c) {\n      return isFrozen(c);\n    });\n  };\n\n  Grid.prototype.componentDidMount = function () {\n    this._scrollLeft = this.viewport.current ? this.viewport.current.getScroll().scrollLeft : 0;\n\n    this._onScroll();\n  };\n\n  Grid.prototype.componentDidUpdate = function () {\n    this._onScroll();\n  };\n\n  Grid.prototype.render = function () {\n    var headerRows = this.props.headerRows;\n    var EmptyRowsView = this.props.emptyRowsView;\n    return React.createElement(\"div\", {\n      className: \"react-grid-Grid\",\n      style: {\n        minHeight: this.props.minHeight\n      }\n    }, React.createElement(Header, {\n      ref: this.header,\n      columnMetrics: this.props.columnMetrics,\n      onColumnResize: this.props.onColumnResize,\n      rowHeight: this.props.rowHeight,\n      totalWidth: this.props.totalWidth,\n      headerRows: headerRows,\n      sortColumn: this.props.sortColumn,\n      sortDirection: this.props.sortDirection,\n      draggableHeaderCell: this.props.draggableHeaderCell,\n      onSort: this.props.onSort,\n      onHeaderDrop: this.props.onHeaderDrop,\n      getValidFilterValues: this.props.getValidFilterValues,\n      cellMetaData: this.props.cellMetaData\n    }), this.props.rowsCount === 0 && isValidElementType(EmptyRowsView) ? React.createElement(\"div\", {\n      className: \"react-grid-Empty\"\n    }, React.createElement(EmptyRowsView, null)) : React.createElement(\"div\", {\n      onKeyDown: this.props.onViewportKeydown,\n      onKeyUp: this.props.onViewportKeyup\n    }, React.createElement(Viewport, {\n      ref: this.viewport,\n      rowKey: this.props.rowKey,\n      rowHeight: this.props.rowHeight,\n      rowRenderer: this.props.rowRenderer,\n      rowGetter: this.props.rowGetter,\n      rowsCount: this.props.rowsCount,\n      selectedRows: this.props.selectedRows,\n      columnMetrics: this.props.columnMetrics,\n      totalWidth: this.props.totalWidth,\n      onScroll: this.onScroll,\n      cellMetaData: this.props.cellMetaData,\n      rowOffsetHeight: this.props.rowOffsetHeight || this.props.rowHeight * headerRows.length,\n      minHeight: this.props.minHeight,\n      scrollToRowIndex: this.props.scrollToRowIndex,\n      contextMenu: this.props.contextMenu,\n      rowSelection: this.props.rowSelection,\n      getSubRowDetails: this.props.getSubRowDetails,\n      rowGroupRenderer: this.props.rowGroupRenderer,\n      enableCellSelect: this.props.enableCellSelect,\n      enableCellAutoFocus: this.props.enableCellAutoFocus,\n      cellNavigationMode: this.props.cellNavigationMode,\n      eventBus: this.props.eventBus,\n      interactionMasksMetaData: this.props.interactionMasksMetaData,\n      RowsContainer: this.props.RowsContainer,\n      editorPortalTarget: this.props.editorPortalTarget\n    })));\n  };\n\n  Grid.displayName = 'Grid';\n  return Grid;\n}(React.Component);\n\nexport default Grid;","map":{"version":3,"sources":["../src/Grid.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { isValidElementType } from 'react-is';\n\nimport Header from './Header';\nimport Viewport, { ScrollState } from './Viewport';\nimport { isFrozen } from './ColumnUtils';\nimport { HeaderRowData, CellMetaData, RowSelection, InteractionMasksMetaData, SelectedRow } from './common/types';\nimport { DEFINE_SORT } from './common/enums';\nimport { DataGridProps, DataGridState } from './ReactDataGrid';\nimport { EventBus } from './masks';\n\ntype SharedDataGridProps<R> = Pick<DataGridProps<R>,\n'rowKey'\n| 'draggableHeaderCell'\n| 'getValidFilterValues'\n| 'rowGetter'\n| 'rowsCount'\n| 'rowHeight'\n| 'rowRenderer'\n| 'rowGroupRenderer'\n| 'minHeight'\n| 'scrollToRowIndex'\n| 'contextMenu'\n| 'enableCellSelect'\n| 'enableCellAutoFocus'\n| 'cellNavigationMode'\n| 'onScroll'\n| 'RowsContainer'\n| 'emptyRowsView'\n| 'onHeaderDrop'\n| 'getSubRowDetails'\n| 'editorPortalTarget'\n>;\n\ntype SharedDataGridState<R> = Pick<DataGridState<R>,\n'columnMetrics'\n| 'sortColumn'\n| 'sortDirection'\n>;\n\nexport interface GridProps<R> extends SharedDataGridProps<R>, SharedDataGridState<R> {\n  headerRows: HeaderRowData<R>[];\n  cellMetaData: CellMetaData<R>;\n  selectedRows?: SelectedRow<R>[];\n  rowSelection?: RowSelection;\n  rowOffsetHeight: number;\n  onSort(columnKey: keyof R, sortDirection: DEFINE_SORT): void;\n  totalWidth: number | string;\n  onViewportKeydown(e: React.KeyboardEvent<HTMLDivElement>): void;\n  onViewportKeyup(e: React.KeyboardEvent<HTMLDivElement>): void;\n  onColumnResize(idx: number, width: number): void;\n  eventBus: EventBus;\n  interactionMasksMetaData: InteractionMasksMetaData<R>;\n}\n\nexport default class Grid<R> extends React.Component<GridProps<R>> {\n  static displayName = 'Grid';\n\n  private readonly header = React.createRef<Header<R>>();\n  private readonly viewport = React.createRef<Viewport<R>>();\n  private _scrollLeft?: number = undefined;\n\n  _onScroll() {\n    if (this._scrollLeft !== undefined) {\n      this.header.current!.setScrollLeft(this._scrollLeft);\n      if (this.viewport.current) {\n        this.viewport.current.setScrollLeft(this._scrollLeft);\n      }\n    }\n  }\n\n  areFrozenColumnsScrolledLeft(scrollLeft: number) {\n    return scrollLeft > 0 && this.props.columnMetrics.columns.some(c => isFrozen(c));\n  }\n\n  onScroll = (scrollState: ScrollState) => {\n    if (this.props.onScroll) {\n      this.props.onScroll(scrollState);\n    }\n    const { scrollLeft } = scrollState;\n    if (this._scrollLeft !== scrollLeft || this.areFrozenColumnsScrolledLeft(scrollLeft)) {\n      this._scrollLeft = scrollLeft;\n      this._onScroll();\n    }\n  };\n\n  componentDidMount() {\n    this._scrollLeft = this.viewport.current ? this.viewport.current.getScroll().scrollLeft : 0;\n    this._onScroll();\n  }\n\n  componentDidUpdate() {\n    this._onScroll();\n  }\n\n  render() {\n    const { headerRows } = this.props;\n    const EmptyRowsView = this.props.emptyRowsView;\n\n    return (\n      <div className=\"react-grid-Grid\" style={{ minHeight: this.props.minHeight }}>\n        <Header<R>\n          ref={this.header}\n          columnMetrics={this.props.columnMetrics}\n          onColumnResize={this.props.onColumnResize}\n          rowHeight={this.props.rowHeight}\n          totalWidth={this.props.totalWidth}\n          headerRows={headerRows}\n          sortColumn={this.props.sortColumn}\n          sortDirection={this.props.sortDirection}\n          draggableHeaderCell={this.props.draggableHeaderCell}\n          onSort={this.props.onSort}\n          onHeaderDrop={this.props.onHeaderDrop}\n          getValidFilterValues={this.props.getValidFilterValues}\n          cellMetaData={this.props.cellMetaData}\n        />\n        {this.props.rowsCount === 0 && isValidElementType(EmptyRowsView) ? (\n          <div className=\"react-grid-Empty\">\n            <EmptyRowsView />\n          </div>\n        ) : (\n          <div\n            onKeyDown={this.props.onViewportKeydown}\n            onKeyUp={this.props.onViewportKeyup}\n          >\n            <Viewport<R>\n              ref={this.viewport}\n              rowKey={this.props.rowKey}\n              rowHeight={this.props.rowHeight}\n              rowRenderer={this.props.rowRenderer}\n              rowGetter={this.props.rowGetter}\n              rowsCount={this.props.rowsCount}\n              selectedRows={this.props.selectedRows}\n              columnMetrics={this.props.columnMetrics}\n              totalWidth={this.props.totalWidth}\n              onScroll={this.onScroll}\n              cellMetaData={this.props.cellMetaData}\n              rowOffsetHeight={this.props.rowOffsetHeight || this.props.rowHeight * headerRows.length}\n              minHeight={this.props.minHeight}\n              scrollToRowIndex={this.props.scrollToRowIndex}\n              contextMenu={this.props.contextMenu}\n              rowSelection={this.props.rowSelection}\n              getSubRowDetails={this.props.getSubRowDetails}\n              rowGroupRenderer={this.props.rowGroupRenderer}\n              enableCellSelect={this.props.enableCellSelect}\n              enableCellAutoFocus={this.props.enableCellAutoFocus}\n              cellNavigationMode={this.props.cellNavigationMode}\n              eventBus={this.props.eventBus}\n              interactionMasksMetaData={this.props.interactionMasksMetaData}\n              RowsContainer={this.props.RowsContainer}\n              editorPortalTarget={this.props.editorPortalTarget}\n            />\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}