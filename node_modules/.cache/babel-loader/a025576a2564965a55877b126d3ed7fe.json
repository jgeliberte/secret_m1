{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterParcel.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { NavigationContext } from \"../NavigationContext\";\nimport { AppContext } from \"../../../AppContext\";\nexport default (() => {\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [stateApp, setStateApp] = useContext(AppContext);\n  const [parcelData, setParcelData] = useState([]);\n  const [parcelName, setParcelName] = useState(stateNav.parcelName ? stateNav.parcelName : []);\n  const [parcelNameList, setParcelNameList] = useState([]);\n  useEffect(() => {\n    const groupBy = (arr, property) => {\n      return arr.reduce((memo, x) => {\n        if (!memo[x[property]]) {\n          memo[x[property]] = [];\n        }\n\n        memo[x[property]].push(x);\n        return memo;\n      }, {});\n    };\n\n    const layerData = groupBy(stateApp.customLayers, \"layer\")['parcel'];\n\n    if (layerData && layerData.length > 0) {\n      setParcelData(layerData);\n      setParcelNameList(layerData.filter(layer => layer.name).map(layer => layer.name));\n    }\n  }, [stateApp.customLayers]);\n\n  const handleParcelChange = value => {\n    let filter;\n\n    if (value && value.length) {\n      const layers = parcelData.filter(parcel => value.indexOf(parcel.name) > -1);\n      filter = layers.map(basinShape => {\n        return JSON.parse(basinShape.shape);\n      });\n      console.log(layers, filter);\n      setStateNav(stateNav => ({ ...stateNav,\n        parcelName: value\n      }));\n      setParcelName(value);\n    } else {\n      filter = null;\n      setStateNav(stateNav => ({ ...stateNav,\n        parcelName: null\n      }));\n    }\n\n    setStateNav(stateNav => ({ ...stateNav,\n      filterParcel: filter\n    }));\n  };\n\n  if (parcelNameList.length > 0) {\n    return /*#__PURE__*/React.createElement(Autocomplete, {\n      defaultValue: parcelName,\n      onChange: (event, newValue) => {\n        handleParcelChange(newValue);\n      },\n      multiple: true,\n      ChipProps: {\n        color: \"secondary\"\n      },\n      options: parcelNameList,\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        variant: \"outlined\",\n        label: \"Parcel\",\n        placeholder: \"\",\n        fullWidth: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }\n      })),\n      disableListWrap: true,\n      id: \"virtualize-parcel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    });\n  }\n\n  return null;\n});","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterParcel.js"],"names":["React","useContext","useEffect","useState","TextField","Autocomplete","NavigationContext","AppContext","stateNav","setStateNav","stateApp","setStateApp","parcelData","setParcelData","parcelName","setParcelName","parcelNameList","setParcelNameList","groupBy","arr","property","reduce","memo","x","push","layerData","customLayers","length","filter","layer","name","map","handleParcelChange","value","layers","parcel","indexOf","basinShape","JSON","parse","shape","console","log","filterParcel","event","newValue","color","params"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\nimport { AppContext } from \"../../../AppContext\";\r\n\r\nexport default () => {\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [stateApp, setStateApp] = useContext(AppContext);\r\n  const [parcelData, setParcelData] = useState([]);\r\n  const [parcelName, setParcelName] = useState(\r\n    stateNav.parcelName ? stateNav.parcelName : []\r\n  );\r\n  const [parcelNameList, setParcelNameList] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const groupBy = (arr, property) => {\r\n      return arr.reduce((memo, x) => {\r\n        if (!memo[x[property]]) {\r\n          memo[x[property]] = [];\r\n        }\r\n        memo[x[property]].push(x);\r\n        return memo;\r\n      }, {});\r\n    };\r\n\r\n    const layerData = groupBy(stateApp.customLayers, \"layer\")['parcel'];\r\n    if (layerData && layerData.length > 0) {\r\n      setParcelData(layerData);\r\n      setParcelNameList(layerData.filter(layer => layer.name).map(layer => layer.name));\r\n    }\r\n    \r\n  }, [stateApp.customLayers]);\r\n\r\n  const handleParcelChange = (value) => {\r\n    let filter;\r\n    if (value && value.length) {\r\n      const layers = parcelData.filter(parcel => value.indexOf(parcel.name) > -1);\r\n      filter = layers.map(basinShape => {\r\n        return JSON.parse(basinShape.shape);\r\n      });\r\n      console.log(layers, filter);\r\n      setStateNav((stateNav) => ({ ...stateNav, parcelName: value }));\r\n      setParcelName(value);\r\n    } else {\r\n      filter = null;\r\n      setStateNav((stateNav) => ({ ...stateNav, parcelName: null }));\r\n    }\r\n    setStateNav((stateNav) => ({ ...stateNav, filterParcel: filter }));\r\n  };\r\n\r\n  if (parcelNameList.length > 0) {\r\n    return (\r\n      <Autocomplete\r\n        defaultValue={parcelName}\r\n        onChange={(event, newValue) => {\r\n          handleParcelChange(newValue);\r\n        }}\r\n        multiple\r\n        ChipProps={{ color: \"secondary\" }}\r\n        options={parcelNameList}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            variant=\"outlined\"\r\n            label=\"Parcel\"\r\n            placeholder=\"\"\r\n            fullWidth\r\n          />\r\n        )}\r\n        disableListWrap\r\n        id=\"virtualize-parcel\"\r\n      />\r\n    );\r\n  }\r\n  return null;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}