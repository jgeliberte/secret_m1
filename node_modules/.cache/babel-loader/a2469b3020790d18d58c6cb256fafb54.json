{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterFormValue.js\";\nimport React, { useState, useContext, useEffect } from \"react\"; // import { NavigationContext } from \"../NavigationContext\";\n// import ProdMinMax from \"./ProdMinMax\";\n// import FormControl from \"@material-ui/core/FormControl\";\n\nimport FilterOwnerAppraisalValue from \"./FilterOwnerAppraisalValue\";\nimport FilterWellAppraisal from \"./FilterWellAppraisal\";\nimport Grid from \"@material-ui/core/Grid\";\nexport default function FilterFormProduction() {\n  // const [stateNav, setStateNav] = useContext(NavigationContext);\n  // const [prodOptions, setProdOptions] = useState(\n  //   stateNav.prodOptions ? stateNav.prodOptions : null\n  // );\n  // const [list, setList] = useState([]);\n  // const [optionsCopy, setOptionsCopy] = useState(null);\n  // const handleSelectedValueToDisplay = (value) => {\n  // setProdOptions(value);\n  // setStateNav(stateNav => ({\n  //   ...stateNav,\n  //   prodOptions: value\n  // }));\n  // };\n  // useEffect(() => {\n  //   if (stateNav.prodOptions && optionsCopy) {\n  // const check = optionsCopy.map(val => val)\n  // const removeFilters = check.filter(name => !stateNav.prodOptions.includes(name.name))\n  // removeFilters.forEach(element => {\n  //   setStateNav(stateNav => ({\n  //     ...stateNav,\n  //     [element.filterName]: null\n  //   }));\n  // })\n  //   }\n  // }, [optionsCopy, setStateNav, stateNav.prodOptions]);\n  // useEffect(() => {\n  //   if (optionsCopy) {\n  //     let compare = [];\n  //     let optionUpdate;\n  //     let elementUpdate;\n  // let matchName = prodOptions.map(option => option);\n  // matchName.forEach(element => {\n  //   compare.push(element);\n  // });\n  // const check = optionsCopy.filter(name => compare.includes(name.name));\n  // optionsCopy.forEach((element, index) => {\n  //   check.forEach(option => {\n  //     if (element.name === option.name) {\n  //       optionUpdate = option.name;\n  //       elementUpdate = option.name;\n  //     }\n  //   });\n  // });\n  // if (optionUpdate && elementUpdate) {\n  //   const updateState = optionsCopy.map(item =>\n  //     compare.includes(item.name) ? { ...item, display: true } : item\n  //   );\n  //   setList(updateState);\n  // } else {\n  //   const updateState = optionsCopy.map(item =>\n  //     compare.includes(!item.name) ? { ...item, display: false } : item\n  //   );\n  //   setList(updateState);\n  // }\n  //   }\n  // }, [optionsCopy, prodOptions, stateNav.prodOptions]);\n  // const renderFMW = list\n  //   .filter((item) => item.display === true)\n  //   .map((item) => (\n  //     <ProdMinMax\n  //       key={item.name}\n  //       id={item.id}\n  //       name={item.name}\n  //       filter={item.filterName}\n  //     />\n  //   ));\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    spacing: 2,\n    style: {\n      padding: \"8px\",\n      width: \"100%\",\n      margin: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FilterWellAppraisal, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FilterOwnerAppraisalValue, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterFormValue.js"],"names":["React","useState","useContext","useEffect","FilterOwnerAppraisalValue","FilterWellAppraisal","Grid","FilterFormProduction","padding","width","margin"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,SAAtC,QAAuD,OAAvD,C,CACA;AACA;AACA;;AACA,OAAOC,yBAAP,MAAsC,6BAAtC;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,eAAe,SAASC,oBAAT,GAAgC;AAC7C;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,sBACE,oBAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,IAAI,MAFN;AAGE,IAAA,OAAO,EAAE,CAHX;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,KAAK,EAAE,MAAzB;AAAiCC,MAAAA,MAAM,EAAE;AAAzC,KAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CANF,eASE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,yBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CADF;AAeD","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\n// import { NavigationContext } from \"../NavigationContext\";\r\n// import ProdMinMax from \"./ProdMinMax\";\r\n// import FormControl from \"@material-ui/core/FormControl\";\r\nimport FilterOwnerAppraisalValue from \"./FilterOwnerAppraisalValue\";\r\nimport FilterWellAppraisal from \"./FilterWellAppraisal\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nexport default function FilterFormProduction() {\r\n  // const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  // const [prodOptions, setProdOptions] = useState(\r\n  //   stateNav.prodOptions ? stateNav.prodOptions : null\r\n  // );\r\n  // const [list, setList] = useState([]);\r\n  // const [optionsCopy, setOptionsCopy] = useState(null);\r\n\r\n  // const handleSelectedValueToDisplay = (value) => {\r\n  // setProdOptions(value);\r\n  // setStateNav(stateNav => ({\r\n  //   ...stateNav,\r\n  //   prodOptions: value\r\n  // }));\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   if (stateNav.prodOptions && optionsCopy) {\r\n  // const check = optionsCopy.map(val => val)\r\n  // const removeFilters = check.filter(name => !stateNav.prodOptions.includes(name.name))\r\n  // removeFilters.forEach(element => {\r\n  //   setStateNav(stateNav => ({\r\n  //     ...stateNav,\r\n  //     [element.filterName]: null\r\n  //   }));\r\n  // })\r\n  //   }\r\n  // }, [optionsCopy, setStateNav, stateNav.prodOptions]);\r\n\r\n  // useEffect(() => {\r\n  //   if (optionsCopy) {\r\n  //     let compare = [];\r\n  //     let optionUpdate;\r\n  //     let elementUpdate;\r\n  // let matchName = prodOptions.map(option => option);\r\n  // matchName.forEach(element => {\r\n  //   compare.push(element);\r\n  // });\r\n\r\n  // const check = optionsCopy.filter(name => compare.includes(name.name));\r\n  // optionsCopy.forEach((element, index) => {\r\n  //   check.forEach(option => {\r\n  //     if (element.name === option.name) {\r\n  //       optionUpdate = option.name;\r\n  //       elementUpdate = option.name;\r\n  //     }\r\n  //   });\r\n  // });\r\n  // if (optionUpdate && elementUpdate) {\r\n  //   const updateState = optionsCopy.map(item =>\r\n  //     compare.includes(item.name) ? { ...item, display: true } : item\r\n  //   );\r\n  //   setList(updateState);\r\n  // } else {\r\n  //   const updateState = optionsCopy.map(item =>\r\n  //     compare.includes(!item.name) ? { ...item, display: false } : item\r\n  //   );\r\n  //   setList(updateState);\r\n  // }\r\n  //   }\r\n  // }, [optionsCopy, prodOptions, stateNav.prodOptions]);\r\n\r\n  // const renderFMW = list\r\n  //   .filter((item) => item.display === true)\r\n  //   .map((item) => (\r\n  //     <ProdMinMax\r\n  //       key={item.name}\r\n  //       id={item.id}\r\n  //       name={item.name}\r\n  //       filter={item.filterName}\r\n  //     />\r\n  //   ));\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      spacing={2}\r\n      style={{ padding: \"8px\", width: \"100%\", margin: \"0\" }}\r\n    >\r\n      <Grid item sm={12}>\r\n        <FilterWellAppraisal />\r\n      </Grid>\r\n      <Grid item sm={12}>\r\n        <FilterOwnerAppraisalValue />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}