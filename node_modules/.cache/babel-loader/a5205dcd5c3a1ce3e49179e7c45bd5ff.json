{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterWellTypeJ.js\";\nimport React, { useContext } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { NavigationContext } from \"../NavigationContext\";\nconst wellTypesList = [\"COALBED METHANE\", \"DISPOSAL\", \"DRY HOLE\", \"GAS\", \"INJECTION\", \"OIL\", \"OIL AND GAS\", \"P&A\", \"PERMITTED\", \"STORAGE\", \"UNKNOWN\", \"WATER\"];\nexport default function FilterWellTypeJ() {\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [typeName, setTypeName] = React.useState(stateNav.typeName ? stateNav.typeName : null);\n  console.log(stateNav);\n\n  const handleTypeChange = value => {\n    let filter;\n\n    if (value && value.length) {\n      filter = [\"match\", [\"get\", \"wellType\"], value, true, false];\n      setStateNav(stateNav => ({ ...stateNav,\n        typeName: value\n      }));\n      setTypeName(value);\n    } else {\n      filter = null;\n      setStateNav(stateNav => ({ ...stateNav,\n        typeName: []\n      }));\n    }\n\n    setStateNav(stateNav => ({ ...stateNav,\n      filterWellType: filter\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    ChipProps: {\n      color: \"secondary\"\n    },\n    defaultValue: stateNav.typeName,\n    onChange: (event, newValue) => {\n      handleTypeChange(newValue);\n    },\n    multiple: true,\n    options: wellTypesList,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"Well Type\",\n      placeholder: \"\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    })),\n    disableListWrap: true,\n    id: \"virtualize-well-types\" // style={{ maxWidth: 300, minWidth: 120 }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterWellTypeJ.js"],"names":["React","useContext","TextField","Autocomplete","NavigationContext","wellTypesList","FilterWellTypeJ","stateNav","setStateNav","typeName","setTypeName","useState","console","log","handleTypeChange","value","filter","length","filterWellType","color","event","newValue","params"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA,MAAMC,aAAa,GAAG,CACpB,iBADoB,EAEpB,UAFoB,EAGpB,UAHoB,EAIpB,KAJoB,EAKpB,WALoB,EAMpB,KANoB,EAOpB,aAPoB,EAQpB,KARoB,EASpB,WAToB,EAUpB,SAVoB,EAWpB,SAXoB,EAYpB,OAZoB,CAAtB;AAeA,eAAe,SAASC,eAAT,GAA2B;AACxC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,UAAU,CAACG,iBAAD,CAA1C;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BV,KAAK,CAACW,QAAN,CAC9BJ,QAAQ,CAACE,QAAT,GAAoBF,QAAQ,CAACE,QAA7B,GAAwC,IADV,CAAhC;AAIAG,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAZ;;AACA,QAAMO,gBAAgB,GAAIC,KAAD,IAAW;AAClC,QAAIC,MAAJ;;AACA,QAAID,KAAK,IAAIA,KAAK,CAACE,MAAnB,EAA2B;AACzBD,MAAAA,MAAM,GAAG,CAAC,OAAD,EAAU,CAAC,KAAD,EAAQ,UAAR,CAAV,EAA+BD,KAA/B,EAAsC,IAAtC,EAA4C,KAA5C,CAAT;AACAP,MAAAA,WAAW,CAAED,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeE,QAAAA,QAAQ,EAAEM;AAAzB,OAAf,CAAD,CAAX;AACAL,MAAAA,WAAW,CAACK,KAAD,CAAX;AACD,KAJD,MAIO;AACLC,MAAAA,MAAM,GAAG,IAAT;AACAR,MAAAA,WAAW,CAAED,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeE,QAAAA,QAAQ,EAAE;AAAzB,OAAf,CAAD,CAAX;AACD;;AACDD,IAAAA,WAAW,CAAED,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeW,MAAAA,cAAc,EAAEF;AAA/B,KAAf,CAAD,CAAX;AACD,GAXD;;AAaA,sBACE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT,KADb;AAEE,IAAA,YAAY,EAAEZ,QAAQ,CAACE,QAFzB;AAGE,IAAA,QAAQ,EAAE,CAACW,KAAD,EAAQC,QAAR,KAAqB;AAC7BP,MAAAA,gBAAgB,CAACO,QAAD,CAAhB;AACD,KALH;AAME,IAAA,QAAQ,MANV;AAOE,IAAA,OAAO,EAAEhB,aAPX;AAQE,IAAA,WAAW,EAAGiB,MAAD,iBACX,oBAAC,SAAD,oBACMA,MADN;AAEE,MAAA,OAAO,EAAC,UAFV;AAGE,MAAA,KAAK,EAAC,WAHR;AAIE,MAAA,WAAW,EAAC,EAJd;AAKE,MAAA,SAAS,EAAE,IALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OATJ;AAiBE,IAAA,eAAe,MAjBjB;AAkBE,IAAA,EAAE,EAAC,uBAlBL,CAmBE;AAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAuBD","sourcesContent":["import React, { useContext } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\n\r\nconst wellTypesList = [\r\n  \"COALBED METHANE\",\r\n  \"DISPOSAL\",\r\n  \"DRY HOLE\",\r\n  \"GAS\",\r\n  \"INJECTION\",\r\n  \"OIL\",\r\n  \"OIL AND GAS\",\r\n  \"P&A\",\r\n  \"PERMITTED\",\r\n  \"STORAGE\",\r\n  \"UNKNOWN\",\r\n  \"WATER\",\r\n];\r\n\r\nexport default function FilterWellTypeJ() {\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [typeName, setTypeName] = React.useState(\r\n    stateNav.typeName ? stateNav.typeName : null\r\n  );\r\n\r\n  console.log(stateNav);\r\n  const handleTypeChange = (value) => {\r\n    let filter;\r\n    if (value && value.length) {\r\n      filter = [\"match\", [\"get\", \"wellType\"], value, true, false];\r\n      setStateNav((stateNav) => ({ ...stateNav, typeName: value }));\r\n      setTypeName(value);\r\n    } else {\r\n      filter = null;\r\n      setStateNav((stateNav) => ({ ...stateNav, typeName: [] }));\r\n    }\r\n    setStateNav((stateNav) => ({ ...stateNav, filterWellType: filter }));\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      ChipProps={{ color: \"secondary\" }}\r\n      defaultValue={stateNav.typeName}\r\n      onChange={(event, newValue) => {\r\n        handleTypeChange(newValue);\r\n      }}\r\n      multiple\r\n      options={wellTypesList}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          variant=\"outlined\"\r\n          label=\"Well Type\"\r\n          placeholder=\"\"\r\n          fullWidth={true}\r\n        />\r\n      )}\r\n      disableListWrap\r\n      id=\"virtualize-well-types\"\r\n      // style={{ maxWidth: 300, minWidth: 120 }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}