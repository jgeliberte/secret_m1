{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\BulkUpload\\\\components\\\\M1neralHeaders.js\";\nimport React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport { AppContext } from '../../../AppContext';\nconst useStyles = makeStyles({\n  root: {\n    width: '100%'\n  },\n  container: {\n    maxHeight: '50vh',\n    overflow: 'scroll',\n    overflowX: 'hidden'\n  }\n});\nconst main_div = {\n  textAlign: 'center',\n  padding: '1.5vh'\n};\nconst style_papaer = {\n  background: 'none',\n  maxWidth: '700px',\n  margin: '0px auto',\n  boxShadow: 'none'\n};\nconst table_cell_input = {\n  padding: '3px'\n};\nconst big_text = {\n  fontSize: '20px',\n  fontWeight: 'bold',\n  color: '#504D4D'\n};\nconst padding_div_top = {\n  paddingTop: '4vh'\n};\nconst text_grey = {\n  fontSize: '12px',\n  fontWeight: 'bold',\n  color: 'grey'\n};\nconst headers_input = {\n  width: '100%',\n  borderRadius: '5px',\n  border: '2px solid #F2F1F1',\n  height: '4vh'\n};\nconst StyledTableCell = withStyles(theme => ({\n  head: {\n    fontWeight: 'bold',\n    border: '0px',\n    background: 'white'\n  },\n  body: {\n    border: '0px'\n  }\n}))(TableCell);\nexport default function M1neralHeaders(props) {\n  const classes = useStyles();\n  const [stateApp, setStateApp] = React.useContext(AppContext);\n  let columns = [{\n    label: \"Import\"\n  }, {\n    label: \"Your Headers\"\n  }, {\n    label: \"M1neral Headers\"\n  }];\n  let data = stateApp.m1neralHeaders;\n  let CSV_headers = stateApp.mappedHeadersFromCSV; // let options_from_list = options()\n\n  const UpdateState = () => {\n    for (let index in CSV_headers) {\n      for (let index2 in data) {\n        if (CSV_headers[index].actual_key === data[index2].actual_key) {\n          data[index2].mapped_key = CSV_headers[index].mapped_key;\n          data[index2].required = CSV_headers[index].required;\n        }\n      }\n    }\n\n    setStateApp(state => ({ ...state,\n      m1neralHeaders: data,\n      mappedHeadersFromCSV: CSV_headers\n    }));\n  };\n\n  const handleChange_select = (event, index) => {\n    CSV_headers[index].actual_key = data[event.target.value].actual_key;\n    CSV_headers[index].label = data[event.target.value].label;\n    CSV_headers[index].required = true;\n    changeDataToSendState();\n    UpdateState();\n  };\n\n  const handleChange_checkBox = (event, index) => {\n    CSV_headers[index].required = event.target.checked;\n    changeDataToSendState();\n    UpdateState();\n  };\n\n  const createLeadSource = () => {\n    var newDate = new Date().toISOString();\n    newDate = newDate.split('T')[0];\n    newDate = newDate.split('-').reverse().join('.');\n    let leadSource = 'Manual Upload on ' + newDate;\n    return leadSource;\n  };\n\n  const changeDataToSendState = () => {\n    let headers = stateApp.mappedHeadersFromCSV;\n    let arr_data = stateApp.csvContactsList;\n    let filtered_data_to_send = arr_data.map(obj => {\n      let return_obj = {};\n\n      for (let header of headers) {\n        if (header.required && obj.data[header.mapped_key] !== undefined && header.mapped_key !== 'initial') {\n          return_obj[header.actual_key] = obj.data[header.mapped_key];\n        }\n      }\n\n      if (return_obj === {}) {\n        return null;\n      }\n\n      return_obj['name'] = '';\n\n      if (return_obj['first_name']) {\n        return_obj['name'] = return_obj['first_name'];\n      }\n\n      if (return_obj['first_name'] && return_obj['last_name']) {\n        return_obj['name'] = return_obj['first_name'] + ' ' + return_obj['last_name'];\n      } else {\n        if (return_obj['first_name']) {\n          return_obj['name'] = return_obj['first_name'];\n        }\n\n        if (return_obj['last_name']) {\n          return_obj['name'] = return_obj['last_name'];\n        }\n      }\n\n      return_obj['leadSource'] = createLeadSource();\n      return return_obj;\n    });\n    filtered_data_to_send = filtered_data_to_send.filter(obj => {\n      if (Object.keys(obj).length !== 0) {\n        return true;\n      }\n\n      return false;\n    });\n    setStateApp(state => ({ ...state,\n      csvContactsListToSend: filtered_data_to_send\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: main_div,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: { ...big_text,\n      ...padding_div_top\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }\n  }, \"Match your headers to M1neral headers\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: { ...text_grey,\n      ...padding_div_top\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }\n  }, \"Select the M1neral header that best represents the headers from your file\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: padding_div_top,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    className: classes.root,\n    style: style_papaer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    stickyHeader: true,\n    \"aria-label\": \"sticky table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 17\n    }\n  }, columns.map(column => /*#__PURE__*/React.createElement(StyledTableCell, {\n    key: column.label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 21\n    }\n  }, column.label)))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 15\n    }\n  }, CSV_headers.map((row, index) => {\n    return /*#__PURE__*/React.createElement(TableRow, {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(StyledTableCell, {\n      key: columns[0].label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Checkbox, {\n      checked: row.required,\n      color: \"default\",\n      onChange: event => handleChange_checkBox(event, index),\n      inputProps: {\n        'aria-label': 'checkbox with default color'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 27\n      }\n    })), /*#__PURE__*/React.createElement(StyledTableCell, {\n      key: columns[1].label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 25\n      }\n    }, row.mapped_key), /*#__PURE__*/React.createElement(StyledTableCell, {\n      key: columns[2].label,\n      style: table_cell_input,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"select\", {\n      style: headers_input,\n      id: 'select' + index,\n      defaultValue: row.actual_key === '' ? 'initial' : row.actual_key,\n      onChange: event => handleChange_select(event, index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      disabled: true,\n      hidden: true,\n      value: \"initial\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 33\n      }\n    }, \" Select Header \"), data.map((option, i) => {\n      return /*#__PURE__*/React.createElement(\"option\", {\n        value: i,\n        key: i,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 37\n        }\n      }, option.label);\n    })))));\n  })))))));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/BulkUpload/components/M1neralHeaders.js"],"names":["React","makeStyles","withStyles","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Checkbox","AppContext","useStyles","root","width","container","maxHeight","overflow","overflowX","main_div","textAlign","padding","style_papaer","background","maxWidth","margin","boxShadow","table_cell_input","big_text","fontSize","fontWeight","color","padding_div_top","paddingTop","text_grey","headers_input","borderRadius","border","height","StyledTableCell","theme","head","body","M1neralHeaders","props","classes","stateApp","setStateApp","useContext","columns","label","data","m1neralHeaders","CSV_headers","mappedHeadersFromCSV","UpdateState","index","index2","actual_key","mapped_key","required","state","handleChange_select","event","target","value","changeDataToSendState","handleChange_checkBox","checked","createLeadSource","newDate","Date","toISOString","split","reverse","join","leadSource","headers","arr_data","csvContactsList","filtered_data_to_send","map","obj","return_obj","header","undefined","filter","Object","keys","length","csvContactsListToSend","column","row","option","i"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { makeStyles,withStyles } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport {AppContext} from '../../../AppContext'\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  container: {\r\n    maxHeight: '50vh',\r\n    overflow: 'scroll',\r\n    overflowX: 'hidden',\r\n  },\r\n});\r\nconst main_div = {\r\n  textAlign: 'center',\r\n  padding: '1.5vh'\r\n}\r\nconst style_papaer = {\r\n  background: 'none',\r\n  maxWidth: '700px',\r\n  margin: '0px auto',\r\n  boxShadow: 'none'\r\n}\r\nconst table_cell_input ={\r\n  padding: '3px'\r\n}\r\nconst big_text={\r\n  fontSize: '20px',\r\n  fontWeight: 'bold',\r\n  color: '#504D4D',\r\n}\r\nconst padding_div_top={\r\n  paddingTop: '4vh'\r\n}\r\nconst text_grey ={\r\n  fontSize: '12px',\r\n  fontWeight: 'bold',\r\n  color: 'grey',\r\n}\r\n\r\nconst headers_input = {\r\n    width: '100%',\r\n    borderRadius: '5px',\r\n    border: '2px solid #F2F1F1',\r\n    height: '4vh',\r\n}\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    fontWeight: 'bold',\r\n    border: '0px',\r\n    background: 'white'\r\n  },\r\n  body: {\r\n    border: '0px',\r\n  },\r\n}))(TableCell);\r\n\r\nexport default function M1neralHeaders(props) {\r\n  const classes = useStyles();\r\n  const [stateApp, setStateApp] = React.useContext(AppContext);\r\n\r\n  let columns  = [{label:\"Import\"},{label:\"Your Headers\"},{label:\"M1neral Headers\"}]\r\n  let data = stateApp.m1neralHeaders\r\n  let CSV_headers =  stateApp.mappedHeadersFromCSV\r\n\r\n  // let options_from_list = options()\r\n  const UpdateState = () =>{\r\n    for(let index in CSV_headers){\r\n      for(let index2 in data){\r\n        if (CSV_headers[index].actual_key === data[index2].actual_key){\r\n          data[index2].mapped_key = CSV_headers[index].mapped_key\r\n          data[index2].required = CSV_headers[index].required\r\n        }\r\n      }\r\n    }\r\n    setStateApp(state=>({...state,m1neralHeaders: data, mappedHeadersFromCSV: CSV_headers}))\r\n  }\r\n  const handleChange_select = (event, index)=>{\r\n    CSV_headers[index].actual_key = data[event.target.value].actual_key\r\n    CSV_headers[index].label = data[event.target.value].label\r\n    CSV_headers[index].required = true\r\n    changeDataToSendState()\r\n    UpdateState()\r\n  }\r\n  const handleChange_checkBox = (event, index)=>{\r\n    CSV_headers[index].required = event.target.checked\r\n    changeDataToSendState()\r\n    UpdateState()\r\n  }\r\n\r\n  const createLeadSource = ()=>{\r\n    var newDate= new Date().toISOString()\r\n    newDate= newDate.split('T')[0]\r\n    newDate = newDate.split('-').reverse().join('.')\r\n    let leadSource = 'Manual Upload on ' + newDate\r\n    return leadSource\r\n  }\r\n\r\n  const changeDataToSendState = () =>{\r\n    let headers = stateApp.mappedHeadersFromCSV\r\n    let arr_data = stateApp.csvContactsList;\r\n    let filtered_data_to_send = arr_data.map(obj => {\r\n        let return_obj = {};\r\n        for (let header of headers) {\r\n            if (header.required && obj.data[header.mapped_key]!== undefined && header.mapped_key !== 'initial') {\r\n                return_obj[header.actual_key] = obj.data[header.mapped_key];\r\n            }\r\n        }\r\n        if(return_obj === {}){\r\n            return null\r\n        }\r\n        return_obj['name'] = '';\r\n        if(return_obj['first_name']){\r\n            return_obj['name'] = return_obj['first_name']\r\n        }\r\n        if(return_obj['first_name'] && return_obj['last_name'] ){\r\n            return_obj['name'] = return_obj['first_name'] + ' ' + return_obj['last_name'] \r\n        }else{\r\n            if(return_obj['first_name']){\r\n                return_obj['name'] = return_obj['first_name']\r\n            }\r\n            if(return_obj['last_name']){\r\n                return_obj['name'] = return_obj['last_name']\r\n            }\r\n        }\r\n        return_obj['leadSource'] = createLeadSource();\r\n        return return_obj;\r\n    })\r\n    filtered_data_to_send = filtered_data_to_send.filter(obj=>{\r\n        if(Object.keys(obj).length !== 0){\r\n            return true\t\r\n        }\r\n        return false\r\n    })\r\n    setStateApp(state=>({...state,csvContactsListToSend: filtered_data_to_send}))\r\n  }\r\n \r\n  return (\r\n    <div style={main_div}>\r\n      <div style={{...big_text, ...padding_div_top}}>Match your headers to M1neral headers</div>\r\n      <div style={{...text_grey, ...padding_div_top}}>Select the M1neral header that best represents the headers from your file</div>\r\n      <div style={padding_div_top}>\r\n        <Paper className={classes.root} style={style_papaer}>\r\n          <TableContainer className={classes.container}>\r\n            <Table stickyHeader aria-label=\"sticky table\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  {columns.map((column) => (\r\n                    <StyledTableCell key={column.label}>\r\n                      {column.label}\r\n                    </StyledTableCell>\r\n                  ))}\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {CSV_headers.map((row, index) => {\r\n                  return (\r\n                    <TableRow key={index}>\r\n                        <StyledTableCell key={columns[0].label}>\r\n                          <Checkbox\r\n                            checked={row.required}\r\n                            color=\"default\"\r\n                            onChange={(event)=> handleChange_checkBox(event,index)}\r\n                            inputProps={{ 'aria-label': 'checkbox with default color' }}\r\n                          />\r\n                        </StyledTableCell>\r\n                        <StyledTableCell key={columns[1].label}>\r\n                        {row.mapped_key}\r\n                        </StyledTableCell>\r\n                        <StyledTableCell key={columns[2].label} style={table_cell_input}>\r\n                        <div>\r\n                            <select style={headers_input} id={'select'+ index} defaultValue={row.actual_key === ''?'initial': row.actual_key}\r\n                            onChange={ (event)=> handleChange_select(event,index)} \r\n                            >\r\n                                <option disabled hidden value='initial' > Select Header </option>\r\n                                {data.map((option,i)=>{\r\n                                    return(\r\n                                    <option value={i} key={i}>{option.label}</option>\r\n                                    )\r\n                                })}\r\n                            </select>\r\n                        </div>\r\n                        </StyledTableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}