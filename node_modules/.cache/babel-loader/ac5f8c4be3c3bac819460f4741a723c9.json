{"ast":null,"code":"import * as msal from \"@azure/msal-browser\";\nconst tenants = JSON.parse(process.env.REACT_APP_TENANS_CREDENTIALS);\nexport const tenantsCredentials = tenantName => {\n  let found;\n\n  for (let i = 0; i < tenants.length; i++) {\n    if (tenants[i].name.toUpperCase() === tenantName.toUpperCase()) found = tenants[i];\n  }\n\n  return found;\n}; // Config object to be passed to Msal on creation\n\nexport const msalConfig = (tenantId, clientId) => {\n  const path = `${window.location.protocol}//${window.location.host}`;\n  return {\n    auth: {\n      clientId: clientId,\n      // authority: 'https://m1neralb2ctenant1.b2clogin.com/m1neralb2ctenant1.onmicrosoft.com/oauth2/v2.0/authorize?p=b2c_1_sign_in_v2_preview',\n      // knownAuthorities: ['m1neralb2ctenant1.b2clogin.com'],\n      // validateAuthority: false,\n      authority: `https://login.microsoftonline.com/${tenantId ? tenantId : \"common\"}`,\n      redirectUri: `${path}/`,\n      postLogoutRedirectUri: `${path}/`\n    },\n    cache: {\n      cacheLocation: \"sessionStorage\",\n      // This configures where your cache will be stored\n      storeAuthStateInCookie: false // Set this to \"true\" if you are having issues on IE11 or Edge\n\n    }\n  };\n};\nexport const MSALObj = (tenantId, clientId) => new msal.PublicClientApplication(msalConfig(tenantId, clientId));\nexport const loginRequest = {\n  scopes: []\n};\nexport const readProfileRequest = {\n  scopes: [\"https://graph.microsoft.com/User.Read\"]\n};\nexport const authGraphQLRequest = {\n  scopes: [\"https://management.azure.com/user_impersonation\"]\n}; // Add here the endpoints for MS Graph API services you would like to use.\n\nconst graphConfig = {\n  graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\",\n  graphMailEndpoint: \"https://graph.microsoft.com/v1.0/me/messages\"\n}; // Add here scopes for access token to be used at MS Graph API endpoints.\n\nconst tokenRequest = {\n  scopes: [\"Mail.Read\"],\n  forceRefresh: false // Set this to \"true\" to skip a cached token and go to the server to get a new token\n\n};","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Login/AADAuthConfig.js"],"names":["msal","tenants","JSON","parse","process","env","REACT_APP_TENANS_CREDENTIALS","tenantsCredentials","tenantName","found","i","length","name","toUpperCase","msalConfig","tenantId","clientId","path","window","location","protocol","host","auth","authority","redirectUri","postLogoutRedirectUri","cache","cacheLocation","storeAuthStateInCookie","MSALObj","PublicClientApplication","loginRequest","scopes","readProfileRequest","authGraphQLRequest","graphConfig","graphMeEndpoint","graphMailEndpoint","tokenRequest","forceRefresh"],"mappings":"AAAA,OAAO,KAAKA,IAAZ,MAAsB,qBAAtB;AAEA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWC,OAAO,CAACC,GAAR,CAAYC,4BAAvB,CAAhB;AAEA,OAAO,MAAMC,kBAAkB,GAAIC,UAAD,IAAgB;AAChD,MAAIC,KAAJ;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,OAAO,CAACU,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAIT,OAAO,CAACS,CAAD,CAAP,CAAWE,IAAX,CAAgBC,WAAhB,OAAkCL,UAAU,CAACK,WAAX,EAAtC,EACEJ,KAAK,GAAGR,OAAO,CAACS,CAAD,CAAf;AACH;;AACD,SAAOD,KAAP;AACD,CAPM,C,CASP;;AACA,OAAO,MAAMK,UAAU,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAChD,QAAMC,IAAI,GAAI,GAAEC,MAAM,CAACC,QAAP,CAAgBC,QAAS,KAAIF,MAAM,CAACC,QAAP,CAAgBE,IAAK,EAAlE;AACA,SAAO;AACLC,IAAAA,IAAI,EAAE;AACJN,MAAAA,QAAQ,EAAEA,QADN;AAEJ;AACA;AACA;AACAO,MAAAA,SAAS,EAAG,qCACVR,QAAQ,GAAGA,QAAH,GAAc,QACvB,EAPG;AAQJS,MAAAA,WAAW,EAAG,GAAEP,IAAK,GARjB;AASJQ,MAAAA,qBAAqB,EAAG,GAAER,IAAK;AAT3B,KADD;AAYLS,IAAAA,KAAK,EAAE;AACLC,MAAAA,aAAa,EAAE,gBADV;AAC4B;AACjCC,MAAAA,sBAAsB,EAAE,KAFnB,CAE0B;;AAF1B;AAZF,GAAP;AAiBD,CAnBM;AAqBP,OAAO,MAAMC,OAAO,GAAG,CAACd,QAAD,EAAWC,QAAX,KACrB,IAAIhB,IAAI,CAAC8B,uBAAT,CAAiChB,UAAU,CAACC,QAAD,EAAWC,QAAX,CAA3C,CADK;AAGP,OAAO,MAAMe,YAAY,GAAG;AAC1BC,EAAAA,MAAM,EAAE;AADkB,CAArB;AAIP,OAAO,MAAMC,kBAAkB,GAAG;AAChCD,EAAAA,MAAM,EAAE,CAAC,uCAAD;AADwB,CAA3B;AAIP,OAAO,MAAME,kBAAkB,GAAG;AAChCF,EAAAA,MAAM,EAAE,CAAC,iDAAD;AADwB,CAA3B,C,CAIP;;AACA,MAAMG,WAAW,GAAG;AAClBC,EAAAA,eAAe,EAAE,qCADC;AAElBC,EAAAA,iBAAiB,EAAE;AAFD,CAApB,C,CAKA;;AACA,MAAMC,YAAY,GAAG;AACnBN,EAAAA,MAAM,EAAE,CAAC,WAAD,CADW;AAEnBO,EAAAA,YAAY,EAAE,KAFK,CAEE;;AAFF,CAArB","sourcesContent":["import * as msal from \"@azure/msal-browser\";\r\n\r\nconst tenants = JSON.parse(process.env.REACT_APP_TENANS_CREDENTIALS);\r\n\r\nexport const tenantsCredentials = (tenantName) => {\r\n  let found;\r\n  for (let i = 0; i < tenants.length; i++) {\r\n    if (tenants[i].name.toUpperCase() === tenantName.toUpperCase())\r\n      found = tenants[i];\r\n  }\r\n  return found;\r\n};\r\n\r\n// Config object to be passed to Msal on creation\r\nexport const msalConfig = (tenantId, clientId) => {\r\n  const path = `${window.location.protocol}//${window.location.host}`;\r\n  return {\r\n    auth: {\r\n      clientId: clientId,\r\n      // authority: 'https://m1neralb2ctenant1.b2clogin.com/m1neralb2ctenant1.onmicrosoft.com/oauth2/v2.0/authorize?p=b2c_1_sign_in_v2_preview',\r\n      // knownAuthorities: ['m1neralb2ctenant1.b2clogin.com'],\r\n      // validateAuthority: false,\r\n      authority: `https://login.microsoftonline.com/${\r\n        tenantId ? tenantId : \"common\"\r\n      }`,\r\n      redirectUri: `${path}/`,\r\n      postLogoutRedirectUri: `${path}/`,\r\n    },\r\n    cache: {\r\n      cacheLocation: \"sessionStorage\", // This configures where your cache will be stored\r\n      storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n    },\r\n  };\r\n};\r\n\r\nexport const MSALObj = (tenantId, clientId) =>\r\n  new msal.PublicClientApplication(msalConfig(tenantId, clientId));\r\n\r\nexport const loginRequest = {\r\n  scopes: [],\r\n};\r\n\r\nexport const readProfileRequest = {\r\n  scopes: [\"https://graph.microsoft.com/User.Read\"],\r\n};\r\n\r\nexport const authGraphQLRequest = {\r\n  scopes: [\"https://management.azure.com/user_impersonation\"],\r\n};\r\n\r\n// Add here the endpoints for MS Graph API services you would like to use.\r\nconst graphConfig = {\r\n  graphMeEndpoint: \"https://graph.microsoft.com/v1.0/me\",\r\n  graphMailEndpoint: \"https://graph.microsoft.com/v1.0/me/messages\",\r\n};\r\n\r\n// Add here scopes for access token to be used at MS Graph API endpoints.\r\nconst tokenRequest = {\r\n  scopes: [\"Mail.Read\"],\r\n  forceRefresh: false, // Set this to \"true\" to skip a cached token and go to the server to get a new token\r\n};\r\n"]},"metadata":{},"sourceType":"module"}