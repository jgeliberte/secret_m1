{"ast":null,"code":"import { __extends } from \"tslib\";\nimport React from 'react';\nimport Canvas from './Canvas';\nimport { getGridState, getColOverscanEndIdx, getVisibleBoundaries, getScrollDirection, getRowOverscanStartIdx, getRowOverscanEndIdx, getColOverscanStartIdx, getNonFrozenVisibleColStartIdx, getNonFrozenRenderedColumnCount, findLastFrozenColumnIndex } from './utils/viewportUtils';\n\nvar Viewport =\n/** @class */\nfunction (_super) {\n  __extends(Viewport, _super);\n\n  function Viewport() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = getGridState(_this.props);\n    _this.canvas = React.createRef();\n    _this.viewport = React.createRef();\n    _this.resetScrollStateTimeoutId = null;\n\n    _this.onScroll = function (_a) {\n      var scrollTop = _a.scrollTop,\n          scrollLeft = _a.scrollLeft;\n      var _b = _this.props,\n          rowHeight = _b.rowHeight,\n          rowsCount = _b.rowsCount,\n          onScroll = _b.onScroll;\n\n      var nextScrollState = _this.updateScroll({\n        scrollTop: scrollTop,\n        scrollLeft: scrollLeft,\n        height: _this.state.height,\n        rowHeight: rowHeight,\n        rowsCount: rowsCount\n      });\n\n      onScroll(nextScrollState);\n    };\n\n    _this.resetScrollStateAfterDelayCallback = function () {\n      _this.resetScrollStateTimeoutId = null;\n\n      _this.setState({\n        isScrolling: false\n      });\n    };\n\n    _this.metricsUpdated = function () {\n      if (!_this.viewport.current) {\n        return;\n      }\n\n      var height = _this.viewport.current.getBoundingClientRect().height;\n\n      if (height) {\n        var _a = _this.state,\n            scrollTop = _a.scrollTop,\n            scrollLeft = _a.scrollLeft;\n        var _b = _this.props,\n            rowHeight = _b.rowHeight,\n            rowsCount = _b.rowsCount;\n\n        _this.updateScroll({\n          scrollTop: scrollTop,\n          scrollLeft: scrollLeft,\n          height: height,\n          rowHeight: rowHeight,\n          rowsCount: rowsCount\n        });\n      }\n    };\n\n    return _this;\n  }\n\n  Viewport.prototype.getScroll = function () {\n    return this.canvas.current.getScroll();\n  };\n\n  Viewport.prototype.setScrollLeft = function (scrollLeft) {\n    this.canvas.current.setScrollLeft(scrollLeft);\n  };\n\n  Viewport.prototype.getDOMNodeOffsetWidth = function () {\n    return this.viewport.current ? this.viewport.current.offsetWidth : 0;\n  };\n\n  Viewport.prototype.clearScrollTimer = function () {\n    if (this.resetScrollStateTimeoutId !== null) {\n      window.clearTimeout(this.resetScrollStateTimeoutId);\n    }\n  };\n\n  Viewport.prototype.getNextScrollState = function (_a) {\n    var scrollTop = _a.scrollTop,\n        scrollLeft = _a.scrollLeft,\n        height = _a.height,\n        rowHeight = _a.rowHeight,\n        rowsCount = _a.rowsCount;\n    var isScrolling = true;\n    var columns = this.props.columnMetrics.columns;\n    var scrollDirection = getScrollDirection(this.state, scrollTop, scrollLeft);\n\n    var _b = getVisibleBoundaries(height, rowHeight, scrollTop, rowsCount),\n        rowVisibleStartIdx = _b.rowVisibleStartIdx,\n        rowVisibleEndIdx = _b.rowVisibleEndIdx;\n\n    var rowOverscanStartIdx = getRowOverscanStartIdx(scrollDirection, rowVisibleStartIdx);\n    var rowOverscanEndIdx = getRowOverscanEndIdx(scrollDirection, rowVisibleEndIdx, rowsCount);\n    var totalNumberColumns = columns.length;\n    var lastFrozenColumnIndex = findLastFrozenColumnIndex(columns);\n    var nonFrozenColVisibleStartIdx = getNonFrozenVisibleColStartIdx(columns, scrollLeft);\n    var nonFrozenRenderedColumnCount = getNonFrozenRenderedColumnCount(this.props.columnMetrics, this.getDOMNodeOffsetWidth(), scrollLeft);\n    var colVisibleEndIdx = Math.min(nonFrozenColVisibleStartIdx + nonFrozenRenderedColumnCount, totalNumberColumns);\n    var colOverscanStartIdx = getColOverscanStartIdx(scrollDirection, nonFrozenColVisibleStartIdx, lastFrozenColumnIndex);\n    var colOverscanEndIdx = getColOverscanEndIdx(scrollDirection, colVisibleEndIdx, totalNumberColumns);\n    return {\n      height: height,\n      scrollTop: scrollTop,\n      scrollLeft: scrollLeft,\n      rowVisibleStartIdx: rowVisibleStartIdx,\n      rowVisibleEndIdx: rowVisibleEndIdx,\n      rowOverscanStartIdx: rowOverscanStartIdx,\n      rowOverscanEndIdx: rowOverscanEndIdx,\n      colVisibleStartIdx: nonFrozenColVisibleStartIdx,\n      colVisibleEndIdx: colVisibleEndIdx,\n      colOverscanStartIdx: colOverscanStartIdx,\n      colOverscanEndIdx: colOverscanEndIdx,\n      scrollDirection: scrollDirection,\n      lastFrozenColumnIndex: lastFrozenColumnIndex,\n      isScrolling: isScrolling\n    };\n  };\n\n  Viewport.prototype.resetScrollStateAfterDelay = function () {\n    this.clearScrollTimer();\n    this.resetScrollStateTimeoutId = window.setTimeout(this.resetScrollStateAfterDelayCallback, 500);\n  };\n\n  Viewport.prototype.updateScroll = function (scrollParams) {\n    this.resetScrollStateAfterDelay();\n    var nextScrollState = this.getNextScrollState(scrollParams);\n    this.setState(nextScrollState);\n    return nextScrollState;\n  };\n\n  Viewport.prototype.componentWillReceiveProps = function (nextProps) {\n    var rowHeight = nextProps.rowHeight,\n        rowsCount = nextProps.rowsCount;\n\n    if (this.props.rowHeight !== nextProps.rowHeight || this.props.minHeight !== nextProps.minHeight) {\n      var _a = getGridState(nextProps),\n          scrollTop = _a.scrollTop,\n          scrollLeft = _a.scrollLeft,\n          height = _a.height;\n\n      this.updateScroll({\n        scrollTop: scrollTop,\n        scrollLeft: scrollLeft,\n        height: height,\n        rowHeight: rowHeight,\n        rowsCount: rowsCount\n      });\n    } else if (this.props.columnMetrics.columns.length !== nextProps.columnMetrics.columns.length) {\n      this.setState(getGridState(nextProps));\n    } else if (this.props.rowsCount !== nextProps.rowsCount) {\n      var _b = this.state,\n          scrollTop = _b.scrollTop,\n          scrollLeft = _b.scrollLeft,\n          height = _b.height;\n      this.updateScroll({\n        scrollTop: scrollTop,\n        scrollLeft: scrollLeft,\n        height: height,\n        rowHeight: rowHeight,\n        rowsCount: rowsCount\n      }); // Added to fix the hiding of the bottom scrollbar when showing the filters.\n    } else if (this.props.rowOffsetHeight !== nextProps.rowOffsetHeight) {\n      var _c = this.state,\n          scrollTop = _c.scrollTop,\n          scrollLeft = _c.scrollLeft; // The value of height can be positive or negative and will be added to the current height to cater for changes in the header height (due to the filer)\n\n      var height = this.state.height + this.props.rowOffsetHeight - nextProps.rowOffsetHeight;\n      this.updateScroll({\n        scrollTop: scrollTop,\n        scrollLeft: scrollLeft,\n        height: height,\n        rowHeight: rowHeight,\n        rowsCount: rowsCount\n      });\n    }\n  };\n\n  Viewport.prototype.componentDidMount = function () {\n    window.addEventListener('resize', this.metricsUpdated);\n    this.metricsUpdated();\n  };\n\n  Viewport.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.metricsUpdated);\n    this.clearScrollTimer();\n  };\n\n  Viewport.prototype.render = function () {\n    return React.createElement(\"div\", {\n      className: \"rdg-viewport\",\n      style: {\n        top: this.props.rowOffsetHeight\n      },\n      ref: this.viewport\n    }, React.createElement(Canvas, {\n      ref: this.canvas,\n      rowKey: this.props.rowKey,\n      totalWidth: this.props.totalWidth,\n      width: this.props.columnMetrics.width,\n      totalColumnWidth: this.props.columnMetrics.totalColumnWidth,\n      rowGetter: this.props.rowGetter,\n      rowsCount: this.props.rowsCount,\n      selectedRows: this.props.selectedRows,\n      columns: this.props.columnMetrics.columns,\n      rowRenderer: this.props.rowRenderer,\n      rowOverscanStartIdx: this.state.rowOverscanStartIdx,\n      rowOverscanEndIdx: this.state.rowOverscanEndIdx,\n      rowVisibleStartIdx: this.state.rowVisibleStartIdx,\n      rowVisibleEndIdx: this.state.rowVisibleEndIdx,\n      colVisibleStartIdx: this.state.colVisibleStartIdx,\n      colVisibleEndIdx: this.state.colVisibleEndIdx,\n      colOverscanStartIdx: this.state.colOverscanStartIdx,\n      colOverscanEndIdx: this.state.colOverscanEndIdx,\n      lastFrozenColumnIndex: this.state.lastFrozenColumnIndex,\n      cellMetaData: this.props.cellMetaData,\n      height: this.state.height,\n      rowHeight: this.props.rowHeight,\n      onScroll: this.onScroll,\n      scrollToRowIndex: this.props.scrollToRowIndex,\n      contextMenu: this.props.contextMenu,\n      rowSelection: this.props.rowSelection,\n      getSubRowDetails: this.props.getSubRowDetails,\n      rowGroupRenderer: this.props.rowGroupRenderer,\n      isScrolling: this.state.isScrolling,\n      enableCellSelect: this.props.enableCellSelect,\n      enableCellAutoFocus: this.props.enableCellAutoFocus,\n      cellNavigationMode: this.props.cellNavigationMode,\n      eventBus: this.props.eventBus,\n      RowsContainer: this.props.RowsContainer,\n      editorPortalTarget: this.props.editorPortalTarget,\n      interactionMasksMetaData: this.props.interactionMasksMetaData\n    }));\n  };\n\n  Viewport.displayName = 'Viewport';\n  return Viewport;\n}(React.Component);\n\nexport default Viewport;","map":{"version":3,"sources":["../src/Viewport.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Canvas from './Canvas';\nimport {\n  getGridState,\n  getColOverscanEndIdx,\n  getVisibleBoundaries,\n  getScrollDirection,\n  getRowOverscanStartIdx,\n  getRowOverscanEndIdx,\n  getColOverscanStartIdx,\n  getNonFrozenVisibleColStartIdx,\n  getNonFrozenRenderedColumnCount,\n  findLastFrozenColumnIndex\n} from './utils/viewportUtils';\nimport { GridProps } from './Grid';\nimport { ScrollPosition } from './common/types';\nimport { SCROLL_DIRECTION } from './common/enums';\n\ninterface ScrollParams {\n  height: number;\n  scrollTop: number;\n  scrollLeft: number;\n  rowsCount: number;\n  rowHeight: number;\n}\n\nexport interface ScrollState {\n  height: number;\n  scrollTop: number;\n  scrollLeft: number;\n  rowVisibleStartIdx: number;\n  rowVisibleEndIdx: number;\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  colVisibleStartIdx: number;\n  colVisibleEndIdx: number;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  scrollDirection: SCROLL_DIRECTION;\n  lastFrozenColumnIndex: number;\n  isScrolling: boolean;\n}\n\ntype SharedGridProps<R> = Pick<GridProps<R>,\n'rowKey'\n| 'rowHeight'\n| 'rowRenderer'\n| 'rowGetter'\n| 'rowsCount'\n| 'selectedRows'\n| 'columnMetrics'\n| 'totalWidth'\n| 'cellMetaData'\n| 'rowOffsetHeight'\n| 'minHeight'\n| 'scrollToRowIndex'\n| 'contextMenu'\n| 'rowSelection'\n| 'getSubRowDetails'\n| 'rowGroupRenderer'\n| 'enableCellSelect'\n| 'enableCellAutoFocus'\n| 'cellNavigationMode'\n| 'eventBus'\n| 'interactionMasksMetaData'\n| 'RowsContainer'\n| 'editorPortalTarget'\n>;\n\nexport interface ViewportProps<R> extends SharedGridProps<R> {\n  onScroll(scrollState: ScrollState): void;\n}\n\nexport interface ViewportState {\n  rowOverscanStartIdx: number;\n  rowOverscanEndIdx: number;\n  rowVisibleStartIdx: number;\n  rowVisibleEndIdx: number;\n  height: number;\n  scrollTop: number;\n  scrollLeft: number;\n  colVisibleStartIdx: number;\n  colVisibleEndIdx: number;\n  colOverscanStartIdx: number;\n  colOverscanEndIdx: number;\n  isScrolling: boolean;\n  lastFrozenColumnIndex: number;\n}\n\nexport default class Viewport<R> extends React.Component<ViewportProps<R>, ViewportState> {\n  static displayName = 'Viewport';\n\n  readonly state: Readonly<ViewportState> = getGridState(this.props);\n  private readonly canvas = React.createRef<Canvas<R>>();\n  private readonly viewport = React.createRef<HTMLDivElement>();\n  private resetScrollStateTimeoutId: number | null = null;\n\n  onScroll = ({ scrollTop, scrollLeft }: ScrollPosition) => {\n    const { rowHeight, rowsCount, onScroll } = this.props;\n    const nextScrollState = this.updateScroll({\n      scrollTop,\n      scrollLeft,\n      height: this.state.height,\n      rowHeight,\n      rowsCount\n    });\n\n    onScroll(nextScrollState);\n  };\n\n  getScroll() {\n    return this.canvas.current!.getScroll();\n  }\n\n  setScrollLeft(scrollLeft: number) {\n    this.canvas.current!.setScrollLeft(scrollLeft);\n  }\n\n  getDOMNodeOffsetWidth() {\n    return this.viewport.current ? this.viewport.current.offsetWidth : 0;\n  }\n\n  clearScrollTimer() {\n    if (this.resetScrollStateTimeoutId !== null) {\n      window.clearTimeout(this.resetScrollStateTimeoutId);\n    }\n  }\n\n  getNextScrollState({ scrollTop, scrollLeft, height, rowHeight, rowsCount }: ScrollParams): ScrollState {\n    const isScrolling = true;\n    const { columns } = this.props.columnMetrics;\n    const scrollDirection = getScrollDirection(this.state, scrollTop, scrollLeft);\n    const { rowVisibleStartIdx, rowVisibleEndIdx } = getVisibleBoundaries(height, rowHeight, scrollTop, rowsCount);\n    const rowOverscanStartIdx = getRowOverscanStartIdx(scrollDirection, rowVisibleStartIdx);\n    const rowOverscanEndIdx = getRowOverscanEndIdx(scrollDirection, rowVisibleEndIdx, rowsCount);\n    const totalNumberColumns = columns.length;\n    const lastFrozenColumnIndex = findLastFrozenColumnIndex(columns);\n    const nonFrozenColVisibleStartIdx = getNonFrozenVisibleColStartIdx(columns, scrollLeft);\n    const nonFrozenRenderedColumnCount = getNonFrozenRenderedColumnCount(this.props.columnMetrics, this.getDOMNodeOffsetWidth(), scrollLeft);\n    const colVisibleEndIdx = Math.min(nonFrozenColVisibleStartIdx + nonFrozenRenderedColumnCount, totalNumberColumns);\n    const colOverscanStartIdx = getColOverscanStartIdx(scrollDirection, nonFrozenColVisibleStartIdx, lastFrozenColumnIndex);\n    const colOverscanEndIdx = getColOverscanEndIdx(scrollDirection, colVisibleEndIdx, totalNumberColumns);\n    return {\n      height,\n      scrollTop,\n      scrollLeft,\n      rowVisibleStartIdx,\n      rowVisibleEndIdx,\n      rowOverscanStartIdx,\n      rowOverscanEndIdx,\n      colVisibleStartIdx: nonFrozenColVisibleStartIdx,\n      colVisibleEndIdx,\n      colOverscanStartIdx,\n      colOverscanEndIdx,\n      scrollDirection,\n      lastFrozenColumnIndex,\n      isScrolling\n    };\n  }\n\n  resetScrollStateAfterDelay() {\n    this.clearScrollTimer();\n    this.resetScrollStateTimeoutId = window.setTimeout(\n      this.resetScrollStateAfterDelayCallback,\n      500\n    );\n  }\n\n  resetScrollStateAfterDelayCallback = () => {\n    this.resetScrollStateTimeoutId = null;\n    this.setState({ isScrolling: false });\n  };\n\n  updateScroll(scrollParams: ScrollParams) {\n    this.resetScrollStateAfterDelay();\n    const nextScrollState = this.getNextScrollState(scrollParams);\n    this.setState(nextScrollState);\n    return nextScrollState;\n  }\n\n  metricsUpdated = () => {\n    if (!this.viewport.current) {\n      return;\n    }\n\n    const { height } = this.viewport.current.getBoundingClientRect();\n\n    if (height) {\n      const { scrollTop, scrollLeft } = this.state;\n      const { rowHeight, rowsCount } = this.props;\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n    }\n  };\n\n  componentWillReceiveProps(nextProps: ViewportProps<R>) {\n    const { rowHeight, rowsCount } = nextProps;\n    if (this.props.rowHeight !== nextProps.rowHeight\n      || this.props.minHeight !== nextProps.minHeight) {\n      const { scrollTop, scrollLeft, height } = getGridState(nextProps);\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n    } else if (this.props.columnMetrics.columns.length !== nextProps.columnMetrics.columns.length) {\n      this.setState(getGridState(nextProps));\n    } else if (this.props.rowsCount !== nextProps.rowsCount) {\n      const { scrollTop, scrollLeft, height } = this.state;\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n      // Added to fix the hiding of the bottom scrollbar when showing the filters.\n    } else if (this.props.rowOffsetHeight !== nextProps.rowOffsetHeight) {\n      const { scrollTop, scrollLeft } = this.state;\n      // The value of height can be positive or negative and will be added to the current height to cater for changes in the header height (due to the filer)\n      const height = this.state.height + this.props.rowOffsetHeight - nextProps.rowOffsetHeight;\n      this.updateScroll({\n        scrollTop,\n        scrollLeft,\n        height,\n        rowHeight,\n        rowsCount\n      });\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.metricsUpdated);\n    this.metricsUpdated();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.metricsUpdated);\n    this.clearScrollTimer();\n  }\n\n  render() {\n    return (\n      <div\n        className=\"rdg-viewport\"\n        style={{ top: this.props.rowOffsetHeight }}\n        ref={this.viewport}\n      >\n        <Canvas<R>\n          ref={this.canvas}\n          rowKey={this.props.rowKey}\n          totalWidth={this.props.totalWidth}\n          width={this.props.columnMetrics.width}\n          totalColumnWidth={this.props.columnMetrics.totalColumnWidth}\n          rowGetter={this.props.rowGetter}\n          rowsCount={this.props.rowsCount}\n          selectedRows={this.props.selectedRows}\n          columns={this.props.columnMetrics.columns}\n          rowRenderer={this.props.rowRenderer}\n          rowOverscanStartIdx={this.state.rowOverscanStartIdx}\n          rowOverscanEndIdx={this.state.rowOverscanEndIdx}\n          rowVisibleStartIdx={this.state.rowVisibleStartIdx}\n          rowVisibleEndIdx={this.state.rowVisibleEndIdx}\n          colVisibleStartIdx={this.state.colVisibleStartIdx}\n          colVisibleEndIdx={this.state.colVisibleEndIdx}\n          colOverscanStartIdx={this.state.colOverscanStartIdx}\n          colOverscanEndIdx={this.state.colOverscanEndIdx}\n          lastFrozenColumnIndex={this.state.lastFrozenColumnIndex}\n          cellMetaData={this.props.cellMetaData}\n          height={this.state.height}\n          rowHeight={this.props.rowHeight}\n          onScroll={this.onScroll}\n          scrollToRowIndex={this.props.scrollToRowIndex}\n          contextMenu={this.props.contextMenu}\n          rowSelection={this.props.rowSelection}\n          getSubRowDetails={this.props.getSubRowDetails}\n          rowGroupRenderer={this.props.rowGroupRenderer}\n          isScrolling={this.state.isScrolling}\n          enableCellSelect={this.props.enableCellSelect}\n          enableCellAutoFocus={this.props.enableCellAutoFocus}\n          cellNavigationMode={this.props.cellNavigationMode}\n          eventBus={this.props.eventBus}\n          RowsContainer={this.props.RowsContainer}\n          editorPortalTarget={this.props.editorPortalTarget}\n          interactionMasksMetaData={this.props.interactionMasksMetaData}\n        />\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}