{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Dashboard\\\\components\\\\CardsGrid.js\";\nimport { Grid } from \"@material-ui/core\";\nimport Card from \"@material-ui/core/Card\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport arrayMove from \"array-move\";\nimport React, { useContext, useState } from \"react\";\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\nimport { DashboardContext } from \"../DashboardContext\";\nimport ProdCard from \"./ProdCard\";\nimport CardWrapper from \"./CardTemplate\";\nimport TwitterCard from \"./TwitterCard\";\nimport StockCard from \"./StockCard\";\nimport RigsCard from \"./RigsCard\";\nimport RSSFeed from \"./RssFeed\";\nconst useStyles = makeStyles(() => ({\n  root: {\n    flexGrow: 1\n  },\n  cgriditem: {\n    height: \"800px\"\n  },\n  cgridcard: {\n    height: \"100%\"\n  }\n}));\nconst SortableItem = SortableElement(({\n  content\n}) => {\n  const classes = useStyles();\n\n  const sizeHandle = ele => {\n    if (ele == \"x\") {\n      var arr = [3, 3, 4, 4, 6];\n    } else if (ele == \"2x\") {\n      var arr = [5, 8, 8, 8, 8];\n    } else if (ele == \"bi\") {\n      var arr = [5, 9, 12, 12, 12];\n    } else if (ele == \"full\") {\n      var arr = [12, 12, 12, 12, 12];\n    } else {\n      var arr = [6, 6, 6, 6, 6];\n    }\n\n    return arr;\n  };\n\n  const sizeArray = sizeHandle(content.size);\n  return /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xl: sizeArray[0],\n    lg: sizeArray[1],\n    md: sizeArray[2],\n    sm: sizeArray[3],\n    xs: sizeArray[4],\n    className: classes.cgriditem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    className: classes.cgridcard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, content.el));\n});\nconst SortableList = SortableContainer(({\n  items\n}) => {\n  return /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    container: true,\n    spacing: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, items.map((content, index) => {\n    return /*#__PURE__*/React.createElement(SortableItem, {\n      key: `l-${content.key}`,\n      index: index,\n      content: content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }\n    });\n  }));\n});\n\nconst CardGrid = () => {\n  const [stateDashboard, setStateDashboard] = useContext(DashboardContext);\n  const [items, setItems] = useState([{\n    el: /*#__PURE__*/React.createElement(RigsCard, {\n      title: 5,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }\n    }),\n    size: \"bi\",\n    key: 1\n  }, {\n    el: /*#__PURE__*/React.createElement(StockCard, {\n      title: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }),\n    size: \"x\",\n    key: 2\n  }, {\n    el: /*#__PURE__*/React.createElement(ProdCard, {\n      title: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }),\n    size: \"bi\",\n    key: 3\n  }, {\n    el: /*#__PURE__*/React.createElement(RSSFeed, {\n      title: 4,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }),\n    size: \"x\",\n    key: 4\n  }, {\n    el: /*#__PURE__*/React.createElement(TwitterCard, {\n      title: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }),\n    size: \"x\",\n    key: 5\n  }]);\n\n  const onSortEnd = ({\n    oldIndex,\n    newIndex\n  }) => {\n    const diff = Math.abs(oldIndex - newIndex);\n    const swappable = diff == 1 || diff == 2;\n\n    if (swappable) {\n      setItems(items => {\n        // const newArr = arrayMove(items, oldIndex, newIndex); //moves items forward\n        const temp = [...items];\n        [temp[oldIndex], temp[newIndex]] = [temp[newIndex], temp[oldIndex]]; // swaps items at oldIndex and newIndex\n\n        const cardIndices = temp.map(({\n          key\n        }, index) => ({\n          key,\n          index\n        }));\n        setStateDashboard({ ...stateDashboard,\n          cardIndices\n        });\n        return temp;\n      });\n    }\n\n    return;\n  };\n\n  return /*#__PURE__*/React.createElement(SortableList, {\n    items: items,\n    transitionDuration: 0,\n    onSortEnd: onSortEnd,\n    useDragHandle: true,\n    useWindowAsScrollContainer: true,\n    disableAutoscroll: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  });\n};\n\nexport default CardGrid;","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Dashboard/components/CardsGrid.js"],"names":["Grid","Card","makeStyles","arrayMove","React","useContext","useState","SortableContainer","SortableElement","DashboardContext","ProdCard","CardWrapper","TwitterCard","StockCard","RigsCard","RSSFeed","useStyles","root","flexGrow","cgriditem","height","cgridcard","SortableItem","content","classes","sizeHandle","ele","arr","sizeArray","size","el","SortableList","items","map","index","key","CardGrid","stateDashboard","setStateDashboard","setItems","onSortEnd","oldIndex","newIndex","diff","Math","abs","swappable","temp","cardIndices"],"mappings":"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","sourcesContent":["import { Grid } from \"@material-ui/core\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport arrayMove from \"array-move\";\r\nimport React, { useContext, useState } from \"react\";\r\nimport { SortableContainer, SortableElement } from \"react-sortable-hoc\";\r\nimport { DashboardContext } from \"../DashboardContext\";\r\nimport ProdCard from \"./ProdCard\"\r\nimport CardWrapper from \"./CardTemplate\";\r\nimport TwitterCard from \"./TwitterCard\";\r\nimport StockCard from \"./StockCard\";\r\nimport RigsCard from \"./RigsCard\"\r\nimport RSSFeed from \"./RssFeed\"\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  cgriditem: {\r\n    height: \"800px\",\r\n\r\n  },\r\n  cgridcard: {\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nconst SortableItem = SortableElement(({ content }) => {\r\n  const classes = useStyles();\r\n\r\n\r\n  const sizeHandle = (ele) => {\r\n    \r\n    if(ele==\"x\"){\r\n      var arr = [3,3,4,4,6];\r\n    } else if(ele==\"2x\"){\r\n      var arr = [5,8,8,8,8];\r\n    } else if(ele==\"bi\"){\r\n      var arr = [5,9,12,12,12];\r\n    } else if(ele==\"full\"){\r\n      var arr = [12,12,12,12,12];\r\n    }\r\n    else {\r\n      var arr = [6,6,6,6,6];\r\n    }\r\n    return(arr);\r\n\r\n  };\r\n\r\n  const sizeArray = sizeHandle(content.size);\r\n\r\n\r\n\r\n  return (\r\n    <Grid \r\n        item \r\n        xl={sizeArray[0]}\r\n        lg={sizeArray[1]}\r\n        md={sizeArray[2]}\r\n        sm={sizeArray[3]}\r\n        xs={sizeArray[4]}\r\n        className={classes.cgriditem}>\r\n      <Card className={classes.cgridcard}>{content.el}</Card>\r\n    </Grid>\r\n  );\r\n});\r\n\r\nconst SortableList = SortableContainer(({ items }) => {\r\n  return (\r\n    <Grid item container \r\n      spacing={4}>\r\n      {items.map((content, index) => {\r\n        return (\r\n          <SortableItem\r\n            key={`l-${content.key}`}\r\n            index={index}\r\n            content={content}\r\n          />\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n});\r\n\r\nconst CardGrid = () => {\r\n  const [stateDashboard, setStateDashboard] = useContext(DashboardContext);\r\n  const [items, setItems] = useState([\r\n    { el: <RigsCard title={5} />, size: \"bi\", key: 1 },\r\n    { el: <StockCard title={3} />, size: \"x\", key: 2},\r\n    { el: <ProdCard title={1} />, size: \"bi\", key: 3 },\r\n    { el: <RSSFeed title={4} />, size: \"x\", key: 4 },\r\n    { el: <TwitterCard title={2} />, size: \"x\", key: 5 },   \r\n    \r\n    \r\n  ]);\r\n\r\n  const onSortEnd = ({ oldIndex, newIndex }) => {\r\n    const diff = Math.abs(oldIndex - newIndex);\r\n    const swappable = diff == 1 || diff == 2;\r\n    if (swappable) {\r\n      setItems((items) => {\r\n        // const newArr = arrayMove(items, oldIndex, newIndex); //moves items forward\r\n        const temp = [...items];\r\n        [temp[oldIndex], temp[newIndex]] = [\r\n          temp[newIndex],\r\n          temp[oldIndex],\r\n        ]; // swaps items at oldIndex and newIndex\r\n        const cardIndices = temp.map(({ key }, index) => ({ key, index }));\r\n        setStateDashboard({ ...stateDashboard, cardIndices });\r\n        return temp;\r\n      });\r\n    }\r\n    return;\r\n  };\r\n  return (\r\n    <SortableList\r\n      items={items}\r\n      transitionDuration={0}\r\n      onSortEnd={onSortEnd}\r\n      useDragHandle={true}\r\n      useWindowAsScrollContainer={true}\r\n      disableAutoscroll={true}\r\n    />\r\n  );\r\n};\r\n\r\nexport default CardGrid;\r\n"]},"metadata":{},"sourceType":"module"}