{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport { isElement, isValidElementType } from 'react-is';\nimport SimpleTextEditor from './SimpleTextEditor';\nimport ClickOutside from './ClickOutside';\n\nvar EditorContainer =\n/** @class */\nfunction (_super) {\n  __extends(EditorContainer, _super);\n\n  function EditorContainer() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.changeCommitted = false;\n    _this.changeCanceled = false;\n    _this.editor = React.createRef();\n    _this.state = {\n      isInvalid: false\n    };\n\n    _this.onKeyDown = function (e) {\n      switch (e.key) {\n        case 'Enter':\n          _this.onPressEnter();\n\n          break;\n\n        case 'Tab':\n          _this.onPressTab();\n\n          break;\n\n        case 'Escape':\n          _this.onPressEscape(e);\n\n          break;\n\n        case 'ArrowUp':\n        case 'ArrowDown':\n          _this.onPressArrowUpOrDown(e);\n\n          break;\n\n        case 'ArrowLeft':\n          _this.onPressArrowLeft(e);\n\n          break;\n\n        case 'ArrowRight':\n          _this.onPressArrowRight(e);\n\n          break;\n\n        default:\n          break;\n      }\n\n      if (_this.props.onGridKeyDown) {\n        _this.props.onGridKeyDown(e);\n      }\n    };\n\n    _this.onPressEnter = function () {\n      _this.commit({\n        key: 'Enter'\n      });\n    };\n\n    _this.onPressTab = function () {\n      _this.commit({\n        key: 'Tab'\n      });\n    };\n\n    _this.onPressEscape = function (e) {\n      if (!_this.editorIsSelectOpen()) {\n        _this.commitCancel();\n      } else {\n        // prevent event from bubbling if editor has results to select\n        e.stopPropagation();\n      }\n    };\n\n    _this.onPressArrowUpOrDown = function (e) {\n      if (_this.editorHasResults()) {\n        // dont want to propogate as that then moves us round the grid\n        e.stopPropagation();\n      } else {\n        _this.commit(e);\n      }\n    };\n\n    _this.onPressArrowLeft = function (e) {\n      // prevent event propogation. this disables left cell navigation\n      if (!_this.isCaretAtBeginningOfInput()) {\n        e.stopPropagation();\n      } else {\n        _this.commit(e);\n      }\n    };\n\n    _this.onPressArrowRight = function (e) {\n      // prevent event propogation. this disables right cell navigation\n      if (!_this.isCaretAtEndOfInput()) {\n        e.stopPropagation();\n      } else {\n        _this.commit(e);\n      }\n    };\n\n    _this.editorHasResults = function () {\n      var hasResults = _this.getEditor().hasResults;\n\n      return hasResults ? hasResults() : false;\n    };\n\n    _this.editorIsSelectOpen = function () {\n      var isSelectOpen = _this.getEditor().isSelectOpen;\n\n      return isSelectOpen ? isSelectOpen() : false;\n    };\n\n    _this.getEditor = function () {\n      return _this.editor.current;\n    };\n\n    _this.getInputNode = function () {\n      return _this.getEditor().getInputNode();\n    };\n\n    _this.commit = function (args) {\n      if (args === void 0) {\n        args = {};\n      }\n\n      var onCommit = _this.props.onCommit;\n\n      var updated = _this.getEditor().getValue();\n\n      if (_this.isNewValueValid(updated)) {\n        _this.changeCommitted = true;\n        var cellKey = _this.props.column.key;\n        onCommit({\n          cellKey: cellKey,\n          rowIdx: _this.props.rowIdx,\n          updated: updated,\n          key: args.key\n        });\n      }\n    };\n\n    _this.commitCancel = function () {\n      _this.changeCanceled = true;\n\n      _this.props.onCommitCancel();\n    };\n\n    _this.isNewValueValid = function (value) {\n      var editor = _this.getEditor();\n\n      if (editor.validate) {\n        var isValid = editor.validate(value);\n\n        _this.setState({\n          isInvalid: !isValid\n        });\n\n        return isValid;\n      }\n\n      return true;\n    };\n\n    _this.isCaretAtBeginningOfInput = function () {\n      var inputNode = _this.getInputNode();\n\n      return inputNode instanceof HTMLInputElement && inputNode.selectionEnd === 0;\n    };\n\n    _this.isCaretAtEndOfInput = function () {\n      var inputNode = _this.getInputNode();\n\n      return inputNode instanceof HTMLInputElement && inputNode.selectionStart === inputNode.value.length;\n    };\n\n    _this.handleRightClick = function (e) {\n      e.stopPropagation();\n    };\n\n    return _this;\n  }\n\n  EditorContainer.prototype.componentDidMount = function () {\n    var inputNode = this.getInputNode();\n\n    if (inputNode instanceof HTMLElement) {\n      inputNode.focus();\n\n      if (!this.getEditor().disableContainerStyles) {\n        inputNode.className += ' editor-main';\n        inputNode.style.height = this.props.height - 1 + \"px\";\n      }\n    }\n\n    if (inputNode instanceof HTMLInputElement) {\n      inputNode.select();\n    }\n  };\n\n  EditorContainer.prototype.componentDidUpdate = function (prevProps) {\n    if (prevProps.scrollLeft !== this.props.scrollLeft || prevProps.scrollTop !== this.props.scrollTop) {\n      this.commitCancel();\n    }\n  };\n\n  EditorContainer.prototype.componentWillUnmount = function () {\n    if (!this.changeCommitted && !this.changeCanceled) {\n      this.commit({\n        key: 'Enter'\n      });\n    }\n  };\n\n  EditorContainer.prototype.createEditor = function () {\n    var editorProps = {\n      ref: this.editor,\n      column: this.props.column,\n      value: this.getInitialValue(),\n      rowMetaData: this.getRowMetaData(),\n      rowData: this.props.rowData,\n      height: this.props.height,\n      onCommit: this.commit,\n      onCommitCancel: this.commitCancel,\n      onBlur: this.commit,\n      onOverrideKeyDown: this.onKeyDown\n    };\n    var CustomEditor = this.props.column.editor; // return custom column editor or SimpleEditor if none specified\n\n    if (isElement(CustomEditor)) {\n      return React.cloneElement(CustomEditor, editorProps);\n    }\n\n    if (isValidElementType(CustomEditor)) {\n      return React.createElement(CustomEditor, __assign({}, editorProps));\n    }\n\n    return React.createElement(SimpleTextEditor, {\n      ref: this.editor,\n      column: this.props.column,\n      value: this.getInitialValue(),\n      onBlur: this.commit\n    });\n  };\n\n  EditorContainer.prototype.getRowMetaData = function () {\n    // clone row data so editor cannot actually change this\n    // convention based method to get corresponding Id or Name of any Name or Id property\n    if (this.props.column.getRowMetaData) {\n      return this.props.column.getRowMetaData(this.props.rowData, this.props.column);\n    }\n  };\n\n  EditorContainer.prototype.getInitialValue = function () {\n    var _a = this.props,\n        key = _a.firstEditorKeyPress,\n        value = _a.value;\n\n    if (key === 'Delete' || key === 'Backspace') {\n      return '';\n    }\n\n    if (key === 'Enter') {\n      return value;\n    }\n\n    return key || value;\n  };\n\n  EditorContainer.prototype.renderStatusIcon = function () {\n    return this.state.isInvalid && React.createElement(\"span\", {\n      className: \"glyphicon glyphicon-remove form-control-feedback\"\n    });\n  };\n\n  EditorContainer.prototype.render = function () {\n    var _a = this.props,\n        width = _a.width,\n        height = _a.height,\n        left = _a.left,\n        top = _a.top;\n    var className = classNames('rdg-editor-container', {\n      'has-error': this.state.isInvalid === true\n    });\n    return React.createElement(ClickOutside, {\n      onClickOutside: this.commit\n    }, React.createElement(\"div\", {\n      className: className,\n      style: {\n        height: height,\n        width: width,\n        left: left,\n        top: top\n      },\n      onKeyDown: this.onKeyDown,\n      onContextMenu: this.handleRightClick\n    }, this.createEditor(), this.renderStatusIcon()));\n  };\n\n  EditorContainer.displayName = 'EditorContainer';\n  return EditorContainer;\n}(React.Component);\n\nexport default EditorContainer;","map":{"version":3,"sources":["../../../src/common/editors/EditorContainer.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { KeyboardEvent } from 'react';\nimport classNames from 'classnames';\nimport { isElement, isValidElementType } from 'react-is';\n\nimport { CalculatedColumn, Editor, EditorProps, CommitEvent, Dimension, Omit } from '../types';\nimport SimpleTextEditor from './SimpleTextEditor';\nimport ClickOutside from './ClickOutside';\nimport { InteractionMasksProps, InteractionMasksState } from '../../masks/InteractionMasks';\n\ntype SharedInteractionMasksProps<R> = Pick<InteractionMasksProps<R>, 'scrollLeft' | 'scrollTop'>;\ntype SharedInteractionMasksState = Pick<InteractionMasksState, 'firstEditorKeyPress'>;\n\ntype ValueType<R> = R[keyof R];\n\nexport interface Props<R> extends SharedInteractionMasksProps<R>, SharedInteractionMasksState, Omit<Dimension, 'zIndex'> {\n  rowIdx: number;\n  rowData: R;\n  value: ValueType<R>;\n  column: CalculatedColumn<R>;\n  onGridKeyDown?(e: KeyboardEvent): void;\n  onCommit(e: CommitEvent<R>): void;\n  onCommitCancel(): void;\n}\n\ninterface State {\n  isInvalid: boolean;\n}\n\nexport default class EditorContainer<R> extends React.Component<Props<R>, State> {\n  static displayName = 'EditorContainer';\n\n  changeCommitted = false;\n  changeCanceled = false;\n\n  private readonly editor = React.createRef<Editor>();\n  readonly state: Readonly<State> = { isInvalid: false };\n\n  componentDidMount() {\n    const inputNode = this.getInputNode();\n    if (inputNode instanceof HTMLElement) {\n      inputNode.focus();\n      if (!this.getEditor().disableContainerStyles) {\n        inputNode.className += ' editor-main';\n        inputNode.style.height = `${this.props.height - 1}px`;\n      }\n    }\n    if (inputNode instanceof HTMLInputElement) {\n      inputNode.select();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props<R>) {\n    if (prevProps.scrollLeft !== this.props.scrollLeft || prevProps.scrollTop !== this.props.scrollTop) {\n      this.commitCancel();\n    }\n  }\n\n  componentWillUnmount() {\n    if (!this.changeCommitted && !this.changeCanceled) {\n      this.commit({ key: 'Enter' });\n    }\n  }\n\n  onKeyDown = (e: KeyboardEvent<HTMLElement>) => {\n    switch (e.key) {\n      case 'Enter':\n        this.onPressEnter();\n        break;\n      case 'Tab':\n        this.onPressTab();\n        break;\n      case 'Escape':\n        this.onPressEscape(e);\n        break;\n      case 'ArrowUp':\n      case 'ArrowDown':\n        this.onPressArrowUpOrDown(e);\n        break;\n      case 'ArrowLeft':\n        this.onPressArrowLeft(e);\n        break;\n      case 'ArrowRight':\n        this.onPressArrowRight(e);\n        break;\n      default:\n        break;\n    }\n\n    if (this.props.onGridKeyDown) {\n      this.props.onGridKeyDown(e);\n    }\n  };\n\n  createEditor() {\n    type P = EditorProps<ValueType<R> | string, unknown, R>;\n    const editorProps: P & { ref: React.RefObject<Editor> } = {\n      ref: this.editor,\n      column: this.props.column,\n      value: this.getInitialValue(),\n      rowMetaData: this.getRowMetaData(),\n      rowData: this.props.rowData,\n      height: this.props.height,\n      onCommit: this.commit,\n      onCommitCancel: this.commitCancel,\n      onBlur: this.commit,\n      onOverrideKeyDown: this.onKeyDown\n    };\n\n    const CustomEditor = this.props.column.editor as React.ComponentType<P>;\n    // return custom column editor or SimpleEditor if none specified\n    if (isElement(CustomEditor)) {\n      return React.cloneElement(CustomEditor, editorProps);\n    }\n    if (isValidElementType(CustomEditor)) {\n      return <CustomEditor {...editorProps} />;\n    }\n\n    return (\n      <SimpleTextEditor\n        ref={this.editor as unknown as React.RefObject<SimpleTextEditor>}\n        column={this.props.column as CalculatedColumn<unknown>}\n        value={this.getInitialValue() as string}\n        onBlur={this.commit}\n      />\n    );\n  }\n\n  onPressEnter = () => {\n    this.commit({ key: 'Enter' });\n  };\n\n  onPressTab = () => {\n    this.commit({ key: 'Tab' });\n  };\n\n  onPressEscape = (e: KeyboardEvent) => {\n    if (!this.editorIsSelectOpen()) {\n      this.commitCancel();\n    } else {\n      // prevent event from bubbling if editor has results to select\n      e.stopPropagation();\n    }\n  };\n\n  onPressArrowUpOrDown = (e: KeyboardEvent) => {\n    if (this.editorHasResults()) {\n      // dont want to propogate as that then moves us round the grid\n      e.stopPropagation();\n    } else {\n      this.commit(e);\n    }\n  };\n\n  onPressArrowLeft = (e: KeyboardEvent) => {\n    // prevent event propogation. this disables left cell navigation\n    if (!this.isCaretAtBeginningOfInput()) {\n      e.stopPropagation();\n    } else {\n      this.commit(e);\n    }\n  };\n\n  onPressArrowRight = (e: KeyboardEvent) => {\n    // prevent event propogation. this disables right cell navigation\n    if (!this.isCaretAtEndOfInput()) {\n      e.stopPropagation();\n    } else {\n      this.commit(e);\n    }\n  };\n\n  editorHasResults = () => {\n    const { hasResults } = this.getEditor();\n    return hasResults ? hasResults() : false;\n  };\n\n  editorIsSelectOpen = () => {\n    const { isSelectOpen } = this.getEditor();\n    return isSelectOpen ? isSelectOpen() : false;\n  };\n\n  getRowMetaData() {\n    // clone row data so editor cannot actually change this\n    // convention based method to get corresponding Id or Name of any Name or Id property\n    if (this.props.column.getRowMetaData) {\n      return this.props.column.getRowMetaData(this.props.rowData, this.props.column);\n    }\n  }\n\n  getEditor = () => {\n    return this.editor.current!;\n  };\n\n  getInputNode = () => {\n    return this.getEditor().getInputNode();\n  };\n\n  getInitialValue(): ValueType<R> | string {\n    const { firstEditorKeyPress: key, value } = this.props;\n    if (key === 'Delete' || key === 'Backspace') {\n      return '';\n    }\n    if (key === 'Enter') {\n      return value;\n    }\n\n    return key || value;\n  }\n\n  commit = (args: { key?: string } = {}) => {\n    const { onCommit } = this.props;\n    const updated = this.getEditor().getValue();\n    if (this.isNewValueValid(updated)) {\n      this.changeCommitted = true;\n      const cellKey = this.props.column.key;\n      onCommit({ cellKey, rowIdx: this.props.rowIdx, updated, key: args.key });\n    }\n  };\n\n  commitCancel = () => {\n    this.changeCanceled = true;\n    this.props.onCommitCancel();\n  };\n\n  isNewValueValid = (value: unknown) => {\n    const editor = this.getEditor();\n    if (editor.validate) {\n      const isValid = editor.validate(value);\n      this.setState({ isInvalid: !isValid });\n      return isValid;\n    }\n\n    return true;\n  };\n\n  isCaretAtBeginningOfInput = () => {\n    const inputNode = this.getInputNode();\n    return inputNode instanceof HTMLInputElement\n      && inputNode.selectionEnd === 0;\n  };\n\n  isCaretAtEndOfInput = () => {\n    const inputNode = this.getInputNode();\n    return inputNode instanceof HTMLInputElement\n      && inputNode.selectionStart === inputNode.value.length;\n  };\n\n  handleRightClick = (e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n  };\n\n  renderStatusIcon() {\n    return this.state.isInvalid\n      && <span className=\"glyphicon glyphicon-remove form-control-feedback\" />;\n  }\n\n  render() {\n    const { width, height, left, top } = this.props;\n    const className = classNames('rdg-editor-container', {\n      'has-error': this.state.isInvalid === true\n    });\n\n    return (\n      <ClickOutside onClickOutside={this.commit}>\n        <div\n          className={className}\n          style={{ height, width, left, top }}\n          onKeyDown={this.onKeyDown}\n          onContextMenu={this.handleRightClick}\n        >\n          {this.createEditor()}\n          {this.renderStatusIcon()}\n        </div>\n      </ClickOutside>\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}