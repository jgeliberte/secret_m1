{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Shared\\\\CommentsWithIcon.js\";\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { AppContext } from \"../../AppContext\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Badge from \"@material-ui/core/Badge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport Comments from \"./Comments\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport { COMMENTSCOUNTER } from \"../../graphQL/useQueryCommentsCounter\";\nexport default function CommentsWithIcon(props) {\n  const [stateApp] = useContext(AppContext);\n  const [commentsCounter, setCommentsCounter] = useState(0);\n  const [openDialog, setOpenDialog] = useState(false);\n  const useStyles = makeStyles(theme => ({\n    icons: {\n      color: \"#ffffff\",\n      marginLeft: \"auto\",\n      \"&:hover\": {\n        backgroundColor: \"#031d40\"\n      }\n    },\n    iconSelected: {\n      color: theme.palette.secondary.main\n    },\n    tagsDiv: {\n      margin: \"8px\"\n    }\n  }));\n  const classes = useStyles();\n  const [getCommentsCounter, {\n    data: dataCommentsCounter\n  }] = useLazyQuery(COMMENTSCOUNTER);\n  useEffect(() => {\n    if (stateApp.user && stateApp.user.mongoId && props.objectId) {\n      getCommentsCounter({\n        variables: {\n          objectsIdsArray: [props.objectId],\n          userId: stateApp.user.mongoId\n        }\n      });\n    }\n  }, [stateApp.user, props.objectId]);\n  useEffect(() => {\n    if (dataCommentsCounter && dataCommentsCounter.commentsCounter) {\n      if (dataCommentsCounter.commentsCounter.length > 0) {\n        setCommentsCounter(dataCommentsCounter.commentsCounter[0].total);\n      } else {\n        setCommentsCounter(0);\n      }\n    }\n  }, [dataCommentsCounter]);\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    title: !commentsCounter || commentsCounter === 0 ? \"Add Comments\" : \"Comments\",\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Badge, {\n    badgeContent: props.iconZiseSmall ? null : commentsCounter,\n    color: \"secondary\" // variant={props.iconZiseSmall ? \"dot\" : \"standard\"}s\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    size: props.iconZiseSmall ? \"small\" : \"medium\",\n    color: \"primary\",\n    className: `${classes.icons}  ${openDialog || commentsCounter && commentsCounter > 0 ? classes.iconSelected : \"\"}`,\n    onClick: () => {\n      setOpenDialog(true);\n    },\n    \"aria-label\": \"show tags\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ChatIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  })))), openDialog && /*#__PURE__*/React.createElement(Dialog, {\n    className: classes.dialog,\n    open: openDialog,\n    onClose: () => {\n      setOpenDialog(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Comments, {\n    focus: true,\n    targetSourceId: props.objectId,\n    targetLabel: props.targetLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Shared/CommentsWithIcon.js"],"names":["React","useEffect","useContext","useState","AppContext","makeStyles","IconButton","useLazyQuery","Tooltip","Badge","ChatIcon","Comments","Dialog","COMMENTSCOUNTER","CommentsWithIcon","props","stateApp","commentsCounter","setCommentsCounter","openDialog","setOpenDialog","useStyles","theme","icons","color","marginLeft","backgroundColor","iconSelected","palette","secondary","main","tagsDiv","margin","classes","getCommentsCounter","data","dataCommentsCounter","user","mongoId","objectId","variables","objectsIdsArray","userId","length","total","iconZiseSmall","dialog","targetLabel"],"mappings":"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","sourcesContent":["import React, { useEffect, useContext, useState } from \"react\";\r\nimport { AppContext } from \"../../AppContext\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport Comments from \"./Comments\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport { COMMENTSCOUNTER } from \"../../graphQL/useQueryCommentsCounter\";\r\n\r\nexport default function CommentsWithIcon(props) {\r\n  const [stateApp] = useContext(AppContext);\r\n  const [commentsCounter, setCommentsCounter] = useState(0);\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    icons: {\r\n      color: \"#ffffff\",\r\n      marginLeft: \"auto\",\r\n      \"&:hover\": {\r\n        backgroundColor: \"#031d40\",\r\n      },\r\n    },\r\n    iconSelected: {\r\n      color: theme.palette.secondary.main,\r\n    },\r\n    tagsDiv: {\r\n      margin: \"8px\",\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const [getCommentsCounter, { data: dataCommentsCounter }] = useLazyQuery(\r\n    COMMENTSCOUNTER\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (stateApp.user && stateApp.user.mongoId && props.objectId) {\r\n      getCommentsCounter({\r\n        variables: {\r\n          objectsIdsArray: [props.objectId],\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n    }\r\n  }, [stateApp.user, props.objectId]);\r\n\r\n  useEffect(() => {\r\n    if (dataCommentsCounter && dataCommentsCounter.commentsCounter) {\r\n      if (dataCommentsCounter.commentsCounter.length > 0) {\r\n        setCommentsCounter(dataCommentsCounter.commentsCounter[0].total);\r\n      } else {\r\n        setCommentsCounter(0);\r\n      }\r\n    }\r\n  }, [dataCommentsCounter]);\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Tooltip\r\n        title={\r\n          !commentsCounter || commentsCounter === 0\r\n            ? \"Add Comments\"\r\n            : \"Comments\"\r\n        }\r\n        placement=\"top\"\r\n      >\r\n        <Badge\r\n          badgeContent={props.iconZiseSmall ? null : commentsCounter}\r\n          color=\"secondary\"\r\n          // variant={props.iconZiseSmall ? \"dot\" : \"standard\"}s\r\n        >\r\n          <IconButton\r\n            size={props.iconZiseSmall ? \"small\" : \"medium\"}\r\n            color=\"primary\"\r\n            className={`${classes.icons}  ${\r\n              openDialog || (commentsCounter && commentsCounter > 0)\r\n                ? classes.iconSelected\r\n                : \"\"\r\n            }`}\r\n            onClick={() => {\r\n              setOpenDialog(true);\r\n            }}\r\n            aria-label=\"show tags\"\r\n          >\r\n            <ChatIcon />\r\n          </IconButton>\r\n        </Badge>\r\n      </Tooltip>\r\n      {openDialog && (\r\n        <Dialog\r\n          className={classes.dialog}\r\n          open={openDialog}\r\n          onClose={() => {\r\n            setOpenDialog(false);\r\n          }}\r\n        >\r\n          <Comments\r\n            focus\r\n            targetSourceId={props.objectId}\r\n            targetLabel={props.targetLabel}\r\n          />\r\n        </Dialog>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}