{"ast":null,"code":"import { spatialDataAttributes } from \"./constants\";\nimport { area, convertArea, length } from \"@turf/turf\";\nimport polylabel from \"polylabel\";\nexport const addCustomShapeProperties = (feature, Draw) => {\n  spatialDataAttributes.forEach(attribute => {\n    let data = \"\";\n\n    switch (attribute) {\n      case \"shapeArea\":\n        data = calculateLandArea(feature);\n        break;\n\n      case \"shapeCenter\":\n        data = calculateShapeCenter(feature.geometry.coordinates);\n        break;\n    }\n\n    Draw.setFeatureProperty(feature.id, attribute, data);\n  });\n};\n\nconst calculateLandArea = feature => {\n  if (feature.geometry.type === \"Polygon\") {\n    const areaInSqMeters = area(feature);\n    const areaInAcres = convertArea(areaInSqMeters, \"meters\", \"acres\");\n    return `${Math.round(areaInAcres * 100) / 100} acres`;\n  }\n\n  if (feature.geometry.type === \"LineString\") {\n    const distanceInMiles = length(feature, {\n      units: \"miles\"\n    });\n    return `${Math.round(distanceInMiles * 100) / 100} miles`;\n  }\n};\n\nconst calculateShapeCenter = shapeCoordinates => {\n  return polylabel(shapeCoordinates);\n};\n\nexport const createShapeLabelLayer = feature => {\n  // new mapboxgl.Marker(<div className='labelClass'></div>).setLngLat().addTo(map)\\\n  return {\n    id: feature.id + \"_label\",\n    type: \"symbol\",\n    source: {\n      type: \"geojson\",\n      data: {\n        type: \"FeatureCollection\",\n        features: [{\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: feature.geometry.coordinates[0][0]\n          },\n          properties: {\n            id: feature.id\n          }\n        }]\n      }\n    },\n    layout: {\n      \"text-field\": [\"format\", feature.properties.projectName || feature.geometry.type, {\n        \"text-color\": \"white\"\n      }, \"\\n\", feature.properties.shapeArea, {\n        \"text-color\": \"white\"\n      }],\n      // \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\n      \"text-offset\": [1, 1],\n      \"text-anchor\": \"left\",\n      visibility: \"none\"\n    }\n  };\n};","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/MapControls/components/DrawShapes/drawShapesHelpers.js"],"names":["spatialDataAttributes","area","convertArea","length","polylabel","addCustomShapeProperties","feature","Draw","forEach","attribute","data","calculateLandArea","calculateShapeCenter","geometry","coordinates","setFeatureProperty","id","type","areaInSqMeters","areaInAcres","Math","round","distanceInMiles","units","shapeCoordinates","createShapeLabelLayer","source","features","properties","layout","projectName","shapeArea","visibility"],"mappings":"AAAA,SAASA,qBAAT,QAAsC,aAAtC;AACA,SAASC,IAAT,EAAeC,WAAf,EAA4BC,MAA5B,QAA0C,YAA1C;AACA,OAAOC,SAAP,MAAsB,WAAtB;AAEA,OAAO,MAAMC,wBAAwB,GAAG,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACzDP,EAAAA,qBAAqB,CAACQ,OAAtB,CAA8BC,SAAS,IAAI;AACzC,QAAIC,IAAI,GAAG,EAAX;;AACA,YAAQD,SAAR;AACE,WAAK,WAAL;AACEC,QAAAA,IAAI,GAAGC,iBAAiB,CAACL,OAAD,CAAxB;AACA;;AACF,WAAK,aAAL;AACEI,QAAAA,IAAI,GAAGE,oBAAoB,CAACN,OAAO,CAACO,QAAR,CAAiBC,WAAlB,CAA3B;AACA;AANJ;;AAQAP,IAAAA,IAAI,CAACQ,kBAAL,CAAwBT,OAAO,CAACU,EAAhC,EAAoCP,SAApC,EAA+CC,IAA/C;AACD,GAXD;AAYD,CAbM;;AAeP,MAAMC,iBAAiB,GAAGL,OAAO,IAAI;AACnC,MAAIA,OAAO,CAACO,QAAR,CAAiBI,IAAjB,KAA0B,SAA9B,EAAyC;AACvC,UAAMC,cAAc,GAAGjB,IAAI,CAACK,OAAD,CAA3B;AACA,UAAMa,WAAW,GAAGjB,WAAW,CAACgB,cAAD,EAAiB,QAAjB,EAA2B,OAA3B,CAA/B;AACA,WAAQ,GAAEE,IAAI,CAACC,KAAL,CAAWF,WAAW,GAAG,GAAzB,IAAgC,GAAI,QAA9C;AACD;;AACD,MAAIb,OAAO,CAACO,QAAR,CAAiBI,IAAjB,KAA0B,YAA9B,EAA4C;AAC1C,UAAMK,eAAe,GAAGnB,MAAM,CAACG,OAAD,EAAU;AAAEiB,MAAAA,KAAK,EAAE;AAAT,KAAV,CAA9B;AACA,WAAQ,GAAEH,IAAI,CAACC,KAAL,CAAWC,eAAe,GAAG,GAA7B,IAAoC,GAAI,QAAlD;AACD;AACF,CAVD;;AAWA,MAAMV,oBAAoB,GAAGY,gBAAgB,IAAI;AAC/C,SAAOpB,SAAS,CAACoB,gBAAD,CAAhB;AACD,CAFD;;AAIA,OAAO,MAAMC,qBAAqB,GAAGnB,OAAO,IAAI;AAC9C;AACA,SAAO;AACLU,IAAAA,EAAE,EAAEV,OAAO,CAACU,EAAR,GAAa,QADZ;AAELC,IAAAA,IAAI,EAAE,QAFD;AAGLS,IAAAA,MAAM,EAAE;AACNT,MAAAA,IAAI,EAAE,SADA;AAENP,MAAAA,IAAI,EAAE;AACJO,QAAAA,IAAI,EAAE,mBADF;AAEJU,QAAAA,QAAQ,EAAE,CACR;AACEV,UAAAA,IAAI,EAAE,SADR;AAEEJ,UAAAA,QAAQ,EAAE;AACRI,YAAAA,IAAI,EAAE,OADE;AAERH,YAAAA,WAAW,EAAER,OAAO,CAACO,QAAR,CAAiBC,WAAjB,CAA6B,CAA7B,EAAgC,CAAhC;AAFL,WAFZ;AAMEc,UAAAA,UAAU,EAAE;AACVZ,YAAAA,EAAE,EAAEV,OAAO,CAACU;AADF;AANd,SADQ;AAFN;AAFA,KAHH;AAqBLa,IAAAA,MAAM,EAAE;AACN,oBAAc,CACZ,QADY,EAEZvB,OAAO,CAACsB,UAAR,CAAmBE,WAAnB,IAAkCxB,OAAO,CAACO,QAAR,CAAiBI,IAFvC,EAGZ;AAAE,sBAAc;AAAhB,OAHY,EAIZ,IAJY,EAKZX,OAAO,CAACsB,UAAR,CAAmBG,SALP,EAMZ;AAAE,sBAAc;AAAhB,OANY,CADR;AASN;AACA,qBAAe,CAAC,CAAD,EAAI,CAAJ,CAVT;AAWN,qBAAe,MAXT;AAYNC,MAAAA,UAAU,EAAE;AAZN;AArBH,GAAP;AAoCD,CAtCM","sourcesContent":["import { spatialDataAttributes } from \"./constants\";\r\nimport { area, convertArea, length } from \"@turf/turf\";\r\nimport polylabel from \"polylabel\";\r\n\r\nexport const addCustomShapeProperties = (feature, Draw) => {\r\n  spatialDataAttributes.forEach(attribute => {\r\n    let data = \"\";\r\n    switch (attribute) {\r\n      case \"shapeArea\":\r\n        data = calculateLandArea(feature);\r\n        break;\r\n      case \"shapeCenter\":\r\n        data = calculateShapeCenter(feature.geometry.coordinates);\r\n        break;\r\n    }\r\n    Draw.setFeatureProperty(feature.id, attribute, data);\r\n  });\r\n};\r\n\r\nconst calculateLandArea = feature => {\r\n  if (feature.geometry.type === \"Polygon\") {\r\n    const areaInSqMeters = area(feature);\r\n    const areaInAcres = convertArea(areaInSqMeters, \"meters\", \"acres\");\r\n    return `${Math.round(areaInAcres * 100) / 100} acres`;\r\n  }\r\n  if (feature.geometry.type === \"LineString\") {\r\n    const distanceInMiles = length(feature, { units: \"miles\" });\r\n    return `${Math.round(distanceInMiles * 100) / 100} miles`;\r\n  }\r\n};\r\nconst calculateShapeCenter = shapeCoordinates => {\r\n  return polylabel(shapeCoordinates);\r\n};\r\n\r\nexport const createShapeLabelLayer = feature => {\r\n  // new mapboxgl.Marker(<div className='labelClass'></div>).setLngLat().addTo(map)\\\r\n  return {\r\n    id: feature.id + \"_label\",\r\n    type: \"symbol\",\r\n    source: {\r\n      type: \"geojson\",\r\n      data: {\r\n        type: \"FeatureCollection\",\r\n        features: [\r\n          {\r\n            type: \"Feature\",\r\n            geometry: {\r\n              type: \"Point\",\r\n              coordinates: feature.geometry.coordinates[0][0]\r\n            },\r\n            properties: {\r\n              id: feature.id\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    },\r\n    layout: {\r\n      \"text-field\": [\r\n        \"format\",\r\n        feature.properties.projectName || feature.geometry.type,\r\n        { \"text-color\": \"white\" },\r\n        \"\\n\",\r\n        feature.properties.shapeArea,\r\n        { \"text-color\": \"white\" }\r\n      ],\r\n      // \"text-font\": [\"Open Sans Semibold\", \"Arial Unicode MS Bold\"],\r\n      \"text-offset\": [1, 1],\r\n      \"text-anchor\": \"left\",\r\n      visibility: \"none\"\r\n    }\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}