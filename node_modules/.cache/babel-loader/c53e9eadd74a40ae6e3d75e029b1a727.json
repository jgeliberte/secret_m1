{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Shared\\\\M1nTable\\\\components\\\\SubComponents\\\\AddContactDialogContent.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Button from \"@material-ui/core/Button\";\nimport { Grid } from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\nimport { CONTACTSQUERY } from \"../../../../../graphQL/useQueryContacts\";\nimport { CONTACTSBYOWNERSID } from \"../../../../../graphQL/useQueryContactsByOwnerId\";\nimport { ADDCONTACT } from \"../../../../../graphQL/useMutationAddContact\";\nimport { ADDREMOVEOWNERTOACONTACT } from \"../../../../../graphQL/useMutationAddRemoveOwnerToAContact\";\nimport Taps from \"../../../Taps\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { AppContext } from \"../../../../../AppContext\";\n\nconst phonenumber = inputtxt => {\n  if (inputtxt.match(/^([0-9]||-|\\(|\\)|\\.|,)+$/) !== null) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst email = inputtxt => {\n  if (inputtxt.match(/^(([0-9a-zA-Z]|\\.)+@?[0-9a-zA-Z]*\\.?[0-9a-zA-Z]*)?$/) !== null) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst zipCopde = inputtxt => {\n  if (inputtxt.match(/^([0-9]+-?[0-9]*)?$/) !== null) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconst useStyles = makeStyles(theme => ({\n  maxWidth: {\n    width: \"100%\"\n  },\n  dialogContent: {\n    \"& header\": {\n      position: \"absolute\",\n      left: \"0\",\n      top: \"55px\"\n    }\n  },\n  dialogTitle: {\n    paddingBottom: dataContacts => dataContacts ? \"55px\" : \"16px\"\n  }\n}));\nexport default function AddContactDialogContent(props) {\n  const [stateApp] = React.useContext(AppContext);\n  const [validated, setValidated] = useState(false);\n  const [activeTapIndex, setActiveTapIndex] = useState(0);\n  const [contacts, setContacts] = useState([]);\n  const [existingContact, setExistingContact] = useState({\n    name: \"\"\n  });\n  const [newContact, setNewContact] = useState({\n    name: \"\",\n    mobilePhone: \"\",\n    homePhone: \"\",\n    primaryEmail: \"\",\n    address1: \"\",\n    address2: \"\",\n    city: \"\",\n    country: \"\",\n    state: \"\",\n    zip: \"\",\n    owners: props.parent ? [props.parent] : []\n  });\n  const [getContacts, {\n    loading: loadingContacts,\n    data: dataContacts\n  }] = useLazyQuery(CONTACTSQUERY, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [getContactsByOwnerId, {\n    loading: loadingContactsByOwnerId,\n    data: dataContactsByOwnerId\n  }] = useLazyQuery(CONTACTSBYOWNERSID, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [addContact] = useMutation(ADDCONTACT);\n  const [addRemoveOwnerToAContact] = useMutation(ADDREMOVEOWNERTOACONTACT);\n  useEffect(() => {\n    if (props.parent || props.setDealsContact) {\n      getContacts();\n    }\n  }, [props.parent, props.setDealsContact]);\n  useEffect(() => {\n    if (props.parent) {\n      getContactsByOwnerId({\n        variables: {\n          objectId: props.parent\n        }\n      });\n    }\n  }, [props.parent]);\n  useEffect(() => {\n    if (dataContacts && dataContacts.contacts && dataContacts.contacts.length > 0) {\n      if (dataContactsByOwnerId && dataContactsByOwnerId.contactsByOwnerId && dataContactsByOwnerId.contactsByOwnerId.length > 0) {\n        const tempIdArray = dataContactsByOwnerId.contactsByOwnerId.map(cont => cont._id);\n        setContacts([...dataContacts.contacts.filter(cont => tempIdArray.indexOf(cont._id) === -1)]);\n      } else {\n        setContacts([...dataContacts.contacts]);\n      }\n    }\n  }, [dataContacts, dataContactsByOwnerId]);\n  useEffect(() => {\n    if (activeTapIndex === 1 && existingContact.name !== \"\" || activeTapIndex === 0 && newContact.name.trim() !== \"\") {\n      setValidated(true);\n    } else {\n      setValidated(false);\n    }\n  }, [activeTapIndex, existingContact, newContact.name]); ///////////add other inputs\n\n  useEffect(() => {\n    emptyStates();\n  }, [activeTapIndex]);\n\n  const emptyStates = () => {\n    setExistingContact({\n      name: \"\"\n    });\n    setNewContact({ ...newContact,\n      name: \"\",\n      mobilePhone: \"\",\n      homePhone: \"\",\n      primaryEmail: \"\",\n      address1: \"\",\n      address2: \"\",\n      city: \"\",\n      country: \"\",\n      state: \"\",\n      zip: \"\"\n    });\n  };\n\n  const handleClickDialogClose = e => {\n    e.preventDefault();\n    props.onClose();\n    setActiveTapIndex(0);\n    emptyStates();\n  };\n\n  const handleClickAdd = e => {\n    e.preventDefault();\n\n    if (props.dealsPage) {\n      if (activeTapIndex === 0) {\n        addContact({\n          variables: {\n            contact: { ...newContact,\n              createBy: stateApp.user.mongoId,\n              lastUpdateBy: stateApp.user.mongoId\n            }\n          },\n          refetchQueries: [\"getContacts\"],\n          awaitRefetchQueries: true\n        });\n        props.setDealsContact(newContact);\n      } else if (activeTapIndex === 1) {\n        props.setDealsContact(existingContact);\n      }\n\n      handleClickDialogClose(e);\n      return;\n    }\n\n    if (props.parent && activeTapIndex === 1) {\n      //////update///// existingContact   //////////\n      addRemoveOwnerToAContact({\n        variables: {\n          contactId: existingContact._id,\n          ownerId: props.parent\n        },\n        refetchQueries: [\"getContacts\", \"getContactsByOwnerId\", \"getContactsCounter\", \"getContact\"],\n        awaitRefetchQueries: true\n      });\n    }\n\n    if (!props.parent || props.parent && activeTapIndex === 0) {\n      //////add new///// newContact ////////////\n      addContact({\n        variables: {\n          contact: { ...newContact,\n            createBy: stateApp.user.mongoId,\n            lastUpdateBy: stateApp.user.mongoId\n          }\n        },\n        refetchQueries: [\"getContacts\", \"getContactsByOwnerId\", \"getContactsCounter\", \"getContact\"],\n        awaitRefetchQueries: true\n      });\n    }\n\n    handleClickDialogClose(e);\n  };\n\n  const selectExisting = () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 7\n      }\n    }, !loadingContacts && !loadingContactsByOwnerId ? /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Autocomplete, {\n      size: \"small\",\n      className: classes.maxWidth,\n      style: {\n        minWidth: \"325.6px\"\n      },\n      options: contacts,\n      getOptionLabel: option => option && option.name ? option.name : option ? option : \"\",\n      autoComplete: true,\n      autoSelect: true,\n      disableClearable: true,\n      includeInputInList: true,\n      value: existingContact.name,\n      disabled: !contacts || contacts.length === 0,\n      onChange: (e, newValue) => {\n        setExistingContact(newValue);\n      },\n      renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n        label: \"Contacts\",\n        variant: \"outlined\",\n        fullWidth: true,\n        multiline: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 19\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 15\n      }\n    }))) : /*#__PURE__*/React.createElement(CircularProgress, {\n      size: 40,\n      disableShrink: true,\n      color: \"secondary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }\n    }));\n  };\n\n  const addNew = () => {\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      spacing: 2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      size: \"small\",\n      className: classes.maxWidth,\n      label: \"Name\",\n      multiline: true,\n      variant: \"outlined\",\n      value: newContact.name,\n      onChange: e => {\n        setNewContact({ ...newContact,\n          name: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      size: \"small\",\n      className: classes.maxWidth,\n      label: \"Mobile Phone\",\n      multiline: true,\n      variant: \"outlined\",\n      value: newContact.mobilePhone,\n      onChange: e => {\n        if (phonenumber(e.target.value)) {\n          setNewContact({ ...newContact,\n            mobilePhone: e.target.value\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      size: \"small\",\n      className: classes.maxWidth,\n      label: \"Home Phone\",\n      multiline: true,\n      variant: \"outlined\",\n      value: newContact.homePhone,\n      onChange: e => {\n        if (phonenumber(e.target.value)) {\n          setNewContact({ ...newContact,\n            homePhone: e.target.value\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      size: \"small\",\n      className: classes.maxWidth,\n      label: \"Email\",\n      multiline: true,\n      variant: \"outlined\",\n      value: newContact.primaryEmail,\n      onChange: e => {\n        if (email(e.target.value)) {\n          setNewContact({ ...newContact,\n            primaryEmail: e.target.value\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      size: \"small\",\n      className: classes.maxWidth,\n      label: \"Address 1\",\n      multiline: true,\n      variant: \"outlined\",\n      value: newContact.address1,\n      onChange: e => {\n        setNewContact({ ...newContact,\n          address1: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      size: \"small\",\n      className: classes.maxWidth,\n      label: \"Address 2\",\n      multiline: true,\n      variant: \"outlined\",\n      value: newContact.address2,\n      onChange: e => {\n        setNewContact({ ...newContact,\n          address2: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      size: \"small\",\n      className: classes.maxWidth,\n      label: \"City\",\n      multiline: true,\n      variant: \"outlined\",\n      value: newContact.city,\n      onChange: e => {\n        setNewContact({ ...newContact,\n          city: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      size: \"small\",\n      className: classes.maxWidth,\n      label: \"State\",\n      multiline: true,\n      variant: \"outlined\",\n      value: newContact.state,\n      onChange: e => {\n        setNewContact({ ...newContact,\n          state: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      size: \"small\",\n      className: classes.maxWidth,\n      label: \"Zip Code\",\n      multiline: true,\n      variant: \"outlined\",\n      value: newContact.zip,\n      onChange: e => {\n        if (zipCopde(e.target.value)) {\n          setNewContact({ ...newContact,\n            zip: e.target.value\n          });\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(TextField, {\n      size: \"small\",\n      className: classes.maxWidth,\n      label: \"Country\",\n      multiline: true,\n      variant: \"outlined\",\n      value: newContact.country,\n      onChange: e => {\n        setNewContact({ ...newContact,\n          country: e.target.value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 13\n      }\n    }))));\n  };\n\n  const whichTapIsActive = index => {\n    setActiveTapIndex(index);\n  };\n\n  const classes = useStyles(contacts && contacts.length > 0 ? true : false);\n  return !loadingContacts && !loadingContactsByOwnerId ? /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"alert-dialog-slide-title\",\n    className: classes.dialogTitle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }\n  }, \"Add a Contact\"), /*#__PURE__*/React.createElement(DialogContent, {\n    dividers: true,\n    className: classes.dialogContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 7\n    }\n  }, contacts && contacts.length > 0 ? /*#__PURE__*/React.createElement(Taps, {\n    tabLabels: [\"Add New\", \"Select Existing\"],\n    tabPanels: [addNew(), selectExisting()],\n    whichTapIsActive: whichTapIsActive,\n    backgroundColor: \"#fff\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 11\n    }\n  }) : addNew()), /*#__PURE__*/React.createElement(DialogActions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 484,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleClickDialogClose,\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 9\n    }\n  }, \"Cancel\"), /*#__PURE__*/React.createElement(Button, {\n    disabled: !validated,\n    onClick: handleClickAdd,\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 9\n    }\n  }, \"Add\"))) : /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"15px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 80,\n    disableShrink: true,\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Shared/M1nTable/components/SubComponents/AddContactDialogContent.js"],"names":["React","useContext","useState","useEffect","DialogActions","DialogContent","DialogTitle","Button","Grid","TextField","makeStyles","Autocomplete","useLazyQuery","useMutation","CONTACTSQUERY","CONTACTSBYOWNERSID","ADDCONTACT","ADDREMOVEOWNERTOACONTACT","Taps","CircularProgress","AppContext","phonenumber","inputtxt","match","email","zipCopde","useStyles","theme","maxWidth","width","dialogContent","position","left","top","dialogTitle","paddingBottom","dataContacts","AddContactDialogContent","props","stateApp","validated","setValidated","activeTapIndex","setActiveTapIndex","contacts","setContacts","existingContact","setExistingContact","name","newContact","setNewContact","mobilePhone","homePhone","primaryEmail","address1","address2","city","country","state","zip","owners","parent","getContacts","loading","loadingContacts","data","fetchPolicy","getContactsByOwnerId","loadingContactsByOwnerId","dataContactsByOwnerId","addContact","addRemoveOwnerToAContact","setDealsContact","variables","objectId","length","contactsByOwnerId","tempIdArray","map","cont","_id","filter","indexOf","trim","emptyStates","handleClickDialogClose","e","preventDefault","onClose","handleClickAdd","dealsPage","contact","createBy","user","mongoId","lastUpdateBy","refetchQueries","awaitRefetchQueries","contactId","ownerId","selectExisting","classes","minWidth","option","newValue","params","addNew","target","value","whichTapIsActive","index","padding"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\nimport DialogActions from \"@material-ui/core/DialogActions\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/react-hooks\";\r\nimport { CONTACTSQUERY } from \"../../../../../graphQL/useQueryContacts\";\r\nimport { CONTACTSBYOWNERSID } from \"../../../../../graphQL/useQueryContactsByOwnerId\";\r\nimport { ADDCONTACT } from \"../../../../../graphQL/useMutationAddContact\";\r\nimport { ADDREMOVEOWNERTOACONTACT } from \"../../../../../graphQL/useMutationAddRemoveOwnerToAContact\";\r\nimport Taps from \"../../../Taps\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { AppContext } from \"../../../../../AppContext\";\r\n\r\nconst phonenumber = (inputtxt) => {\r\n  if (inputtxt.match(/^([0-9]||-|\\(|\\)|\\.|,)+$/) !== null) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\nconst email = (inputtxt) => {\r\n  if (\r\n    inputtxt.match(/^(([0-9a-zA-Z]|\\.)+@?[0-9a-zA-Z]*\\.?[0-9a-zA-Z]*)?$/) !==\r\n    null\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst zipCopde = (inputtxt) => {\r\n  if (inputtxt.match(/^([0-9]+-?[0-9]*)?$/) !== null) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  maxWidth: {\r\n    width: \"100%\",\r\n  },\r\n  dialogContent: {\r\n    \"& header\": {\r\n      position: \"absolute\",\r\n      left: \"0\",\r\n      top: \"55px\",\r\n    },\r\n  },\r\n  dialogTitle: {\r\n    paddingBottom: (dataContacts) => (dataContacts ? \"55px\" : \"16px\"),\r\n  },\r\n}));\r\n\r\nexport default function AddContactDialogContent(props) {\r\n  const [stateApp] = React.useContext(AppContext);\r\n  const [validated, setValidated] = useState(false);\r\n  const [activeTapIndex, setActiveTapIndex] = useState(0);\r\n  const [contacts, setContacts] = useState([]);\r\n  const [existingContact, setExistingContact] = useState({ name: \"\" });\r\n  const [newContact, setNewContact] = useState({\r\n    name: \"\",\r\n    mobilePhone: \"\",\r\n    homePhone: \"\",\r\n    primaryEmail: \"\",\r\n    address1: \"\",\r\n    address2: \"\",\r\n    city: \"\",\r\n    country: \"\",\r\n    state: \"\",\r\n    zip: \"\",\r\n    owners: props.parent ? [props.parent] : [],\r\n  });\r\n  const [\r\n    getContacts,\r\n    { loading: loadingContacts, data: dataContacts },\r\n  ] = useLazyQuery(CONTACTSQUERY, {\r\n    fetchPolicy: \"cache-and-network\",\r\n  });\r\n  const [\r\n    getContactsByOwnerId,\r\n    { loading: loadingContactsByOwnerId, data: dataContactsByOwnerId },\r\n  ] = useLazyQuery(CONTACTSBYOWNERSID, {\r\n    fetchPolicy: \"cache-and-network\",\r\n  });\r\n  const [addContact] = useMutation(ADDCONTACT);\r\n  const [addRemoveOwnerToAContact] = useMutation(ADDREMOVEOWNERTOACONTACT);\r\n\r\n  useEffect(() => {\r\n    if (props.parent || props.setDealsContact) {\r\n      getContacts();\r\n    }\r\n  }, [props.parent, props.setDealsContact]);\r\n\r\n  useEffect(() => {\r\n    if (props.parent) {\r\n      getContactsByOwnerId({\r\n        variables: { objectId: props.parent },\r\n      });\r\n    }\r\n  }, [props.parent]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      dataContacts &&\r\n      dataContacts.contacts &&\r\n      dataContacts.contacts.length > 0\r\n    ) {\r\n      if (\r\n        dataContactsByOwnerId &&\r\n        dataContactsByOwnerId.contactsByOwnerId &&\r\n        dataContactsByOwnerId.contactsByOwnerId.length > 0\r\n      ) {\r\n        const tempIdArray = dataContactsByOwnerId.contactsByOwnerId.map(\r\n          (cont) => cont._id\r\n        );\r\n\r\n        setContacts([\r\n          ...dataContacts.contacts.filter(\r\n            (cont) => tempIdArray.indexOf(cont._id) === -1\r\n          ),\r\n        ]);\r\n      } else {\r\n        setContacts([...dataContacts.contacts]);\r\n      }\r\n    }\r\n  }, [dataContacts, dataContactsByOwnerId]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      (activeTapIndex === 1 && existingContact.name !== \"\") ||\r\n      (activeTapIndex === 0 && newContact.name.trim() !== \"\")\r\n    ) {\r\n      setValidated(true);\r\n    } else {\r\n      setValidated(false);\r\n    }\r\n  }, [activeTapIndex, existingContact, newContact.name]); ///////////add other inputs\r\n\r\n  useEffect(() => {\r\n    emptyStates();\r\n  }, [activeTapIndex]);\r\n\r\n  const emptyStates = () => {\r\n    setExistingContact({ name: \"\" });\r\n    setNewContact({\r\n      ...newContact,\r\n      name: \"\",\r\n      mobilePhone: \"\",\r\n      homePhone: \"\",\r\n      primaryEmail: \"\",\r\n      address1: \"\",\r\n      address2: \"\",\r\n      city: \"\",\r\n      country: \"\",\r\n      state: \"\",\r\n      zip: \"\",\r\n    });\r\n  };\r\n\r\n  const handleClickDialogClose = (e) => {\r\n    e.preventDefault();\r\n    props.onClose();\r\n    setActiveTapIndex(0);\r\n    emptyStates();\r\n  };\r\n\r\n  const handleClickAdd = (e) => {\r\n    e.preventDefault();\r\n\r\n    if (props.dealsPage) {\r\n      if (activeTapIndex === 0) {\r\n        addContact({\r\n          variables: {\r\n            contact: {\r\n              ...newContact,\r\n              createBy: stateApp.user.mongoId,\r\n              lastUpdateBy: stateApp.user.mongoId,\r\n            },\r\n          },\r\n          refetchQueries: [\"getContacts\"],\r\n          awaitRefetchQueries: true,\r\n        });\r\n        props.setDealsContact(newContact);\r\n      } else if (activeTapIndex === 1) {\r\n        props.setDealsContact(existingContact);\r\n      }\r\n      handleClickDialogClose(e);\r\n      return;\r\n    }\r\n\r\n    if (props.parent && activeTapIndex === 1) {\r\n      //////update///// existingContact   //////////\r\n\r\n      addRemoveOwnerToAContact({\r\n        variables: {\r\n          contactId: existingContact._id,\r\n          ownerId: props.parent,\r\n        },\r\n        refetchQueries: [\r\n          \"getContacts\",\r\n          \"getContactsByOwnerId\",\r\n          \"getContactsCounter\",\r\n          \"getContact\",\r\n        ],\r\n        awaitRefetchQueries: true,\r\n      });\r\n    }\r\n\r\n    if (!props.parent || (props.parent && activeTapIndex === 0)) {\r\n      //////add new///// newContact ////////////\r\n      addContact({\r\n        variables: {\r\n          contact: {\r\n            ...newContact,\r\n            createBy: stateApp.user.mongoId,\r\n            lastUpdateBy: stateApp.user.mongoId,\r\n          },\r\n        },\r\n        refetchQueries: [\r\n          \"getContacts\",\r\n          \"getContactsByOwnerId\",\r\n          \"getContactsCounter\",\r\n          \"getContact\",\r\n        ],\r\n        awaitRefetchQueries: true,\r\n      });\r\n    }\r\n\r\n    handleClickDialogClose(e);\r\n  };\r\n\r\n  const selectExisting = () => {\r\n    return (\r\n      <React.Fragment>\r\n        {!loadingContacts && !loadingContactsByOwnerId ? (\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <Autocomplete\r\n                size=\"small\"\r\n                className={classes.maxWidth}\r\n                style={{ minWidth: \"325.6px\" }}\r\n                options={contacts}\r\n                getOptionLabel={(option) =>\r\n                  option && option.name ? option.name : option ? option : \"\"\r\n                }\r\n                autoComplete\r\n                autoSelect\r\n                disableClearable\r\n                includeInputInList\r\n                value={existingContact.name}\r\n                disabled={!contacts || contacts.length === 0}\r\n                onChange={(e, newValue) => {\r\n                  setExistingContact(newValue);\r\n                }}\r\n                renderInput={(params) => (\r\n                  <TextField\r\n                    {...params}\r\n                    label=\"Contacts\"\r\n                    variant=\"outlined\"\r\n                    fullWidth\r\n                    multiline\r\n                  />\r\n                )}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        ) : (\r\n          <CircularProgress size={40} disableShrink color=\"secondary\" />\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const addNew = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <Grid container spacing={2}>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              size=\"small\"\r\n              className={classes.maxWidth}\r\n              label=\"Name\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={newContact.name}\r\n              onChange={(e) => {\r\n                setNewContact({\r\n                  ...newContact,\r\n                  name: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              size=\"small\"\r\n              className={classes.maxWidth}\r\n              label=\"Mobile Phone\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={newContact.mobilePhone}\r\n              onChange={(e) => {\r\n                if (phonenumber(e.target.value)) {\r\n                  setNewContact({\r\n                    ...newContact,\r\n                    mobilePhone: e.target.value,\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              size=\"small\"\r\n              className={classes.maxWidth}\r\n              label=\"Home Phone\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={newContact.homePhone}\r\n              onChange={(e) => {\r\n                if (phonenumber(e.target.value)) {\r\n                  setNewContact({\r\n                    ...newContact,\r\n                    homePhone: e.target.value,\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              size=\"small\"\r\n              className={classes.maxWidth}\r\n              label=\"Email\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={newContact.primaryEmail}\r\n              onChange={(e) => {\r\n                if (email(e.target.value)) {\r\n                  setNewContact({\r\n                    ...newContact,\r\n                    primaryEmail: e.target.value,\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              size=\"small\"\r\n              className={classes.maxWidth}\r\n              label=\"Address 1\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={newContact.address1}\r\n              onChange={(e) => {\r\n                setNewContact({\r\n                  ...newContact,\r\n                  address1: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              size=\"small\"\r\n              className={classes.maxWidth}\r\n              label=\"Address 2\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={newContact.address2}\r\n              onChange={(e) => {\r\n                setNewContact({\r\n                  ...newContact,\r\n                  address2: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              size=\"small\"\r\n              className={classes.maxWidth}\r\n              label=\"City\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={newContact.city}\r\n              onChange={(e) => {\r\n                setNewContact({\r\n                  ...newContact,\r\n                  city: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              size=\"small\"\r\n              className={classes.maxWidth}\r\n              label=\"State\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={newContact.state}\r\n              onChange={(e) => {\r\n                setNewContact({\r\n                  ...newContact,\r\n                  state: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <TextField\r\n              size=\"small\"\r\n              className={classes.maxWidth}\r\n              label=\"Zip Code\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={newContact.zip}\r\n              onChange={(e) => {\r\n                if (zipCopde(e.target.value)) {\r\n                  setNewContact({\r\n                    ...newContact,\r\n                    zip: e.target.value,\r\n                  });\r\n                }\r\n              }}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <TextField\r\n              size=\"small\"\r\n              className={classes.maxWidth}\r\n              label=\"Country\"\r\n              multiline\r\n              variant=\"outlined\"\r\n              value={newContact.country}\r\n              onChange={(e) => {\r\n                setNewContact({\r\n                  ...newContact,\r\n                  country: e.target.value,\r\n                });\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  const whichTapIsActive = (index) => {\r\n    setActiveTapIndex(index);\r\n  };\r\n\r\n  const classes = useStyles(contacts && contacts.length > 0 ? true : false);\r\n\r\n  return !loadingContacts && !loadingContactsByOwnerId ? (\r\n    <React.Fragment>\r\n      <DialogTitle\r\n        id=\"alert-dialog-slide-title\"\r\n        className={classes.dialogTitle}\r\n      >\r\n        Add a Contact\r\n      </DialogTitle>\r\n      <DialogContent dividers className={classes.dialogContent}>\r\n        {contacts && contacts.length > 0 ? (\r\n          <Taps\r\n            tabLabels={[\"Add New\", \"Select Existing\"]}\r\n            tabPanels={[addNew(), selectExisting()]}\r\n            whichTapIsActive={whichTapIsActive}\r\n            backgroundColor=\"#fff\"\r\n          />\r\n        ) : (\r\n          addNew()\r\n        )}\r\n      </DialogContent>\r\n      <DialogActions>\r\n        <Button onClick={handleClickDialogClose} color=\"primary\">\r\n          Cancel\r\n        </Button>\r\n        <Button\r\n          disabled={!validated}\r\n          onClick={handleClickAdd}\r\n          color=\"secondary\"\r\n        >\r\n          Add\r\n        </Button>\r\n      </DialogActions>\r\n    </React.Fragment>\r\n  ) : (\r\n    <div style={{ padding: \"15px\" }}>\r\n      <CircularProgress size={80} disableShrink color=\"secondary\" />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}