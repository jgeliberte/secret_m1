{"ast":null,"code":"import { __assign, __extends, __read, __spread } from \"tslib\";\nimport React from 'react';\nimport Grid from './Grid';\nimport ToolbarContainer from './ToolbarContainer';\nimport CheckboxEditor from './common/editors/CheckboxEditor';\nimport { SelectAll } from './formatters';\nimport * as rowUtils from './RowUtils';\nimport { getSize } from './ColumnUtils';\nimport KeyCodes from './KeyCodes';\nimport { sameColumn, sameColumns, recalculate, resizeColumn } from './ColumnMetrics';\nimport { EventBus } from './masks';\nimport { CellNavigationMode, EventTypes, UpdateActions, HeaderRowType } from './common/enums';\n\nfunction isRowSelected(keys, indexes, isSelectedKey, rowData, rowIdx) {\n  return rowUtils.isRowSelected(keys, indexes, isSelectedKey, rowData, rowIdx);\n}\n/**\r\n * Main API Component to render a data grid of rows and columns\r\n *\r\n * @example\r\n *\r\n * <ReactDataGrid columns={columns} rowGetter={i => rows[i]} rowsCount={3} />\r\n*/\n\n\nvar ReactDataGrid =\n/** @class */\nfunction (_super) {\n  __extends(ReactDataGrid, _super);\n\n  function ReactDataGrid(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.grid = React.createRef();\n    _this.base = React.createRef();\n    _this.selectAllCheckbox = React.createRef();\n    _this.eventBus = new EventBus();\n    _this._keysDown = new Set();\n\n    _this.metricsUpdated = function () {\n      var columnMetrics = _this.createColumnMetrics();\n\n      _this.setState({\n        columnMetrics: columnMetrics\n      });\n    };\n\n    _this.handleColumnResize = function (idx, width) {\n      var columnMetrics = resizeColumn(_this.state.columnMetrics, idx, width);\n\n      _this.setState({\n        columnMetrics: columnMetrics\n      });\n\n      if (_this.props.onColumnResize) {\n        _this.props.onColumnResize(idx, width);\n      }\n    };\n\n    _this.handleDragEnter = function (overRowIdx) {\n      _this.eventBus.dispatch(EventTypes.DRAG_ENTER, overRowIdx);\n    };\n\n    _this.handleViewportKeyDown = function (e) {\n      // Track which keys are currently down for shift clicking etc\n      _this._keysDown.add(e.keyCode);\n\n      var onGridKeyDown = _this.props.onGridKeyDown;\n\n      if (onGridKeyDown) {\n        onGridKeyDown(e);\n      }\n    };\n\n    _this.handleViewportKeyUp = function (e) {\n      // Track which keys are currently down for shift clicking etc\n      _this._keysDown.delete(e.keyCode);\n\n      var onGridKeyUp = _this.props.onGridKeyUp;\n\n      if (onGridKeyUp) {\n        onGridKeyUp(e);\n      }\n    };\n\n    _this.handlerCellClick = function (_a) {\n      var rowIdx = _a.rowIdx,\n          idx = _a.idx;\n      var _b = _this.props,\n          onRowClick = _b.onRowClick,\n          rowGetter = _b.rowGetter;\n\n      _this.selectCell({\n        rowIdx: rowIdx,\n        idx: idx\n      });\n\n      if (onRowClick) {\n        onRowClick(rowIdx, rowGetter(rowIdx), _this.getColumn(idx));\n      }\n    };\n\n    _this.handleCellMouseDown = function (position) {\n      _this.eventBus.dispatch(EventTypes.SELECT_START, position);\n    };\n\n    _this.handleCellMouseEnter = function (position) {\n      _this.eventBus.dispatch(EventTypes.SELECT_UPDATE, position);\n    };\n\n    _this.handleWindowMouseUp = function () {\n      _this.eventBus.dispatch(EventTypes.SELECT_END);\n    };\n\n    _this.handleCellContextMenu = function (position) {\n      _this.selectCell(position);\n    };\n\n    _this.handleCellDoubleClick = function (_a) {\n      var rowIdx = _a.rowIdx,\n          idx = _a.idx;\n      var _b = _this.props,\n          onRowDoubleClick = _b.onRowDoubleClick,\n          rowGetter = _b.rowGetter;\n\n      if (onRowDoubleClick) {\n        onRowDoubleClick(rowIdx, rowGetter(rowIdx), _this.getColumn(idx));\n      }\n\n      _this.openCellEditor(rowIdx, idx);\n    };\n\n    _this.handleToggleFilter = function () {\n      // setState() does not immediately mutate this.state but creates a pending state transition.\n      // Therefore if you want to do something after the state change occurs, pass it in as a callback function.\n      _this.setState(function (prevState) {\n        return {\n          canFilter: !prevState.canFilter\n        };\n      }, function () {\n        if (_this.state.canFilter === false && _this.props.onClearFilters) {\n          _this.props.onClearFilters();\n        }\n      });\n    };\n\n    _this.handleDragHandleDoubleClick = function (e) {\n      var _a;\n\n      var cellKey = _this.getColumn(e.idx).key;\n\n      _this.handleGridRowsUpdated(cellKey, e.rowIdx, _this.props.rowsCount - 1, (_a = {}, _a[cellKey] = e.rowData[cellKey], _a), UpdateActions.COLUMN_FILL);\n    };\n\n    _this.handleGridRowsUpdated = function (cellKey, fromRow, toRow, updated, action, originRow) {\n      var _a = _this.props,\n          rowGetter = _a.rowGetter,\n          rowKey = _a.rowKey,\n          onGridRowsUpdated = _a.onGridRowsUpdated;\n\n      if (!onGridRowsUpdated) {\n        return;\n      }\n\n      var rowIds = [];\n\n      for (var i = fromRow; i <= toRow; i++) {\n        rowIds.push(rowGetter(i)[rowKey]);\n      }\n\n      var fromRowData = rowGetter(action === UpdateActions.COPY_PASTE ? originRow : fromRow);\n      var fromRowId = fromRowData[rowKey];\n      var toRowId = rowGetter(toRow)[rowKey];\n      onGridRowsUpdated({\n        cellKey: cellKey,\n        fromRow: fromRow,\n        toRow: toRow,\n        fromRowId: fromRowId,\n        toRowId: toRowId,\n        rowIds: rowIds,\n        updated: updated,\n        action: action,\n        fromRowData: fromRowData\n      });\n    };\n\n    _this.handleCommit = function (commit) {\n      var targetRow = commit.rowIdx;\n\n      _this.handleGridRowsUpdated(commit.cellKey, targetRow, targetRow, commit.updated, UpdateActions.CELL_UPDATE);\n    };\n\n    _this.handleSort = function (sortColumn, sortDirection) {\n      _this.setState({\n        sortColumn: sortColumn,\n        sortDirection: sortDirection\n      }, function () {\n        var onGridSort = _this.props.onGridSort;\n\n        if (onGridSort) {\n          onGridSort(sortColumn, sortDirection);\n        }\n      });\n    };\n\n    _this.useNewRowSelection = function () {\n      return _this.props.rowSelection && _this.props.rowSelection.selectBy;\n    }; // return false if not a shift select so can be handled as normal row selection\n\n\n    _this.handleShiftSelect = function (rowIdx) {\n      var rowSelection = _this.props.rowSelection;\n\n      if (rowSelection && _this.state.lastRowIdxUiSelected > -1 && _this.isSingleKeyDown(KeyCodes.Shift)) {\n        var _a = rowSelection.selectBy,\n            keys = _a.keys,\n            indexes = _a.indexes,\n            isSelectedKey = _a.isSelectedKey;\n        var isPreviouslySelected = isRowSelected(keys, indexes, isSelectedKey, _this.props.rowGetter(rowIdx), rowIdx);\n        if (isPreviouslySelected) return false;\n        var handled = false;\n\n        if (rowIdx > _this.state.lastRowIdxUiSelected) {\n          var rowsSelected = [];\n\n          for (var i = _this.state.lastRowIdxUiSelected + 1; i <= rowIdx; i++) {\n            rowsSelected.push({\n              rowIdx: i,\n              row: _this.props.rowGetter(i)\n            });\n          }\n\n          if (typeof rowSelection.onRowsSelected === 'function') {\n            rowSelection.onRowsSelected(rowsSelected);\n          }\n\n          handled = true;\n        } else if (rowIdx < _this.state.lastRowIdxUiSelected) {\n          var rowsSelected = [];\n\n          for (var i = rowIdx; i <= _this.state.lastRowIdxUiSelected - 1; i++) {\n            rowsSelected.push({\n              rowIdx: i,\n              row: _this.props.rowGetter(i)\n            });\n          }\n\n          if (typeof rowSelection.onRowsSelected === 'function') {\n            rowSelection.onRowsSelected(rowsSelected);\n          }\n\n          handled = true;\n        }\n\n        if (handled) {\n          _this.setState({\n            lastRowIdxUiSelected: rowIdx\n          });\n        }\n\n        return handled;\n      }\n\n      return false;\n    };\n\n    _this.handleNewRowSelect = function (rowIdx, rowData) {\n      var current = _this.selectAllCheckbox.current;\n\n      if (current && current.checked === true) {\n        current.checked = false;\n      }\n\n      var rowSelection = _this.props.rowSelection;\n\n      if (rowSelection) {\n        var _a = rowSelection.selectBy,\n            keys = _a.keys,\n            indexes = _a.indexes,\n            isSelectedKey = _a.isSelectedKey;\n        var isPreviouslySelected = isRowSelected(keys, indexes, isSelectedKey, rowData, rowIdx);\n\n        _this.setState({\n          lastRowIdxUiSelected: isPreviouslySelected ? -1 : rowIdx\n        });\n\n        var cb = isPreviouslySelected ? rowSelection.onRowsDeselected : rowSelection.onRowsSelected;\n\n        if (typeof cb === 'function') {\n          cb([{\n            rowIdx: rowIdx,\n            row: rowData\n          }]);\n        }\n      }\n    }; // columnKey not used here as this function will select the whole row,\n    // but needed to match the function signature in the CheckboxEditor\n\n\n    _this.handleRowSelect = function (rowIdx, columnKey, rowData, event) {\n      event.stopPropagation();\n      var rowSelection = _this.props.rowSelection;\n\n      if (_this.useNewRowSelection()) {\n        if (rowSelection && rowSelection.enableShiftSelect === true) {\n          if (!_this.handleShiftSelect(rowIdx)) {\n            _this.handleNewRowSelect(rowIdx, rowData);\n          }\n        } else {\n          _this.handleNewRowSelect(rowIdx, rowData);\n        }\n      } else {\n        // Fallback to old onRowSelect handler\n        var selectedRows = _this.props.enableRowSelect === 'single' ? [] : __spread(_this.state.selectedRows);\n\n        var selectedRow = _this.getSelectedRow(selectedRows, rowData[_this.props.rowKey]);\n\n        if (selectedRow) {\n          selectedRow.isSelected = !selectedRow.isSelected;\n        } else {\n          rowData.isSelected = true;\n          selectedRows.push(rowData);\n        }\n\n        _this.setState({\n          selectedRows: selectedRows\n        });\n\n        if (_this.props.onRowSelect) {\n          _this.props.onRowSelect(selectedRows.filter(function (r) {\n            return r.isSelected === true;\n          }));\n        }\n      }\n    };\n\n    _this.handleCheckboxChange = function (e) {\n      var allRowsSelected = e.currentTarget.checked;\n      var rowSelection = _this.props.rowSelection;\n\n      if (rowSelection && _this.useNewRowSelection()) {\n        var _a = rowSelection.selectBy,\n            keys = _a.keys,\n            indexes = _a.indexes,\n            isSelectedKey = _a.isSelectedKey;\n\n        if (allRowsSelected && typeof rowSelection.onRowsSelected === 'function') {\n          var selectedRows = [];\n\n          for (var i = 0; i < _this.props.rowsCount; i++) {\n            var rowData = _this.props.rowGetter(i);\n\n            if (!isRowSelected(keys, indexes, isSelectedKey, rowData, i)) {\n              selectedRows.push({\n                rowIdx: i,\n                row: rowData\n              });\n            }\n          }\n\n          if (selectedRows.length > 0) {\n            rowSelection.onRowsSelected(selectedRows);\n          }\n        } else if (!allRowsSelected && typeof rowSelection.onRowsDeselected === 'function') {\n          var deselectedRows = [];\n\n          for (var i = 0; i < _this.props.rowsCount; i++) {\n            var rowData = _this.props.rowGetter(i);\n\n            if (isRowSelected(keys, indexes, isSelectedKey, rowData, i)) {\n              deselectedRows.push({\n                rowIdx: i,\n                row: rowData\n              });\n            }\n          }\n\n          if (deselectedRows.length > 0) {\n            rowSelection.onRowsDeselected(deselectedRows);\n          }\n        }\n      } else {\n        var selectedRows = [];\n\n        for (var i = 0; i < _this.props.rowsCount; i++) {\n          var row = __assign(__assign({}, _this.props.rowGetter(i)), {\n            isSelected: allRowsSelected\n          });\n\n          selectedRows.push(row);\n        }\n\n        _this.setState({\n          selectedRows: selectedRows\n        });\n\n        if (typeof _this.props.onRowSelect === 'function') {\n          _this.props.onRowSelect(selectedRows.filter(function (r) {\n            return r.isSelected === true;\n          }));\n        }\n      }\n    };\n\n    var initialState = {\n      columnMetrics: _this.createColumnMetrics(),\n      selectedRows: [],\n      canFilter: false,\n      lastRowIdxUiSelected: -1\n    };\n\n    if (_this.props.sortColumn && _this.props.sortDirection) {\n      initialState.sortColumn = _this.props.sortColumn;\n      initialState.sortDirection = _this.props.sortDirection;\n    }\n\n    _this.state = initialState;\n    return _this;\n  }\n\n  ReactDataGrid.prototype.componentDidMount = function () {\n    window.addEventListener('resize', this.metricsUpdated);\n\n    if (this.props.cellRangeSelection) {\n      window.addEventListener('mouseup', this.handleWindowMouseUp);\n    }\n\n    this.metricsUpdated();\n  };\n\n  ReactDataGrid.prototype.componentWillUnmount = function () {\n    window.removeEventListener('resize', this.metricsUpdated);\n    window.removeEventListener('mouseup', this.handleWindowMouseUp);\n  };\n\n  ReactDataGrid.prototype.componentWillReceiveProps = function (nextProps) {\n    if (nextProps.columns && (!sameColumns(this.props.columns, nextProps.columns, this.props.columnEquality) || nextProps.minWidth !== this.props.minWidth)) {\n      var columnMetrics = this.createColumnMetrics(nextProps);\n      this.setState({\n        columnMetrics: columnMetrics\n      });\n    }\n  };\n\n  ReactDataGrid.prototype.selectCell = function (_a, openEditor) {\n    var idx = _a.idx,\n        rowIdx = _a.rowIdx;\n    this.eventBus.dispatch(EventTypes.SELECT_CELL, {\n      rowIdx: rowIdx,\n      idx: idx\n    }, openEditor);\n  };\n\n  ReactDataGrid.prototype.gridWidth = function () {\n    var current = this.grid.current;\n    return current && current.parentElement ? current.parentElement.offsetWidth : 0;\n  };\n\n  ReactDataGrid.prototype.getTotalWidth = function () {\n    if (this.grid.current) {\n      return this.gridWidth();\n    }\n\n    return getSize(this.props.columns) * this.props.minColumnWidth;\n  };\n\n  ReactDataGrid.prototype.getColumn = function (idx) {\n    return this.state.columnMetrics.columns[idx];\n  };\n\n  ReactDataGrid.prototype.getSize = function () {\n    return this.state.columnMetrics.columns.length;\n  };\n\n  ReactDataGrid.prototype.createColumnMetrics = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var gridColumns = this.setupGridColumns(props);\n    var metrics = {\n      columns: gridColumns,\n      minColumnWidth: this.props.minColumnWidth,\n      totalWidth: this.props.minWidth || this.getTotalWidth()\n    };\n    return recalculate(metrics);\n  };\n\n  ReactDataGrid.prototype.isSingleKeyDown = function (keyCode) {\n    return this._keysDown.has(keyCode) && this._keysDown.size === 1;\n  };\n\n  ReactDataGrid.prototype.getSelectedRow = function (rows, key) {\n    var _this = this;\n\n    return rows.find(function (r) {\n      return r[_this.props.rowKey] === key;\n    });\n  };\n\n  ReactDataGrid.prototype.getRowOffsetHeight = function () {\n    return this.getHeaderRows().reduce(function (offsetHeight, row) {\n      return offsetHeight += row.height;\n    }, 0);\n  };\n\n  ReactDataGrid.prototype.getHeaderRows = function () {\n    var _a = this.props,\n        headerRowHeight = _a.headerRowHeight,\n        rowHeight = _a.rowHeight,\n        onAddFilter = _a.onAddFilter,\n        headerFiltersHeight = _a.headerFiltersHeight;\n    var rows = [{\n      height: headerRowHeight || rowHeight,\n      rowType: HeaderRowType.HEADER\n    }];\n\n    if (this.state.canFilter === true) {\n      rows.push({\n        rowType: HeaderRowType.FILTER,\n        filterable: true,\n        onFilterChange: onAddFilter,\n        height: headerFiltersHeight\n      });\n    }\n\n    return rows;\n  };\n\n  ReactDataGrid.prototype.getRowSelectionProps = function () {\n    return this.props.rowSelection && this.props.rowSelection.selectBy;\n  };\n\n  ReactDataGrid.prototype.getSelectedRows = function () {\n    if (this.props.rowSelection) {\n      return;\n    }\n\n    return this.state.selectedRows.filter(function (r) {\n      return r.isSelected === true;\n    });\n  };\n\n  ReactDataGrid.prototype.openCellEditor = function (rowIdx, idx) {\n    this.selectCell({\n      rowIdx: rowIdx,\n      idx: idx\n    }, true);\n  };\n\n  ReactDataGrid.prototype.scrollToColumn = function (colIdx) {\n    this.eventBus.dispatch(EventTypes.SCROLL_TO_COLUMN, colIdx);\n  };\n\n  ReactDataGrid.prototype.setupGridColumns = function (props) {\n    if (props === void 0) {\n      props = this.props;\n    }\n\n    var columns = props.columns;\n\n    if (this._cachedColumns === columns) {\n      return this._cachedComputedColumns;\n    }\n\n    this._cachedColumns = columns;\n\n    if (this.props.rowActionsCell || props.enableRowSelect && !this.props.rowSelection || props.rowSelection && props.rowSelection.showCheckbox !== false) {\n      var SelectAllComponent = this.props.selectAllRenderer;\n      var headerRenderer = props.enableRowSelect === 'single' ? undefined : React.createElement(SelectAllComponent, {\n        onChange: this.handleCheckboxChange,\n        ref: this.selectAllCheckbox\n      });\n      var Formatter = this.props.rowActionsCell ? this.props.rowActionsCell : CheckboxEditor;\n      var selectColumn = {\n        key: 'select-row',\n        name: '',\n        formatter: React.createElement(Formatter, {\n          rowSelection: this.props.rowSelection\n        }),\n        onCellChange: this.handleRowSelect,\n        filterable: false,\n        headerRenderer: headerRenderer,\n        width: 60,\n        frozen: true,\n        getRowMetaData: function (rowData) {\n          return rowData;\n        },\n        cellClass: this.props.rowActionsCell ? 'rdg-row-actions-cell' : ''\n      };\n      this._cachedComputedColumns = Array.isArray(columns) ? __spread([selectColumn], columns) : columns.unshift(selectColumn);\n    } else {\n      this._cachedComputedColumns = columns.slice(0);\n    }\n\n    return this._cachedComputedColumns;\n  };\n\n  ReactDataGrid.prototype.render = function () {\n    var cellMetaData = {\n      rowKey: this.props.rowKey,\n      onCellClick: this.handlerCellClick,\n      onCellContextMenu: this.handleCellContextMenu,\n      onCellDoubleClick: this.handleCellDoubleClick,\n      onCellExpand: this.props.onCellExpand,\n      onRowExpandToggle: this.props.onRowExpandToggle,\n      getCellActions: this.props.getCellActions,\n      onDeleteSubRow: this.props.onDeleteSubRow,\n      onAddSubRow: this.props.onAddSubRow,\n      onDragEnter: this.handleDragEnter\n    };\n\n    if (this.props.cellRangeSelection) {\n      cellMetaData.onCellMouseDown = this.handleCellMouseDown;\n      cellMetaData.onCellMouseEnter = this.handleCellMouseEnter;\n    }\n\n    var interactionMasksMetaData = {\n      onCheckCellIsEditable: this.props.onCheckCellIsEditable,\n      onCellCopyPaste: this.props.onCellCopyPaste,\n      onGridRowsUpdated: this.handleGridRowsUpdated,\n      onDragHandleDoubleClick: this.handleDragHandleDoubleClick,\n      onCellSelected: this.props.onCellSelected,\n      onCellDeSelected: this.props.onCellDeSelected,\n      onCellRangeSelectionStarted: this.props.cellRangeSelection && this.props.cellRangeSelection.onStart,\n      onCellRangeSelectionUpdated: this.props.cellRangeSelection && this.props.cellRangeSelection.onUpdate,\n      onCellRangeSelectionCompleted: this.props.cellRangeSelection && this.props.cellRangeSelection.onComplete,\n      onCommit: this.handleCommit\n    };\n    var containerWidth = this.props.minWidth || this.gridWidth();\n    var gridWidth = containerWidth; // depending on the current lifecycle stage, gridWidth() may not initialize correctly\n    // this also handles cases where it always returns undefined -- such as when inside a div with display:none\n    // eg Bootstrap tabs and collapses\n\n    if (Number.isNaN(containerWidth) || containerWidth === 0) {\n      containerWidth = '100%';\n      gridWidth = '100%';\n    }\n\n    return React.createElement(\"div\", {\n      className: \"react-grid-Container\",\n      style: {\n        width: containerWidth\n      },\n      ref: this.grid\n    }, React.createElement(ToolbarContainer, {\n      toolbar: this.props.toolbar,\n      columns: this.props.columns,\n      rowsCount: this.props.rowsCount,\n      onToggleFilter: this.handleToggleFilter\n    }), React.createElement(Grid, {\n      ref: this.base,\n      rowKey: this.props.rowKey,\n      headerRows: this.getHeaderRows(),\n      draggableHeaderCell: this.props.draggableHeaderCell,\n      getValidFilterValues: this.props.getValidFilterValues,\n      columnMetrics: this.state.columnMetrics,\n      rowGetter: this.props.rowGetter,\n      rowsCount: this.props.rowsCount,\n      rowHeight: this.props.rowHeight,\n      rowRenderer: this.props.rowRenderer,\n      rowGroupRenderer: this.props.rowGroupRenderer,\n      cellMetaData: cellMetaData,\n      selectedRows: this.getSelectedRows(),\n      rowSelection: this.getRowSelectionProps(),\n      rowOffsetHeight: this.getRowOffsetHeight(),\n      sortColumn: this.state.sortColumn,\n      sortDirection: this.state.sortDirection,\n      onSort: this.handleSort,\n      minHeight: this.props.minHeight,\n      totalWidth: gridWidth,\n      onViewportKeydown: this.handleViewportKeyDown,\n      onViewportKeyup: this.handleViewportKeyUp,\n      onColumnResize: this.handleColumnResize,\n      scrollToRowIndex: this.props.scrollToRowIndex,\n      contextMenu: this.props.contextMenu,\n      enableCellSelect: this.props.enableCellSelect,\n      enableCellAutoFocus: this.props.enableCellAutoFocus,\n      cellNavigationMode: this.props.cellNavigationMode,\n      eventBus: this.eventBus,\n      onScroll: this.props.onScroll,\n      RowsContainer: this.props.RowsContainer,\n      emptyRowsView: this.props.emptyRowsView,\n      onHeaderDrop: this.props.onHeaderDrop,\n      getSubRowDetails: this.props.getSubRowDetails,\n      editorPortalTarget: this.props.editorPortalTarget,\n      interactionMasksMetaData: interactionMasksMetaData\n    }));\n  };\n\n  ReactDataGrid.displayName = 'ReactDataGrid';\n  ReactDataGrid.defaultProps = {\n    enableCellSelect: false,\n    rowHeight: 35,\n    headerFiltersHeight: 45,\n    enableRowSelect: false,\n    minHeight: 350,\n    rowKey: 'id',\n    cellNavigationMode: CellNavigationMode.NONE,\n    enableCellAutoFocus: true,\n    minColumnWidth: 80,\n    selectAllRenderer: SelectAll,\n    columnEquality: sameColumn,\n    editorPortalTarget: document.body\n  };\n  return ReactDataGrid;\n}(React.Component);\n\nexport default ReactDataGrid;","map":{"version":3,"sources":["../src/ReactDataGrid.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport Grid from './Grid';\nimport ToolbarContainer, { ToolbarProps } from './ToolbarContainer';\nimport CheckboxEditor, { CheckboxEditorProps } from './common/editors/CheckboxEditor';\nimport { SelectAll } from './formatters';\nimport * as rowUtils from './RowUtils';\nimport { getSize } from './ColumnUtils';\nimport KeyCodes from './KeyCodes';\nimport { sameColumn, sameColumns, recalculate, resizeColumn } from './ColumnMetrics';\nimport { ScrollState } from './Viewport';\nimport { RowsContainerProps } from './RowsContainer';\nimport { EventBus } from './masks';\nimport { CellNavigationMode, EventTypes, UpdateActions, HeaderRowType, DEFINE_SORT } from './common/enums';\nimport {\n  AddFilterEvent,\n  CalculatedColumn,\n  CellActionButton,\n  CellCopyPasteEvent,\n  CellMetaData,\n  CheckCellIsEditableEvent,\n  Column,\n  ColumnList,\n  ColumnMetrics,\n  CommitEvent,\n  GridRowsUpdatedEvent,\n  HeaderRowData,\n  InteractionMasksMetaData,\n  Position,\n  RowExpandToggleEvent,\n  RowGetter,\n  RowSelection,\n  RowSelectionParams,\n  SelectedRange,\n  SubRowDetails,\n  SubRowOptions,\n  SelectedRow,\n  RowRendererProps\n} from './common/types';\n\nexport interface DataGridProps<R extends {}> {\n  /** An array of objects representing each column on the grid. Can also be an ImmutableJS object */\n  columns: ColumnList<R>;\n  /** The minimum width of the grid in pixels */\n  minWidth?: number;\n  /** The height of the header row in pixels */\n  headerRowHeight?: number;\n  /** The height of the header filter row in pixels */\n  headerFiltersHeight: number;\n  /** Deprecated: Legacy prop to turn on row selection. Use rowSelection props instead*/\n  enableRowSelect: boolean | string;\n  /** Component used to render toolbar above the grid */\n  toolbar?: React.ReactElement<ToolbarProps<R>> | React.ComponentType<ToolbarProps<R>>;\n  cellRangeSelection?: {\n    onStart(selectedRange: SelectedRange): void;\n    onUpdate?(selectedRange: SelectedRange): void;\n    onComplete?(selectedRange: SelectedRange): void;\n  };\n  /** Minimum column width in pixels */\n  minColumnWidth: number;\n  /** Component to render the UI in the header row for selecting all rows */\n  selectAllRenderer: React.ComponentType<React.ComponentProps<typeof SelectAll>>;\n  /** Function called whenever row is clicked */\n  onRowClick?(rowIdx: number, rowData: R, column: CalculatedColumn<R>): void;\n  /** Function called whenever row is double clicked */\n  onRowDoubleClick?(rowIdx: number, rowData: R, column: CalculatedColumn<R>): void;\n  onAddFilter?(event: AddFilterEvent<R>): void;\n  onClearFilters?(): void;\n  /** Function called whenever grid is sorted*/\n  onGridSort?(columnKey: keyof R, direction: DEFINE_SORT): void;\n  /** Function called whenever keyboard key is released */\n  onGridKeyUp?(event: React.KeyboardEvent<HTMLDivElement>): void;\n  /** Function called whenever keyboard key is pressed down */\n  onGridKeyDown?(event: React.KeyboardEvent<HTMLDivElement>): void;\n  onRowSelect?(rowData: R[]): void;\n  columnEquality(c1: Column<R>, c2: Column<R>): boolean;\n  rowSelection?: {\n    enableShiftSelect?: boolean;\n    /** Function called whenever rows are selected */\n    onRowsSelected?(args: RowSelectionParams<R>[]): void;\n    /** Function called whenever rows are deselected */\n    onRowsDeselected?(args: RowSelectionParams<R>[]): void;\n    /** toggle whether to show a checkbox in first column to select rows */\n    showCheckbox?: boolean;\n    /** Method by which rows should be selected */\n    selectBy: RowSelection;\n  };\n  /** Custom checkbox formatter */\n  rowActionsCell?: React.ComponentType<CheckboxEditorProps<R>>;\n  /**\n   * Callback called whenever row data is updated\n   * When editing is enabled, this callback will be called for the following scenarios\n   * 1. Using the supplied editor of the column. The default editor is the SimpleTextEditor.\n   * 2. Copy/pasting the value from one cell to another <kbd>CTRL</kbd>+<kbd>C</kbd>, <kbd>CTRL</kbd>+<kbd>V</kbd>\n   * 3. Update multiple cells by dragging the fill handle of a cell up or down to a destination cell.\n   * 4. Update all cells under a given cell by double clicking the cell's fill handle.\n   */\n  onGridRowsUpdated?<E extends GridRowsUpdatedEvent<R>>(event: E): void;\n  /** Called when a column is resized */\n  onColumnResize?(idx: number, width: number): void;\n\n  /** Grid Props */\n  /** The primary key property of each row */\n  rowKey: keyof R;\n  /** The height of each row in pixels */\n  rowHeight: number;\n  rowRenderer?: React.ReactElement | React.ComponentType<RowRendererProps<R>>;\n  rowGroupRenderer?: React.ComponentType;\n  /** A function called for each rendered row that should return a plain key/value pair object */\n  rowGetter: RowGetter<R>;\n  /** The number of rows to be rendered */\n  rowsCount: number;\n  /** The minimum height of the grid in pixels */\n  minHeight: number;\n  /** When set, grid will scroll to this row index */\n  scrollToRowIndex?: number;\n  /** Component used to render a context menu. react-data-grid-addons provides a default context menu which may be used*/\n  contextMenu?: React.ReactElement;\n  /** Used to toggle whether cells can be selected or not */\n  enableCellSelect: boolean;\n  /** Toggles whether cells should be autofocused */\n  enableCellAutoFocus: boolean;\n  cellNavigationMode: CellNavigationMode;\n  /** The node where the editor portal should mount. */\n  editorPortalTarget: Element;\n  /** The key of the column which is currently being sorted */\n  sortColumn?: keyof R;\n  /** The direction to sort the sortColumn*/\n  sortDirection?: DEFINE_SORT;\n  /** Called when the grid is scrolled */\n  onScroll?(scrollState: ScrollState): void;\n  /** Component used to render a draggable header cell */\n  draggableHeaderCell?: React.ComponentType<{ column: CalculatedColumn<R>; onHeaderDrop(): void }>;\n  getValidFilterValues?(columnKey: keyof R): unknown;\n  RowsContainer?: React.ComponentType<RowsContainerProps>;\n  emptyRowsView?: React.ComponentType<{}>;\n  onHeaderDrop?(): void;\n  getSubRowDetails?(row: R): SubRowDetails;\n\n  /** CellMetaData */\n  getCellActions?(column: CalculatedColumn<R>, rowData: R): CellActionButton[] | undefined;\n  /** Called whenever a sub row is deleted from the grid */\n  onDeleteSubRow?(options: SubRowOptions<R>): void;\n  /** Called whenever a sub row is added to the grid */\n  onAddSubRow?(): void;\n  /** Function called whenever a cell has been expanded */\n  onCellExpand?(options: SubRowOptions<R>): void;\n  onRowExpandToggle?(event: RowExpandToggleEvent): void;\n\n  /** InteractionMasksMetaData */\n  /** Deprecated: Function called when grid is updated via a copy/paste. Use onGridRowsUpdated instead*/\n  onCellCopyPaste?(event: CellCopyPasteEvent<R>): void;\n  /** Function called whenever a cell is selected */\n  onCellSelected?(position: Position): void;\n  /** Function called whenever a cell is deselected */\n  onCellDeSelected?(position: Position): void;\n  /** called before cell is set active, returns a boolean to determine whether cell is editable */\n  onCheckCellIsEditable?(event: CheckCellIsEditableEvent<R>): boolean;\n}\n\ntype DefaultProps = Pick<DataGridProps<{ id?: unknown }>,\n'enableCellSelect'\n| 'selectAllRenderer'\n| 'rowHeight'\n| 'headerFiltersHeight'\n| 'enableRowSelect'\n| 'minHeight'\n| 'rowKey'\n| 'cellNavigationMode'\n| 'enableCellAutoFocus'\n| 'minColumnWidth'\n| 'columnEquality'\n| 'editorPortalTarget'\n>;\n\nexport interface DataGridState<R> {\n  columnMetrics: ColumnMetrics<R>;\n  lastRowIdxUiSelected: number;\n  selectedRows: SelectedRow<R>[];\n  canFilter?: boolean;\n  sortColumn?: keyof R;\n  sortDirection?: DEFINE_SORT;\n}\n\nfunction isRowSelected<R>(keys: unknown, indexes: unknown, isSelectedKey: unknown, rowData: R, rowIdx: number) {\n  return rowUtils.isRowSelected(keys as { rowKey?: string; values?: string[] } | null, indexes as number[] | null, isSelectedKey as string | null, rowData, rowIdx);\n}\n\n/**\n * Main API Component to render a data grid of rows and columns\n *\n * @example\n *\n * <ReactDataGrid columns={columns} rowGetter={i => rows[i]} rowsCount={3} />\n*/\nexport default class ReactDataGrid<R extends {}> extends React.Component<DataGridProps<R>, DataGridState<R>> {\n  static displayName = 'ReactDataGrid';\n\n  static defaultProps: DefaultProps = {\n    enableCellSelect: false,\n    rowHeight: 35,\n    headerFiltersHeight: 45,\n    enableRowSelect: false,\n    minHeight: 350,\n    rowKey: 'id',\n    cellNavigationMode: CellNavigationMode.NONE,\n    enableCellAutoFocus: true,\n    minColumnWidth: 80,\n    selectAllRenderer: SelectAll,\n    columnEquality: sameColumn,\n    editorPortalTarget: document.body\n  };\n\n  private readonly grid = React.createRef<HTMLDivElement>();\n  private readonly base = React.createRef<Grid<R>>();\n  private readonly selectAllCheckbox = React.createRef<HTMLInputElement>();\n  private readonly eventBus = new EventBus();\n  private readonly _keysDown = new Set<number>();\n  private _cachedColumns?: ColumnList<R>;\n  private _cachedComputedColumns?: ColumnList<R>;\n\n  constructor(props: DataGridProps<R>) {\n    super(props);\n    const initialState: DataGridState<R> = {\n      columnMetrics: this.createColumnMetrics(),\n      selectedRows: [],\n      canFilter: false,\n      lastRowIdxUiSelected: -1\n    };\n\n    if (this.props.sortColumn && this.props.sortDirection) {\n      initialState.sortColumn = this.props.sortColumn;\n      initialState.sortDirection = this.props.sortDirection;\n    }\n    this.state = initialState;\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.metricsUpdated);\n    if (this.props.cellRangeSelection) {\n      window.addEventListener('mouseup', this.handleWindowMouseUp);\n    }\n    this.metricsUpdated();\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.metricsUpdated);\n    window.removeEventListener('mouseup', this.handleWindowMouseUp);\n  }\n\n  componentWillReceiveProps(nextProps: DataGridProps<R>) {\n    if (\n      nextProps.columns && (\n        !sameColumns(this.props.columns, nextProps.columns, this.props.columnEquality)\n        || nextProps.minWidth !== this.props.minWidth\n      )\n    ) {\n      const columnMetrics = this.createColumnMetrics(nextProps);\n      this.setState({ columnMetrics });\n    }\n  }\n\n  selectCell({ idx, rowIdx }: Position, openEditor?: boolean) {\n    this.eventBus.dispatch(EventTypes.SELECT_CELL, { rowIdx, idx }, openEditor);\n  }\n\n  gridWidth() {\n    const { current } = this.grid;\n    return current && current.parentElement ? current.parentElement.offsetWidth : 0;\n  }\n\n  getTotalWidth() {\n    if (this.grid.current) {\n      return this.gridWidth();\n    }\n    return getSize(this.props.columns) * this.props.minColumnWidth;\n  }\n\n  getColumn(idx: number) {\n    return this.state.columnMetrics.columns[idx];\n  }\n\n  getSize() {\n    return this.state.columnMetrics.columns.length;\n  }\n\n  metricsUpdated = () => {\n    const columnMetrics = this.createColumnMetrics();\n    this.setState({ columnMetrics });\n  };\n\n  createColumnMetrics(props = this.props) {\n    const gridColumns = this.setupGridColumns(props);\n    const metrics = {\n      columns: gridColumns,\n      minColumnWidth: this.props.minColumnWidth,\n      totalWidth: this.props.minWidth || this.getTotalWidth()\n    };\n    return recalculate(metrics);\n  }\n\n  isSingleKeyDown(keyCode: number) {\n    return this._keysDown.has(keyCode) && this._keysDown.size === 1;\n  }\n\n  handleColumnResize = (idx: number, width: number) => {\n    const columnMetrics = resizeColumn(this.state.columnMetrics, idx, width);\n    this.setState({ columnMetrics });\n    if (this.props.onColumnResize) {\n      this.props.onColumnResize(idx, width);\n    }\n  };\n\n  handleDragEnter = (overRowIdx: number) => {\n    this.eventBus.dispatch(EventTypes.DRAG_ENTER, overRowIdx);\n  };\n\n  handleViewportKeyDown = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    // Track which keys are currently down for shift clicking etc\n    this._keysDown.add(e.keyCode);\n\n    const { onGridKeyDown } = this.props;\n    if (onGridKeyDown) {\n      onGridKeyDown(e);\n    }\n  };\n\n  handleViewportKeyUp = (e: React.KeyboardEvent<HTMLDivElement>) => {\n    // Track which keys are currently down for shift clicking etc\n    this._keysDown.delete(e.keyCode);\n\n    const { onGridKeyUp } = this.props;\n    if (onGridKeyUp) {\n      onGridKeyUp(e);\n    }\n  };\n\n  handlerCellClick = ({ rowIdx, idx }: Position) => {\n    const { onRowClick, rowGetter } = this.props;\n    this.selectCell({ rowIdx, idx });\n\n    if (onRowClick) {\n      onRowClick(rowIdx, rowGetter(rowIdx), this.getColumn(idx));\n    }\n  };\n\n  handleCellMouseDown = (position: Position) => {\n    this.eventBus.dispatch(EventTypes.SELECT_START, position);\n  };\n\n  handleCellMouseEnter = (position: Position) => {\n    this.eventBus.dispatch(EventTypes.SELECT_UPDATE, position);\n  };\n\n  handleWindowMouseUp = () => {\n    this.eventBus.dispatch(EventTypes.SELECT_END);\n  };\n\n  handleCellContextMenu = (position: Position) => {\n    this.selectCell(position);\n  };\n\n  handleCellDoubleClick = ({ rowIdx, idx }: Position) => {\n    const { onRowDoubleClick, rowGetter } = this.props;\n    if (onRowDoubleClick) {\n      onRowDoubleClick(rowIdx, rowGetter(rowIdx), this.getColumn(idx));\n    }\n    this.openCellEditor(rowIdx, idx);\n  };\n\n  handleToggleFilter = () => {\n    // setState() does not immediately mutate this.state but creates a pending state transition.\n    // Therefore if you want to do something after the state change occurs, pass it in as a callback function.\n    this.setState((prevState) => ({ canFilter: !prevState.canFilter }), () => {\n      if (this.state.canFilter === false && this.props.onClearFilters) {\n        this.props.onClearFilters();\n      }\n    });\n  };\n\n  handleDragHandleDoubleClick: InteractionMasksMetaData<R>['onDragHandleDoubleClick'] = (e) => {\n    const cellKey = this.getColumn(e.idx).key;\n    this.handleGridRowsUpdated(cellKey, e.rowIdx, this.props.rowsCount - 1, { [cellKey]: e.rowData[cellKey] }, UpdateActions.COLUMN_FILL);\n  };\n\n  handleGridRowsUpdated: InteractionMasksMetaData<R>['onGridRowsUpdated'] = (cellKey, fromRow, toRow, updated, action, originRow) => {\n    const { rowGetter, rowKey, onGridRowsUpdated } = this.props;\n    if (!onGridRowsUpdated) {\n      return;\n    }\n\n    const rowIds = [];\n    for (let i = fromRow; i <= toRow; i++) {\n      rowIds.push(rowGetter(i)[rowKey]);\n    }\n\n    const fromRowData = rowGetter(action === UpdateActions.COPY_PASTE ? originRow! : fromRow);\n    const fromRowId = fromRowData[rowKey];\n    const toRowId = rowGetter(toRow)[rowKey];\n    onGridRowsUpdated({ cellKey, fromRow, toRow, fromRowId, toRowId, rowIds, updated: updated as never, action, fromRowData });\n  };\n\n  handleCommit = (commit: CommitEvent<R>) => {\n    const targetRow = commit.rowIdx;\n    this.handleGridRowsUpdated(commit.cellKey, targetRow, targetRow, commit.updated, UpdateActions.CELL_UPDATE);\n  };\n\n  handleSort = (sortColumn: keyof R, sortDirection: DEFINE_SORT) => {\n    this.setState({ sortColumn, sortDirection }, () => {\n      const { onGridSort } = this.props;\n      if (onGridSort) {\n        onGridSort(sortColumn, sortDirection);\n      }\n    });\n  };\n\n  getSelectedRow(rows: SelectedRow<R>[], key: unknown) {\n    return rows.find(r => r[this.props.rowKey] === key);\n  }\n\n  useNewRowSelection = () => {\n    return this.props.rowSelection && this.props.rowSelection.selectBy;\n  };\n\n  // return false if not a shift select so can be handled as normal row selection\n  handleShiftSelect = (rowIdx: number) => {\n    const { rowSelection } = this.props;\n    if (rowSelection && this.state.lastRowIdxUiSelected > -1 && this.isSingleKeyDown(KeyCodes.Shift)) {\n      const { keys, indexes, isSelectedKey } = rowSelection.selectBy as { [key: string]: unknown };\n      const isPreviouslySelected = isRowSelected(keys, indexes, isSelectedKey, this.props.rowGetter(rowIdx), rowIdx);\n\n      if (isPreviouslySelected) return false;\n\n      let handled = false;\n\n      if (rowIdx > this.state.lastRowIdxUiSelected) {\n        const rowsSelected = [];\n\n        for (let i = this.state.lastRowIdxUiSelected + 1; i <= rowIdx; i++) {\n          rowsSelected.push({ rowIdx: i, row: this.props.rowGetter(i) });\n        }\n\n        if (typeof rowSelection.onRowsSelected === 'function') {\n          rowSelection.onRowsSelected(rowsSelected);\n        }\n\n        handled = true;\n      } else if (rowIdx < this.state.lastRowIdxUiSelected) {\n        const rowsSelected = [];\n\n        for (let i = rowIdx; i <= this.state.lastRowIdxUiSelected - 1; i++) {\n          rowsSelected.push({ rowIdx: i, row: this.props.rowGetter(i) });\n        }\n\n        if (typeof rowSelection.onRowsSelected === 'function') {\n          rowSelection.onRowsSelected(rowsSelected);\n        }\n\n        handled = true;\n      }\n\n      if (handled) {\n        this.setState({ lastRowIdxUiSelected: rowIdx });\n      }\n\n      return handled;\n    }\n\n    return false;\n  };\n\n  handleNewRowSelect = (rowIdx: number, rowData: R) => {\n    const { current } = this.selectAllCheckbox;\n    if (current && current.checked === true) {\n      current.checked = false;\n    }\n\n    const { rowSelection } = this.props;\n    if (rowSelection) {\n      const { keys, indexes, isSelectedKey } = rowSelection.selectBy as { [key: string]: unknown };\n      const isPreviouslySelected = isRowSelected(keys, indexes, isSelectedKey, rowData, rowIdx);\n\n      this.setState({ lastRowIdxUiSelected: isPreviouslySelected ? -1 : rowIdx });\n      const cb = isPreviouslySelected ? rowSelection.onRowsDeselected : rowSelection.onRowsSelected;\n      if (typeof cb === 'function') {\n        cb([{ rowIdx, row: rowData }]);\n      }\n    }\n  };\n\n  // columnKey not used here as this function will select the whole row,\n  // but needed to match the function signature in the CheckboxEditor\n  handleRowSelect = (rowIdx: number, columnKey: keyof R, rowData: R, event: React.ChangeEvent<HTMLInputElement>) => {\n    event.stopPropagation();\n    const { rowSelection } = this.props;\n\n    if (this.useNewRowSelection()) {\n      if (rowSelection && rowSelection.enableShiftSelect === true) {\n        if (!this.handleShiftSelect(rowIdx)) {\n          this.handleNewRowSelect(rowIdx, rowData);\n        }\n      } else {\n        this.handleNewRowSelect(rowIdx, rowData);\n      }\n    } else { // Fallback to old onRowSelect handler\n      const selectedRows = this.props.enableRowSelect === 'single' ? [] : [...this.state.selectedRows];\n      const selectedRow = this.getSelectedRow(selectedRows, rowData[this.props.rowKey]);\n      if (selectedRow) {\n        selectedRow.isSelected = !selectedRow.isSelected;\n      } else {\n        (rowData as SelectedRow<R>).isSelected = true;\n        selectedRows.push(rowData as SelectedRow<R>);\n      }\n      this.setState({ selectedRows });\n      if (this.props.onRowSelect) {\n        this.props.onRowSelect(selectedRows.filter(r => r.isSelected === true));\n      }\n    }\n  };\n\n  handleCheckboxChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const allRowsSelected = e.currentTarget.checked;\n    const { rowSelection } = this.props;\n    if (rowSelection && this.useNewRowSelection()) {\n      const { keys, indexes, isSelectedKey } = rowSelection.selectBy as { [key: string]: unknown };\n\n      if (allRowsSelected && typeof rowSelection.onRowsSelected === 'function') {\n        const selectedRows = [];\n        for (let i = 0; i < this.props.rowsCount; i++) {\n          const rowData = this.props.rowGetter(i);\n          if (!isRowSelected(keys, indexes, isSelectedKey, rowData, i)) {\n            selectedRows.push({ rowIdx: i, row: rowData });\n          }\n        }\n\n        if (selectedRows.length > 0) {\n          rowSelection.onRowsSelected(selectedRows);\n        }\n      } else if (!allRowsSelected && typeof rowSelection.onRowsDeselected === 'function') {\n        const deselectedRows = [];\n        for (let i = 0; i < this.props.rowsCount; i++) {\n          const rowData = this.props.rowGetter(i);\n          if (isRowSelected(keys, indexes, isSelectedKey, rowData, i)) {\n            deselectedRows.push({ rowIdx: i, row: rowData });\n          }\n        }\n\n        if (deselectedRows.length > 0) {\n          rowSelection.onRowsDeselected(deselectedRows);\n        }\n      }\n    } else {\n      const selectedRows: SelectedRow<R>[] = [];\n      for (let i = 0; i < this.props.rowsCount; i++) {\n        const row = { ...this.props.rowGetter(i), isSelected: allRowsSelected };\n        selectedRows.push(row);\n      }\n      this.setState({ selectedRows });\n      if (typeof this.props.onRowSelect === 'function') {\n        this.props.onRowSelect(selectedRows.filter(r => r.isSelected === true));\n      }\n    }\n  };\n\n  getRowOffsetHeight() {\n    return this.getHeaderRows().reduce((offsetHeight, row) => offsetHeight += row.height, 0);\n  }\n\n  getHeaderRows() {\n    const { headerRowHeight, rowHeight, onAddFilter, headerFiltersHeight } = this.props;\n    const rows: HeaderRowData<R>[] = [{ height: headerRowHeight || rowHeight, rowType: HeaderRowType.HEADER }];\n    if (this.state.canFilter === true) {\n      rows.push({\n        rowType: HeaderRowType.FILTER,\n        filterable: true,\n        onFilterChange: onAddFilter,\n        height: headerFiltersHeight\n      });\n    }\n    return rows;\n  }\n\n  getRowSelectionProps() {\n    return this.props.rowSelection && this.props.rowSelection.selectBy;\n  }\n\n  getSelectedRows() {\n    if (this.props.rowSelection) {\n      return;\n    }\n\n    return this.state.selectedRows.filter(r => r.isSelected === true);\n  }\n\n  openCellEditor(rowIdx: number, idx: number) {\n    this.selectCell({ rowIdx, idx }, true);\n  }\n\n  scrollToColumn(colIdx: number) {\n    this.eventBus.dispatch(EventTypes.SCROLL_TO_COLUMN, colIdx);\n  }\n\n  setupGridColumns(props = this.props): ColumnList<R> {\n    const { columns } = props;\n    if (this._cachedColumns === columns) {\n      return this._cachedComputedColumns!;\n    }\n\n    this._cachedColumns = columns;\n\n    if (this.props.rowActionsCell || (props.enableRowSelect && !this.props.rowSelection) || (props.rowSelection && props.rowSelection.showCheckbox !== false)) {\n      const SelectAllComponent = this.props.selectAllRenderer;\n      const headerRenderer = props.enableRowSelect === 'single'\n        ? undefined\n        : <SelectAllComponent onChange={this.handleCheckboxChange} ref={this.selectAllCheckbox} />;\n      const Formatter = (this.props.rowActionsCell ? this.props.rowActionsCell : CheckboxEditor) as unknown as React.ComponentClass<{ rowSelection: unknown }>;\n      const selectColumn = {\n        key: 'select-row',\n        name: '',\n        formatter: <Formatter rowSelection={this.props.rowSelection} />,\n        onCellChange: this.handleRowSelect,\n        filterable: false,\n        headerRenderer,\n        width: 60,\n        frozen: true,\n        getRowMetaData: (rowData: R) => rowData,\n        cellClass: this.props.rowActionsCell ? 'rdg-row-actions-cell' : ''\n      } as unknown as Column<R>;\n\n      this._cachedComputedColumns = Array.isArray(columns)\n        ? [selectColumn, ...columns]\n        : columns.unshift(selectColumn);\n    } else {\n      this._cachedComputedColumns = columns.slice(0) as ColumnList<R>;\n    }\n\n    return this._cachedComputedColumns;\n  }\n\n  render() {\n    const cellMetaData: CellMetaData<R> = {\n      rowKey: this.props.rowKey,\n      onCellClick: this.handlerCellClick,\n      onCellContextMenu: this.handleCellContextMenu,\n      onCellDoubleClick: this.handleCellDoubleClick,\n      onCellExpand: this.props.onCellExpand,\n      onRowExpandToggle: this.props.onRowExpandToggle,\n      getCellActions: this.props.getCellActions,\n      onDeleteSubRow: this.props.onDeleteSubRow,\n      onAddSubRow: this.props.onAddSubRow,\n      onDragEnter: this.handleDragEnter\n    };\n    if (this.props.cellRangeSelection) {\n      cellMetaData.onCellMouseDown = this.handleCellMouseDown;\n      cellMetaData.onCellMouseEnter = this.handleCellMouseEnter;\n    }\n\n    const interactionMasksMetaData: InteractionMasksMetaData<R> = {\n      onCheckCellIsEditable: this.props.onCheckCellIsEditable,\n      onCellCopyPaste: this.props.onCellCopyPaste,\n      onGridRowsUpdated: this.handleGridRowsUpdated,\n      onDragHandleDoubleClick: this.handleDragHandleDoubleClick,\n      onCellSelected: this.props.onCellSelected,\n      onCellDeSelected: this.props.onCellDeSelected,\n      onCellRangeSelectionStarted: this.props.cellRangeSelection && this.props.cellRangeSelection.onStart,\n      onCellRangeSelectionUpdated: this.props.cellRangeSelection && this.props.cellRangeSelection.onUpdate,\n      onCellRangeSelectionCompleted: this.props.cellRangeSelection && this.props.cellRangeSelection.onComplete,\n      onCommit: this.handleCommit\n    };\n\n    let containerWidth: string | number = this.props.minWidth || this.gridWidth();\n    let gridWidth: string | number = containerWidth;\n\n    // depending on the current lifecycle stage, gridWidth() may not initialize correctly\n    // this also handles cases where it always returns undefined -- such as when inside a div with display:none\n    // eg Bootstrap tabs and collapses\n    if (Number.isNaN(containerWidth) || containerWidth === 0) {\n      containerWidth = '100%';\n      gridWidth = '100%';\n    }\n\n    return (\n      <div\n        className=\"react-grid-Container\"\n        style={{ width: containerWidth }}\n        ref={this.grid}\n      >\n        <ToolbarContainer<R>\n          toolbar={this.props.toolbar}\n          columns={this.props.columns}\n          rowsCount={this.props.rowsCount}\n          onToggleFilter={this.handleToggleFilter}\n        />\n        <Grid<R>\n          ref={this.base}\n          rowKey={this.props.rowKey}\n          headerRows={this.getHeaderRows()}\n          draggableHeaderCell={this.props.draggableHeaderCell}\n          getValidFilterValues={this.props.getValidFilterValues}\n          columnMetrics={this.state.columnMetrics}\n          rowGetter={this.props.rowGetter}\n          rowsCount={this.props.rowsCount}\n          rowHeight={this.props.rowHeight}\n          rowRenderer={this.props.rowRenderer}\n          rowGroupRenderer={this.props.rowGroupRenderer}\n          cellMetaData={cellMetaData}\n          selectedRows={this.getSelectedRows()}\n          rowSelection={this.getRowSelectionProps()}\n          rowOffsetHeight={this.getRowOffsetHeight()}\n          sortColumn={this.state.sortColumn}\n          sortDirection={this.state.sortDirection}\n          onSort={this.handleSort}\n          minHeight={this.props.minHeight}\n          totalWidth={gridWidth}\n          onViewportKeydown={this.handleViewportKeyDown}\n          onViewportKeyup={this.handleViewportKeyUp}\n          onColumnResize={this.handleColumnResize}\n          scrollToRowIndex={this.props.scrollToRowIndex}\n          contextMenu={this.props.contextMenu}\n          enableCellSelect={this.props.enableCellSelect}\n          enableCellAutoFocus={this.props.enableCellAutoFocus}\n          cellNavigationMode={this.props.cellNavigationMode}\n          eventBus={this.eventBus}\n          onScroll={this.props.onScroll}\n          RowsContainer={this.props.RowsContainer}\n          emptyRowsView={this.props.emptyRowsView}\n          onHeaderDrop={this.props.onHeaderDrop}\n          getSubRowDetails={this.props.getSubRowDetails}\n          editorPortalTarget={this.props.editorPortalTarget}\n          interactionMasksMetaData={interactionMasksMetaData}\n        />\n      </div>\n    );\n  }\n}\n\nexport type ReactDataGridProps<R extends {}> = JSX.LibraryManagedAttributes<typeof ReactDataGrid, DataGridProps<R>>;\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}