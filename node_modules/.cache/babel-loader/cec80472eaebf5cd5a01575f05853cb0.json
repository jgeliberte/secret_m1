{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterGrid12345.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { NavigationContext } from \"../NavigationContext\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport { WELLGRID } from \"../../../graphQL/useQueryWellGrId12345\";\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    minWidth: 249,\n    color: \"black\"\n  },\n  loader: {\n    marginLeft: \"50%\"\n  },\n  autoC: {\n    \"& input\": {\n      color: \"#17AADD\"\n    }\n  }\n})); ///////props: -gridNumber//////////\n///////       -label     //////////\n\nexport default function FilterGrid12345({\n  gridNumber,\n  label\n}) {\n  const classes = useStyles();\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [gridList, setGridList] = useState([]);\n  const [getWellGrId12345, {\n    loading,\n    data\n  }] = useLazyQuery(WELLGRID);\n  let useEffectDependenciesArray = [stateNav.stateName, stateNav.countyName];\n\n  for (let i = 1; i < gridNumber; i++) {\n    useEffectDependenciesArray.push(stateNav[`GrId${i}`]);\n  }\n\n  useEffect(() => {\n    if (!stateNav.stateName || !stateNav.countyName) {\n      setGridList([]);\n      setStateNav(stateNav => ({ ...stateNav,\n        [`GrId${gridNumber}`]: null\n      }));\n    } else {\n      let whereFields = {\n        State: stateNav.stateName,\n        County: stateNav.countyName\n      };\n\n      for (let i = 1; i < gridNumber; i++) {\n        if (stateNav[`GrId${i}`]) {\n          whereFields[`GrId${i}`] = stateNav[`GrId${i}`];\n        }\n      }\n\n      getWellGrId12345({\n        variables: {\n          gridNumber,\n          whereFields\n        }\n      });\n    }\n  }, useEffectDependenciesArray);\n  useEffect(() => {\n    if (data) {\n      if (data.WellGrId12345) {\n        setGridList(data.WellGrId12345);\n      } else {\n        setGridList([]);\n        setStateNav(stateNav => ({ ...stateNav,\n          [`GrId${gridNumber}`]: null\n        }));\n      }\n    }\n  }, [data]);\n\n  const nullDesc = () => {\n    let stateNavObj = { ...stateNav,\n      filterGeography: null\n    };\n\n    for (let i = gridNumber + 1; i <= 5; i++) {\n      stateNavObj[`GrId${i}`] = null;\n    }\n\n    return stateNavObj;\n  };\n\n  const handleChange = (event, newValue) => {\n    if (newValue == null) {\n      setStateNav({ ...nullDesc(),\n        [`GrId${gridNumber}`]: null\n      });\n    } else {\n      if (newValue && newValue[`GrId${gridNumber}`]) {\n        setStateNav({ ...nullDesc(),\n          [`GrId${gridNumber}`]: newValue[`GrId${gridNumber}`]\n        });\n      }\n    }\n  };\n\n  const onEnterKey = event => {\n    if (event.keyCode === 13) {\n      event.preventDefault();\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(FormControl, {\n    variant: \"outlined\",\n    className: classes.formControl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 5\n    }\n  }, loading ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"56px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"secondary\",\n    className: classes.loader,\n    size: 28,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  })) : /*#__PURE__*/React.createElement(Autocomplete, {\n    className: classes.autoC,\n    options: gridList,\n    getOptionLabel: option => option && option[`GrId${gridNumber}`] ? option[`GrId${gridNumber}`] : option ? option : \"\",\n    disabled: !stateNav.countyName || gridList.length === 0,\n    autoComplete: true,\n    autoSelect: true,\n    disableListWrap: true,\n    includeInputInList: true,\n    value: gridList.length === 0 ? \"\" : stateNav[`GrId${gridNumber}`],\n    onChange: (event, newValue) => {\n      handleChange(event, newValue);\n    },\n    onKeyDown: event => onEnterKey(event),\n    renderInput: params => /*#__PURE__*/React.createElement(\"form\", {\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      fullWidth: true,\n      label: label,\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }))),\n    renderOption: option => /*#__PURE__*/React.createElement(Typography, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, option && option[`GrId${gridNumber}`] ? option[`GrId${gridNumber}`] : option ? option : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterGrid12345.js"],"names":["React","useState","useContext","useEffect","makeStyles","Typography","FormControl","TextField","Autocomplete","CircularProgress","NavigationContext","useLazyQuery","WELLGRID","useStyles","theme","formControl","minWidth","color","loader","marginLeft","autoC","FilterGrid12345","gridNumber","label","classes","stateNav","setStateNav","gridList","setGridList","getWellGrId12345","loading","data","useEffectDependenciesArray","stateName","countyName","i","push","whereFields","State","County","variables","WellGrId12345","nullDesc","stateNavObj","filterGeography","handleChange","event","newValue","onEnterKey","keyCode","preventDefault","height","option","length","params"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\nimport { WELLGRID } from \"../../../graphQL/useQueryWellGrId12345\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    minWidth: 249,\r\n    color: \"black\",\r\n  },\r\n  loader: {\r\n    marginLeft: \"50%\",\r\n  },\r\n  autoC: { \"& input\": { color: \"#17AADD\" } },\r\n}));\r\n\r\n///////props: -gridNumber//////////\r\n///////       -label     //////////\r\nexport default function FilterGrid12345({ gridNumber, label }) {\r\n  const classes = useStyles();\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n\r\n  const [gridList, setGridList] = useState([]);\r\n  const [getWellGrId12345, { loading, data }] = useLazyQuery(WELLGRID);\r\n\r\n  let useEffectDependenciesArray = [stateNav.stateName, stateNav.countyName];\r\n\r\n  for (let i = 1; i < gridNumber; i++) {\r\n    useEffectDependenciesArray.push(stateNav[`GrId${i}`]);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!stateNav.stateName || !stateNav.countyName) {\r\n      setGridList([]);\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        [`GrId${gridNumber}`]: null,\r\n      }));\r\n    } else {\r\n      let whereFields = {\r\n        State: stateNav.stateName,\r\n        County: stateNav.countyName,\r\n      };\r\n\r\n      for (let i = 1; i < gridNumber; i++) {\r\n        if (stateNav[`GrId${i}`]) {\r\n          whereFields[`GrId${i}`] = stateNav[`GrId${i}`];\r\n        }\r\n      }\r\n\r\n      getWellGrId12345({\r\n        variables: {\r\n          gridNumber,\r\n          whereFields,\r\n        },\r\n      });\r\n    }\r\n  }, useEffectDependenciesArray);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      if (data.WellGrId12345) {\r\n        setGridList(data.WellGrId12345);\r\n      } else {\r\n        setGridList([]);\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [`GrId${gridNumber}`]: null,\r\n        }));\r\n      }\r\n    }\r\n  }, [data]);\r\n\r\n  const nullDesc = () => {\r\n    let stateNavObj = { ...stateNav, filterGeography: null };\r\n\r\n    for (let i = gridNumber + 1; i <= 5; i++) {\r\n      stateNavObj[`GrId${i}`] = null;\r\n    }\r\n    return stateNavObj;\r\n  };\r\n\r\n  const handleChange = (event, newValue) => {\r\n    if (newValue == null) {\r\n      setStateNav({\r\n        ...nullDesc(),\r\n        [`GrId${gridNumber}`]: null,\r\n      });\r\n    } else {\r\n      if (newValue && newValue[`GrId${gridNumber}`]) {\r\n        setStateNav({\r\n          ...nullDesc(),\r\n          [`GrId${gridNumber}`]: newValue[`GrId${gridNumber}`],\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  const onEnterKey = (event) => {\r\n    if (event.keyCode === 13) {\r\n      event.preventDefault();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n      {loading ? (\r\n        <div style={{ height: \"56px\" }}>\r\n          <CircularProgress\r\n            color=\"secondary\"\r\n            className={classes.loader}\r\n            size={28}\r\n          />\r\n        </div>\r\n      ) : (\r\n        <Autocomplete\r\n          className={classes.autoC}\r\n          options={gridList}\r\n          getOptionLabel={(option) =>\r\n            option && option[`GrId${gridNumber}`]\r\n              ? option[`GrId${gridNumber}`]\r\n              : option\r\n              ? option\r\n              : \"\"\r\n          }\r\n          disabled={!stateNav.countyName || gridList.length === 0}\r\n          autoComplete\r\n          autoSelect\r\n          disableListWrap\r\n          includeInputInList\r\n          value={gridList.length === 0 ? \"\" : stateNav[`GrId${gridNumber}`]}\r\n          onChange={(event, newValue) => {\r\n            handleChange(event, newValue);\r\n          }}\r\n          onKeyDown={(event) => onEnterKey(event)}\r\n          renderInput={(params) => (\r\n            <form autoComplete=\"off\">\r\n              <TextField\r\n                {...params}\r\n                fullWidth\r\n                label={label}\r\n                variant=\"outlined\"\r\n              />\r\n            </form>\r\n          )}\r\n          renderOption={(option) => (\r\n            <Typography>\r\n              {option && option[`GrId${gridNumber}`]\r\n                ? option[`GrId${gridNumber}`]\r\n                : option\r\n                ? option\r\n                : \"\"}\r\n            </Typography>\r\n          )}\r\n        />\r\n      )}\r\n    </FormControl>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}