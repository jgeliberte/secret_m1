{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterFormOwner.js\";\nimport React, { useState, useContext } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { NavigationContext } from \"../NavigationContext\";\nimport FilterOwnerCount from \"./FilterOwnerCount\";\nimport Grid from \"@material-ui/core/Grid\"; // import FilterOwnerInterestSum from \"./FilterOwnerInterestSum\";\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    color: \"black\"\n  }\n}));\nconst interestList = [\"ROYALTY INTEREST\", \"OVERRIDE ROYALTY\", \"WORKING INTEREST\", \"PRODUCTION PAYMENT\"];\nconst ownerTypesList = [\"RELIGIOUS INSTITUTIONS\", \"GOVERNMENTAL BODIES\", \"NON PROFITS\", \"TRUSTS\", \"CORPORATIONS\", \"EDUCATIONAL INSTITUTIONS\", \"INDIVIDUALS\", \"UNKNOWN\"];\nexport default function FilterFormOwner() {\n  const classes = useStyles();\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [interestName, setInterestName] = useState(stateNav.interestName ? stateNav.interestName : []);\n  const [ownerTypeName, setOwnerTypeName] = useState(stateNav.ownerTypeName ? stateNav.ownerTypeName : []);\n  const [interests, setInterests] = useState(interestList);\n  const [ownerTypes, setOwnerTypes] = useState(ownerTypesList); // there is an opportunity to break these out into seperate components\n  // instead of including it on a form.\n\n  const setFilterInterest = interestNames => {\n    let filter;\n    let filters = [];\n    let check;\n\n    if (interestNames) {\n      check = interestNames.map(val => val);\n      check.forEach(option => {\n        if (option === \"ROYALTY INTEREST\") {\n          filters.push([\"get\", \"interestTypeRoyaltyInterest\"]);\n        }\n\n        if (option === \"OVERRIDE ROYALTY\") {\n          filters.push([\"get\", \"interestTypeOverrideRoyalty\"]);\n        }\n\n        if (option === \"WORKING INTEREST\") {\n          filters.push([\"get\", \"interestTypeWorkingInterest\"]);\n        }\n\n        if (option === \"PRODUCTION PAYMENT\") {\n          filters.push([\"get\", \"interestTypeProductionPayment\"]);\n        }\n      });\n\n      if (filters && filters.length > 0) {\n        filters.unshift(\"any\");\n        filter = filters;\n        setStateNav(stateNav => ({ ...stateNav,\n          filterAllInterestTypes: filter\n        }));\n      } else {\n        filter = null;\n        setStateNav(stateNav => ({ ...stateNav,\n          filterAllInterestTypes: filter\n        }));\n      }\n    }\n  };\n\n  const setFilterOwnerType = ownerTypeNames => {\n    let filter;\n    let filters = [];\n    let check;\n\n    if (ownerTypeNames) {\n      check = ownerTypeNames.map(val => val);\n      check.forEach(option => {\n        if (option === \"RELIGIOUS INSTITUTIONS\") {\n          filters.push([\"get\", \"ownershipTypeReligiousInstitutions\"]);\n        }\n\n        if (option === \"GOVERNMENTAL BODIES\") {\n          filters.push([\"get\", \"ownershipTypeGovernmentalBodies\"]);\n        }\n\n        if (option === \"NON PROFITS\") {\n          filters.push([\"get\", \"ownershipTypeNonProfits\"]);\n        }\n\n        if (option === \"TRUSTS\") {\n          filters.push([\"get\", \"ownershipTypeTrusts\"]);\n        }\n\n        if (option === \"CORPORATIONS\") {\n          filters.push([\"get\", \"ownershipTypeCorporations\"]);\n        }\n\n        if (option === \"EDUCATIONAL INSTITUTIONS\") {\n          filters.push([\"get\", \"ownershipTypeEducationalInstitutions\"]);\n        }\n\n        if (option === \"INDIVIDUALS\") {\n          filters.push([\"get\", \"ownershipTypeIndividuals\"]);\n        }\n\n        if (option === \"UNKNOWN\") {\n          filters.push([\"get\", \"ownershipTypeUnknown\"]);\n        }\n      });\n\n      if (filters && filters.length > 0) {\n        filters.unshift(\"any\");\n        filter = filters;\n        setStateNav(stateNav => ({ ...stateNav,\n          filterAllOwnershipTypes: filter\n        }));\n      } else {\n        filter = null;\n        setStateNav(stateNav => ({ ...stateNav,\n          filterAllOwnershipTypes: filter\n        }));\n      }\n    }\n  };\n\n  const handleChangeInterest = event => {\n    // console.log(event);\n    setInterestName(event);\n    setFilterInterest(event);\n    setStateNav(stateNav => ({ ...stateNav,\n      interestName: event\n    }));\n  };\n\n  const handleChangeOwnerType = event => {\n    // console.log(event);\n    setOwnerTypeName(event);\n    setFilterOwnerType(event);\n    setStateNav(stateNav => ({ ...stateNav,\n      ownerTypeName: event\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    spacing: 2,\n    style: {\n      padding: \"8px\",\n      width: \"100%\",\n      margin: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    ChipProps: {\n      color: \"secondary\"\n    },\n    className: classes.formControl,\n    defaultValue: interestName,\n    onChange: (event, newValue) => {\n      handleChangeInterest(newValue);\n    },\n    multiple: true,\n    options: interests.map(option => option),\n    renderInput: params => /*#__PURE__*/React.createElement(\"form\", {\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"Interest Types\",\n      placeholder: \"\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }\n    }))),\n    disableListWrap: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    ChipProps: {\n      color: \"secondary\"\n    },\n    className: classes.formControl,\n    defaultValue: ownerTypeName,\n    onChange: (event, newValue) => {\n      handleChangeOwnerType(newValue);\n    },\n    multiple: true,\n    options: ownerTypes.map(option => option),\n    renderInput: params => /*#__PURE__*/React.createElement(\"form\", {\n      autoComplete: \"off\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"Owner Types\",\n      placeholder: \"\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 15\n      }\n    }))),\n    disableListWrap: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(FilterOwnerCount, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterFormOwner.js"],"names":["React","useState","useContext","makeStyles","Autocomplete","TextField","NavigationContext","FilterOwnerCount","Grid","useStyles","theme","formControl","color","interestList","ownerTypesList","FilterFormOwner","classes","stateNav","setStateNav","interestName","setInterestName","ownerTypeName","setOwnerTypeName","interests","setInterests","ownerTypes","setOwnerTypes","setFilterInterest","interestNames","filter","filters","check","map","val","forEach","option","push","length","unshift","filterAllInterestTypes","setFilterOwnerType","ownerTypeNames","filterAllOwnershipTypes","handleChangeInterest","event","handleChangeOwnerType","padding","width","margin","newValue","params"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\nimport FilterOwnerCount from \"./FilterOwnerCount\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n// import FilterOwnerInterestSum from \"./FilterOwnerInterestSum\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    color: \"black\",\r\n  },\r\n}));\r\n\r\nconst interestList = [\r\n  \"ROYALTY INTEREST\",\r\n  \"OVERRIDE ROYALTY\",\r\n  \"WORKING INTEREST\",\r\n  \"PRODUCTION PAYMENT\",\r\n];\r\n\r\nconst ownerTypesList = [\r\n  \"RELIGIOUS INSTITUTIONS\",\r\n  \"GOVERNMENTAL BODIES\",\r\n  \"NON PROFITS\",\r\n  \"TRUSTS\",\r\n  \"CORPORATIONS\",\r\n  \"EDUCATIONAL INSTITUTIONS\",\r\n  \"INDIVIDUALS\",\r\n  \"UNKNOWN\",\r\n];\r\n\r\nexport default function FilterFormOwner() {\r\n  const classes = useStyles();\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [interestName, setInterestName] = useState(\r\n    stateNav.interestName ? stateNav.interestName : []\r\n  );\r\n  const [ownerTypeName, setOwnerTypeName] = useState(\r\n    stateNav.ownerTypeName ? stateNav.ownerTypeName : []\r\n  );\r\n  const [interests, setInterests] = useState(interestList);\r\n  const [ownerTypes, setOwnerTypes] = useState(ownerTypesList);\r\n\r\n  // there is an opportunity to break these out into seperate components\r\n  // instead of including it on a form.\r\n\r\n  const setFilterInterest = (interestNames) => {\r\n    let filter;\r\n    let filters = [];\r\n    let check;\r\n    if (interestNames) {\r\n      check = interestNames.map((val) => val);\r\n      check.forEach((option) => {\r\n        if (option === \"ROYALTY INTEREST\") {\r\n          filters.push([\"get\", \"interestTypeRoyaltyInterest\"]);\r\n        }\r\n        if (option === \"OVERRIDE ROYALTY\") {\r\n          filters.push([\"get\", \"interestTypeOverrideRoyalty\"]);\r\n        }\r\n        if (option === \"WORKING INTEREST\") {\r\n          filters.push([\"get\", \"interestTypeWorkingInterest\"]);\r\n        }\r\n        if (option === \"PRODUCTION PAYMENT\") {\r\n          filters.push([\"get\", \"interestTypeProductionPayment\"]);\r\n        }\r\n      });\r\n      if (filters && filters.length > 0) {\r\n        filters.unshift(\"any\");\r\n        filter = filters;\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterAllInterestTypes: filter,\r\n        }));\r\n      } else {\r\n        filter = null;\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterAllInterestTypes: filter,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const setFilterOwnerType = (ownerTypeNames) => {\r\n    let filter;\r\n    let filters = [];\r\n    let check;\r\n    if (ownerTypeNames) {\r\n      check = ownerTypeNames.map((val) => val);\r\n      check.forEach((option) => {\r\n        if (option === \"RELIGIOUS INSTITUTIONS\") {\r\n          filters.push([\"get\", \"ownershipTypeReligiousInstitutions\"]);\r\n        }\r\n        if (option === \"GOVERNMENTAL BODIES\") {\r\n          filters.push([\"get\", \"ownershipTypeGovernmentalBodies\"]);\r\n        }\r\n        if (option === \"NON PROFITS\") {\r\n          filters.push([\"get\", \"ownershipTypeNonProfits\"]);\r\n        }\r\n        if (option === \"TRUSTS\") {\r\n          filters.push([\"get\", \"ownershipTypeTrusts\"]);\r\n        }\r\n        if (option === \"CORPORATIONS\") {\r\n          filters.push([\"get\", \"ownershipTypeCorporations\"]);\r\n        }\r\n        if (option === \"EDUCATIONAL INSTITUTIONS\") {\r\n          filters.push([\"get\", \"ownershipTypeEducationalInstitutions\"]);\r\n        }\r\n        if (option === \"INDIVIDUALS\") {\r\n          filters.push([\"get\", \"ownershipTypeIndividuals\"]);\r\n        }\r\n        if (option === \"UNKNOWN\") {\r\n          filters.push([\"get\", \"ownershipTypeUnknown\"]);\r\n        }\r\n      });\r\n      if (filters && filters.length > 0) {\r\n        filters.unshift(\"any\");\r\n        filter = filters;\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterAllOwnershipTypes: filter,\r\n        }));\r\n      } else {\r\n        filter = null;\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterAllOwnershipTypes: filter,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleChangeInterest = (event) => {\r\n    // console.log(event);\r\n    setInterestName(event);\r\n    setFilterInterest(event);\r\n    setStateNav((stateNav) => ({\r\n      ...stateNav,\r\n      interestName: event,\r\n    }));\r\n  };\r\n\r\n  const handleChangeOwnerType = (event) => {\r\n    // console.log(event);\r\n    setOwnerTypeName(event);\r\n    setFilterOwnerType(event);\r\n    setStateNav((stateNav) => ({\r\n      ...stateNav,\r\n      ownerTypeName: event,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      item\r\n      spacing={2}\r\n      style={{ padding: \"8px\", width: \"100%\", margin: \"0\" }}\r\n    >\r\n      <Grid item sm={12}>\r\n        <Autocomplete\r\n          ChipProps={{ color: \"secondary\" }}\r\n          className={classes.formControl}\r\n          defaultValue={interestName}\r\n          onChange={(event, newValue) => {\r\n            handleChangeInterest(newValue);\r\n          }}\r\n          multiple\r\n          options={interests.map((option) => option)}\r\n          renderInput={(params) => (\r\n            <form autoComplete=\"off\">\r\n              <TextField\r\n                {...params}\r\n                variant=\"outlined\"\r\n                label=\"Interest Types\"\r\n                placeholder=\"\"\r\n                fullWidth={true}\r\n              />\r\n            </form>\r\n          )}\r\n          disableListWrap\r\n        />\r\n      </Grid>\r\n      <Grid item sm={12}>\r\n        <Autocomplete\r\n          ChipProps={{ color: \"secondary\" }}\r\n          className={classes.formControl}\r\n          defaultValue={ownerTypeName}\r\n          onChange={(event, newValue) => {\r\n            handleChangeOwnerType(newValue);\r\n          }}\r\n          multiple\r\n          options={ownerTypes.map((option) => option)}\r\n          renderInput={(params) => (\r\n            <form autoComplete=\"off\">\r\n              <TextField\r\n                {...params}\r\n                variant=\"outlined\"\r\n                label=\"Owner Types\"\r\n                placeholder=\"\"\r\n                fullWidth={true}\r\n              />\r\n            </form>\r\n          )}\r\n          disableListWrap\r\n        />\r\n      </Grid>\r\n\r\n      <FilterOwnerCount />\r\n\r\n      {/* TEMPORARY COMMENT OUT BELOW\r\n      FEATURE WORKS AND WILL HELP WITH M1 LOCAL DEBUGGING\r\n      <Grid item sm={12}><FilterOwnerInterestSum/> </Grid>*/}\r\n    </Grid>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}