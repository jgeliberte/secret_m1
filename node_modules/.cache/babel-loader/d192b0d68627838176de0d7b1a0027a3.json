{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Shared\\\\M1nTable\\\\components\\\\Table.js\";\nimport React, { useState, useContext, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport ExpandableCardProvider from \"../../../ExpandableCard/ExpandableCardProvider\";\nimport WellCardProvider from \"../../../WellCard/WellCardProvider\";\nimport OwnersDetailCard from \"../../../OwnersDetailCard/OwnersDetailCard\";\nimport ContactDetailCard from \"../../../ContactDetailCard/ContactDetailCard\";\nimport { AppContext } from \"../../../../AppContext\";\nimport Tags from \"../../Tagger\";\nimport Comments from \"../../Comments\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Skeleton from \"@material-ui/lab/Skeleton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MUIDataTable from \"mui-datatables\";\nimport { IconButton, Typography } from \"@material-ui/core\";\nimport TrackToggleButton from \"../../TrackToggleButton\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport Badge from \"@material-ui/core/Badge\";\nimport ChatIcon from \"@material-ui/icons/Chat\";\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\nimport M1nTable from \"../M1nTable\";\nimport WellIcon from \"../../svgIcons/well\";\nimport ContactPhoneIcon from \"@material-ui/icons/ContactPhone\";\nimport AddCircleOutlineRoundedIcon from \"@material-ui/icons/AddCircleOutlineRounded\";\nimport AddContactDialogContent from \"./SubComponents/AddContactDialogContent\";\nimport AddOwnerToContactDialogContent from \"./SubComponents/AddOwnerToContactDialogContent\";\nimport DeleteConfirmationDialogContent from \"./SubComponents/DeleteConfirmationDialogContent\";\nimport Button from \"@material-ui/core/Button\";\nimport LocalPrintshopRoundedIcon from \"@material-ui/icons/LocalPrintshopRounded\";\nimport EmailRoundedIcon from \"@material-ui/icons/EmailRounded\";\nimport ContactPhoneRoundedIcon from \"@material-ui/icons/ContactPhoneRounded\";\nimport BuyContactsInfoDialogContent from \"./SubComponents/BuyContactsInfoDialogContent\";\nimport PrintLabelsDialogContent from \"./SubComponents/PrintLabelsDialogContent\";\nimport SendMailersDialogContent from \"./SubComponents/SendMailersDialogContent\";\nimport BackupIcon from \"@material-ui/icons/Backup\";\nimport { anyToDate } from \"@amcharts/amcharts4/.internal/core/utils/Utils\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport Divider from \"@material-ui/core/Divider\";\nimport CellContentEdition from \"./SubComponents/CellContentEdition\";\nimport Avatar, { ConfigProvider } from \"react-avatar\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  table: {\n    \"& .MuiTableCell-body\": {\n      padding: props => props.dense ? \"0 !important\" : \"12px 16px\"\n    },\n    \"& .MuiTableHead-root\": {\n      \"& th\": {\n        backgroundColor: \"#F2F2F2\",\n        zIndex: \"auto\",\n        padding: props => props.dense ? \"10px\" : null\n      },\n      \"& .MuiTableCell-paddingCheckbox\": {\n        padding: props => props.dense ? \"0 !important\" : \"16px\"\n      }\n    },\n    \"& tr\": {\n      paddingRight: props => props.dense ? \"12px\" : null\n    }\n  },\n  icons: {\n    backgroundColor: props => props.dense ? \"transparent\" : \"#efefef\",\n    marginLeft: \"auto\",\n    \"&:hover\": {\n      backgroundColor: \"#dadbde !important\"\n    }\n  },\n  iconSelected: {\n    backgroundColor: `${theme.palette.secondary.main} !important`,\n    color: \"#011133 !important\",\n    \"& p\": {\n      color: \"#011133 !important\"\n    }\n  },\n  TagSample: {\n    backgroundColor: \"#efefef\",\n    color: \"rgb(1,17,51)\",\n    borderRadius: \"12px\",\n    width: \"100%\",\n    maxWidth: \"180px\",\n    minWidth: \"80px\",\n    \"&:hover\": {\n      backgroundColor: \"#dadbde !important\",\n      cursor: \"pointer\"\n    },\n    \"& p\": {\n      marginTop: props => props.dense ? \"5px\" : \"13px\",\n      marginBottom: props => props.dense ? \"5px\" : \"13px\"\n    },\n    \"& .first\": {\n      marginLeft: props => props.dense ? \"5px\" : \"13px\",\n      height: \"20px\",\n      overflow: \"hidden\",\n      wordBreak: \"break-all\"\n    },\n    \"& .two\": {\n      marginRight: props => props.dense ? \"5px\" : \"13px\"\n    },\n    \"& .three\": {\n      marginLeft: props => props.dense ? \"5px\" : \"13px\",\n      marginRight: props => props.dense ? \"5px\" : \"13px\",\n      color: \"darkgrey\"\n    }\n  },\n  tagsDiv: {\n    margin: \"8px\"\n  },\n  noOwnersIcon: {\n    color: \"darkgrey\",\n    \"&:hover\": {\n      cursor: \"auto\",\n      backgroundColor: \"rgba(255, 255, 255, 0)\"\n    }\n  },\n  noCommentsIcon: {\n    color: \"darkgrey\"\n  },\n  dialogExpCard: {\n    \"& .MuiDialog-paperScrollPaper\": {\n      height: \"100%\"\n    }\n  },\n  addIcon: {\n    \"& .MuiIconButton-root:hover\": {\n      color: \"#011133\"\n    }\n  },\n  cellDataDiv: {\n    padding: \"10px\",\n    position: \"relative\",\n    borderRadius: \"7px\",\n    width: \"fit-content\",\n    cursor: \"text\",\n    \"&:hover\": {\n      backgroundColor: \"#fff !important\"\n    }\n  },\n  multiSelectionTopBarButtons: {\n    margin: \"6px 12px\",\n    fontWeight: \"600\",\n    color: \"#082768\"\n  }\n}));\nvar formatter = new Intl.NumberFormat(\"en-US\", {\n  style: \"currency\",\n  currency: \"USD\",\n  maximumSignificantDigits: 21\n});\nexport default function SubTable(props) {\n  const classes = useStyles(props);\n  const [stateApp, setStateApp] = useContext(AppContext);\n  const [rows, setRows] = useState(null);\n  const [columns, setColumns] = useState([]);\n  const [colInd, setColInd] = useState();\n  const [rowInd, setRowInd] = useState();\n  const [expandedObject, setExpandedObject] = useState();\n  const [openDialog, setOpenDialog] = useState(false);\n  const [showExpandableCard, setShowExpandableCard] = useState(false);\n  const [selectedRow, setSelectedRow] = useState();\n  const [subComponent, setSubComponent] = useState(null);\n  const [title, setTitle] = useState(\"\");\n  const [subTitle, setSubTitle] = useState(\"\");\n  const [m1nSelectedRowsIndexes, setM1nSelectedRowsIndexes] = useState([]);\n  const [m1nSelectedRowsIds, setM1nSelectedRowsIds] = useState([]);\n  const [m1nSelectedRowsTracks, setM1nSelectedRowsTracks] = useState([]);\n  useEffect(() => {\n    if (props.rows) {\n      if (props.orderByTracks) setRows([...props.rows.sort((a, b) => {\n        return b.isTracked - a.isTracked;\n      })]);else setRows([...props.rows]);\n    }\n  }, [props.rows, props.orderByTracks]);\n  useEffect(() => {\n    if (rows && m1nSelectedRowsIndexes) {\n      if (rows.length > 0 && m1nSelectedRowsIndexes.length > 0) {\n        let selectedRowsTracks = m1nSelectedRowsIndexes.map(ind => {\n          if (rows[ind] && rows[ind].isTracked) return rows[ind].isTracked;\n        });\n        setM1nSelectedRowsTracks(selectedRowsTracks);\n      } else setM1nSelectedRowsTracks([]);\n    }\n  }, [rows, m1nSelectedRowsIndexes, props.columns]);\n\n  const multiSelectMouseHoverColor = (id, color) => {\n    for (let i = 0; i < m1nSelectedRowsIndexes.length; i++) {\n      if (document.getElementById(id + m1nSelectedRowsIds[i] + m1nSelectedRowsIndexes[i])) document.getElementById(id + m1nSelectedRowsIds[i] + m1nSelectedRowsIndexes[i]).style.backgroundColor = color;\n    }\n  }; ////setting all icons columns/////\n\n\n  useEffect(() => {\n    if (props.columns) {\n      props.columns.forEach(column => {\n        switch (column.name) {\n          case \"isTracked\":\n            {\n              column.options = { ...column.options,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                  let id = props.targetLabel + tableMeta.columnIndex;\n                  return /*#__PURE__*/React.createElement(TrackToggleButton, {\n                    id: id + tableMeta.rowData[0] + tableMeta.rowIndex,\n                    target: {\n                      isTracked: value\n                    },\n                    targetLabel: props.targetLabel,\n                    targetSourceId: tableMeta.rowData[0],\n                    dark: true,\n                    multipleIds: m1nSelectedRowsIndexes.indexOf(tableMeta.rowIndex) !== -1 && m1nSelectedRowsIndexes.length > 1 ? m1nSelectedRowsIds : null,\n                    multipleTracks: m1nSelectedRowsIndexes.indexOf(tableMeta.rowIndex) !== -1 && m1nSelectedRowsIndexes.length > 1 ? m1nSelectedRowsTracks : null,\n                    multiSelectMouseHoverColor: m1nSelectedRowsIndexes.indexOf(tableMeta.rowIndex) !== -1 && m1nSelectedRowsIndexes.length > 1 ? multiSelectMouseHoverColor : null,\n                    idBase: id,\n                    iconZiseSmall: props.dense ? true : undefined,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 221,\n                      columnNumber: 21\n                    }\n                  });\n                }\n              };\n            }\n            break;\n\n          case \"commentsCounter\":\n            {\n              column.options = { ...column.options,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                  let id = props.targetLabel + tableMeta.columnIndex;\n                  return /*#__PURE__*/React.createElement(Tooltip, {\n                    title: !value || value === 0 ? \"Add Comments\" : \"Comments\",\n                    placement: \"top\",\n                    style: {\n                      marginRight: \"10px\"\n                    },\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 262,\n                      columnNumber: 21\n                    }\n                  }, /*#__PURE__*/React.createElement(Badge, {\n                    badgeContent: value ? value : null,\n                    color: \"secondary\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 269,\n                      columnNumber: 23\n                    }\n                  }, /*#__PURE__*/React.createElement(IconButton, {\n                    id: id + tableMeta.rowData[0] + tableMeta.rowIndex,\n                    size: props.dense ? \"small\" : \"medium\",\n                    color: \"primary\",\n                    className: `${classes.icons} ${!value || value === 0 ? classes.noCommentsIcon : \"\"} ${colInd === tableMeta.columnIndex && rowInd === tableMeta.rowIndex ? classes.iconSelected : \"\"}`,\n                    onClick: e => {\n                      e.stopPropagation();\n                      handleExpandClick(tableMeta.columnIndex, tableMeta.rowIndex, tableMeta.rowData[0], \"comment\");\n                    },\n                    \"aria-label\": \"show comments\",\n                    onMouseOver: () => {\n                      if (m1nSelectedRowsIndexes.indexOf(tableMeta.rowIndex) !== -1 && m1nSelectedRowsIndexes.length > 1) multiSelectMouseHoverColor(id, \"#dadbde\");\n                    },\n                    onMouseOut: () => {\n                      if (m1nSelectedRowsIndexes.indexOf(tableMeta.rowIndex) !== -1 && m1nSelectedRowsIndexes.length > 1) multiSelectMouseHoverColor(id, \"#efefef\");\n                    },\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 273,\n                      columnNumber: 25\n                    }\n                  }, /*#__PURE__*/React.createElement(ChatIcon, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 314,\n                      columnNumber: 27\n                    }\n                  }))));\n                }\n              };\n            }\n            break;\n\n          case \"wellsCounter\":\n            {\n              column.options = { ...column.options,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                  return /*#__PURE__*/React.createElement(Tooltip, {\n                    title: value.length > 0 ? \"Wells\" : \"Not Available\",\n                    placement: \"top\",\n                    style: {\n                      marginRight: \"10px\"\n                    },\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 329,\n                      columnNumber: 21\n                    }\n                  }, /*#__PURE__*/React.createElement(Badge, {\n                    badgeContent: value.length > 0 ? value.length : null,\n                    color: \"secondary\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 334,\n                      columnNumber: 23\n                    }\n                  }, /*#__PURE__*/React.createElement(IconButton, {\n                    size: props.dense ? \"small\" : \"medium\",\n                    color: \"primary\",\n                    className: `${classes.icons} ${!value || value.length === 0 ? classes.noOwnersIcon : \"\"} ${colInd === tableMeta.columnIndex && rowInd === tableMeta.rowIndex ? classes.iconSelected : \"\"}`,\n                    onClick: e => {\n                      e.stopPropagation();\n\n                      if (value && value.length > 0) {\n                        handleExpandClick(tableMeta.columnIndex, tableMeta.rowIndex, value, \"wellsPerOwner\");\n                      }\n                    },\n                    \"aria-label\": \"show owners\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 338,\n                      columnNumber: 25\n                    }\n                  }, /*#__PURE__*/React.createElement(WellIcon, {\n                    color: value && value.length > 0 ? \"#000\" : \"darkgrey\",\n                    opacity: \"1.0\",\n                    small: true,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 364,\n                      columnNumber: 27\n                    }\n                  }))));\n                }\n              };\n            }\n            break;\n\n          case \"contactsCounter\":\n            {\n              column.options = { ...column.options,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                  return /*#__PURE__*/React.createElement(Tooltip, {\n                    title: value || value === 0 ? \"Contacts\" : \"Add Contact\",\n                    placement: \"top\",\n                    style: {\n                      marginRight: \"10px\"\n                    },\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 385,\n                      columnNumber: 21\n                    }\n                  }, /*#__PURE__*/React.createElement(Badge, {\n                    badgeContent: value ? value : null,\n                    color: \"secondary\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 390,\n                      columnNumber: 23\n                    }\n                  }, /*#__PURE__*/React.createElement(IconButton, {\n                    size: props.dense ? \"small\" : \"medium\",\n                    color: \"primary\",\n                    className: `${classes.icons} ${!value || value === 0 ? classes.noCommentsIcon : \"\"} ${colInd === tableMeta.columnIndex && rowInd === tableMeta.rowIndex ? classes.iconSelected : \"\"}`,\n                    onClick: e => {\n                      e.stopPropagation();\n                      handleExpandClick(tableMeta.columnIndex, tableMeta.rowIndex, tableMeta.rowData[0], \"ownerContacts\");\n                    },\n                    \"aria-label\": \"show contacs\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 394,\n                      columnNumber: 25\n                    }\n                  }, /*#__PURE__*/React.createElement(ContactPhoneIcon, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 416,\n                      columnNumber: 27\n                    }\n                  }))));\n                }\n              };\n            }\n            break;\n\n          case \"ownerCount\":\n            {\n              column.options = { ...column.options,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                  return /*#__PURE__*/React.createElement(Tooltip, {\n                    title: value ? \"Owners\" : \"Not Available\",\n                    placement: \"top\",\n                    style: {\n                      marginRight: \"10px\"\n                    },\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 431,\n                      columnNumber: 21\n                    }\n                  }, /*#__PURE__*/React.createElement(Badge, {\n                    badgeContent: value ? value : null,\n                    color: \"secondary\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 436,\n                      columnNumber: 23\n                    }\n                  }, /*#__PURE__*/React.createElement(IconButton, {\n                    size: props.dense ? \"small\" : \"medium\",\n                    color: \"primary\",\n                    className: `${classes.icons} ${!value ? classes.noOwnersIcon : \"\"} ${colInd === tableMeta.columnIndex && rowInd === tableMeta.rowIndex ? classes.iconSelected : \"\"}`,\n                    onClick: e => {\n                      e.stopPropagation();\n\n                      if (value && value > 0) {\n                        handleExpandClick(tableMeta.columnIndex, tableMeta.rowIndex, tableMeta.rowData[0], \"owner\");\n                      }\n                    },\n                    \"aria-label\": \"show owners\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 440,\n                      columnNumber: 25\n                    }\n                  }, /*#__PURE__*/React.createElement(PeopleAltIcon, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 464,\n                      columnNumber: 27\n                    }\n                  }))));\n                }\n              };\n            }\n            break;\n\n          case \"owners\":\n            //ownerPerContactCount\n            {\n              column.options = { ...column.options,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                  return /*#__PURE__*/React.createElement(Tooltip, {\n                    title: value.length > 0 ? \"Owners\" : \"Not Available\",\n                    placement: \"top\",\n                    style: {\n                      marginRight: \"10px\"\n                    },\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 480,\n                      columnNumber: 21\n                    }\n                  }, /*#__PURE__*/React.createElement(Badge, {\n                    badgeContent: value.length > 0 ? value.length : null,\n                    color: \"secondary\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 485,\n                      columnNumber: 23\n                    }\n                  }, /*#__PURE__*/React.createElement(IconButton, {\n                    size: props.dense ? \"small\" : \"medium\",\n                    color: \"primary\",\n                    className: `${classes.icons} ${!value || value.length === 0 ? classes.noOwnersIcon : \"\"}  ${colInd === tableMeta.columnIndex && rowInd === tableMeta.rowIndex ? classes.iconSelected : \"\"}`,\n                    onClick: e => {\n                      e.stopPropagation();\n\n                      if (value.length > 0) {\n                        handleExpandClick(tableMeta.columnIndex, tableMeta.rowIndex, value, \"ownersPerContacts\");\n                      }\n                    },\n                    \"aria-label\": \"show owners\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 489,\n                      columnNumber: 25\n                    }\n                  }, /*#__PURE__*/React.createElement(PeopleAltIcon, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 515,\n                      columnNumber: 27\n                    }\n                  }))));\n                }\n              };\n            }\n            break;\n\n          case \"tags\":\n            {\n              column.options = { ...column.options,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                  let id = props.targetLabel + tableMeta.columnIndex;\n                  return /*#__PURE__*/React.createElement(\"div\", {\n                    style: {\n                      marginRight: \"10px\"\n                    },\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 532,\n                      columnNumber: 21\n                    }\n                  }, /*#__PURE__*/React.createElement(Tooltip, {\n                    title: value && value[1] === 0 ? \"Add Tags\" : \"Tags\",\n                    placement: \"top\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 533,\n                      columnNumber: 23\n                    }\n                  }, /*#__PURE__*/React.createElement(Badge, {\n                    id: id + tableMeta.rowData[0] + tableMeta.rowIndex,\n                    className: `${classes.TagSample} ${colInd === tableMeta.columnIndex && rowInd === tableMeta.rowIndex ? classes.iconSelected : \"\"}`,\n                    badgeContent: value[1],\n                    color: \"secondary\",\n                    onClick: e => {\n                      e.preventDefault();\n                      e.stopPropagation();\n                      handleExpandClick(tableMeta.columnIndex, tableMeta.rowIndex, tableMeta.rowData[0], \"tag\");\n                    },\n                    onMouseOver: () => {\n                      if (m1nSelectedRowsIndexes.indexOf(tableMeta.rowIndex) !== -1 && m1nSelectedRowsIndexes.length > 1) multiSelectMouseHoverColor(id, \"#dadbde\");\n                    },\n                    onMouseOut: () => {\n                      if (m1nSelectedRowsIndexes.indexOf(tableMeta.rowIndex) !== -1 && m1nSelectedRowsIndexes.length > 1) multiSelectMouseHoverColor(id, \"#efefef\");\n                    },\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 537,\n                      columnNumber: 25\n                    }\n                  }, value[0] && value[0].length > 0 ? /*#__PURE__*/React.createElement(React.Fragment, {\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 577,\n                      columnNumber: 29\n                    }\n                  }, /*#__PURE__*/React.createElement(\"p\", {\n                    className: \"first\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 578,\n                      columnNumber: 31\n                    }\n                  }, value[0].join(\", \")), /*#__PURE__*/React.createElement(\"p\", {\n                    className: \"two\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 579,\n                      columnNumber: 31\n                    }\n                  }, \"...\")) : /*#__PURE__*/React.createElement(\"p\", {\n                    className: \"three\",\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 582,\n                      columnNumber: 29\n                    }\n                  }, \"No Tags\"))));\n                }\n              };\n            }\n            break;\n\n          case \"fullContactAddress\":\n            {\n              column.options = { ...column.options,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                  return /*#__PURE__*/React.createElement(CellContentEdition, {\n                    id: tableMeta.rowData[0],\n                    content: {\n                      address1: tableMeta.rowData[1],\n                      address2: tableMeta.rowData[2],\n                      city: tableMeta.rowData[3],\n                      state: tableMeta.rowData[4],\n                      zip: tableMeta.rowData[5],\n                      country: tableMeta.rowData[6]\n                    },\n                    targetLabel: props.targetLabel,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 599,\n                      columnNumber: 21\n                    }\n                  });\n                }\n              };\n            }\n            break;\n\n          default:\n            {\n              column.options = { ...column.options,\n                customBodyRender: (value, tableMeta, updateValue) => {\n                  const valueFormatter = v => {\n                    if (column.name === \"appraisedValue\") return formatter.format(v);\n                    if (column.name === \"lastUpdateAt\") return anyToDate(v).toLocaleString(\"en-US\", {\n                      year: \"numeric\",\n                      day: \"numeric\",\n                      month: \"numeric\"\n                    });\n                    return v;\n                  }; ////// if non editable column\n\n\n                  if (!column.editable) {\n                    //// if no value\n                    if (value === \"\" || value === null || !value) return value; //// if value\n\n                    return /*#__PURE__*/React.createElement(\"div\", {\n                      className: classes.cellDataDiv,\n                      onClick: e => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                      },\n                      __self: this,\n                      __source: {\n                        fileName: _jsxFileName,\n                        lineNumber: 643,\n                        columnNumber: 23\n                      }\n                    }, valueFormatter(value));\n                  }\n\n                  return /*#__PURE__*/React.createElement(\"div\", {\n                    style: {\n                      display: \"flex\"\n                    },\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 656,\n                      columnNumber: 21\n                    }\n                  }, props.targetLabel === \"contact\" && column.name === \"name\" &&\n                  /*#__PURE__*/\n                  ///////////////////////////////////////////////////\n                  // <ConfigProvider colors={['red', 'green', 'blue']}>\n                  React.createElement(Avatar, {\n                    color: Avatar.getRandomColor(value, [\"#b5d2f6\", \"#ade2e9\", \"#eaeaea\", \"#f2c1e2\", \"#d7d6fb\"]),\n                    fgColor: \"#000\",\n                    name: valueFormatter(value),\n                    size: \"35\",\n                    round: true,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 662,\n                      columnNumber: 29\n                    }\n                  }) // </ConfigProvider>\n                  ///////////////////////////////////////////////////\n                  , /*#__PURE__*/React.createElement(CellContentEdition, {\n                    id: tableMeta.rowData[0],\n                    content: {\n                      [column.name]: valueFormatter(value)\n                    },\n                    targetLabel: props.targetLabel,\n                    __self: this,\n                    __source: {\n                      fileName: _jsxFileName,\n                      lineNumber: 679,\n                      columnNumber: 23\n                    }\n                  }));\n                }\n              };\n            }\n            break;\n        }\n      });\n      setColumns([...props.columns]);\n    }\n  }, [props.columns, props.rows, colInd, rowInd, m1nSelectedRowsIds, m1nSelectedRowsIndexes, m1nSelectedRowsTracks]);\n\n  const handleExpandClick = async (cIndex, rIndex, idOrValues, type) => {\n    setColInd(cIndex);\n    setRowInd(rIndex);\n    setExpandedObject(idOrValues);\n    setOpenDialog(type);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setColInd(null);\n    setRowInd(null);\n    setExpandedObject(null);\n  };\n\n  const handleOpenExpandableCard = () => {\n    setShowExpandableCard(true);\n  };\n\n  const handleCloseExpandableCard = () => {\n    setShowExpandableCard(false);\n    setStateApp(state => ({ ...state,\n      popupOpen: false,\n      expandedCard: false\n    }));\n  };\n\n  const options = {\n    filterType: \"multiselect\",\n    rowsPerPage: props.startPaginationAt ? props.startPaginationAt : 10,\n    rowsPerPageOptions: props.rows && props.rows.length > 100 ? [10, 25, 100, 1000] : props.rows && props.rows.length > 25 ? [10, 25, 100] : props.rows && props.rows.length > 10 ? [10, 25] : [],\n    selectableRows: \"multiple\",\n    //// triggers when a row/s is selected ////\n    onRowsSelect: (currentRowsSelected, rowsSelected) => {\n      if (rowsSelected && rowsSelected.length > 0) {\n        let indexArray = rowsSelected.map(d => d.index).sort((a, b) => a - b);\n\n        if (rows && indexArray) {\n          if (rows.length > 0 && indexArray.length > 0) {\n            let selectedRows = rows.filter((row, index) => indexArray.indexOf(index) !== -1);\n            let selectedRowsIds = selectedRows.map(row => {\n              if (row.id) return row.id;\n              if (row.Id) return row.Id;\n              if (row._id) return row._id;\n            });\n            setM1nSelectedRowsIds(selectedRowsIds);\n          } else setM1nSelectedRowsIds([]);\n        }\n\n        setM1nSelectedRowsIndexes(indexArray);\n      } else {\n        setM1nSelectedRowsIndexes([]);\n        setM1nSelectedRowsIds([]);\n      }\n    },\n    onRowsDelete: rowsDeleted => {\n      handleExpandClick(null, null, null, \"deleteOwnersFromContact\");\n      return false;\n    },\n    rowsSelected: m1nSelectedRowsIndexes,\n    //// allows you to customize the top bar of selected items ////\n    customToolbarSelect: props.header === \"Interest Owners Tied to Contact\" ? false : (selectedRows, displayData, setSelectedRow) => {\n      //// if contacts set the multi selection top bar: ////\n      if (props.header === \"Owner's Contacts\" || props.header === \"Contacts\") {\n        const getSelectedRows = () => {\n          const selectedRows = [];\n\n          for (let i = 0; i < m1nSelectedRowsIndexes.length; i++) {\n            selectedRows.push(rows[m1nSelectedRowsIndexes[i]]);\n          }\n\n          return selectedRows;\n        };\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          style: {\n            height: \"48px\",\n            display: \"flex\"\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          color: \"secondary\",\n          startIcon: /*#__PURE__*/React.createElement(ContactPhoneRoundedIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 798,\n              columnNumber: 32\n            }\n          }),\n          className: classes.multiSelectionTopBarButtons,\n          onClick: () => {\n            handleExpandClick(null, null, getSelectedRows(), \"buyContactsInfo\");\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 796,\n            columnNumber: 19\n          }\n        }, \"Buy Info\"), /*#__PURE__*/React.createElement(Button, {\n          color: \"secondary\",\n          startIcon: /*#__PURE__*/React.createElement(EmailRoundedIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 813,\n              columnNumber: 32\n            }\n          }),\n          className: classes.multiSelectionTopBarButtons,\n          onClick: () => {\n            handleExpandClick(null, null, getSelectedRows(), \"sendMailers\");\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 19\n          }\n        }, \"Mailers\"), /*#__PURE__*/React.createElement(Button, {\n          color: \"secondary\",\n          startIcon: /*#__PURE__*/React.createElement(LocalPrintshopRoundedIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 828,\n              columnNumber: 32\n            }\n          }),\n          className: classes.multiSelectionTopBarButtons,\n          onClick: () => {\n            handleExpandClick(null, null, getSelectedRows(), \"printLabels\");\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 826,\n            columnNumber: 19\n          }\n        }, \"Labels\"), /*#__PURE__*/React.createElement(Divider, {\n          orientation: \"vertical\",\n          flexItem: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 841,\n            columnNumber: 19\n          }\n        }), /*#__PURE__*/React.createElement(Tooltip, {\n          title: \"Delete\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(IconButton, {\n          size: \"medium\",\n          style: {\n            margin: \"0 5px\"\n          },\n          onClick: e => {\n            handleExpandClick(null, null, null, \"deleteContact\");\n          },\n          \"aria-label\": \"delete\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 21\n          }\n        }, /*#__PURE__*/React.createElement(DeleteIcon, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 851,\n            columnNumber: 23\n          }\n        }))));\n      } //// default empty top bar ////\n\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          height: \"48px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 860,\n          columnNumber: 15\n        }\n      });\n    },\n    customToolbar: () => {\n      return /*#__PURE__*/React.createElement(React.Fragment, null, props.uploadIcon &&\n      /*#__PURE__*/\n      //////Upload Icon/////////////////////////\n      React.createElement(\"span\", {\n        className: classes.addIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 873,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        title: `Upload ${props.targetLabel.charAt(0).toUpperCase() + props.targetLabel.slice(1)}s`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 874,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        size: \"medium\",\n        onClick: e => {\n          routeChange(\"/bulkupload\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 880,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(BackupIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 886,\n          columnNumber: 19\n        }\n      })))), props.addAble &&\n      /*#__PURE__*/\n      //////Add Icon/////////////////////////\n      React.createElement(\"span\", {\n        className: classes.addIcon,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 893,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Tooltip, {\n        title: `Add${props.targetLabel ? \" \" + props.targetLabel.charAt(0).toUpperCase() + props.targetLabel.slice(1) : \"\"}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 894,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(IconButton, {\n        size: \"medium\",\n        onClick: e => {\n          e.stopPropagation();\n          if (props.addAble.type && (props.addAble.type === \"contact\" || props.addAble.type === \"contactToOwner\")) handleExpandClick(null, null, null, \"addContact\");\n          if (props.addAble.type && props.addAble.type === \"ownerToContact\") handleExpandClick(null, null, null, \"addOwnerToContact\");\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(AddCircleOutlineRoundedIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 920,\n          columnNumber: 19\n        }\n      })))));\n    },\n    onRowClick: (rowData, {\n      dataIndex,\n      rowIndex\n    }) => {\n      setSelectedRow(rows[dataIndex]);\n\n      if (props.targetLabel === \"owner\") {\n        setStateApp(state => ({ ...state,\n          selectedOwner: rows[dataIndex]\n        }));\n        setSubComponent( /*#__PURE__*/React.createElement(OwnersDetailCard, {\n          ownerId: rows[dataIndex].id,\n          wellsIdsArray: rows[dataIndex].wellsCounter,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 934,\n            columnNumber: 11\n          }\n        }));\n        setTitle(rows[dataIndex].name);\n        setSubTitle(rows[dataIndex].interestType);\n        handleOpenExpandableCard();\n      }\n\n      if (props.targetLabel === \"well\") {\n        setStateApp(state => ({ ...state,\n          selectedWellId: rowData[0]\n        }));\n        setStateApp(state => ({ ...state,\n          selectedWell: rows[dataIndex]\n        }));\n        setSubComponent( /*#__PURE__*/React.createElement(WellCardProvider, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 947,\n            columnNumber: 25\n          }\n        }));\n        setTitle(rows[dataIndex].wellName);\n        setSubTitle(rows[dataIndex].operator);\n        handleOpenExpandableCard();\n      }\n\n      if (props.targetLabel === \"contact\") {\n        setStateApp(stateApp => ({ ...stateApp,\n          selectedContact: rows[dataIndex].id\n        }));\n        setSubComponent( /*#__PURE__*/React.createElement(ContactDetailCard, {\n          contactId: rows[dataIndex]._id,\n          handleCloseExpandableCard: handleCloseExpandableCard,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 960,\n            columnNumber: 11\n          }\n        }));\n        setTitle(\"CONTACT DETAILS\");\n        setSubTitle(\" \");\n        handleOpenExpandableCard();\n      }\n    }\n  };\n  let history = useHistory();\n\n  let routeChange = route => {\n    history.push(route);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\",\n      position: \"relative\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 5\n    }\n  }, rows && !props.loading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 981,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(MUIDataTable, {\n    className: classes.table,\n    title: props.header,\n    data: rows,\n    columns: columns,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 982,\n      columnNumber: 11\n    }\n  }), openDialog && /*#__PURE__*/React.createElement(Dialog, {\n    className: classes.dialog,\n    open: openDialog ? true : false,\n    onClose: handleCloseDialog,\n    fullWidth: openDialog === \"comment\" || openDialog === \"owner\" || openDialog === \"wellsPerOwner\" || openDialog === \"ownerContacts\" || openDialog === \"ownersPerContacts\" || openDialog === \"buyContactsInfo\" || openDialog === \"sendMailers\" || openDialog === \"printLabels\" ? true : false,\n    maxWidth: openDialog === \"ownerContacts\" ? \"xl\" : openDialog === \"owner\" || openDialog === \"ownersPerContacts\" || openDialog === \"wellsPerOwner\" ? \"lg\" : openDialog === \"addContact\" || openDialog === \"addOwnerToContact\" || openDialog === \"deleteOwnersFromContact\" || openDialog === \"deleteContact\" ? \"xs\" : \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 991,\n      columnNumber: 13\n    }\n  }, openDialog === \"comment\" && /*#__PURE__*/React.createElement(Comments, {\n    focus: true,\n    targetSourceId: expandedObject,\n    targetLabel: props.targetLabel,\n    multipleIds: m1nSelectedRowsIndexes.indexOf(rowInd) !== -1 && m1nSelectedRowsIndexes.length > 1 ? m1nSelectedRowsIds : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1023,\n      columnNumber: 17\n    }\n  }), openDialog === \"tag\" && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tagsDiv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1036,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Tags, {\n    targetSourceId: expandedObject,\n    targetLabel: props.targetLabel,\n    multipleIds: m1nSelectedRowsIndexes.indexOf(rowInd) !== -1 && m1nSelectedRowsIndexes.length > 1 ? m1nSelectedRowsIds : null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1037,\n      columnNumber: 19\n    }\n  })), openDialog === \"owner\" && /*#__PURE__*/React.createElement(M1nTable, {\n    selectedWell: {\n      id: expandedObject\n    },\n    parent: \"OwnersPerWell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1050,\n      columnNumber: 17\n    }\n  }), openDialog === \"wellsPerOwner\" && /*#__PURE__*/React.createElement(M1nTable, {\n    wellsIdsArray: expandedObject,\n    parent: \"WellsPerOwner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1056,\n      columnNumber: 17\n    }\n  }), openDialog === \"ownerContacts\" && /*#__PURE__*/React.createElement(M1nTable, {\n    parent: \"ownerContacts\",\n    ownerId: expandedObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1062,\n      columnNumber: 17\n    }\n  }), openDialog === \"ownersPerContacts\" && /*#__PURE__*/React.createElement(M1nTable, {\n    parent: \"ownersPerContacts\",\n    ownersIdsArray: expandedObject,\n    contactId: rows[rowInd]._id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1065,\n      columnNumber: 17\n    }\n  }), openDialog === \"addContact\" && props.targetLabel === \"contact\" && /*#__PURE__*/React.createElement(AddContactDialogContent, {\n    onClose: handleCloseDialog,\n    parent: props.addAble.parent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1074,\n      columnNumber: 19\n    }\n  }), openDialog === \"addOwnerToContact\" && /*#__PURE__*/React.createElement(AddOwnerToContactDialogContent, {\n    onClose: handleCloseDialog,\n    parent: props.addAble.parent,\n    existingOwners: props.addAble.existingOwners,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1080,\n      columnNumber: 17\n    }\n  }), openDialog === \"deleteOwnersFromContact\" && /*#__PURE__*/React.createElement(DeleteConfirmationDialogContent, {\n    onClose: handleCloseDialog,\n    deleteFunc: props.deleteFunc,\n    m1nSelectedRowsIds: m1nSelectedRowsIds,\n    setM1nSelectedRowsIndexes: setM1nSelectedRowsIndexes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1087,\n      columnNumber: 17\n    }\n  }, `Do you want to permanently delete the owner${m1nSelectedRowsIds && m1nSelectedRowsIds.length > 1 ? \"s\" : \"\"} from  this contact?`), openDialog === \"deleteContact\" && /*#__PURE__*/React.createElement(DeleteConfirmationDialogContent, {\n    onClose: handleCloseDialog,\n    deleteFunc: props.deleteFunc,\n    m1nSelectedRowsIds: m1nSelectedRowsIds,\n    setM1nSelectedRowsIndexes: setM1nSelectedRowsIndexes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1101,\n      columnNumber: 17\n    }\n  }, props.header === \"Owner's Contacts\" && `Do you want to remove the contact${m1nSelectedRowsIds && m1nSelectedRowsIds.length > 1 ? \"s\" : \"\"} from this owner?`, props.header === \"Contacts\" && `Do you want to permanently delete the contact${m1nSelectedRowsIds && m1nSelectedRowsIds.length > 1 ? \"s\" : \"\"}?`), openDialog === \"buyContactsInfo\" && /*#__PURE__*/React.createElement(BuyContactsInfoDialogContent, {\n    onClose: handleCloseDialog,\n    rows: expandedObject,\n    setRows: setExpandedObject,\n    setSelectedRow: setSelectedRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1123,\n      columnNumber: 17\n    }\n  }), openDialog === \"sendMailers\" && /*#__PURE__*/React.createElement(SendMailersDialogContent, {\n    onClose: handleCloseDialog,\n    rows: expandedObject,\n    setRows: setExpandedObject,\n    setSelectedRow: setSelectedRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1131,\n      columnNumber: 17\n    }\n  }), openDialog === \"printLabels\" && /*#__PURE__*/React.createElement(PrintLabelsDialogContent, {\n    onClose: handleCloseDialog,\n    rows: expandedObject,\n    setRows: setExpandedObject,\n    setSelectedRow: setSelectedRow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1139,\n      columnNumber: 17\n    }\n  })), showExpandableCard && /*#__PURE__*/React.createElement(Dialog, {\n    className: classes.dialogExpCard,\n    fullWidth: true,\n    maxWidth: \"xl\",\n    open: showExpandableCard,\n    onClose: handleCloseExpandableCard,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1150,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ExpandableCardProvider, {\n    expanded: true,\n    handleCloseExpandableCard: handleCloseExpandableCard,\n    component: subComponent,\n    title: title,\n    subTitle: subTitle,\n    parent: \"table\",\n    mouseX: 0,\n    mouseY: 0,\n    position: \"relative\",\n    cardLeft: \"0\",\n    cardTop: \"0\",\n    zIndex: 1201,\n    cardWidthExpanded: \"100%\",\n    cardHeightExpanded: \"100%\",\n    targetSourceId: props.targetLabel === \"owner\" || props.targetLabel === \"well\" ? selectedRow.id : selectedRow._id,\n    targetLabel: props.targetLabel,\n    noTrackAvailable: props.targetLabel === \"contact\" ? true : false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1157,\n      columnNumber: 15\n    }\n  }))) : /*#__PURE__*/React.createElement(MUIDataTable, {\n    className: classes.table,\n    title: props.header,\n    data: [{\n      loader: \" \"\n    }],\n    columns: [{\n      name: \"loader\",\n      label: \" \"\n    }],\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1186,\n      columnNumber: 9\n    }\n  }) // <Skeleton variant=\"rect\" height={200} style={{ minWidth: \"100%\" }}>\n  //   <Typography variant=\"button\" style={{ visibility: \"visible\" }}>\n  //     Not Available\n  //   </Typography>\n  // </Skeleton>\n  , props.loading && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: \"15px\",\n      position: \"absolute\",\n      top: \"95px\",\n      left: \"30px\",\n      zIndex: \"150\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1204,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    size: 80,\n    disableShrink: true,\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1213,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Shared/M1nTable/components/Table.js"],"names":["React","useState","useContext","useEffect","useHistory","CircularProgress","ExpandableCardProvider","WellCardProvider","OwnersDetailCard","ContactDetailCard","AppContext","Tags","Comments","Dialog","Skeleton","makeStyles","MUIDataTable","IconButton","Typography","TrackToggleButton","Tooltip","Badge","ChatIcon","PeopleAltIcon","M1nTable","WellIcon","ContactPhoneIcon","AddCircleOutlineRoundedIcon","AddContactDialogContent","AddOwnerToContactDialogContent","DeleteConfirmationDialogContent","Button","LocalPrintshopRoundedIcon","EmailRoundedIcon","ContactPhoneRoundedIcon","BuyContactsInfoDialogContent","PrintLabelsDialogContent","SendMailersDialogContent","BackupIcon","anyToDate","DeleteIcon","Divider","CellContentEdition","Avatar","ConfigProvider","ListItemAvatar","useStyles","theme","root","width","table","padding","props","dense","backgroundColor","zIndex","paddingRight","icons","marginLeft","iconSelected","palette","secondary","main","color","TagSample","borderRadius","maxWidth","minWidth","cursor","marginTop","marginBottom","height","overflow","wordBreak","marginRight","tagsDiv","margin","noOwnersIcon","noCommentsIcon","dialogExpCard","addIcon","cellDataDiv","position","multiSelectionTopBarButtons","fontWeight","formatter","Intl","NumberFormat","style","currency","maximumSignificantDigits","SubTable","classes","stateApp","setStateApp","rows","setRows","columns","setColumns","colInd","setColInd","rowInd","setRowInd","expandedObject","setExpandedObject","openDialog","setOpenDialog","showExpandableCard","setShowExpandableCard","selectedRow","setSelectedRow","subComponent","setSubComponent","title","setTitle","subTitle","setSubTitle","m1nSelectedRowsIndexes","setM1nSelectedRowsIndexes","m1nSelectedRowsIds","setM1nSelectedRowsIds","m1nSelectedRowsTracks","setM1nSelectedRowsTracks","orderByTracks","sort","a","b","isTracked","length","selectedRowsTracks","map","ind","multiSelectMouseHoverColor","id","i","document","getElementById","forEach","column","name","options","customBodyRender","value","tableMeta","updateValue","targetLabel","columnIndex","rowData","rowIndex","indexOf","undefined","e","stopPropagation","handleExpandClick","preventDefault","join","address1","address2","city","state","zip","country","valueFormatter","v","format","toLocaleString","year","day","month","editable","display","getRandomColor","cIndex","rIndex","idOrValues","type","handleCloseDialog","handleOpenExpandableCard","handleCloseExpandableCard","popupOpen","expandedCard","filterType","rowsPerPage","startPaginationAt","rowsPerPageOptions","selectableRows","onRowsSelect","currentRowsSelected","rowsSelected","indexArray","d","index","selectedRows","filter","row","selectedRowsIds","Id","_id","onRowsDelete","rowsDeleted","customToolbarSelect","header","displayData","getSelectedRows","push","customToolbar","uploadIcon","charAt","toUpperCase","slice","routeChange","addAble","onRowClick","dataIndex","selectedOwner","wellsCounter","interestType","selectedWellId","selectedWell","wellName","operator","selectedContact","history","route","loading","dialog","parent","existingOwners","deleteFunc","loader","label","top","left"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ExpandableCardProvider from \"../../../ExpandableCard/ExpandableCardProvider\";\r\nimport WellCardProvider from \"../../../WellCard/WellCardProvider\";\r\nimport OwnersDetailCard from \"../../../OwnersDetailCard/OwnersDetailCard\";\r\nimport ContactDetailCard from \"../../../ContactDetailCard/ContactDetailCard\";\r\nimport { AppContext } from \"../../../../AppContext\";\r\nimport Tags from \"../../Tagger\";\r\nimport Comments from \"../../Comments\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport Skeleton from \"@material-ui/lab/Skeleton\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport MUIDataTable from \"mui-datatables\";\r\nimport { IconButton, Typography } from \"@material-ui/core\";\r\nimport TrackToggleButton from \"../../TrackToggleButton\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport Badge from \"@material-ui/core/Badge\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport PeopleAltIcon from \"@material-ui/icons/PeopleAlt\";\r\nimport M1nTable from \"../M1nTable\";\r\nimport WellIcon from \"../../svgIcons/well\";\r\nimport ContactPhoneIcon from \"@material-ui/icons/ContactPhone\";\r\nimport AddCircleOutlineRoundedIcon from \"@material-ui/icons/AddCircleOutlineRounded\";\r\nimport AddContactDialogContent from \"./SubComponents/AddContactDialogContent\";\r\nimport AddOwnerToContactDialogContent from \"./SubComponents/AddOwnerToContactDialogContent\";\r\nimport DeleteConfirmationDialogContent from \"./SubComponents/DeleteConfirmationDialogContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LocalPrintshopRoundedIcon from \"@material-ui/icons/LocalPrintshopRounded\";\r\nimport EmailRoundedIcon from \"@material-ui/icons/EmailRounded\";\r\nimport ContactPhoneRoundedIcon from \"@material-ui/icons/ContactPhoneRounded\";\r\nimport BuyContactsInfoDialogContent from \"./SubComponents/BuyContactsInfoDialogContent\";\r\nimport PrintLabelsDialogContent from \"./SubComponents/PrintLabelsDialogContent\";\r\nimport SendMailersDialogContent from \"./SubComponents/SendMailersDialogContent\";\r\nimport BackupIcon from \"@material-ui/icons/Backup\";\r\nimport { anyToDate } from \"@amcharts/amcharts4/.internal/core/utils/Utils\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport CellContentEdition from \"./SubComponents/CellContentEdition\";\r\nimport Avatar, { ConfigProvider } from \"react-avatar\";\r\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  table: {\r\n    \"& .MuiTableCell-body\": {\r\n      padding: (props) => (props.dense ? \"0 !important\" : \"12px 16px\"),\r\n    },\r\n    \"& .MuiTableHead-root\": {\r\n      \"& th\": {\r\n        backgroundColor: \"#F2F2F2\",\r\n        zIndex: \"auto\",\r\n        padding: (props) => (props.dense ? \"10px\" : null),\r\n      },\r\n      \"& .MuiTableCell-paddingCheckbox\": {\r\n        padding: (props) => (props.dense ? \"0 !important\" : \"16px\"),\r\n      },\r\n    },\r\n    \"& tr\": {\r\n      paddingRight: (props) => (props.dense ? \"12px\" : null),\r\n    },\r\n  },\r\n  icons: {\r\n    backgroundColor: (props) => (props.dense ? \"transparent\" : \"#efefef\"),\r\n    marginLeft: \"auto\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#dadbde !important\",\r\n    },\r\n  },\r\n  iconSelected: {\r\n    backgroundColor: `${theme.palette.secondary.main} !important`,\r\n    color: \"#011133 !important\",\r\n    \"& p\": {\r\n      color: \"#011133 !important\",\r\n    },\r\n  },\r\n  TagSample: {\r\n    backgroundColor: \"#efefef\",\r\n    color: \"rgb(1,17,51)\",\r\n    borderRadius: \"12px\",\r\n    width: \"100%\",\r\n    maxWidth: \"180px\",\r\n    minWidth: \"80px\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#dadbde !important\",\r\n      cursor: \"pointer\",\r\n    },\r\n    \"& p\": {\r\n      marginTop: (props) => (props.dense ? \"5px\" : \"13px\"),\r\n      marginBottom: (props) => (props.dense ? \"5px\" : \"13px\"),\r\n    },\r\n    \"& .first\": {\r\n      marginLeft: (props) => (props.dense ? \"5px\" : \"13px\"),\r\n      height: \"20px\",\r\n      overflow: \"hidden\",\r\n      wordBreak: \"break-all\",\r\n    },\r\n    \"& .two\": {\r\n      marginRight: (props) => (props.dense ? \"5px\" : \"13px\"),\r\n    },\r\n    \"& .three\": {\r\n      marginLeft: (props) => (props.dense ? \"5px\" : \"13px\"),\r\n      marginRight: (props) => (props.dense ? \"5px\" : \"13px\"),\r\n      color: \"darkgrey\",\r\n    },\r\n  },\r\n  tagsDiv: {\r\n    margin: \"8px\",\r\n  },\r\n  noOwnersIcon: {\r\n    color: \"darkgrey\",\r\n    \"&:hover\": {\r\n      cursor: \"auto\",\r\n      backgroundColor: \"rgba(255, 255, 255, 0)\",\r\n    },\r\n  },\r\n  noCommentsIcon: {\r\n    color: \"darkgrey\",\r\n  },\r\n  dialogExpCard: {\r\n    \"& .MuiDialog-paperScrollPaper\": {\r\n      height: \"100%\",\r\n    },\r\n  },\r\n  addIcon: { \"& .MuiIconButton-root:hover\": { color: \"#011133\" } },\r\n  cellDataDiv: {\r\n    padding: \"10px\",\r\n    position: \"relative\",\r\n    borderRadius: \"7px\",\r\n    width: \"fit-content\",\r\n    cursor: \"text\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"#fff !important\",\r\n    },\r\n  },\r\n  multiSelectionTopBarButtons: {\r\n    margin: \"6px 12px\",\r\n    fontWeight: \"600\",\r\n    color: \"#082768\",\r\n  },\r\n}));\r\n\r\nvar formatter = new Intl.NumberFormat(\"en-US\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  maximumSignificantDigits: 21,\r\n});\r\n\r\nexport default function SubTable(props) {\r\n  const classes = useStyles(props);\r\n\r\n  const [stateApp, setStateApp] = useContext(AppContext);\r\n  const [rows, setRows] = useState(null);\r\n  const [columns, setColumns] = useState([]);\r\n\r\n  const [colInd, setColInd] = useState();\r\n  const [rowInd, setRowInd] = useState();\r\n  const [expandedObject, setExpandedObject] = useState();\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const [showExpandableCard, setShowExpandableCard] = useState(false);\r\n  const [selectedRow, setSelectedRow] = useState();\r\n  const [subComponent, setSubComponent] = useState(null);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [subTitle, setSubTitle] = useState(\"\");\r\n\r\n  const [m1nSelectedRowsIndexes, setM1nSelectedRowsIndexes] = useState([]);\r\n  const [m1nSelectedRowsIds, setM1nSelectedRowsIds] = useState([]);\r\n  const [m1nSelectedRowsTracks, setM1nSelectedRowsTracks] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (props.rows) {\r\n      if (props.orderByTracks)\r\n        setRows([\r\n          ...props.rows.sort((a, b) => {\r\n            return b.isTracked - a.isTracked;\r\n          }),\r\n        ]);\r\n      else setRows([...props.rows]);\r\n    }\r\n  }, [props.rows, props.orderByTracks]);\r\n\r\n  useEffect(() => {\r\n    if (rows && m1nSelectedRowsIndexes) {\r\n      if (rows.length > 0 && m1nSelectedRowsIndexes.length > 0) {\r\n        let selectedRowsTracks = m1nSelectedRowsIndexes.map((ind) => {\r\n          if (rows[ind] && rows[ind].isTracked) return rows[ind].isTracked;\r\n        });\r\n        setM1nSelectedRowsTracks(selectedRowsTracks);\r\n      } else setM1nSelectedRowsTracks([]);\r\n    }\r\n  }, [rows, m1nSelectedRowsIndexes, props.columns]);\r\n\r\n  const multiSelectMouseHoverColor = (id, color) => {\r\n    for (let i = 0; i < m1nSelectedRowsIndexes.length; i++) {\r\n      if (\r\n        document.getElementById(\r\n          id + m1nSelectedRowsIds[i] + m1nSelectedRowsIndexes[i]\r\n        )\r\n      )\r\n        document.getElementById(\r\n          id + m1nSelectedRowsIds[i] + m1nSelectedRowsIndexes[i]\r\n        ).style.backgroundColor = color;\r\n    }\r\n  };\r\n\r\n  ////setting all icons columns/////\r\n  useEffect(() => {\r\n    if (props.columns) {\r\n      props.columns.forEach((column) => {\r\n        switch (column.name) {\r\n          case \"isTracked\":\r\n            {\r\n              column.options = {\r\n                ...column.options,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                  let id = props.targetLabel + tableMeta.columnIndex;\r\n                  return (\r\n                    <TrackToggleButton\r\n                      id={id + tableMeta.rowData[0] + tableMeta.rowIndex}\r\n                      target={{ isTracked: value }}\r\n                      targetLabel={props.targetLabel}\r\n                      targetSourceId={tableMeta.rowData[0]}\r\n                      dark\r\n                      multipleIds={\r\n                        m1nSelectedRowsIndexes.indexOf(tableMeta.rowIndex) !==\r\n                          -1 && m1nSelectedRowsIndexes.length > 1\r\n                          ? m1nSelectedRowsIds\r\n                          : null\r\n                      }\r\n                      multipleTracks={\r\n                        m1nSelectedRowsIndexes.indexOf(tableMeta.rowIndex) !==\r\n                          -1 && m1nSelectedRowsIndexes.length > 1\r\n                          ? m1nSelectedRowsTracks\r\n                          : null\r\n                      }\r\n                      multiSelectMouseHoverColor={\r\n                        m1nSelectedRowsIndexes.indexOf(tableMeta.rowIndex) !==\r\n                          -1 && m1nSelectedRowsIndexes.length > 1\r\n                          ? multiSelectMouseHoverColor\r\n                          : null\r\n                      }\r\n                      idBase={id}\r\n                      iconZiseSmall={props.dense ? true : undefined}\r\n                    />\r\n                  );\r\n                },\r\n              };\r\n            }\r\n\r\n            break;\r\n          case \"commentsCounter\":\r\n            {\r\n              column.options = {\r\n                ...column.options,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                  let id = props.targetLabel + tableMeta.columnIndex;\r\n\r\n                  return (\r\n                    <Tooltip\r\n                      title={\r\n                        !value || value === 0 ? \"Add Comments\" : \"Comments\"\r\n                      }\r\n                      placement=\"top\"\r\n                      style={{ marginRight: \"10px\" }}\r\n                    >\r\n                      <Badge\r\n                        badgeContent={value ? value : null}\r\n                        color=\"secondary\"\r\n                      >\r\n                        <IconButton\r\n                          id={id + tableMeta.rowData[0] + tableMeta.rowIndex}\r\n                          size={props.dense ? \"small\" : \"medium\"}\r\n                          color=\"primary\"\r\n                          className={`${classes.icons} ${\r\n                            !value || value === 0 ? classes.noCommentsIcon : \"\"\r\n                          } ${\r\n                            colInd === tableMeta.columnIndex &&\r\n                            rowInd === tableMeta.rowIndex\r\n                              ? classes.iconSelected\r\n                              : \"\"\r\n                          }`}\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleExpandClick(\r\n                              tableMeta.columnIndex,\r\n                              tableMeta.rowIndex,\r\n                              tableMeta.rowData[0],\r\n                              \"comment\"\r\n                            );\r\n                          }}\r\n                          aria-label=\"show comments\"\r\n                          onMouseOver={() => {\r\n                            if (\r\n                              m1nSelectedRowsIndexes.indexOf(\r\n                                tableMeta.rowIndex\r\n                              ) !== -1 &&\r\n                              m1nSelectedRowsIndexes.length > 1\r\n                            )\r\n                              multiSelectMouseHoverColor(id, \"#dadbde\");\r\n                          }}\r\n                          onMouseOut={() => {\r\n                            if (\r\n                              m1nSelectedRowsIndexes.indexOf(\r\n                                tableMeta.rowIndex\r\n                              ) !== -1 &&\r\n                              m1nSelectedRowsIndexes.length > 1\r\n                            )\r\n                              multiSelectMouseHoverColor(id, \"#efefef\");\r\n                          }}\r\n                        >\r\n                          <ChatIcon />\r\n                        </IconButton>\r\n                      </Badge>\r\n                    </Tooltip>\r\n                  );\r\n                },\r\n              };\r\n            }\r\n            break;\r\n          case \"wellsCounter\":\r\n            {\r\n              column.options = {\r\n                ...column.options,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                  return (\r\n                    <Tooltip\r\n                      title={value.length > 0 ? \"Wells\" : \"Not Available\"}\r\n                      placement=\"top\"\r\n                      style={{ marginRight: \"10px\" }}\r\n                    >\r\n                      <Badge\r\n                        badgeContent={value.length > 0 ? value.length : null}\r\n                        color=\"secondary\"\r\n                      >\r\n                        <IconButton\r\n                          size={props.dense ? \"small\" : \"medium\"}\r\n                          color=\"primary\"\r\n                          className={`${classes.icons} ${\r\n                            !value || value.length === 0\r\n                              ? classes.noOwnersIcon\r\n                              : \"\"\r\n                          } ${\r\n                            colInd === tableMeta.columnIndex &&\r\n                            rowInd === tableMeta.rowIndex\r\n                              ? classes.iconSelected\r\n                              : \"\"\r\n                          }`}\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            if (value && value.length > 0) {\r\n                              handleExpandClick(\r\n                                tableMeta.columnIndex,\r\n                                tableMeta.rowIndex,\r\n                                value,\r\n                                \"wellsPerOwner\"\r\n                              );\r\n                            }\r\n                          }}\r\n                          aria-label=\"show owners\"\r\n                        >\r\n                          <WellIcon\r\n                            color={\r\n                              value && value.length > 0 ? \"#000\" : \"darkgrey\"\r\n                            }\r\n                            opacity=\"1.0\"\r\n                            small\r\n                          />\r\n                        </IconButton>\r\n                      </Badge>\r\n                    </Tooltip>\r\n                  );\r\n                },\r\n              };\r\n            }\r\n            break;\r\n          case \"contactsCounter\":\r\n            {\r\n              column.options = {\r\n                ...column.options,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                  return (\r\n                    <Tooltip\r\n                      title={value || value === 0 ? \"Contacts\" : \"Add Contact\"}\r\n                      placement=\"top\"\r\n                      style={{ marginRight: \"10px\" }}\r\n                    >\r\n                      <Badge\r\n                        badgeContent={value ? value : null}\r\n                        color=\"secondary\"\r\n                      >\r\n                        <IconButton\r\n                          size={props.dense ? \"small\" : \"medium\"}\r\n                          color=\"primary\"\r\n                          className={`${classes.icons} ${\r\n                            !value || value === 0 ? classes.noCommentsIcon : \"\"\r\n                          } ${\r\n                            colInd === tableMeta.columnIndex &&\r\n                            rowInd === tableMeta.rowIndex\r\n                              ? classes.iconSelected\r\n                              : \"\"\r\n                          }`}\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            handleExpandClick(\r\n                              tableMeta.columnIndex,\r\n                              tableMeta.rowIndex,\r\n                              tableMeta.rowData[0],\r\n                              \"ownerContacts\"\r\n                            );\r\n                          }}\r\n                          aria-label=\"show contacs\"\r\n                        >\r\n                          <ContactPhoneIcon />\r\n                        </IconButton>\r\n                      </Badge>\r\n                    </Tooltip>\r\n                  );\r\n                },\r\n              };\r\n            }\r\n            break;\r\n          case \"ownerCount\":\r\n            {\r\n              column.options = {\r\n                ...column.options,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                  return (\r\n                    <Tooltip\r\n                      title={value ? \"Owners\" : \"Not Available\"}\r\n                      placement=\"top\"\r\n                      style={{ marginRight: \"10px\" }}\r\n                    >\r\n                      <Badge\r\n                        badgeContent={value ? value : null}\r\n                        color=\"secondary\"\r\n                      >\r\n                        <IconButton\r\n                          size={props.dense ? \"small\" : \"medium\"}\r\n                          color=\"primary\"\r\n                          className={`${classes.icons} ${\r\n                            !value ? classes.noOwnersIcon : \"\"\r\n                          } ${\r\n                            colInd === tableMeta.columnIndex &&\r\n                            rowInd === tableMeta.rowIndex\r\n                              ? classes.iconSelected\r\n                              : \"\"\r\n                          }`}\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            if (value && value > 0) {\r\n                              handleExpandClick(\r\n                                tableMeta.columnIndex,\r\n                                tableMeta.rowIndex,\r\n                                tableMeta.rowData[0],\r\n                                \"owner\"\r\n                              );\r\n                            }\r\n                          }}\r\n                          aria-label=\"show owners\"\r\n                        >\r\n                          <PeopleAltIcon />\r\n                        </IconButton>\r\n                      </Badge>\r\n                    </Tooltip>\r\n                  );\r\n                },\r\n              };\r\n            }\r\n            break;\r\n\r\n          case \"owners\": //ownerPerContactCount\r\n            {\r\n              column.options = {\r\n                ...column.options,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                  return (\r\n                    <Tooltip\r\n                      title={value.length > 0 ? \"Owners\" : \"Not Available\"}\r\n                      placement=\"top\"\r\n                      style={{ marginRight: \"10px\" }}\r\n                    >\r\n                      <Badge\r\n                        badgeContent={value.length > 0 ? value.length : null}\r\n                        color=\"secondary\"\r\n                      >\r\n                        <IconButton\r\n                          size={props.dense ? \"small\" : \"medium\"}\r\n                          color=\"primary\"\r\n                          className={`${classes.icons} ${\r\n                            !value || value.length === 0\r\n                              ? classes.noOwnersIcon\r\n                              : \"\"\r\n                          }  ${\r\n                            colInd === tableMeta.columnIndex &&\r\n                            rowInd === tableMeta.rowIndex\r\n                              ? classes.iconSelected\r\n                              : \"\"\r\n                          }`}\r\n                          onClick={(e) => {\r\n                            e.stopPropagation();\r\n                            if (value.length > 0) {\r\n                              handleExpandClick(\r\n                                tableMeta.columnIndex,\r\n                                tableMeta.rowIndex,\r\n                                value,\r\n                                \"ownersPerContacts\"\r\n                              );\r\n                            }\r\n                          }}\r\n                          aria-label=\"show owners\"\r\n                        >\r\n                          <PeopleAltIcon />\r\n                        </IconButton>\r\n                      </Badge>\r\n                    </Tooltip>\r\n                  );\r\n                },\r\n              };\r\n            }\r\n            break;\r\n\r\n          case \"tags\":\r\n            {\r\n              column.options = {\r\n                ...column.options,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                  let id = props.targetLabel + tableMeta.columnIndex;\r\n                  return (\r\n                    <div style={{ marginRight: \"10px\" }}>\r\n                      <Tooltip\r\n                        title={value && value[1] === 0 ? \"Add Tags\" : \"Tags\"}\r\n                        placement=\"top\"\r\n                      >\r\n                        <Badge\r\n                          id={id + tableMeta.rowData[0] + tableMeta.rowIndex}\r\n                          className={`${classes.TagSample} ${\r\n                            colInd === tableMeta.columnIndex &&\r\n                            rowInd === tableMeta.rowIndex\r\n                              ? classes.iconSelected\r\n                              : \"\"\r\n                          }`}\r\n                          badgeContent={value[1]}\r\n                          color=\"secondary\"\r\n                          onClick={(e) => {\r\n                            e.preventDefault();\r\n                            e.stopPropagation();\r\n                            handleExpandClick(\r\n                              tableMeta.columnIndex,\r\n                              tableMeta.rowIndex,\r\n                              tableMeta.rowData[0],\r\n                              \"tag\"\r\n                            );\r\n                          }}\r\n                          onMouseOver={() => {\r\n                            if (\r\n                              m1nSelectedRowsIndexes.indexOf(\r\n                                tableMeta.rowIndex\r\n                              ) !== -1 &&\r\n                              m1nSelectedRowsIndexes.length > 1\r\n                            )\r\n                              multiSelectMouseHoverColor(id, \"#dadbde\");\r\n                          }}\r\n                          onMouseOut={() => {\r\n                            if (\r\n                              m1nSelectedRowsIndexes.indexOf(\r\n                                tableMeta.rowIndex\r\n                              ) !== -1 &&\r\n                              m1nSelectedRowsIndexes.length > 1\r\n                            )\r\n                              multiSelectMouseHoverColor(id, \"#efefef\");\r\n                          }}\r\n                        >\r\n                          {value[0] && value[0].length > 0 ? (\r\n                            <React.Fragment>\r\n                              <p className=\"first\">{value[0].join(\", \")}</p>\r\n                              <p className=\"two\">...</p>\r\n                            </React.Fragment>\r\n                          ) : (\r\n                            <p className=\"three\">No Tags</p>\r\n                          )}\r\n                        </Badge>\r\n                      </Tooltip>\r\n                    </div>\r\n                  );\r\n                },\r\n              };\r\n            }\r\n            break;\r\n\r\n          case \"fullContactAddress\":\r\n            {\r\n              column.options = {\r\n                ...column.options,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                  return (\r\n                    <CellContentEdition\r\n                      id={tableMeta.rowData[0]}\r\n                      content={{\r\n                        address1: tableMeta.rowData[1],\r\n                        address2: tableMeta.rowData[2],\r\n                        city: tableMeta.rowData[3],\r\n                        state: tableMeta.rowData[4],\r\n                        zip: tableMeta.rowData[5],\r\n                        country: tableMeta.rowData[6],\r\n                      }}\r\n                      targetLabel={props.targetLabel}\r\n                    />\r\n                  );\r\n                },\r\n              };\r\n            }\r\n            break;\r\n\r\n          default:\r\n            {\r\n              column.options = {\r\n                ...column.options,\r\n                customBodyRender: (value, tableMeta, updateValue) => {\r\n                  const valueFormatter = (v) => {\r\n                    if (column.name === \"appraisedValue\")\r\n                      return formatter.format(v);\r\n\r\n                    if (column.name === \"lastUpdateAt\")\r\n                      return anyToDate(v).toLocaleString(\"en-US\", {\r\n                        year: \"numeric\",\r\n                        day: \"numeric\",\r\n                        month: \"numeric\",\r\n                      });\r\n\r\n                    return v;\r\n                  };\r\n\r\n                  ////// if non editable column\r\n                  if (!column.editable) {\r\n                    //// if no value\r\n                    if (value === \"\" || value === null || !value) return value;\r\n\r\n                    //// if value\r\n                    return (\r\n                      <div\r\n                        className={classes.cellDataDiv}\r\n                        onClick={(e) => {\r\n                          e.preventDefault();\r\n                          e.stopPropagation();\r\n                        }}\r\n                      >\r\n                        {valueFormatter(value)}\r\n                      </div>\r\n                    );\r\n                  }\r\n\r\n                  return (\r\n                    <div style={{ display: \"flex\" }}>\r\n                      {\r\n                        props.targetLabel === \"contact\" &&\r\n                          column.name === \"name\" && (\r\n                            ///////////////////////////////////////////////////\r\n                            // <ConfigProvider colors={['red', 'green', 'blue']}>\r\n                            <Avatar\r\n                              color={Avatar.getRandomColor(value, [\r\n                                \"#b5d2f6\",\r\n                                \"#ade2e9\",\r\n                                \"#eaeaea\",\r\n                                \"#f2c1e2\",\r\n                                \"#d7d6fb\",\r\n                              ])}\r\n                              fgColor=\"#000\"\r\n                              name={valueFormatter(value)}\r\n                              size=\"35\"\r\n                              round\r\n                            />\r\n                          )\r\n                        // </ConfigProvider>\r\n                        ///////////////////////////////////////////////////\r\n                      }\r\n                      <CellContentEdition\r\n                        id={tableMeta.rowData[0]}\r\n                        content={{ [column.name]: valueFormatter(value) }}\r\n                        targetLabel={props.targetLabel}\r\n                      />\r\n                    </div>\r\n                  );\r\n                },\r\n              };\r\n            }\r\n            break;\r\n        }\r\n      });\r\n      setColumns([...props.columns]);\r\n    }\r\n  }, [\r\n    props.columns,\r\n    props.rows,\r\n    colInd,\r\n    rowInd,\r\n    m1nSelectedRowsIds,\r\n    m1nSelectedRowsIndexes,\r\n    m1nSelectedRowsTracks,\r\n  ]);\r\n\r\n  const handleExpandClick = async (cIndex, rIndex, idOrValues, type) => {\r\n    setColInd(cIndex);\r\n    setRowInd(rIndex);\r\n    setExpandedObject(idOrValues);\r\n    setOpenDialog(type);\r\n  };\r\n\r\n  const handleCloseDialog = () => {\r\n    setOpenDialog(false);\r\n    setColInd(null);\r\n    setRowInd(null);\r\n    setExpandedObject(null);\r\n  };\r\n\r\n  const handleOpenExpandableCard = () => {\r\n    setShowExpandableCard(true);\r\n  };\r\n  const handleCloseExpandableCard = () => {\r\n    setShowExpandableCard(false);\r\n    setStateApp((state) => ({\r\n      ...state,\r\n      popupOpen: false,\r\n      expandedCard: false,\r\n    }));\r\n  };\r\n\r\n  const options = {\r\n    filterType: \"multiselect\",\r\n    rowsPerPage: props.startPaginationAt ? props.startPaginationAt : 10,\r\n    rowsPerPageOptions:\r\n      props.rows && props.rows.length > 100\r\n        ? [10, 25, 100, 1000]\r\n        : props.rows && props.rows.length > 25\r\n        ? [10, 25, 100]\r\n        : props.rows && props.rows.length > 10\r\n        ? [10, 25]\r\n        : [],\r\n    selectableRows: \"multiple\",\r\n    //// triggers when a row/s is selected ////\r\n    onRowsSelect: (currentRowsSelected, rowsSelected) => {\r\n      if (rowsSelected && rowsSelected.length > 0) {\r\n        let indexArray = rowsSelected.map((d) => d.index).sort((a, b) => a - b);\r\n        if (rows && indexArray) {\r\n          if (rows.length > 0 && indexArray.length > 0) {\r\n            let selectedRows = rows.filter(\r\n              (row, index) => indexArray.indexOf(index) !== -1\r\n            );\r\n            let selectedRowsIds = selectedRows.map((row) => {\r\n              if (row.id) return row.id;\r\n              if (row.Id) return row.Id;\r\n              if (row._id) return row._id;\r\n            });\r\n\r\n            setM1nSelectedRowsIds(selectedRowsIds);\r\n          } else setM1nSelectedRowsIds([]);\r\n        }\r\n        setM1nSelectedRowsIndexes(indexArray);\r\n      } else {\r\n        setM1nSelectedRowsIndexes([]);\r\n        setM1nSelectedRowsIds([]);\r\n      }\r\n    },\r\n    onRowsDelete: (rowsDeleted) => {\r\n      handleExpandClick(null, null, null, \"deleteOwnersFromContact\");\r\n      return false;\r\n    },\r\n    rowsSelected: m1nSelectedRowsIndexes,\r\n    //// allows you to customize the top bar of selected items ////\r\n    customToolbarSelect:\r\n      props.header === \"Interest Owners Tied to Contact\"\r\n        ? false\r\n        : (selectedRows, displayData, setSelectedRow) => {\r\n            //// if contacts set the multi selection top bar: ////\r\n            if (\r\n              props.header === \"Owner's Contacts\" ||\r\n              props.header === \"Contacts\"\r\n            ) {\r\n              const getSelectedRows = () => {\r\n                const selectedRows = [];\r\n                for (let i = 0; i < m1nSelectedRowsIndexes.length; i++) {\r\n                  selectedRows.push(rows[m1nSelectedRowsIndexes[i]]);\r\n                }\r\n                return selectedRows;\r\n              };\r\n\r\n              return (\r\n                <div\r\n                  style={{\r\n                    height: \"48px\",\r\n                    display: \"flex\",\r\n                  }}\r\n                >\r\n                  <Button\r\n                    color=\"secondary\"\r\n                    startIcon={<ContactPhoneRoundedIcon />}\r\n                    className={classes.multiSelectionTopBarButtons}\r\n                    onClick={() => {\r\n                      handleExpandClick(\r\n                        null,\r\n                        null,\r\n                        getSelectedRows(),\r\n                        \"buyContactsInfo\"\r\n                      );\r\n                    }}\r\n                  >\r\n                    Buy Info\r\n                  </Button>\r\n                  <Button\r\n                    color=\"secondary\"\r\n                    startIcon={<EmailRoundedIcon />}\r\n                    className={classes.multiSelectionTopBarButtons}\r\n                    onClick={() => {\r\n                      handleExpandClick(\r\n                        null,\r\n                        null,\r\n                        getSelectedRows(),\r\n                        \"sendMailers\"\r\n                      );\r\n                    }}\r\n                  >\r\n                    Mailers\r\n                  </Button>\r\n                  <Button\r\n                    color=\"secondary\"\r\n                    startIcon={<LocalPrintshopRoundedIcon />}\r\n                    className={classes.multiSelectionTopBarButtons}\r\n                    onClick={() => {\r\n                      handleExpandClick(\r\n                        null,\r\n                        null,\r\n                        getSelectedRows(),\r\n                        \"printLabels\"\r\n                      );\r\n                    }}\r\n                  >\r\n                    Labels\r\n                  </Button>\r\n                  <Divider orientation=\"vertical\" flexItem />\r\n                  <Tooltip title={\"Delete\"}>\r\n                    <IconButton\r\n                      size=\"medium\"\r\n                      style={{ margin: \"0 5px\" }}\r\n                      onClick={(e) => {\r\n                        handleExpandClick(null, null, null, \"deleteContact\");\r\n                      }}\r\n                      aria-label=\"delete\"\r\n                    >\r\n                      <DeleteIcon />\r\n                    </IconButton>\r\n                  </Tooltip>\r\n                </div>\r\n              );\r\n            }\r\n\r\n            //// default empty top bar ////\r\n            return (\r\n              <div\r\n                style={{\r\n                  height: \"48px\",\r\n                }}\r\n              />\r\n            );\r\n          },\r\n\r\n    customToolbar: () => {\r\n      return (\r\n        <>\r\n          {props.uploadIcon && (\r\n            //////Upload Icon/////////////////////////\r\n            <span className={classes.addIcon}>\r\n              <Tooltip\r\n                title={`Upload ${\r\n                  props.targetLabel.charAt(0).toUpperCase() +\r\n                  props.targetLabel.slice(1)\r\n                }s`}\r\n              >\r\n                <IconButton\r\n                  size=\"medium\"\r\n                  onClick={(e) => {\r\n                    routeChange(\"/bulkupload\");\r\n                  }}\r\n                >\r\n                  <BackupIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </span>\r\n          )}\r\n          {props.addAble && (\r\n            //////Add Icon/////////////////////////\r\n            <span className={classes.addIcon}>\r\n              <Tooltip\r\n                title={`Add${\r\n                  props.targetLabel\r\n                    ? \" \" +\r\n                      props.targetLabel.charAt(0).toUpperCase() +\r\n                      props.targetLabel.slice(1)\r\n                    : \"\"\r\n                }`}\r\n              >\r\n                <IconButton\r\n                  size=\"medium\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    if (\r\n                      props.addAble.type &&\r\n                      (props.addAble.type === \"contact\" ||\r\n                        props.addAble.type === \"contactToOwner\")\r\n                    )\r\n                      handleExpandClick(null, null, null, \"addContact\");\r\n                    if (\r\n                      props.addAble.type &&\r\n                      props.addAble.type === \"ownerToContact\"\r\n                    )\r\n                      handleExpandClick(null, null, null, \"addOwnerToContact\");\r\n                  }}\r\n                >\r\n                  <AddCircleOutlineRoundedIcon />\r\n                </IconButton>\r\n              </Tooltip>\r\n            </span>\r\n          )}\r\n        </>\r\n      );\r\n    },\r\n    onRowClick: (rowData, { dataIndex, rowIndex }) => {\r\n      setSelectedRow(rows[dataIndex]);\r\n\r\n      if (props.targetLabel === \"owner\") {\r\n        setStateApp((state) => ({ ...state, selectedOwner: rows[dataIndex] }));\r\n        setSubComponent(\r\n          <OwnersDetailCard\r\n            ownerId={rows[dataIndex].id}\r\n            wellsIdsArray={rows[dataIndex].wellsCounter}\r\n          />\r\n        );\r\n        setTitle(rows[dataIndex].name);\r\n        setSubTitle(rows[dataIndex].interestType);\r\n        handleOpenExpandableCard();\r\n      }\r\n\r\n      if (props.targetLabel === \"well\") {\r\n        setStateApp((state) => ({ ...state, selectedWellId: rowData[0] }));\r\n        setStateApp((state) => ({ ...state, selectedWell: rows[dataIndex] }));\r\n        setSubComponent(<WellCardProvider />);\r\n        setTitle(rows[dataIndex].wellName);\r\n        setSubTitle(rows[dataIndex].operator);\r\n        handleOpenExpandableCard();\r\n      }\r\n\r\n      if (props.targetLabel === \"contact\") {\r\n        setStateApp((stateApp) => ({\r\n          ...stateApp,\r\n          selectedContact: rows[dataIndex].id,\r\n        }));\r\n\r\n        setSubComponent(\r\n          <ContactDetailCard\r\n            contactId={rows[dataIndex]._id}\r\n            handleCloseExpandableCard={handleCloseExpandableCard}\r\n          />\r\n        );\r\n        setTitle(\"CONTACT DETAILS\");\r\n        setSubTitle(\" \");\r\n        handleOpenExpandableCard();\r\n      }\r\n    },\r\n  };\r\n\r\n  let history = useHistory();\r\n\r\n  let routeChange = (route) => {\r\n    history.push(route);\r\n  };\r\n\r\n  return (\r\n    <div style={{ width: \"100%\", height: \"100%\", position: \"relative\" }}>\r\n      {rows && !props.loading ? (\r\n        <div className={classes.root}>\r\n          <MUIDataTable\r\n            className={classes.table}\r\n            title={props.header}\r\n            data={rows}\r\n            columns={columns}\r\n            options={options}\r\n          />\r\n\r\n          {openDialog && (\r\n            <Dialog\r\n              className={classes.dialog}\r\n              open={openDialog ? true : false}\r\n              onClose={handleCloseDialog}\r\n              fullWidth={\r\n                openDialog === \"comment\" ||\r\n                openDialog === \"owner\" ||\r\n                openDialog === \"wellsPerOwner\" ||\r\n                openDialog === \"ownerContacts\" ||\r\n                openDialog === \"ownersPerContacts\" ||\r\n                openDialog === \"buyContactsInfo\" ||\r\n                openDialog === \"sendMailers\" ||\r\n                openDialog === \"printLabels\"\r\n                  ? true\r\n                  : false\r\n              }\r\n              maxWidth={\r\n                openDialog === \"ownerContacts\"\r\n                  ? \"xl\"\r\n                  : openDialog === \"owner\" ||\r\n                    openDialog === \"ownersPerContacts\" ||\r\n                    openDialog === \"wellsPerOwner\"\r\n                  ? \"lg\"\r\n                  : openDialog === \"addContact\" ||\r\n                    openDialog === \"addOwnerToContact\" ||\r\n                    openDialog === \"deleteOwnersFromContact\" ||\r\n                    openDialog === \"deleteContact\"\r\n                  ? \"xs\"\r\n                  : \"sm\"\r\n              }\r\n            >\r\n              {openDialog === \"comment\" && (\r\n                <Comments\r\n                  focus\r\n                  targetSourceId={expandedObject}\r\n                  targetLabel={props.targetLabel}\r\n                  multipleIds={\r\n                    m1nSelectedRowsIndexes.indexOf(rowInd) !== -1 &&\r\n                    m1nSelectedRowsIndexes.length > 1\r\n                      ? m1nSelectedRowsIds\r\n                      : null\r\n                  }\r\n                />\r\n              )}\r\n              {openDialog === \"tag\" && (\r\n                <div className={classes.tagsDiv}>\r\n                  <Tags\r\n                    targetSourceId={expandedObject}\r\n                    targetLabel={props.targetLabel}\r\n                    multipleIds={\r\n                      m1nSelectedRowsIndexes.indexOf(rowInd) !== -1 &&\r\n                      m1nSelectedRowsIndexes.length > 1\r\n                        ? m1nSelectedRowsIds\r\n                        : null\r\n                    }\r\n                  />\r\n                </div>\r\n              )}\r\n              {openDialog === \"owner\" && (\r\n                <M1nTable\r\n                  selectedWell={{ id: expandedObject }}\r\n                  parent=\"OwnersPerWell\"\r\n                />\r\n              )}\r\n              {openDialog === \"wellsPerOwner\" && (\r\n                <M1nTable\r\n                  wellsIdsArray={expandedObject}\r\n                  parent=\"WellsPerOwner\"\r\n                />\r\n              )}\r\n              {openDialog === \"ownerContacts\" && (\r\n                <M1nTable parent=\"ownerContacts\" ownerId={expandedObject} />\r\n              )}\r\n              {openDialog === \"ownersPerContacts\" && (\r\n                <M1nTable\r\n                  parent=\"ownersPerContacts\"\r\n                  ownersIdsArray={expandedObject}\r\n                  contactId={rows[rowInd]._id}\r\n                />\r\n              )}\r\n\r\n              {openDialog === \"addContact\" &&\r\n                props.targetLabel === \"contact\" && (\r\n                  <AddContactDialogContent\r\n                    onClose={handleCloseDialog}\r\n                    parent={props.addAble.parent}\r\n                  />\r\n                )}\r\n              {openDialog === \"addOwnerToContact\" && (\r\n                <AddOwnerToContactDialogContent\r\n                  onClose={handleCloseDialog}\r\n                  parent={props.addAble.parent}\r\n                  existingOwners={props.addAble.existingOwners}\r\n                />\r\n              )}\r\n              {openDialog === \"deleteOwnersFromContact\" && (\r\n                <DeleteConfirmationDialogContent\r\n                  onClose={handleCloseDialog}\r\n                  deleteFunc={props.deleteFunc}\r\n                  m1nSelectedRowsIds={m1nSelectedRowsIds}\r\n                  setM1nSelectedRowsIndexes={setM1nSelectedRowsIndexes}\r\n                >\r\n                  {`Do you want to permanently delete the owner${\r\n                    m1nSelectedRowsIds && m1nSelectedRowsIds.length > 1\r\n                      ? \"s\"\r\n                      : \"\"\r\n                  } from  this contact?`}\r\n                </DeleteConfirmationDialogContent>\r\n              )}\r\n              {openDialog === \"deleteContact\" && (\r\n                <DeleteConfirmationDialogContent\r\n                  onClose={handleCloseDialog}\r\n                  deleteFunc={props.deleteFunc}\r\n                  m1nSelectedRowsIds={m1nSelectedRowsIds}\r\n                  setM1nSelectedRowsIndexes={setM1nSelectedRowsIndexes}\r\n                >\r\n                  {props.header === \"Owner's Contacts\" &&\r\n                    `Do you want to remove the contact${\r\n                      m1nSelectedRowsIds && m1nSelectedRowsIds.length > 1\r\n                        ? \"s\"\r\n                        : \"\"\r\n                    } from this owner?`}\r\n\r\n                  {props.header === \"Contacts\" &&\r\n                    `Do you want to permanently delete the contact${\r\n                      m1nSelectedRowsIds && m1nSelectedRowsIds.length > 1\r\n                        ? \"s\"\r\n                        : \"\"\r\n                    }?`}\r\n                </DeleteConfirmationDialogContent>\r\n              )}\r\n              {openDialog === \"buyContactsInfo\" && (\r\n                <BuyContactsInfoDialogContent\r\n                  onClose={handleCloseDialog}\r\n                  rows={expandedObject}\r\n                  setRows={setExpandedObject}\r\n                  setSelectedRow={setSelectedRow}\r\n                />\r\n              )}\r\n              {openDialog === \"sendMailers\" && (\r\n                <SendMailersDialogContent\r\n                  onClose={handleCloseDialog}\r\n                  rows={expandedObject}\r\n                  setRows={setExpandedObject}\r\n                  setSelectedRow={setSelectedRow}\r\n                />\r\n              )}\r\n              {openDialog === \"printLabels\" && (\r\n                <PrintLabelsDialogContent\r\n                  onClose={handleCloseDialog}\r\n                  rows={expandedObject}\r\n                  setRows={setExpandedObject}\r\n                  setSelectedRow={setSelectedRow}\r\n                />\r\n              )}\r\n            </Dialog>\r\n          )}\r\n\r\n          {showExpandableCard && (\r\n            <Dialog\r\n              className={classes.dialogExpCard}\r\n              fullWidth\r\n              maxWidth=\"xl\"\r\n              open={showExpandableCard}\r\n              onClose={handleCloseExpandableCard}\r\n            >\r\n              <ExpandableCardProvider\r\n                expanded={true}\r\n                handleCloseExpandableCard={handleCloseExpandableCard}\r\n                component={subComponent}\r\n                title={title}\r\n                subTitle={subTitle}\r\n                parent=\"table\"\r\n                mouseX={0}\r\n                mouseY={0}\r\n                position=\"relative\"\r\n                cardLeft={\"0\"}\r\n                cardTop={\"0\"}\r\n                zIndex={1201}\r\n                cardWidthExpanded=\"100%\"\r\n                cardHeightExpanded=\"100%\"\r\n                targetSourceId={\r\n                  props.targetLabel === \"owner\" || props.targetLabel === \"well\"\r\n                    ? selectedRow.id\r\n                    : selectedRow._id\r\n                }\r\n                targetLabel={props.targetLabel}\r\n                noTrackAvailable={\r\n                  props.targetLabel === \"contact\" ? true : false\r\n                }\r\n              />\r\n            </Dialog>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <MUIDataTable\r\n          className={classes.table}\r\n          title={props.header}\r\n          data={[\r\n            {\r\n              loader: \" \",\r\n            },\r\n          ]}\r\n          columns={[{ name: \"loader\", label: \" \" }]}\r\n          options={options}\r\n        />\r\n        // <Skeleton variant=\"rect\" height={200} style={{ minWidth: \"100%\" }}>\r\n        //   <Typography variant=\"button\" style={{ visibility: \"visible\" }}>\r\n        //     Not Available\r\n        //   </Typography>\r\n        // </Skeleton>\r\n      )}\r\n      {props.loading && (\r\n        <div\r\n          style={{\r\n            padding: \"15px\",\r\n            position: \"absolute\",\r\n            top: \"95px\",\r\n            left: \"30px\",\r\n            zIndex: \"150\",\r\n          }}\r\n        >\r\n          <CircularProgress size={80} disableShrink color=\"secondary\" />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}