{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\MapControls\\\\components\\\\DrawShapes\\\\DrawShapes.js\";\nimport React, { useContext, useEffect, useState, useLayoutEffect } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/react-hooks\";\nimport loadCSS from \"fg-loadcss\"; // STATE MANAGEMENT\n\nimport { MapControlsContext } from \"../../MapControlsContext\";\nimport { AppContext } from \"../../../../AppContext\"; // STYLES - Material UI Required Components\n\nimport { useStyles, StyledMenu, StyledMenuItem } from \"../muiThemes\";\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\nimport ListItemText from \"@material-ui/core/ListItemText\"; // STYLES - Font Awesome Icons Required for Menu Items\n//import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n//import { faGripLines, faDrawPolygon } from \"@fortawesome/free-solid-svg-icons\";\n//import { faCircle, faSquare } from \"@fortawesome/free-regular-svg-icons\";\n//import RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\n// COMPONENTS\n\nimport SpatialDataCard from \"../spatialDataCard\"; // HELPERS\n\nimport { area, convertArea } from \"@turf/turf\";\nimport { spatialDataAttributes } from \"./constants\";\nimport { addCustomShapeProperties, createShapeLabelLayer } from \"./drawShapesHelpers\";\nimport mapboxgl, { Marker } from \"mapbox-gl\";\nimport { makeStyles, Icon } from \"@material-ui/core\";\nimport polylabel from \"polylabel\";\nimport { useHistory } from \"react-router-dom\";\nimport { UPSERTCUSTOMLAYER } from \"../../../../graphQL/useMutationUpsertCustomLayer\";\nimport { CUSTOMLAYERSQUERY } from \"../../../../graphQL/useQueryCustomLayers\";\nimport { USERBYEMAIL } from \"../../../../graphQL/useQueryUserByEmail\"; //import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\n//import RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\n//import { mdiShapePolygonPlus } from '@mdi/js'; \n\nimport { default as DrawPoly } from '../../../Shared/svgIcons/polygon';\nimport { default as Rect } from '../../../Shared/svgIcons/rectangle';\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\nimport { NavigationContext } from \"../../../Navigation/NavigationContext\"; // import { availableShapes } from \"./constants\";\n\nconst DEBUG_GREEN = \"background: green; color: white; border: 1px solid black\";\nconst DEBUG_YELLOW = \"background: yellow; color: red; border: 1px solid black\";\nconst DEBUG_BLUE = \"background: blue; color: white; border: 1px solid black\";\nconst DEBUG_RED = \"background: red; color: white; border: 1px solid black\";\nexport const availableShapes = [{\n  title: \"Polygon\",\n  mode: \"draw_polygon\" //icon: \"fa fa-draw-polygon\"\n\n}, {\n  title: \"Circle\",\n  mode: \"drag_circle\" //icon: \"fa fa-circle\"\n\n}, {\n  title: \"Rectangle\",\n  mode: \"draw_rectangle\" //icon: \"fa fa-square\"\n\n}, {\n  title: \"Line\",\n  mode: \"draw_line_string\" //icon: \"fa fa-grip-lines\"\n\n}];\nconst localStyles = makeStyles(theme => ({\n  label: {\n    width: \"150px\",\n    height: \"15px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    color: \"white\",\n    fontSize: \"1rem\"\n  }\n}));\nexport default function DrawShapes(props) {\n  const classes = useStyles();\n  let history = useHistory();\n  const localClasses = localStyles();\n  const [stateMapControls, setStateMapControls] = useContext(MapControlsContext);\n  const [stateApp, setStateApp] = useContext(AppContext);\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [showSpatialDataCard, toggleSpatialDataCard] = useState(false);\n  const [upsertCustomLayer, {\n    data: customLayerInsertedData\n  }] = useMutation(UPSERTCUSTOMLAYER);\n  const [getCustomLayers, {\n    data: customLayerData\n  }] = useLazyQuery(CUSTOMLAYERSQUERY, {\n    fetchPolicy: \"network-only\"\n  });\n\n  const DEBUGGER = (source, value) => {\n    console.log(`%c[DrawShapes.js] ${source}`, DEBUG_GREEN, value);\n  };\n\n  const createShapeMarker = feature => {\n    var el = document.createElement(\"div\");\n    el.setAttribute(\"id\", feature.id);\n    el.innerHTML = \"Feature_\" + feature.id.slice(-4);\n    el.className = localClasses.label;\n    return el;\n  }; // useEffect(() => {\n  //   loadCSS(\n  //     'https://use.fontawesome.com/releases/v5.1.0/css/all.css',\n  //     document.querySelector('#font-awesome-css'),\n  //   );\n  // }, []);\n\n\n  const [getUserByEmail, {\n    data: dataUser\n  }] = useLazyQuery(USERBYEMAIL);\n  const [user, setUser] = useState({\n    _id: \"\"\n  });\n  useEffect(() => {\n    console.log(customLayerData);\n\n    if (customLayerData && customLayerData.customLayers) {\n      setStateApp(state => ({ ...state,\n        customLayers: customLayerData.customLayers,\n        currentFeature: undefined,\n        editDraw: false\n      }));\n    }\n  }, [customLayerData]);\n  useEffect(() => {\n    if (stateApp && stateApp.user && stateApp.user.email) {\n      getUserByEmail({\n        variables: {\n          userEmail: stateApp.user.email\n        }\n      });\n    }\n  }, [stateApp.user.email]);\n  useEffect(() => {\n    if (dataUser && dataUser.userByEmail) {\n      setUser(dataUser.userByEmail);\n    }\n  }, [dataUser]);\n  useEffect(() => {\n    const {\n      map\n    } = stateApp;\n    map.on(\"draw.create\", ({\n      features\n    }) => {\n      const [feature] = features;\n      const {\n        draw\n      } = stateApp;\n\n      if (feature) {\n        addCustomShapeProperties(feature, draw);\n      }\n\n      setStateApp(state => ({ ...state,\n        editDraw: false\n      }));\n    });\n    map.on(\"draw.selectionchange\", ({\n      features\n    }) => {\n      const [feature] = features;\n\n      if (feature && !feature.id.includes('edit_polygon')) {\n        console.log('draw shape check feature', feature);\n        setStateApp(stateApp => {\n          return { ...stateApp,\n            popupOpen: false,\n            currentFeature: feature,\n            featureOrMapShape: feature,\n            editDraw: true\n          };\n        });\n      } else {\n        setStateApp(state => ({ ...state,\n          currentFeature: undefined,\n          editDraw: false\n        }));\n      }\n    });\n  }, [stateApp.map, showSpatialDataCard]);\n  useEffect(() => {\n    setStateApp(state => ({ ...state,\n      editDraw: showSpatialDataCard\n    }));\n  }, [showSpatialDataCard]);\n  useEffect(() => {\n    const {\n      currentFeature\n    } = stateApp;\n\n    if (currentFeature !== undefined) {\n      toggleSpatialDataCard(true);\n    } else {\n      toggleSpatialDataCard(false);\n    }\n  }, [stateApp.currentFeature]);\n\n  const createShapeDrawOptions = () => {\n    return availableShapes.map((shape, index) => {\n      return /*#__PURE__*/React.createElement(StyledMenuItem, {\n        key: index,\n        onClick: evt => {\n          stateApp.draw.changeMode(shape.mode);\n          setStateApp(state => ({ ...state,\n            editDraw: true\n          }));\n          handleClose();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          color: \"white\",\n          paddingRight: \"15px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Icon, {\n        className: shape.icon,\n        color: \"secondary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 25\n        }\n      }), shape.mode === \"draw_polygon\" && /*#__PURE__*/React.createElement(DrawPoly, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 59\n        }\n      }), shape.mode === \"draw_rectangle\" && /*#__PURE__*/React.createElement(Rect, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 61\n        }\n      }), shape.mode === \"drag_circle\" && /*#__PURE__*/React.createElement(RadioButtonUncheckedIcon, {\n        fontSize: \"small\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 58\n        }\n      }), shape.mode === \"draw_line_string\" && /*#__PURE__*/React.createElement(ShowChartIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 63\n        }\n      })), /*#__PURE__*/React.createElement(ListItemText, {\n        primary: shape.title,\n        id: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 21\n        }\n      }));\n    });\n  };\n\n  const handleClose = () => {\n    setStateMapControls({ ...stateMapControls,\n      anchorEl: null\n    });\n  };\n\n  const handleDeleteSpatialDataAndShape = () => {\n    const {\n      currentFeature\n    } = stateApp;\n\n    if (currentFeature) {\n      const elem = document.getElementById(currentFeature.id); // elem.parentNode.removeChild(elem);\n\n      console.log(\"elem\", elem);\n      setStateApp(state => ({ ...state,\n        editDraw: false,\n        currentFeature: undefined\n      }));\n      stateApp.draw.delete(currentFeature.id);\n\n      if (currentFeature.id.includes(\"draw_polygon\") || currentFeature.id.includes(\"drag_circle\") || currentFeature.id.includes(\"draw_rectangle\")) {\n        setStateNav(stateNav => ({ ...stateNav,\n          filterDrawing: []\n        }));\n      }\n    }\n  };\n\n  const handleSaveSpatialDataToShape = (spatialData, dataType) => {\n    // save data onto geoJSON properties fields\n    spatialDataAttributes.forEach(attribute => {\n      // console.log(attribute, spatialData[attribute]);\n      stateApp.draw.setFeatureProperty(stateApp.currentFeature.id, attribute, spatialData[attribute]);\n\n      if (spatialData[attribute] != null || typeof spatialData[attribute] !== 'undefined') {\n        stateApp.currentFeature.properties[attribute] = spatialData[attribute];\n      }\n    });\n    stateApp.currentFeature.properties.id = stateApp.currentFeature.id;\n    let position = null;\n\n    if (typeof stateApp.currentFeature.properties.shapeCenter == 'string') {\n      position = JSON.parse(stateApp.currentFeature.properties.shapeCenter);\n    } else {\n      position = stateApp.currentFeature.properties.shapeCenter;\n    }\n\n    const symbolFeature = {\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: position\n      },\n      properties: { ...stateApp.currentFeature.properties,\n        id: `${stateApp.currentFeature.properties.id}_label`,\n        label: spatialData.shapeLabel\n      }\n    };\n    toggleSpatialDataCard(false);\n    const {\n      currentFeature\n    } = stateApp;\n    stateApp.draw.delete(currentFeature.id); // handleDeleteSpatialDataAndShape();\n    // if (currentFeature) {\n    //     setStateApp((state) => ({\n    //         ...state,\n    //         editDraw: false,\n    //         currentFeature: undefined,\n    //     }));\n    //     if (currentFeature.id.includes(\"draw_polygon\")\n    //         || currentFeature.id.includes(\"drag_circle\")\n    //         || currentFeature.id.includes(\"draw_rectangle\")) {\n    //         setStateNav((stateNav) => ({\n    //             ...stateNav,\n    //             filterDrawing: []\n    //         }));\n    //     }\n    // }\n    //////cleaning the selected title opinion and redirecting to title opinion page//\n\n    if (dataType === \"title\") {\n      setStateApp(stateApp => {\n        return { ...stateApp,\n          selectedTitleOpinionId: null\n        };\n      });\n      history.push(\"/titleopinion\");\n    } else {\n      if (user._id != \"\") {\n        const customLayerData = {\n          shape: JSON.stringify(stateApp.currentFeature),\n          layer: dataType,\n          name: spatialData.shapeLabel,\n          user: user._id\n        };\n        const customLayerSymbolData = {\n          shape: JSON.stringify(symbolFeature),\n          layer: `${dataType}_labels`,\n          name: spatialData.shapeLabel,\n          user: user._id\n        };\n        upsertCustomLayer({\n          variables: {\n            customLayer: customLayerData\n          }\n        });\n        upsertCustomLayer({\n          variables: {\n            customLayer: customLayerSymbolData\n          }\n        });\n        getCustomLayers({\n          variables: {\n            userId: user._id\n          }\n        }); // setStateApp({\n        //     ...stateApp,\n        //     customLayers: [\n        //         ...stateApp.customLayers,\n        //         customLayerData,\n        //         customLayerSymbolData\n        //     ]\n        // });\n      }\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ClickAwayListener, {\n    onClickAway: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(StyledMenu, {\n    id: \"draw-shapes\",\n    keepMounted: true,\n    anchorEl: stateMapControls.anchorEl,\n    open: Boolean(stateMapControls.anchorEl),\n    onClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(StyledMenuItem, {\n    disableRipple: true,\n    key: \"subheader\",\n    role: undefined,\n    dense: true,\n    className: classes.subHeaderItem,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    primary: \"Draw Shapes\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 25\n    }\n  })), createShapeDrawOptions())), showSpatialDataCard && stateApp.currentFeature !== undefined && !stateApp.currentFeature.id.includes(\"draw_polygon\") && !stateApp.currentFeature.id.includes(\"drag_circle\") && !stateApp.currentFeature.id.includes(\"draw_rectangle\") && !stateApp.currentFeature.id.includes(\"edit_polygon\") ? /*#__PURE__*/React.createElement(SpatialDataCard, {\n    closeSpatialDataCard: () => toggleSpatialDataCard(false),\n    saveSpatialData: handleSaveSpatialDataToShape,\n    deleteSpatialDataAndShape: handleDeleteSpatialDataAndShape,\n    selectedFeature: stateApp.currentFeature,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 21\n    }\n  }) : null);\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/MapControls/components/DrawShapes/DrawShapes.js"],"names":["React","useContext","useEffect","useState","useLayoutEffect","useMutation","useLazyQuery","loadCSS","MapControlsContext","AppContext","useStyles","StyledMenu","StyledMenuItem","ClickAwayListener","ListItemText","SpatialDataCard","area","convertArea","spatialDataAttributes","addCustomShapeProperties","createShapeLabelLayer","mapboxgl","Marker","makeStyles","Icon","polylabel","useHistory","UPSERTCUSTOMLAYER","CUSTOMLAYERSQUERY","USERBYEMAIL","default","DrawPoly","Rect","ShowChartIcon","RadioButtonUncheckedIcon","NavigationContext","DEBUG_GREEN","DEBUG_YELLOW","DEBUG_BLUE","DEBUG_RED","availableShapes","title","mode","localStyles","theme","label","width","height","display","alignItems","justifyContent","color","fontSize","DrawShapes","props","classes","history","localClasses","stateMapControls","setStateMapControls","stateApp","setStateApp","stateNav","setStateNav","showSpatialDataCard","toggleSpatialDataCard","upsertCustomLayer","data","customLayerInsertedData","getCustomLayers","customLayerData","fetchPolicy","DEBUGGER","source","value","console","log","createShapeMarker","feature","el","document","createElement","setAttribute","id","innerHTML","slice","className","getUserByEmail","dataUser","user","setUser","_id","customLayers","state","currentFeature","undefined","editDraw","email","variables","userEmail","userByEmail","map","on","features","draw","includes","popupOpen","featureOrMapShape","createShapeDrawOptions","shape","index","evt","changeMode","handleClose","paddingRight","icon","anchorEl","handleDeleteSpatialDataAndShape","elem","getElementById","delete","filterDrawing","handleSaveSpatialDataToShape","spatialData","dataType","forEach","attribute","setFeatureProperty","properties","position","shapeCenter","JSON","parse","symbolFeature","type","geometry","coordinates","shapeLabel","selectedTitleOpinionId","push","stringify","layer","name","customLayerSymbolData","customLayer","userId","Boolean","subHeaderItem"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState, useLayoutEffect } from \"react\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/react-hooks\";\r\nimport loadCSS from \"fg-loadcss\";\r\n// STATE MANAGEMENT\r\nimport { MapControlsContext } from \"../../MapControlsContext\";\r\nimport { AppContext } from \"../../../../AppContext\";\r\n// STYLES - Material UI Required Components\r\nimport { useStyles, StyledMenu, StyledMenuItem } from \"../muiThemes\";\r\nimport ClickAwayListener from \"@material-ui/core/ClickAwayListener\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\n// STYLES - Font Awesome Icons Required for Menu Items\r\n//import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n//import { faGripLines, faDrawPolygon } from \"@fortawesome/free-solid-svg-icons\";\r\n//import { faCircle, faSquare } from \"@fortawesome/free-regular-svg-icons\";\r\n//import RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\r\n// COMPONENTS\r\nimport SpatialDataCard from \"../spatialDataCard\";\r\n// HELPERS\r\nimport { area, convertArea } from \"@turf/turf\";\r\nimport { spatialDataAttributes } from \"./constants\";\r\nimport {\r\n  addCustomShapeProperties,\r\n  createShapeLabelLayer\r\n} from \"./drawShapesHelpers\";\r\nimport mapboxgl, { Marker } from \"mapbox-gl\";\r\nimport { makeStyles, Icon } from \"@material-ui/core\";\r\nimport polylabel from \"polylabel\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nimport { UPSERTCUSTOMLAYER } from \"../../../../graphQL/useMutationUpsertCustomLayer\";\r\nimport { CUSTOMLAYERSQUERY } from \"../../../../graphQL/useQueryCustomLayers\";\r\nimport { USERBYEMAIL } from \"../../../../graphQL/useQueryUserByEmail\";\r\n\r\n//import CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\r\n//import RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\n//import { mdiShapePolygonPlus } from '@mdi/js'; \r\nimport {default as DrawPoly} from '../../../Shared/svgIcons/polygon';\r\nimport {default as Rect} from '../../../Shared/svgIcons/rectangle';\r\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\r\nimport RadioButtonUncheckedIcon from '@material-ui/icons/RadioButtonUnchecked';\r\nimport {NavigationContext} from \"../../../Navigation/NavigationContext\";\r\n\r\n// import { availableShapes } from \"./constants\";\r\nconst DEBUG_GREEN = \"background: green; color: white; border: 1px solid black\";\r\nconst DEBUG_YELLOW = \"background: yellow; color: red; border: 1px solid black\";\r\nconst DEBUG_BLUE = \"background: blue; color: white; border: 1px solid black\";\r\nconst DEBUG_RED = \"background: red; color: white; border: 1px solid black\";\r\n\r\n\r\n\r\n\r\nexport const availableShapes = [\r\n  {\r\n    title: \"Polygon\",\r\n    mode: \"draw_polygon\",\r\n    //icon: \"fa fa-draw-polygon\"\r\n  },\r\n  {\r\n    title: \"Circle\",\r\n    mode: \"drag_circle\",\r\n    //icon: \"fa fa-circle\"\r\n  },\r\n  {\r\n    title: \"Rectangle\",\r\n    mode: \"draw_rectangle\",\r\n    //icon: \"fa fa-square\"\r\n  },\r\n  {\r\n    title: \"Line\",\r\n    mode: \"draw_line_string\",\r\n    //icon: \"fa fa-grip-lines\"\r\n  }\r\n];\r\n\r\nconst localStyles = makeStyles(theme => ({\r\n  label: {\r\n    width: \"150px\",\r\n    height: \"15px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    color: \"white\",\r\n    fontSize: \"1rem\"\r\n  }\r\n}));\r\n\r\nexport default function DrawShapes(props) {\r\n    const classes = useStyles();\r\n    let history = useHistory();\r\n    const localClasses = localStyles();\r\n    const [stateMapControls, setStateMapControls] = useContext(\r\n        MapControlsContext\r\n    );\r\n    const [stateApp, setStateApp] = useContext(AppContext);\r\n    \r\n    const [stateNav, setStateNav] = useContext(NavigationContext);\r\n    const [showSpatialDataCard, toggleSpatialDataCard] = useState(false);\r\n\r\n    const [upsertCustomLayer, {data: customLayerInsertedData}] = useMutation(UPSERTCUSTOMLAYER);\r\n\r\n    const [getCustomLayers, { data: customLayerData }] = useLazyQuery(\r\n        CUSTOMLAYERSQUERY,\r\n        { fetchPolicy: \"network-only\" }\r\n    );\r\n\r\n    const DEBUGGER = (source, value) => {\r\n        console.log(`%c[DrawShapes.js] ${source}`, DEBUG_GREEN, value);\r\n    };\r\n\r\n    const createShapeMarker = feature => {\r\n        var el = document.createElement(\"div\");\r\n        el.setAttribute(\"id\", feature.id);\r\n        el.innerHTML = \"Feature_\" + feature.id.slice(-4);\r\n        el.className = localClasses.label;\r\n        return el;\r\n    };\r\n\r\n    // useEffect(() => {\r\n    //   loadCSS(\r\n    //     'https://use.fontawesome.com/releases/v5.1.0/css/all.css',\r\n    //     document.querySelector('#font-awesome-css'),\r\n    //   );\r\n    // }, []);\r\n\r\n    const [getUserByEmail, { data: dataUser }] = useLazyQuery(USERBYEMAIL);\r\n\r\n    const [user, setUser] = useState({ _id: \"\" });\r\n\r\n    useEffect(() => {\r\n        console.log(customLayerData);\r\n        if (customLayerData && customLayerData.customLayers) {\r\n            setStateApp((state) => ({\r\n                ...state,\r\n                customLayers: customLayerData.customLayers,\r\n                currentFeature: undefined,\r\n                editDraw: false,\r\n            }));\r\n        }\r\n    }, [customLayerData]);\r\n\r\n    useEffect(() => {\r\n        if (stateApp && stateApp.user && stateApp.user.email) {\r\n            getUserByEmail({\r\n                variables: {\r\n                    userEmail: stateApp.user.email,\r\n                },\r\n            });\r\n        }\r\n    }, [stateApp.user.email]);\r\n\r\n    useEffect(() => {\r\n        if (dataUser && dataUser.userByEmail) {\r\n            setUser(dataUser.userByEmail);\r\n        }\r\n    }, [dataUser]);\r\n\r\n    useEffect(() => {\r\n        const {map} = stateApp;\r\n        map.on(\"draw.create\", ({features}) => {\r\n            const [feature] = features;\r\n            const {draw} = stateApp;\r\n            if (feature) {\r\n                addCustomShapeProperties(feature, draw);\r\n            }\r\n            setStateApp((state) => ({...state, editDraw: false}));\r\n        });\r\n\r\n        map.on(\"draw.selectionchange\", ({features}) => {\r\n            const [feature] = features;\r\n            if (feature && !feature.id.includes('edit_polygon')) {\r\n                console.log('draw shape check feature', feature);\r\n                setStateApp(stateApp => {\r\n                    return {\r\n                        ...stateApp,\r\n                        popupOpen: false,\r\n                        currentFeature: feature,\r\n                        featureOrMapShape: feature,\r\n                        editDraw: true\r\n                    };\r\n                });\r\n            } else {\r\n                setStateApp((state) => ({...state, currentFeature: undefined, editDraw: false}));\r\n            }\r\n        });\r\n    }, [stateApp.map, showSpatialDataCard]);\r\n\r\n    useEffect(() => {\r\n        setStateApp((state) => ({...state, editDraw: showSpatialDataCard}));\r\n    }, [showSpatialDataCard])\r\n\r\n    useEffect(() => {\r\n        const {currentFeature} = stateApp;\r\n        if (currentFeature !== undefined) {\r\n            toggleSpatialDataCard(true);\r\n        } else {\r\n            toggleSpatialDataCard(false);\r\n        }\r\n    }, [stateApp.currentFeature]);\r\n\r\n    const createShapeDrawOptions = () => {\r\n        return availableShapes.map((shape, index) => {\r\n            return (\r\n                <StyledMenuItem\r\n                    key={index}\r\n                    onClick={evt => {\r\n                        stateApp.draw.changeMode(shape.mode);\r\n                        setStateApp((state) => ({...state, editDraw: true}));\r\n                        handleClose();\r\n                    }}\r\n                >\r\n                    <div style={{color: \"white\", paddingRight: \"15px\"}}>\r\n                        <Icon className={shape.icon} color=\"secondary\"/>\r\n                        {shape.mode === \"draw_polygon\" && <DrawPoly/>}\r\n                        {shape.mode === \"draw_rectangle\" && <Rect/>}\r\n                        {shape.mode === \"drag_circle\" && <RadioButtonUncheckedIcon fontSize='small'/>}\r\n                        {shape.mode === \"draw_line_string\" && <ShowChartIcon/>}\r\n                    </div>\r\n                    <ListItemText primary={shape.title} id={index}/>\r\n                </StyledMenuItem>\r\n            );\r\n        });\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setStateMapControls({...stateMapControls, anchorEl: null});\r\n    };\r\n\r\n    const handleDeleteSpatialDataAndShape = () => {\r\n        const {currentFeature} = stateApp;\r\n        if (currentFeature) {\r\n            const elem = document.getElementById(currentFeature.id);\r\n            // elem.parentNode.removeChild(elem);\r\n            console.log(\"elem\", elem);\r\n            \r\n            setStateApp((state) => ({\r\n                ...state,\r\n                editDraw: false,\r\n                currentFeature: undefined,\r\n            }));\r\n            stateApp.draw.delete(currentFeature.id);\r\n            if (currentFeature.id.includes(\"draw_polygon\")\r\n                || currentFeature.id.includes(\"drag_circle\")\r\n                || currentFeature.id.includes(\"draw_rectangle\")) {\r\n                setStateNav((stateNav) => ({\r\n                    ...stateNav,\r\n                    filterDrawing: []\r\n                }));\r\n            }\r\n        }\r\n    };\r\n\r\n    const handleSaveSpatialDataToShape = (spatialData, dataType) => {\r\n        // save data onto geoJSON properties fields\r\n\r\n        spatialDataAttributes.forEach(attribute => {\r\n            // console.log(attribute, spatialData[attribute]);\r\n            stateApp.draw.setFeatureProperty(\r\n                stateApp.currentFeature.id,\r\n                attribute,\r\n                spatialData[attribute]\r\n            );\r\n            if (spatialData[attribute] != null || typeof spatialData[attribute] !== 'undefined') {\r\n                stateApp.currentFeature.properties[attribute] = spatialData[attribute];\r\n            }\r\n        });\r\n        stateApp.currentFeature.properties.id = stateApp.currentFeature.id\r\n\r\n        let position = null;\r\n\r\n        if (typeof stateApp.currentFeature.properties.shapeCenter == 'string') {\r\n            position = JSON.parse(stateApp.currentFeature.properties.shapeCenter);\r\n        } else {\r\n            position = stateApp.currentFeature.properties.shapeCenter\r\n        }\r\n\r\n        const symbolFeature = {\r\n            type: \"Feature\",\r\n            geometry: {\r\n                type: \"Point\",\r\n                coordinates: position\r\n            },\r\n            properties: {\r\n                ...stateApp.currentFeature.properties,\r\n                id: `${stateApp.currentFeature.properties.id}_label`,\r\n                label: spatialData.shapeLabel,\r\n            }\r\n        }\r\n\r\n        toggleSpatialDataCard(false);\r\n        const {currentFeature} = stateApp;\r\n        stateApp.draw.delete(currentFeature.id);\r\n\r\n        // handleDeleteSpatialDataAndShape();\r\n        // if (currentFeature) {\r\n        //     setStateApp((state) => ({\r\n        //         ...state,\r\n        //         editDraw: false,\r\n        //         currentFeature: undefined,\r\n        //     }));\r\n        //     if (currentFeature.id.includes(\"draw_polygon\")\r\n        //         || currentFeature.id.includes(\"drag_circle\")\r\n        //         || currentFeature.id.includes(\"draw_rectangle\")) {\r\n        //         setStateNav((stateNav) => ({\r\n        //             ...stateNav,\r\n        //             filterDrawing: []\r\n        //         }));\r\n        //     }\r\n        // }\r\n\r\n        //////cleaning the selected title opinion and redirecting to title opinion page//\r\n\r\n        if (dataType === \"title\") {\r\n            setStateApp(stateApp => {\r\n                return {\r\n                    ...stateApp,\r\n                    selectedTitleOpinionId: null\r\n                };\r\n            });\r\n\r\n            history.push(\"/titleopinion\");\r\n        } else {\r\n            if (user._id != \"\" ) {\r\n                const customLayerData = {\r\n                    shape: JSON.stringify(stateApp.currentFeature),\r\n                    layer: dataType,\r\n                    name: spatialData.shapeLabel,\r\n                    user: user._id\r\n                };\r\n                const customLayerSymbolData = {\r\n                    shape: JSON.stringify(symbolFeature),\r\n                    layer: `${dataType}_labels`,\r\n                    name: spatialData.shapeLabel,\r\n                    user: user._id\r\n                };\r\n\r\n                upsertCustomLayer({\r\n                    variables: { customLayer: customLayerData }\r\n                });\r\n                upsertCustomLayer({\r\n                    variables: { customLayer: customLayerSymbolData }\r\n                });\r\n\r\n                getCustomLayers({\r\n                    variables: {\r\n                        userId: user._id,\r\n                    },\r\n                });\r\n                \r\n                // setStateApp({\r\n                //     ...stateApp,\r\n                //     customLayers: [\r\n                //         ...stateApp.customLayers,\r\n                //         customLayerData,\r\n                //         customLayerSymbolData\r\n                //     ]\r\n                // });\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ClickAwayListener onClickAway={handleClose}>\r\n                <StyledMenu\r\n                    id=\"draw-shapes\"\r\n                    keepMounted\r\n                    anchorEl={stateMapControls.anchorEl}\r\n                    open={Boolean(stateMapControls.anchorEl)}\r\n                    onClose={handleClose}\r\n                >\r\n                    <StyledMenuItem\r\n                        disableRipple\r\n                        key=\"subheader\"\r\n                        role={undefined}\r\n                        dense\r\n                        className={classes.subHeaderItem}\r\n                    >\r\n                        <ListItemText primary=\"Draw Shapes\"/>\r\n                    </StyledMenuItem>\r\n                    {createShapeDrawOptions()}\r\n                </StyledMenu>\r\n            </ClickAwayListener>\r\n            {showSpatialDataCard && stateApp.currentFeature !== undefined && !stateApp.currentFeature.id.includes(\"draw_polygon\")\r\n            && !stateApp.currentFeature.id.includes(\"drag_circle\")\r\n            && !stateApp.currentFeature.id.includes(\"draw_rectangle\")\r\n            && !stateApp.currentFeature.id.includes(\"edit_polygon\")\r\n                ? (\r\n                    <SpatialDataCard\r\n                        closeSpatialDataCard={() => toggleSpatialDataCard(false)}\r\n                        saveSpatialData={handleSaveSpatialDataToShape}\r\n                        deleteSpatialDataAndShape={handleDeleteSpatialDataAndShape}\r\n                        selectedFeature={stateApp.currentFeature}\r\n                    />\r\n                ) : null}\r\n        </React.Fragment>\r\n    );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}