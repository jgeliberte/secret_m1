{"ast":null,"code":"export function getSize(columns) {\n  if (Array.isArray(columns)) {\n    return columns.length;\n  }\n\n  return columns.size;\n} // Logic extented to allow for functions to be passed down in column.editable\n// this allows us to deicde whether we can be editing from a cell level\n\nexport function canEdit(column, rowData, enableCellSelect) {\n  if (typeof column.editable === 'function') {\n    return enableCellSelect === true && column.editable(rowData);\n  }\n\n  return enableCellSelect === true && (!!column.editor || !!column.editable);\n}\nexport function isFrozen(column) {\n  return column.frozen === true;\n}","map":{"version":3,"sources":["../src/ColumnUtils.ts"],"names":[],"mappings":"AAGA,OAAM,SAAU,OAAV,CAAqB,OAArB,EAAqD;AACzD,MAAI,KAAK,CAAC,OAAN,CAAc,OAAd,CAAJ,EAA4B;AAC1B,WAAO,OAAO,CAAC,MAAf;AACD;;AAED,SAAO,OAAO,CAAC,IAAf;AACD,C,CAED;AACA;;AACA,OAAM,SAAU,OAAV,CAAqB,MAArB,EAAkD,OAAlD,EAA8D,gBAA9D,EAAwF;AAC5F,MAAI,OAAO,MAAM,CAAC,QAAd,KAA2B,UAA/B,EAA2C;AACzC,WAAO,gBAAgB,KAAK,IAArB,IAA6B,MAAM,CAAC,QAAP,CAAgB,OAAhB,CAApC;AACD;;AACD,SAAO,gBAAgB,KAAK,IAArB,KAA8B,CAAC,CAAC,MAAM,CAAC,MAAT,IAAmB,CAAC,CAAC,MAAM,CAAC,QAA1D,CAAP;AACD;AAED,OAAM,SAAU,QAAV,CAAsB,MAAtB,EAA6D;AACjE,SAAO,MAAM,CAAC,MAAP,KAAkB,IAAzB;AACD","sourcesContent":["import Immutable from 'immutable';\nimport { Column, CalculatedColumn } from './common/types';\n\nexport function getSize<T>(columns: T[] | Immutable.List<T>): number {\n  if (Array.isArray(columns)) {\n    return columns.length;\n  }\n\n  return columns.size;\n}\n\n// Logic extented to allow for functions to be passed down in column.editable\n// this allows us to deicde whether we can be editing from a cell level\nexport function canEdit<R>(column: CalculatedColumn<R>, rowData: R, enableCellSelect?: boolean): boolean {\n  if (typeof column.editable === 'function') {\n    return enableCellSelect === true && column.editable(rowData);\n  }\n  return enableCellSelect === true && (!!column.editor || !!column.editable);\n}\n\nexport function isFrozen<R>(column: Column<R> | CalculatedColumn<R>): boolean {\n  return column.frozen === true;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}