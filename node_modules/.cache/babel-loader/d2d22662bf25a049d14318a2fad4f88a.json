{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterTags.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { NavigationContext } from \"../NavigationContext\";\nimport { USERAVAILABLEFILTERTAGSQUERY } from \"../../../graphQL/useQueryUserAvailableFilterTags\";\nimport { OBJECTSFROMTAGSARRAY } from \"../../../graphQL/useQueryObjectsFromTagsArray\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { AppContext } from \"../../../AppContext\";\nimport { OWNERSWELLSQUERY } from \"../../../graphQL/useQueryOwnersWells\";\nexport default function FilterTags() {\n  const [stateApp, setStateApp] = useContext(AppContext);\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [ownersWells, setOwnersWells] = React.useState(null);\n  const [getUserAvailableFilterTags, {\n    loading,\n    data: dataUserAvailableTags\n  }] = useLazyQuery(USERAVAILABLEFILTERTAGSQUERY, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [getWellsIdsFromTagsArray, {\n    data: dataWellsIds\n  }] = useLazyQuery(OBJECTSFROMTAGSARRAY, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [getOwnersIdsFromTagsArray, {\n    data: dataOwnersIds\n  }] = useLazyQuery(OBJECTSFROMTAGSARRAY, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [getOwnersWells, {\n    data: dataOwnersWells\n  }] = useLazyQuery(OWNERSWELLSQUERY); ////All User Available Tags For The DropDown\n\n  useEffect(() => {\n    if (stateApp.user && stateApp.user.mongoId) {\n      getUserAvailableFilterTags({\n        variables: {\n          userId: stateApp.user.mongoId\n        }\n      });\n    }\n  }, [stateApp.user]); ////Fetching wells ids and owners ids\n\n  useEffect(() => {\n    if (stateNav.selectedTags && stateNav.selectedTags.length > 0 && stateApp.user) {\n      getWellsIdsFromTagsArray({\n        variables: {\n          objectType: \"well\",\n          tagsArray: stateNav.selectedTags,\n          userId: stateApp.user.mongoId\n        }\n      });\n      getOwnersIdsFromTagsArray({\n        variables: {\n          objectType: \"owner\",\n          tagsArray: stateNav.selectedTags,\n          userId: stateApp.user.mongoId\n        }\n      });\n    }\n  }, [stateNav.selectedTags, stateApp.user]);\n  useEffect(() => {\n    if (dataOwnersIds && dataOwnersIds.objectsFromTagsArray) {\n      if (dataOwnersIds.objectsFromTagsArray.length > 0) {\n        ////Fetching all well ids from owners\n        getOwnersWells({\n          variables: {\n            ownersIds: dataOwnersIds.objectsFromTagsArray\n          }\n        });\n      } else {\n        if (dataWellsIds && dataWellsIds.objectsFromTagsArray) setStateNav(stateNav => ({ ...stateNav,\n          wellsIdsFromTags: dataWellsIds.objectsFromTagsArray.map(well => well.toUpperCase())\n        }));\n      }\n    }\n  }, [dataOwnersIds, dataWellsIds]);\n  useEffect(() => {\n    if (dataOwnersWells && dataOwnersWells.ownersWells) if (dataOwnersWells.ownersWells.length <= 0) {\n      setOwnersWells([]);\n    } else {\n      let wellsIdsArray = [];\n\n      for (let i = 0; i < dataOwnersWells.ownersWells.length; i++) {\n        wellsIdsArray = [...wellsIdsArray, ...dataOwnersWells.ownersWells[i].wells.map(well => well.wellId.toUpperCase())];\n      }\n\n      setOwnersWells(wellsIdsArray);\n    }\n  }, [dataOwnersWells]);\n  useEffect(() => {\n    if (dataWellsIds && dataWellsIds.objectsFromTagsArray && ownersWells) {\n      setStateNav(stateNav => ({ ...stateNav,\n        wellsIdsFromTags: [...dataWellsIds.objectsFromTagsArray.map(well => well.toUpperCase()), ...ownersWells]\n      }));\n    }\n  }, [dataWellsIds, ownersWells]);\n\n  const handleChange = value => {\n    setOwnersWells(null);\n\n    if (value && value.length) {\n      setStateNav(stateNav => ({ ...stateNav,\n        selectedTags: value\n      }));\n    } else {\n      setStateNav(stateNav => ({ ...stateNav,\n        selectedTags: [],\n        wellsIdsFromTags: []\n      }));\n      setStateApp(stateApp => ({ ...stateApp,\n        wellListFromTagsFilter: null\n      }));\n      stateApp.deactivateUserDefinedLayers(5);\n    }\n  };\n\n  return loading ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"56px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"secondary\",\n    style: {\n      marginLeft: \"50%\"\n    },\n    size: 28,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  })) : /*#__PURE__*/React.createElement(Autocomplete, {\n    disabled: !(dataUserAvailableTags && dataUserAvailableTags.userAvailableFilterTags && dataUserAvailableTags.userAvailableFilterTags.length > 0),\n    ChipProps: {\n      color: \"secondary\"\n    },\n    defaultValue: stateNav.selectedTags,\n    onChange: (event, newValue) => {\n      handleChange(newValue);\n    },\n    multiple: true,\n    options: dataUserAvailableTags && dataUserAvailableTags.userAvailableFilterTags ? dataUserAvailableTags.userAvailableFilterTags : [],\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"Tags\",\n      placeholder: \"\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }\n    })),\n    disableListWrap: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterTags.js"],"names":["React","useContext","useEffect","TextField","Autocomplete","NavigationContext","USERAVAILABLEFILTERTAGSQUERY","OBJECTSFROMTAGSARRAY","useLazyQuery","CircularProgress","AppContext","OWNERSWELLSQUERY","FilterTags","stateApp","setStateApp","stateNav","setStateNav","ownersWells","setOwnersWells","useState","getUserAvailableFilterTags","loading","data","dataUserAvailableTags","fetchPolicy","getWellsIdsFromTagsArray","dataWellsIds","getOwnersIdsFromTagsArray","dataOwnersIds","getOwnersWells","dataOwnersWells","user","mongoId","variables","userId","selectedTags","length","objectType","tagsArray","objectsFromTagsArray","ownersIds","wellsIdsFromTags","map","well","toUpperCase","wellsIdsArray","i","wells","wellId","handleChange","value","wellListFromTagsFilter","deactivateUserDefinedLayers","height","marginLeft","userAvailableFilterTags","color","event","newValue","params"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\nimport { USERAVAILABLEFILTERTAGSQUERY } from \"../../../graphQL/useQueryUserAvailableFilterTags\";\r\nimport { OBJECTSFROMTAGSARRAY } from \"../../../graphQL/useQueryObjectsFromTagsArray\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { AppContext } from \"../../../AppContext\";\r\nimport { OWNERSWELLSQUERY } from \"../../../graphQL/useQueryOwnersWells\";\r\n\r\nexport default function FilterTags() {\r\n  const [stateApp, setStateApp] = useContext(AppContext);\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [ownersWells, setOwnersWells] = React.useState(null);\r\n\r\n  const [\r\n    getUserAvailableFilterTags,\r\n    { loading, data: dataUserAvailableTags },\r\n  ] = useLazyQuery(USERAVAILABLEFILTERTAGSQUERY, {\r\n    fetchPolicy: \"cache-and-network\",\r\n  });\r\n\r\n  const [getWellsIdsFromTagsArray, { data: dataWellsIds }] = useLazyQuery(\r\n    OBJECTSFROMTAGSARRAY,\r\n    {\r\n      fetchPolicy: \"cache-and-network\",\r\n    }\r\n  );\r\n  const [getOwnersIdsFromTagsArray, { data: dataOwnersIds }] = useLazyQuery(\r\n    OBJECTSFROMTAGSARRAY,\r\n    {\r\n      fetchPolicy: \"cache-and-network\",\r\n    }\r\n  );\r\n\r\n  const [getOwnersWells, { data: dataOwnersWells }] = useLazyQuery(\r\n    OWNERSWELLSQUERY\r\n  );\r\n\r\n  ////All User Available Tags For The DropDown\r\n  useEffect(() => {\r\n    if (stateApp.user && stateApp.user.mongoId) {\r\n      getUserAvailableFilterTags({\r\n        variables: {\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n    }\r\n  }, [stateApp.user]);\r\n\r\n  ////Fetching wells ids and owners ids\r\n  useEffect(() => {\r\n    if (\r\n      stateNav.selectedTags &&\r\n      stateNav.selectedTags.length > 0 &&\r\n      stateApp.user\r\n    ) {\r\n      getWellsIdsFromTagsArray({\r\n        variables: {\r\n          objectType: \"well\",\r\n          tagsArray: stateNav.selectedTags,\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n      getOwnersIdsFromTagsArray({\r\n        variables: {\r\n          objectType: \"owner\",\r\n          tagsArray: stateNav.selectedTags,\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n    }\r\n  }, [stateNav.selectedTags, stateApp.user]);\r\n\r\n  useEffect(() => {\r\n    if (dataOwnersIds && dataOwnersIds.objectsFromTagsArray) {\r\n      if (dataOwnersIds.objectsFromTagsArray.length > 0) {\r\n        ////Fetching all well ids from owners\r\n        getOwnersWells({\r\n          variables: {\r\n            ownersIds: dataOwnersIds.objectsFromTagsArray,\r\n          },\r\n        });\r\n      } else {\r\n        if (dataWellsIds && dataWellsIds.objectsFromTagsArray)\r\n          setStateNav((stateNav) => ({\r\n            ...stateNav,\r\n            wellsIdsFromTags: dataWellsIds.objectsFromTagsArray.map((well) =>\r\n              well.toUpperCase()\r\n            ),\r\n          }));\r\n      }\r\n    }\r\n  }, [dataOwnersIds, dataWellsIds]);\r\n\r\n  useEffect(() => {\r\n    if (dataOwnersWells && dataOwnersWells.ownersWells)\r\n      if (dataOwnersWells.ownersWells.length <= 0) {\r\n        setOwnersWells([]);\r\n      } else {\r\n        let wellsIdsArray = [];\r\n        for (let i = 0; i < dataOwnersWells.ownersWells.length; i++) {\r\n          wellsIdsArray = [\r\n            ...wellsIdsArray,\r\n            ...dataOwnersWells.ownersWells[i].wells.map((well) =>\r\n              well.wellId.toUpperCase()\r\n            ),\r\n          ];\r\n        }\r\n        setOwnersWells(wellsIdsArray);\r\n      }\r\n  }, [dataOwnersWells]);\r\n\r\n  useEffect(() => {\r\n    if (dataWellsIds && dataWellsIds.objectsFromTagsArray && ownersWells) {\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        wellsIdsFromTags: [\r\n          ...dataWellsIds.objectsFromTagsArray.map((well) =>\r\n            well.toUpperCase()\r\n          ),\r\n          ...ownersWells,\r\n        ],\r\n      }));\r\n    }\r\n  }, [dataWellsIds, ownersWells]);\r\n\r\n  const handleChange = (value) => {\r\n    setOwnersWells(null);\r\n    if (value && value.length) {\r\n      setStateNav((stateNav) => ({ ...stateNav, selectedTags: value }));\r\n    } else {\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        selectedTags: [],\r\n        wellsIdsFromTags: [],\r\n      }));\r\n      setStateApp((stateApp) => ({\r\n        ...stateApp,\r\n        wellListFromTagsFilter: null,\r\n      }));\r\n      stateApp.deactivateUserDefinedLayers(5);\r\n    }\r\n  };\r\n\r\n  return loading ? (\r\n    <div style={{ height: \"56px\" }}>\r\n      <CircularProgress\r\n        color=\"secondary\"\r\n        style={{ marginLeft: \"50%\" }}\r\n        size={28}\r\n      />\r\n    </div>\r\n  ) : (\r\n    <Autocomplete\r\n      disabled={\r\n        !(\r\n          dataUserAvailableTags &&\r\n          dataUserAvailableTags.userAvailableFilterTags &&\r\n          dataUserAvailableTags.userAvailableFilterTags.length > 0\r\n        )\r\n      }\r\n      ChipProps={{ color: \"secondary\" }}\r\n      defaultValue={stateNav.selectedTags}\r\n      onChange={(event, newValue) => {\r\n        handleChange(newValue);\r\n      }}\r\n      multiple\r\n      options={\r\n        dataUserAvailableTags && dataUserAvailableTags.userAvailableFilterTags\r\n          ? dataUserAvailableTags.userAvailableFilterTags\r\n          : []\r\n      }\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          variant=\"outlined\"\r\n          label=\"Tags\"\r\n          placeholder=\"\"\r\n          fullWidth={true}\r\n        />\r\n      )}\r\n      disableListWrap\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}