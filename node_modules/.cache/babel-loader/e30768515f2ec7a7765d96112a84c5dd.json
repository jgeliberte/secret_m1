{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport HeaderRow from './HeaderRow';\nimport { resizeColumn } from './ColumnMetrics';\nimport getScrollbarSize from './getScrollbarSize';\nimport { HeaderRowType } from './common/enums';\n\nvar Header =\n/** @class */\nfunction (_super) {\n  __extends(Header, _super);\n\n  function Header() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.state = {\n      resizing: null\n    };\n    _this.row = React.createRef();\n    _this.filterRow = React.createRef();\n\n    _this.onColumnResize = function (column, width) {\n      var pos = _this.getColumnPosition(column);\n\n      if (pos === null) return;\n      var prevColumnMetrics = _this.state.resizing ? _this.state.resizing.columnMetrics : _this.props.columnMetrics;\n      var columnMetrics = resizeColumn(__assign({}, prevColumnMetrics), pos, width); // we don't want to influence scrollLeft while resizing\n\n      if (columnMetrics.totalWidth < prevColumnMetrics.totalWidth) {\n        columnMetrics.totalWidth = prevColumnMetrics.totalWidth;\n      }\n\n      _this.setState({\n        resizing: {\n          column: columnMetrics.columns[pos],\n          columnMetrics: columnMetrics\n        }\n      });\n    };\n\n    _this.onColumnResizeEnd = function (column, width) {\n      var pos = _this.getColumnPosition(column);\n\n      if (pos === null) return;\n\n      _this.props.onColumnResize(pos, width || column.width);\n    }; // Set the cell selection to -1 x -1 when clicking on the header\n\n\n    _this.onHeaderClick = function () {\n      _this.props.cellMetaData.onCellClick({\n        rowIdx: -1,\n        idx: -1\n      });\n    };\n\n    return _this;\n  }\n\n  Header.prototype.componentWillReceiveProps = function () {\n    this.setState({\n      resizing: null\n    });\n  };\n\n  Header.prototype.getHeaderRows = function () {\n    var _this = this;\n\n    var columnMetrics = this.getColumnMetrics();\n    return this.props.headerRows.map(function (row, index) {\n      // To allow header filters to be visible\n      var isFilterRow = row.rowType === HeaderRowType.FILTER;\n      var rowHeight = isFilterRow ? '500px' : 'auto';\n      var scrollbarSize = getScrollbarSize() > 0 ? getScrollbarSize() : 0;\n      var updatedWidth = typeof _this.props.totalWidth === 'number' ? _this.props.totalWidth - scrollbarSize : _this.props.totalWidth;\n      var headerRowStyle = {\n        top: _this.getCombinedHeaderHeights(index),\n        width: updatedWidth,\n        minHeight: rowHeight\n      };\n      return React.createElement(HeaderRow, {\n        key: row.rowType,\n        ref: isFilterRow ? _this.filterRow : _this.row,\n        rowType: row.rowType,\n        style: headerRowStyle,\n        onColumnResize: _this.onColumnResize,\n        onColumnResizeEnd: _this.onColumnResizeEnd,\n        width: columnMetrics.width,\n        height: row.height || _this.props.rowHeight,\n        columns: columnMetrics.columns,\n        draggableHeaderCell: _this.props.draggableHeaderCell,\n        filterable: row.filterable,\n        onFilterChange: row.onFilterChange,\n        onHeaderDrop: _this.props.onHeaderDrop,\n        sortColumn: _this.props.sortColumn,\n        sortDirection: _this.props.sortDirection,\n        onSort: _this.props.onSort,\n        getValidFilterValues: _this.props.getValidFilterValues\n      });\n    });\n  };\n\n  Header.prototype.getColumnMetrics = function () {\n    if (this.state.resizing) {\n      return this.state.resizing.columnMetrics;\n    }\n\n    return this.props.columnMetrics;\n  };\n\n  Header.prototype.getColumnPosition = function (column) {\n    var columns = this.getColumnMetrics().columns;\n    var idx = columns.findIndex(function (c) {\n      return c.key === column.key;\n    });\n    return idx === -1 ? null : idx;\n  };\n\n  Header.prototype.getCombinedHeaderHeights = function (until) {\n    var stopAt = typeof until === 'number' ? until : this.props.headerRows.length;\n    var height = 0;\n\n    for (var index = 0; index < stopAt; index++) {\n      height += this.props.headerRows[index].height || this.props.rowHeight;\n    }\n\n    return height;\n  };\n\n  Header.prototype.setScrollLeft = function (scrollLeft) {\n    var node = ReactDOM.findDOMNode(this.row.current);\n    node.scrollLeft = scrollLeft;\n    this.row.current.setScrollLeft(scrollLeft);\n\n    if (this.filterRow.current) {\n      var nodeFilters = ReactDOM.findDOMNode(this.filterRow.current);\n      nodeFilters.scrollLeft = scrollLeft;\n      this.filterRow.current.setScrollLeft(scrollLeft);\n    }\n  };\n\n  Header.prototype.render = function () {\n    var className = classNames('react-grid-Header', {\n      'react-grid-Header--resizing': !!this.state.resizing\n    });\n    return React.createElement(\"div\", {\n      style: {\n        height: this.getCombinedHeaderHeights()\n      },\n      className: className,\n      onClick: this.onHeaderClick\n    }, this.getHeaderRows());\n  };\n\n  return Header;\n}(React.Component);\n\nexport default Header;","map":{"version":3,"sources":["../src/Header.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\n\nimport HeaderRow from './HeaderRow';\nimport { resizeColumn } from './ColumnMetrics';\nimport getScrollbarSize from './getScrollbarSize';\nimport { HeaderRowType } from './common/enums';\nimport { CalculatedColumn, ColumnMetrics } from './common/types';\nimport { GridProps } from './Grid';\n\ntype SharedGridProps<R> = Pick<GridProps<R>,\n'columnMetrics'\n| 'onColumnResize'\n| 'rowHeight'\n| 'totalWidth'\n| 'headerRows'\n| 'sortColumn'\n| 'sortDirection'\n| 'draggableHeaderCell'\n| 'onSort'\n| 'onHeaderDrop'\n| 'getValidFilterValues'\n| 'cellMetaData'\n>;\n\nexport type HeaderProps<R> = SharedGridProps<R>;\n\ninterface State<R> {\n  resizing: { column: CalculatedColumn<R>; columnMetrics: ColumnMetrics<R> } | null;\n}\n\nexport default class Header<R> extends React.Component<HeaderProps<R>, State<R>> {\n  readonly state: Readonly<State<R>> = { resizing: null };\n\n  private readonly row = React.createRef<HeaderRow<R>>();\n  private readonly filterRow = React.createRef<HeaderRow<R>>();\n\n  componentWillReceiveProps(): void {\n    this.setState({ resizing: null });\n  }\n\n  onColumnResize = (column: CalculatedColumn<R>, width: number): void => {\n    const pos = this.getColumnPosition(column);\n\n    if (pos === null) return;\n\n    const prevColumnMetrics = this.state.resizing ? this.state.resizing.columnMetrics : this.props.columnMetrics;\n    const columnMetrics = resizeColumn({ ...prevColumnMetrics }, pos, width);\n\n    // we don't want to influence scrollLeft while resizing\n    if (columnMetrics.totalWidth < prevColumnMetrics.totalWidth) {\n      columnMetrics.totalWidth = prevColumnMetrics.totalWidth;\n    }\n\n    this.setState({\n      resizing: {\n        column: columnMetrics.columns[pos],\n        columnMetrics\n      }\n    });\n  };\n\n  onColumnResizeEnd = (column: CalculatedColumn<R>, width: number): void => {\n    const pos = this.getColumnPosition(column);\n    if (pos === null) return;\n    this.props.onColumnResize(pos, width || column.width);\n  };\n\n  getHeaderRows() {\n    const columnMetrics = this.getColumnMetrics();\n\n    return this.props.headerRows.map((row, index) => {\n      // To allow header filters to be visible\n      const isFilterRow = row.rowType === HeaderRowType.FILTER;\n      const rowHeight = isFilterRow ? '500px' : 'auto';\n      const scrollbarSize = getScrollbarSize() > 0 ? getScrollbarSize() : 0;\n      const updatedWidth = typeof this.props.totalWidth === 'number'\n        ? this.props.totalWidth - scrollbarSize\n        : this.props.totalWidth;\n      const headerRowStyle: React.CSSProperties = {\n        top: this.getCombinedHeaderHeights(index),\n        width: updatedWidth,\n        minHeight: rowHeight\n      };\n\n      return (\n        <HeaderRow<R>\n          key={row.rowType}\n          ref={isFilterRow ? this.filterRow : this.row}\n          rowType={row.rowType}\n          style={headerRowStyle}\n          onColumnResize={this.onColumnResize}\n          onColumnResizeEnd={this.onColumnResizeEnd}\n          width={columnMetrics.width}\n          height={row.height || this.props.rowHeight}\n          columns={columnMetrics.columns}\n          draggableHeaderCell={this.props.draggableHeaderCell}\n          filterable={row.filterable}\n          onFilterChange={row.onFilterChange}\n          onHeaderDrop={this.props.onHeaderDrop}\n          sortColumn={this.props.sortColumn}\n          sortDirection={this.props.sortDirection}\n          onSort={this.props.onSort}\n          getValidFilterValues={this.props.getValidFilterValues}\n        />\n      );\n    });\n  }\n\n  getColumnMetrics(): ColumnMetrics<R> {\n    if (this.state.resizing) {\n      return this.state.resizing.columnMetrics;\n    }\n    return this.props.columnMetrics;\n  }\n\n  getColumnPosition(column: CalculatedColumn<R>): number | null {\n    const { columns } = this.getColumnMetrics();\n    const idx = columns.findIndex(c => c.key === column.key);\n    return idx === -1 ? null : idx;\n  }\n\n  getCombinedHeaderHeights(until?: number): number {\n    const stopAt = typeof until === 'number'\n      ? until\n      : this.props.headerRows.length;\n\n    let height = 0;\n    for (let index = 0; index < stopAt; index++) {\n      height += this.props.headerRows[index].height || this.props.rowHeight;\n    }\n    return height;\n  }\n\n  setScrollLeft(scrollLeft: number): void {\n    const node = ReactDOM.findDOMNode(this.row.current) as Element;\n    node.scrollLeft = scrollLeft;\n    this.row.current!.setScrollLeft(scrollLeft);\n    if (this.filterRow.current) {\n      const nodeFilters = ReactDOM.findDOMNode(this.filterRow.current) as Element;\n      nodeFilters.scrollLeft = scrollLeft;\n      this.filterRow.current.setScrollLeft(scrollLeft);\n    }\n  }\n\n  // Set the cell selection to -1 x -1 when clicking on the header\n  onHeaderClick = (): void => {\n    this.props.cellMetaData.onCellClick({ rowIdx: -1, idx: -1 });\n  };\n\n  render() {\n    const className = classNames('react-grid-Header', {\n      'react-grid-Header--resizing': !!this.state.resizing\n    });\n\n    return (\n      <div\n        style={{ height: this.getCombinedHeaderHeights() }}\n        className={className}\n        onClick={this.onHeaderClick}\n      >\n        {this.getHeaderRows()}\n      </div>\n    );\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}