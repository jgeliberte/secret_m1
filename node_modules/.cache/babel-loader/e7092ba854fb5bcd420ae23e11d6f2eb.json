{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\ContactDetailCard\\\\components\\\\FieldContent.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Grid } from \"@material-ui/core\";\nimport { IconButton } from \"@material-ui/core\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport CreateTwoToneIcon from \"@material-ui/icons/CreateTwoTone\";\nimport TextField from \"@material-ui/core/TextField\";\nimport EditionPopover from \"./EditionPopover\";\nimport ClearSharpIcon from \"@material-ui/icons/ClearSharp\";\nimport CheckSharpIcon from \"@material-ui/icons/CheckSharp\";\nimport Button from \"@material-ui/core/Button\";\nimport { useMutation } from \"@apollo/react-hooks\";\nimport { UPDATECONTACT } from \"../../../graphQL/useMutationUpdateContact\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { AppContext } from \"../../../AppContext\";\nconst useStyles = makeStyles(theme => ({\n  fieldContentP: {\n    visibility: ({\n      loading\n    }) => loading ? \"hidden\" : \"visible\",\n    margin: ({\n      noMargin\n    }) => noMargin ? \"0\" : \"5px 10px\",\n    width: ({\n      noMargin\n    }) => {\n      if (noMargin) return \"fit-content\";\n    },\n    borderRadius: \"4px\",\n    \"&:hover\": {\n      background: ({\n        noMargin\n      }) => noMargin ? \"whitesmoke\" : \"#FFFFFF\"\n    },\n    \"& #contPencilIcon\": {\n      visibility: \"hidden\"\n    },\n    \"&:hover #contPencilIcon\": {\n      visibility: \"visible\"\n    }\n  },\n  pencilIcon: {\n    fontSize: \"22px\"\n  },\n  editTextField: {\n    paddingRight: ({\n      fieldsCount\n    }) => fieldsCount > 1 ? null : \"0\",\n    \"& .MuiInputBase-root\": {\n      fontSize: \"0.875rem\",\n      padding: \"9px 10px\",\n      lineHeight: \"1.43\"\n    }\n  },\n  notAvailableP: {\n    color: \"#bababaab\",\n    fontSize: \"13px\"\n  },\n  loader: {\n    position: \"relative\",\n    top: \"-37px\",\n    left: \"10px\"\n  },\n  popoverButton: {\n    margin: \"0 0 4px 8px\",\n    padding: \"2px\",\n    minWidth: \"0\",\n    \"& .MuiButton-startIcon.MuiButton-iconSizeSmall\": {\n      margin: \"0\"\n    }\n  },\n  buttonsRow: {\n    textAlign: \"right\",\n    top: \"-2px\",\n    position: \"relative\"\n  },\n  foodText: {\n    zIndex: \"50\",\n    position: \"absolute\",\n    right: \"5px\",\n    bottom: \"14px\",\n    fontSize: \"10px\",\n    color: \"#6e6e6e\",\n    margin: \"0 !important\",\n    textAlign: \"right\",\n    height: \"0\",\n    paddingRight: \"0\",\n    \"& span\": {\n      fontWeight: \"bold\"\n    }\n  }\n}));\n\nfunction PencilEditIcon({\n  onClick,\n  anchorEl,\n  setAnchorEl,\n  content,\n  handleUpdating\n}) {\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(EditionPopover, {\n    anchorEl: anchorEl,\n    setAnchorEl: setAnchorEl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 0,\n    style: {\n      width: \"200px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: classes.buttonsRow,\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    size: \"small\",\n    variant: \"outlined\",\n    className: classes.popoverButton,\n    startIcon: /*#__PURE__*/React.createElement(CheckSharpIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 26\n      }\n    }),\n    onClick: () => {\n      handleUpdating();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  }, \" \"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    size: \"small\",\n    variant: \"outlined\",\n    className: classes.popoverButton,\n    startIcon: /*#__PURE__*/React.createElement(ClearSharpIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 26\n      }\n    }),\n    onClick: () => {\n      setAnchorEl(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }, \" \")), content.map((textF, i) => /*#__PURE__*/React.createElement(Grid, {\n    key: i,\n    item: true,\n    xs: 12,\n    style: {\n      marginBottom: \"8px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, textF)))), /*#__PURE__*/React.createElement(Tooltip, {\n    title: \"Edit\",\n    placement: \"top\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    size: \"small\",\n    onClick: e => {\n      onClick(e);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CreateTwoToneIcon, {\n    id: \"contPencilIcon\",\n    className: classes.pencilIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }))));\n}\n\nconst textFieldLabels = field => {\n  const fieldsOpt = [\"companyName\", \"jobTitle\", \"address2Alt\", \"address1Alt\", \"cityAlt\", \"stateAlt\", \"zipAlt\", \"countryAlt\", \"zip\"];\n  const labelsOpt = [\"Company Name\", \"Job Title\", \"Address2\", \"Address1\", \"City\", \"State\", \"ZipCode\", \"Country\", \"ZipCode\"];\n\n  if (fieldsOpt.indexOf(field) !== -1) {\n    return labelsOpt[fieldsOpt.indexOf(field)];\n  }\n\n  return field.charAt(0).toUpperCase() + field.slice(1);\n};\n\nexport default function FieldContent({\n  children,\n  id,\n  content,\n  childrenLeft,\n  onlyChildren,\n  name,\n  noMargin,\n  noInputFooter\n}) {\n  //////////// id - brings the contact id /////////////////////////////////////////////////////////////////////////\n  //////////// content - brings an object with fielNames and values ///////////////////////////////////////////////\n  //////////// childrenLeft - will move the chilren components to the left side of the field values//optional//////\n  ////////////              - default childrens to rigth///////////////////////////////////////////////////////////\n  //////////// onlyChildren - will show only the children components, no field values  //optional//////////////////\n  //////////// name - will be part of the Not Available text, better use in compound fiels  //optional/////////////\n  //////////// noMargin - no p tag margin  //optional//////////////////////////////////////////////////////////////\n  //////////// noInputFooter //optional////////////////////////////////////////////////////////////////////////////\n  const [stateApp] = React.useContext(AppContext);\n  const [edit, setEdit] = useState(null);\n  const [editContent, setEditContent] = useState({\n    content\n  });\n  const [fieldsCount, setFieldsCount] = useState(0);\n  const [updateContact, {\n    loading\n  }] = useMutation(UPDATECONTACT);\n  const classes = useStyles({\n    noMargin,\n    loading,\n    fieldsCount\n  });\n  useEffect(() => {\n    if (content) {\n      setEditContent({ ...content\n      });\n      let count = 0;\n\n      for (const fieldName in content) {\n        if (content.hasOwnProperty(fieldName)) {\n          count++;\n        }\n      }\n\n      setFieldsCount(count);\n    }\n  }, [content]);\n  useEffect(() => {\n    if (fieldsCount <= 1) {\n      let fieldName;\n\n      for (const key in editContent) {\n        fieldName = key;\n        break;\n      }\n\n      if (document.getElementById(\"fieldContentInput\" + fieldName)) document.getElementById(\"fieldContentInput\" + fieldName).focus();\n    }\n  }, [edit]);\n\n  const handleEditClick = e => {\n    e.persist();\n    e.preventDefault();\n    setEdit(!edit ? e.currentTarget : null);\n  };\n\n  const handleUpdating = () => {\n    let trimmedEditContent = {\n      _id: id,\n      lastUpdateBy: stateApp.user.mongoId\n    };\n    let differences = false;\n\n    for (const field in editContent) {\n      if (editContent[field] !== null) {\n        trimmedEditContent[field] = editContent[field].trim();\n        if (editContent[field].trim() !== content[field]) differences = true;\n      }\n    }\n\n    if (differences) {\n      updateContact({\n        variables: {\n          contact: trimmedEditContent\n        },\n        refetchQueries: [\"getContacts\", \"getContactsByOwnerId\", \"getContact\"],\n        awaitRefetchQueries: true\n      });\n    }\n\n    setEdit(null);\n  };\n\n  let inputsArray = [];\n\n  if (edit) {\n    for (const fieldName in editContent) {\n      if (editContent.hasOwnProperty(fieldName)) {\n        inputsArray.push( /*#__PURE__*/React.createElement(TextField, {\n          key: \"fieldContentInput\" + fieldName,\n          id: \"fieldContentInput\" + fieldName,\n          className: classes.editTextField,\n          variant: \"outlined\",\n          size: \"small\",\n          fullWidth: true,\n          label: fieldsCount > 1 ? textFieldLabels(fieldName) : null,\n          multiline: true,\n          value: editContent[fieldName] === null ? \"\" : editContent[fieldName],\n          onChange: e => {\n            e.persist();\n            setEditContent(editContent => ({ ...editContent,\n              [fieldName]: e.target.value\n            }));\n          },\n          onKeyDown: event => {\n            event.stopPropagation();\n\n            if (event.key === \"Escape\") {\n              if (fieldsCount <= 1) {\n                setEdit(null);\n                setEditContent(editContent => ({ ...editContent,\n                  [fieldName]: content[fieldName]\n                }));\n              }\n            }\n\n            if (event.key === \"Enter\") {\n              event.preventDefault();\n              handleUpdating();\n            }\n          },\n          onBlur: () => {\n            if (fieldsCount <= 1) {\n              setEdit(null);\n              setEditContent(editContent => ({ ...editContent,\n                [fieldName]: content[fieldName]\n              }));\n            }\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 11\n          }\n        }));\n      }\n    }\n\n    if (fieldsCount <= 1) {\n      return [inputsArray, noInputFooter ? null : /*#__PURE__*/React.createElement(\"p\", {\n        key: \"2\",\n        className: classes.foodText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 314,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }\n      }, \"Return\"), \" to save\")]; /////return an input if only one field\n    }\n  }\n\n  let textArray = [];\n\n  for (const key in content) {\n    if (content.hasOwnProperty(key) && content[key] && content[key] !== \"\") {\n      if (key === \"zip\" || key === \"country\" || key === \"zipAlt\" || key === \"countryAlt\") {\n        textArray = [[textArray.join(\", \"), content[key]].join(\" \")];\n      } else if (key === \"jobTitle\") {\n        textArray = [[textArray.join(\", \"), content[key]].join(\" - \")];\n      } else textArray.push(content[key]);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: `${textArray.length === 0 ? classes.notAvailableP : \"\"} ${classes.fieldContentP}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }\n  }, childrenLeft && !onlyChildren && children ? children : \"\", textArray.length > 0 ? onlyChildren ? children ? children : \"\" : textArray.join(\", \") : `${name ? name + \" \" : \"\"} Not Available`, /*#__PURE__*/React.createElement(PencilEditIcon, {\n    handleUpdating: handleUpdating,\n    anchorEl: edit,\n    setAnchorEl: setEdit,\n    content: inputsArray,\n    onClick: handleEditClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 353,\n      columnNumber: 9\n    }\n  }), !childrenLeft && !onlyChildren && children ? children : \"\"), loading && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      height: \"0\",\n      width: \"0\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    className: classes.loader,\n    size: 22,\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 11\n    }\n  })));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/ContactDetailCard/components/FieldContent.js"],"names":["React","useState","useEffect","makeStyles","Grid","IconButton","Tooltip","CreateTwoToneIcon","TextField","EditionPopover","ClearSharpIcon","CheckSharpIcon","Button","useMutation","UPDATECONTACT","CircularProgress","AppContext","useStyles","theme","fieldContentP","visibility","loading","margin","noMargin","width","borderRadius","background","pencilIcon","fontSize","editTextField","paddingRight","fieldsCount","padding","lineHeight","notAvailableP","color","loader","position","top","left","popoverButton","minWidth","buttonsRow","textAlign","foodText","zIndex","right","bottom","height","fontWeight","PencilEditIcon","onClick","anchorEl","setAnchorEl","content","handleUpdating","classes","map","textF","i","marginBottom","e","textFieldLabels","field","fieldsOpt","labelsOpt","indexOf","charAt","toUpperCase","slice","FieldContent","children","id","childrenLeft","onlyChildren","name","noInputFooter","stateApp","useContext","edit","setEdit","editContent","setEditContent","setFieldsCount","updateContact","count","fieldName","hasOwnProperty","key","document","getElementById","focus","handleEditClick","persist","preventDefault","currentTarget","trimmedEditContent","_id","lastUpdateBy","user","mongoId","differences","trim","variables","contact","refetchQueries","awaitRefetchQueries","inputsArray","push","target","value","event","stopPropagation","textArray","join","length"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport CreateTwoToneIcon from \"@material-ui/icons/CreateTwoTone\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport EditionPopover from \"./EditionPopover\";\r\nimport ClearSharpIcon from \"@material-ui/icons/ClearSharp\";\r\nimport CheckSharpIcon from \"@material-ui/icons/CheckSharp\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nimport { UPDATECONTACT } from \"../../../graphQL/useMutationUpdateContact\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport { AppContext } from \"../../../AppContext\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  fieldContentP: {\r\n    visibility: ({ loading }) => (loading ? \"hidden\" : \"visible\"),\r\n    margin: ({ noMargin }) => (noMargin ? \"0\" : \"5px 10px\"),\r\n    width: ({ noMargin }) => {\r\n      if (noMargin) return \"fit-content\";\r\n    },\r\n    borderRadius: \"4px\",\r\n    \"&:hover\": {\r\n      background: ({ noMargin }) => (noMargin ? \"whitesmoke\" : \"#FFFFFF\"),\r\n    },\r\n    \"& #contPencilIcon\": {\r\n      visibility: \"hidden\",\r\n    },\r\n    \"&:hover #contPencilIcon\": {\r\n      visibility: \"visible\",\r\n    },\r\n  },\r\n  pencilIcon: {\r\n    fontSize: \"22px\",\r\n  },\r\n  editTextField: {\r\n    paddingRight: ({ fieldsCount }) => (fieldsCount > 1 ? null : \"0\"),\r\n    \"& .MuiInputBase-root\": {\r\n      fontSize: \"0.875rem\",\r\n      padding: \"9px 10px\",\r\n      lineHeight: \"1.43\",\r\n    },\r\n  },\r\n  notAvailableP: { color: \"#bababaab\", fontSize: \"13px\" },\r\n  loader: {\r\n    position: \"relative\",\r\n    top: \"-37px\",\r\n    left: \"10px\",\r\n  },\r\n  popoverButton: {\r\n    margin: \"0 0 4px 8px\",\r\n    padding: \"2px\",\r\n    minWidth: \"0\",\r\n    \"& .MuiButton-startIcon.MuiButton-iconSizeSmall\": { margin: \"0\" },\r\n  },\r\n  buttonsRow: { textAlign: \"right\", top: \"-2px\", position: \"relative\" },\r\n  foodText: {\r\n    zIndex: \"50\",\r\n    position: \"absolute\",\r\n    right: \"5px\",\r\n    bottom: \"14px\",\r\n    fontSize: \"10px\",\r\n    color: \"#6e6e6e\",\r\n    margin: \"0 !important\",\r\n    textAlign: \"right\",\r\n    height: \"0\",\r\n    paddingRight: \"0\",\r\n    \"& span\": {\r\n      fontWeight: \"bold\",\r\n    },\r\n  },\r\n}));\r\n\r\nfunction PencilEditIcon({\r\n  onClick,\r\n  anchorEl,\r\n  setAnchorEl,\r\n  content,\r\n  handleUpdating,\r\n}) {\r\n  const classes = useStyles();\r\n  return (\r\n    <React.Fragment>\r\n      <EditionPopover anchorEl={anchorEl} setAnchorEl={setAnchorEl}>\r\n        <Grid container spacing={0} style={{ width: \"200px\" }}>\r\n          <Grid className={classes.buttonsRow} item xs={12}>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              className={classes.popoverButton}\r\n              startIcon={<CheckSharpIcon />}\r\n              onClick={() => {\r\n                handleUpdating();\r\n              }}\r\n            >\r\n              {\" \"}\r\n            </Button>\r\n            <Button\r\n              variant=\"contained\"\r\n              size=\"small\"\r\n              variant=\"outlined\"\r\n              className={classes.popoverButton}\r\n              startIcon={<ClearSharpIcon />}\r\n              onClick={() => {\r\n                setAnchorEl(null);\r\n              }}\r\n            >\r\n              {\" \"}\r\n            </Button>\r\n          </Grid>\r\n\r\n          {content.map((textF, i) => (\r\n            <Grid key={i} item xs={12} style={{ marginBottom: \"8px\" }}>\r\n              {textF}\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </EditionPopover>\r\n      <Tooltip title={\"Edit\"} placement=\"top\">\r\n        <IconButton\r\n          size=\"small\"\r\n          onClick={(e) => {\r\n            onClick(e);\r\n          }}\r\n        >\r\n          <CreateTwoToneIcon\r\n            id=\"contPencilIcon\"\r\n            className={classes.pencilIcon}\r\n          />\r\n        </IconButton>\r\n      </Tooltip>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst textFieldLabels = (field) => {\r\n  const fieldsOpt = [\r\n    \"companyName\",\r\n    \"jobTitle\",\r\n    \"address2Alt\",\r\n    \"address1Alt\",\r\n    \"cityAlt\",\r\n    \"stateAlt\",\r\n    \"zipAlt\",\r\n    \"countryAlt\",\r\n    \"zip\",\r\n  ];\r\n  const labelsOpt = [\r\n    \"Company Name\",\r\n    \"Job Title\",\r\n    \"Address2\",\r\n    \"Address1\",\r\n    \"City\",\r\n    \"State\",\r\n    \"ZipCode\",\r\n    \"Country\",\r\n    \"ZipCode\",\r\n  ];\r\n\r\n  if (fieldsOpt.indexOf(field) !== -1) {\r\n    return labelsOpt[fieldsOpt.indexOf(field)];\r\n  }\r\n\r\n  return field.charAt(0).toUpperCase() + field.slice(1);\r\n};\r\n\r\nexport default function FieldContent({\r\n  children,\r\n  id,\r\n  content,\r\n  childrenLeft,\r\n  onlyChildren,\r\n  name,\r\n  noMargin,\r\n  noInputFooter,\r\n}) {\r\n  //////////// id - brings the contact id /////////////////////////////////////////////////////////////////////////\r\n  //////////// content - brings an object with fielNames and values ///////////////////////////////////////////////\r\n  //////////// childrenLeft - will move the chilren components to the left side of the field values//optional//////\r\n  ////////////              - default childrens to rigth///////////////////////////////////////////////////////////\r\n  //////////// onlyChildren - will show only the children components, no field values  //optional//////////////////\r\n  //////////// name - will be part of the Not Available text, better use in compound fiels  //optional/////////////\r\n  //////////// noMargin - no p tag margin  //optional//////////////////////////////////////////////////////////////\r\n  //////////// noInputFooter //optional////////////////////////////////////////////////////////////////////////////\r\n\r\n  const [stateApp] = React.useContext(AppContext);\r\n  const [edit, setEdit] = useState(null);\r\n  const [editContent, setEditContent] = useState({ content });\r\n  const [fieldsCount, setFieldsCount] = useState(0);\r\n\r\n  const [updateContact, { loading }] = useMutation(UPDATECONTACT);\r\n  const classes = useStyles({ noMargin, loading, fieldsCount });\r\n\r\n  useEffect(() => {\r\n    if (content) {\r\n      setEditContent({ ...content });\r\n\r\n      let count = 0;\r\n      for (const fieldName in content) {\r\n        if (content.hasOwnProperty(fieldName)) {\r\n          count++;\r\n        }\r\n      }\r\n      setFieldsCount(count);\r\n    }\r\n  }, [content]);\r\n\r\n  useEffect(() => {\r\n    if (fieldsCount <= 1) {\r\n      let fieldName;\r\n      for (const key in editContent) {\r\n        fieldName = key;\r\n        break;\r\n      }\r\n      if (document.getElementById(\"fieldContentInput\" + fieldName))\r\n        document.getElementById(\"fieldContentInput\" + fieldName).focus();\r\n    }\r\n  }, [edit]);\r\n\r\n  const handleEditClick = (e) => {\r\n    e.persist();\r\n    e.preventDefault();\r\n    setEdit(!edit ? e.currentTarget : null);\r\n  };\r\n\r\n  const handleUpdating = () => {\r\n    let trimmedEditContent = {\r\n      _id: id,\r\n      lastUpdateBy: stateApp.user.mongoId,\r\n    };\r\n    let differences = false;\r\n    for (const field in editContent) {\r\n      if (editContent[field] !== null) {\r\n        trimmedEditContent[field] = editContent[field].trim();\r\n        if (editContent[field].trim() !== content[field]) differences = true;\r\n      }\r\n    }\r\n\r\n    if (differences) {\r\n      updateContact({\r\n        variables: {\r\n          contact: trimmedEditContent,\r\n        },\r\n        refetchQueries: [\"getContacts\", \"getContactsByOwnerId\", \"getContact\"],\r\n        awaitRefetchQueries: true,\r\n      });\r\n    }\r\n\r\n    setEdit(null);\r\n  };\r\n\r\n  let inputsArray = [];\r\n  if (edit) {\r\n    for (const fieldName in editContent) {\r\n      if (editContent.hasOwnProperty(fieldName)) {\r\n        inputsArray.push(\r\n          <TextField\r\n            key={\"fieldContentInput\" + fieldName}\r\n            id={\"fieldContentInput\" + fieldName}\r\n            className={classes.editTextField}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            fullWidth\r\n            label={fieldsCount > 1 ? textFieldLabels(fieldName) : null}\r\n            multiline\r\n            value={\r\n              editContent[fieldName] === null ? \"\" : editContent[fieldName]\r\n            }\r\n            onChange={(e) => {\r\n              e.persist();\r\n              setEditContent((editContent) => ({\r\n                ...editContent,\r\n                [fieldName]: e.target.value,\r\n              }));\r\n            }}\r\n            onKeyDown={(event) => {\r\n              event.stopPropagation();\r\n              if (event.key === \"Escape\") {\r\n                if (fieldsCount <= 1) {\r\n                  setEdit(null);\r\n                  setEditContent((editContent) => ({\r\n                    ...editContent,\r\n                    [fieldName]: content[fieldName],\r\n                  }));\r\n                }\r\n              }\r\n\r\n              if (event.key === \"Enter\") {\r\n                event.preventDefault();\r\n                handleUpdating();\r\n              }\r\n            }}\r\n            onBlur={() => {\r\n              if (fieldsCount <= 1) {\r\n                setEdit(null);\r\n                setEditContent((editContent) => ({\r\n                  ...editContent,\r\n                  [fieldName]: content[fieldName],\r\n                }));\r\n              }\r\n            }}\r\n          />\r\n        );\r\n      }\r\n    }\r\n\r\n    if (fieldsCount <= 1) {\r\n      return [\r\n        inputsArray,\r\n        noInputFooter ? null : (\r\n          <p key=\"2\" className={classes.foodText}>\r\n            <span>Return</span> to save\r\n          </p>\r\n        ),\r\n      ]; /////return an input if only one field\r\n    }\r\n  }\r\n\r\n  let textArray = [];\r\n  for (const key in content) {\r\n    if (content.hasOwnProperty(key) && content[key] && content[key] !== \"\") {\r\n      if (\r\n        key === \"zip\" ||\r\n        key === \"country\" ||\r\n        key === \"zipAlt\" ||\r\n        key === \"countryAlt\"\r\n      ) {\r\n        textArray = [[textArray.join(\", \"), content[key]].join(\" \")];\r\n      } else if (key === \"jobTitle\") {\r\n        textArray = [[textArray.join(\", \"), content[key]].join(\" - \")];\r\n      } else textArray.push(content[key]);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <p\r\n        className={`${textArray.length === 0 ? classes.notAvailableP : \"\"} ${\r\n          classes.fieldContentP\r\n        }`}\r\n      >\r\n        {childrenLeft && !onlyChildren && children ? children : \"\"}\r\n        {textArray.length > 0\r\n          ? onlyChildren\r\n            ? children\r\n              ? children\r\n              : \"\"\r\n            : textArray.join(\", \")\r\n          : `${name ? name + \" \" : \"\"} Not Available`}\r\n        <PencilEditIcon\r\n          handleUpdating={handleUpdating}\r\n          anchorEl={edit}\r\n          setAnchorEl={setEdit}\r\n          content={inputsArray}\r\n          onClick={handleEditClick}\r\n        />\r\n        {!childrenLeft && !onlyChildren && children ? children : \"\"}\r\n      </p>\r\n      {loading && (\r\n        <div style={{ height: \"0\", width: \"0\" }}>\r\n          <CircularProgress\r\n            className={classes.loader}\r\n            size={22}\r\n            color=\"secondary\"\r\n          ></CircularProgress>\r\n        </div>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}