{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Shared\\\\Tagger.js\";\nimport React, { useContext, useState, useEffect } from \"react\";\nimport { useMutation, useLazyQuery } from \"@apollo/react-hooks\";\nimport { AppContext } from \"../../AppContext\";\nimport { CircularProgress } from \"@material-ui/core\";\nimport Chip from \"@material-ui/core/Chip\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { USERAVAILABLETAGSQUERY } from \"../../graphQL/useQueryUserAvailableTags\";\nimport { TAGSBYOBJECTSIDS } from \"../../graphQL/useQueryTagsByObjectsIds\";\nimport { TAGSBYOBJECTIDQUERY } from \"../../graphQL/useQueryTagsByObjectId\";\nimport { UPSERTTAG } from \"../../graphQL/useMutationUpsertTag\";\nimport { REMOVETAG } from \"../../graphQL/useMutationRemoveTag\";\nimport Grid from \"@material-ui/core/Grid\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Switch from \"@material-ui/core/Switch\";\nimport ClearIcon from \"@material-ui/icons/Clear\";\nimport \"./Tagger.css\";\nconst AntSwitch = withStyles(theme => ({\n  root: {\n    width: 28,\n    height: 16,\n    padding: 0,\n    display: \"flex\"\n  },\n  switchBase: {\n    padding: 2,\n    color: theme.palette.grey[500],\n    \"&$checked\": {\n      transform: \"translateX(12px)\",\n      color: theme.palette.common.white,\n      \"& + $track\": {\n        opacity: 1,\n        backgroundColor: \"#12ABE0\",\n        borderColor: \"#12ABE0\"\n      }\n    }\n  },\n  thumb: {\n    width: 12,\n    height: 12,\n    boxShadow: \"none\"\n  },\n  track: {\n    border: `1px solid ${theme.palette.grey[500]}`,\n    borderRadius: 16 / 2,\n    opacity: 1,\n    backgroundColor: theme.palette.common.white\n  },\n  checked: {}\n}))(Switch);\nconst useStyles = makeStyles(theme => ({\n  rootDiv: {\n    width: ({\n      width\n    }) => width ? width : \"500px\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(5)\n    },\n    \"& .MuiAutocomplete-clearIndicator\": {\n      display: \"none\"\n    }\n  },\n  switchButtom: {\n    float: \"right\",\n    width: \"fit-content\",\n    alignSelf: \"flex-end\",\n    marginRight: 0,\n    \"& span.MuiTypography-body1\": {\n      fontSize: \"0.9rem\"\n    }\n  },\n  switchTextDeselected: {\n    color: \"rgb(141, 141, 141)\"\n  },\n  publicLeftBottom: {\n    float: \"none\",\n    flexDirection: \"row\",\n    alignSelf: \"unset\",\n    margin: 0,\n    \"& .MuiTypography-root\": {\n      display: \"none\"\n    },\n    \"& .h4Before\": {\n      margin: \"0 13px\",\n      color: \"#202020 !important\"\n    },\n    \"& .h4After\": {\n      margin: \"0 0 0 13px\",\n      color: \"#B7B7B7 !important\"\n    }\n  },\n  chip: {\n    \"& .MuiAutocomplete-inputRoot\": {\n      minHeight: \"56px\"\n    },\n    \"& .MuiChip-root\": {\n      backgroundColor: \"#ECEDED\",\n      color: \"#606060\"\n    }\n  },\n  input: {\n    \"& input\": {\n      caretColor: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"transparent\",\n      color: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"#008ebf\",\n      backgroundColor: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"#D5F4FF\",\n      maxWidth: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"33px\",\n      width: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"33px\",\n      height: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"32px\",\n      fontSize: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"25px\",\n      margin: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"3px\",\n      padding: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"0px !important\",\n      borderRadius: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"50%\",\n      textAlign: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"center\",\n      cursor: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"pointer\",\n      \"&:hover\": {\n        boxShadow: ({\n          showPlusAddIcon\n        }) => !showPlusAddIcon ? \"\" : \"0px 2px 2px -1px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.12), 0px 1px 10px 0px rgba(0,0,0,0.1)\",\n        backgroundColor: ({\n          showPlusAddIcon\n        }) => !showPlusAddIcon ? \"\" : \"rgba(0, 0, 0, 0.08)\"\n      },\n      transition: ({\n        showPlusAddIcon\n      }) => !showPlusAddIcon ? \"\" : \"background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\"\n    }\n  }\n}));\nexport default function Tags(props) {\n  const [stateApp] = useContext(AppContext);\n  const [tagsArray, setTagsArray] = useState([]);\n  const [userAvailableTagsArray, setUserAvailableTagsArray] = useState([]);\n  const [tFActive, setTFActive] = useState(false);\n  const [textValue, setTextValue] = useState(\"\");\n  const [loadingTags, setLoadingTags] = useState(true);\n  const [addInDropDown, setAddInDropDown] = useState(false);\n  const [publicTag, setPublicTag] = useState(true);\n\n  const showPlusAddIcon = () => {\n    if (tFActive || textValue) return false;\n    return true;\n  };\n\n  const classes = useStyles({ ...props,\n    showPlusAddIcon: showPlusAddIcon()\n  });\n  const [getTagsByObjectId, {\n    data: dataTags\n  }] = useLazyQuery(TAGSBYOBJECTIDQUERY, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [getTagsByObjectsIds, {\n    data: dataTagsMultiIds\n  }] = useLazyQuery(TAGSBYOBJECTSIDS, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [getUserAvailableTags, {\n    data: dataUserAvailableTags\n  }] = useLazyQuery(USERAVAILABLETAGSQUERY, {\n    fetchPolicy: \"cache-and-network\"\n  });\n  const [upsertTag] = useMutation(UPSERTTAG);\n  const [removeTag] = useMutation(REMOVETAG); ///////////////////// START FETCHING TAGS DATA ////////////////////////////////////////////\n  ////All Object Tag For The Input\n\n  useEffect(() => {\n    if (!props.multipleIds) {\n      setLoadingTags(true);\n      getTagsByObjectId({\n        variables: {\n          objectId: props.targetSourceId\n        }\n      });\n    } else {\n      getTagsByObjectsIds({\n        variables: {\n          objectsIdsArray: props.multipleIds,\n          userId: stateApp.user.mongoId\n        }\n      });\n    }\n  }, [props.targetSourceId, props.multipleIds]);\n  useEffect(() => {\n    if (dataTags && dataTags.tagsByObjectId) {\n      setTagsArray(dataTags.tagsByObjectId);\n    }\n\n    setLoadingTags(false);\n  }, [dataTags]);\n  useEffect(() => {\n    if (dataTagsMultiIds && dataTagsMultiIds.tagsByObjectsIds) {\n      const checkIfUserMatch = user => {\n        for (let i = 0; i < user.length; i++) {\n          if (user[i]._id !== stateApp.user.mongoId) return false;\n        }\n\n        return user[0];\n      };\n\n      let tags = [];\n\n      for (let i = 0; i < dataTagsMultiIds.tagsByObjectsIds.length; i++) {\n        const element = dataTagsMultiIds.tagsByObjectsIds[i];\n\n        if (element.taggedOn.length === props.multipleIds.length && element.public.filter(v => v === publicTag).length === props.multipleIds.length) {\n          tags.push({ ...element,\n            user: checkIfUserMatch(element.user) ? checkIfUserMatch(element.user) : {\n              name: \"\",\n              email: \"\"\n            },\n            public: publicTag\n          });\n        }\n      }\n\n      setTagsArray(tags);\n    }\n\n    setLoadingTags(false);\n  }, [dataTagsMultiIds, publicTag]); ////All User Available Tags For The DropDown\n\n  useEffect(() => {\n    if (stateApp.user && stateApp.user.mongoId) {\n      getUserAvailableTags({\n        variables: {\n          userId: stateApp.user.mongoId\n        }\n      });\n    }\n  }, [stateApp.user]);\n  useEffect(() => {\n    if (dataUserAvailableTags && dataUserAvailableTags.userAvailableTags && tagsArray) {\n      let defaultTags = [\"High Cash Flow\", \"Interested Seller\", \"Recent Death\", \"Recent Divorce\", \"Recently Inherited\", \"Out Of State Seller\"];\n      defaultTags = defaultTags.filter(defaultTag => {\n        let found;\n        tagsArray.map(tag => {\n          if (tag.tag === defaultTag) {\n            found = true;\n          }\n        });\n        return found || dataUserAvailableTags.userAvailableTags.indexOf(defaultTag) === -1;\n      });\n      setUserAvailableTagsArray([...defaultTags, ...dataUserAvailableTags.userAvailableTags]);\n    }\n  }, [dataUserAvailableTags, tagsArray]); ///////////////////// INSERTING NEW TAG ///////////////////////////////////////////////\n\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n\n  const UpperAndCleanTagText = tagText => {\n    return tagText.trim().split(\" \").filter(word => word !== \"\").map(word => capitalizeFirstLetter(word)).join(\" \");\n  };\n\n  const NewTag = tagText => {\n    tagText = UpperAndCleanTagText(tagText);\n\n    if (addInDropDown && tagText === addInDropDown) {\n      tagText = UpperAndCleanTagText(textValue);\n    }\n\n    setTextValue(\"\");\n    let found = false;\n    tagsArray.map(tag => {\n      if (tag.tag === tagText) {\n        found = true;\n      }\n    });\n\n    if (!found) {\n      if (!props.multipleIds) {\n        upsertTag({\n          variables: {\n            tag: {\n              tag: tagText,\n              public: publicTag,\n              user: stateApp.user.mongoId,\n              taggedOn: props.targetSourceId,\n              objectType: props.targetLabel\n            }\n          },\n          refetchQueries: [\"getTagsByObjectId\", \"getUserAvailableTags\", \"getTagSamples\", \"getUserAvailableFilterTags\", \"getObjectsFromTagsArray\", \"getWellsIdsFromTagsArray\", \"getOwnersIdsFromTagsArray\"],\n          awaitRefetchQueries: true\n        });\n      } else {\n        for (let i = 0; i < props.multipleIds.length; i++) {\n          upsertTag({\n            variables: {\n              tag: {\n                tag: tagText,\n                public: publicTag,\n                user: stateApp.user.mongoId,\n                taggedOn: props.multipleIds[i],\n                objectType: props.targetLabel\n              }\n            },\n            refetchQueries: [\"getTagsByObjectId\", \"getUserAvailableTags\", \"getTagSamples\", \"getUserAvailableFilterTags\", \"getObjectsFromTagsArray\", \"getWellsIdsFromTagsArray\", \"getOwnersIdsFromTagsArray\", \"getTagsByObjectsIds\"],\n            awaitRefetchQueries: true\n          });\n        }\n      }\n    }\n  }; ///////////////////// DELETING A TAG ///////////////////////////////////////////////\n\n\n  const DeleteTag = TagIdOIds => {\n    if (!props.multipleIds) removeTag({\n      variables: {\n        tagId: TagIdOIds\n      },\n      refetchQueries: [\"getTagsByObjectId\", \"getUserAvailableTags\", \"getTagSamples\", \"getUserAvailableFilterTags\", \"getObjectsFromTagsArray\", \"getWellsIdsFromTagsArray\", \"getOwnersIdsFromTagsArray\", \"getTagsByObjectsIds\"],\n      awaitRefetchQueries: true\n    });else {\n      let ids = TagIdOIds.split(\"???|||///\");\n\n      for (let i = 0; i < ids.length; i++) {\n        removeTag({\n          variables: {\n            tagId: ids[i]\n          },\n          refetchQueries: [\"getTagsByObjectId\", \"getUserAvailableTags\", \"getTagSamples\", \"getUserAvailableFilterTags\", \"getObjectsFromTagsArray\", \"getWellsIdsFromTagsArray\", \"getOwnersIdsFromTagsArray\", \"getTagsByObjectsIds\"],\n          awaitRefetchQueries: true\n        });\n      }\n    }\n  }; ////////////////////////////////////////////////////////////////////////////////////////\n\n\n  const handleChangeTags = (e, v) => {\n    e.persist();\n\n    if (e.key && e.key === \"Enter\") {\n      ////A new tag by keyboard\n      NewTag(v[v.length - 1]);\n    } else if (e.target.tagName === \"svg\" || e.target.tagName === \"path\") {\n      ////A tag was deleted\n      let TagIdOIds;\n\n      if (e.target.tagName === \"svg\") {\n        TagIdOIds = e.target.parentNode.id;\n      }\n\n      if (e.target.tagName === \"path\") {\n        TagIdOIds = e.target.parentNode.parentNode.id;\n      }\n\n      DeleteTag(TagIdOIds);\n    } else {\n      if (e.type === \"click\") {\n        ////A new tag by click on the dropdown\n        NewTag(e.target.innerText);\n      }\n    }\n  };\n\n  const cleanDropDownArray = () => {\n    const tags = tagsArray.map(tag => tag.tag);\n    let cleanArray = userAvailableTagsArray.filter(tag => tags.indexOf(tag) === -1);\n    cleanArray = [...new Set(cleanArray)];\n    cleanArray.sort();\n    return {\n      cleanArray,\n      tags\n    };\n  };\n\n  const AddingAddRowToDropDown = () => {\n    let {\n      cleanArray\n    } = cleanDropDownArray(); // if (props.multipleIds && userAvailableTagsArray) {\n    //   cleanArray = [...userAvailableTagsArray];\n    // }\n\n    if (addInDropDown) {\n      cleanArray.unshift(addInDropDown);\n    }\n\n    return cleanArray;\n  };\n\n  useEffect(() => {\n    const {\n      cleanArray,\n      tags\n    } = cleanDropDownArray();\n\n    if (cleanArray.indexOf(UpperAndCleanTagText(textValue)) === -1 && tags.indexOf(UpperAndCleanTagText(textValue)) === -1 && textValue.trim() !== \"\") {\n      setAddInDropDown(`Add \"${UpperAndCleanTagText(textValue)}\"`);\n    } else {\n      setAddInDropDown(false);\n    }\n  }, [textValue]);\n\n  const TogglePublicButton = () => {\n    return /*#__PURE__*/React.createElement(FormGroup, {\n      style: {\n        display: \"block\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 7\n      }\n    }, !props.publicLeftBottom && /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        width: \"fit-content\",\n        margin: \"0\",\n        float: \"left\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }\n    }, \"Tags\"), /*#__PURE__*/React.createElement(FormControlLabel, {\n      className: `${classes.switchButtom} ${props.publicLeftBottom ? classes.publicLeftBottom : \"\"} ${!publicTag ? classes.switchTextDeselected : \"\"}`,\n      control: /*#__PURE__*/React.createElement(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }\n      }, props.publicLeftBottom && /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"h4Before\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 42\n        }\n      }, \"Tags\"), /*#__PURE__*/React.createElement(AntSwitch, {\n        checked: publicTag,\n        onChange: () => {\n          setPublicTag(!publicTag);\n        },\n        name: \"checkedC\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 15\n        }\n      }), props.publicLeftBottom && /*#__PURE__*/React.createElement(\"h4\", {\n        className: \"h4After\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 42\n        }\n      }, \"Shared\")),\n      label: \"Shared\",\n      labelPlacement: \"start\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"taggerRoot\",\n    className: classes.rootDiv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 5\n    }\n  }, !loadingTags ? /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TogglePublicButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    className: classes.chip,\n    multiple: true,\n    id: \"tags-outlined\",\n    onChange: (e, newValue) => {\n      handleChangeTags(e, newValue);\n    },\n    options: AddingAddRowToDropDown().map(option => option),\n    value: tagsArray,\n    freeSolo: true,\n    renderTags: (value, getTagProps) => value.map((tag, index) => {\n      if (publicTag && tag.public || !publicTag && !tag.public && stateApp.user.email === tag.user.email) {\n        return /*#__PURE__*/React.createElement(Chip, Object.assign({\n          key: index,\n          id: !props.multipleIds ? tag._id : tag.ids.join(\"???|||///\"),\n          label: tag.tag\n        }, getTagProps({\n          index\n        }), {\n          deleteIcon: /*#__PURE__*/React.createElement(ClearIcon, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 527,\n              columnNumber: 37\n            }\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 23\n          }\n        }));\n      }\n    }),\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      className: classes.input // label={!props.publicLeftBottom ? \"Tags\" : null}\n      ,\n      placeholder: !showPlusAddIcon() ? \"\" : \"+\",\n      fullWidth: true,\n      value: textValue,\n      onChange: e => {\n        setTextValue(e.target.value);\n      },\n      onClick: () => {\n        setTFActive(true);\n      },\n      onBlur: () => {\n        setTFActive(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 13\n    }\n  }))) : /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"secondary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 9\n    }\n  }));\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Shared/Tagger.js"],"names":["React","useContext","useState","useEffect","useMutation","useLazyQuery","AppContext","CircularProgress","Chip","Autocomplete","makeStyles","withStyles","TextField","USERAVAILABLETAGSQUERY","TAGSBYOBJECTSIDS","TAGSBYOBJECTIDQUERY","UPSERTTAG","REMOVETAG","Grid","FormGroup","FormControlLabel","Switch","ClearIcon","AntSwitch","theme","root","width","height","padding","display","switchBase","color","palette","grey","transform","common","white","opacity","backgroundColor","borderColor","thumb","boxShadow","track","border","borderRadius","checked","useStyles","rootDiv","marginTop","spacing","switchButtom","float","alignSelf","marginRight","fontSize","switchTextDeselected","publicLeftBottom","flexDirection","margin","chip","minHeight","input","caretColor","showPlusAddIcon","maxWidth","textAlign","cursor","transition","Tags","props","stateApp","tagsArray","setTagsArray","userAvailableTagsArray","setUserAvailableTagsArray","tFActive","setTFActive","textValue","setTextValue","loadingTags","setLoadingTags","addInDropDown","setAddInDropDown","publicTag","setPublicTag","classes","getTagsByObjectId","data","dataTags","fetchPolicy","getTagsByObjectsIds","dataTagsMultiIds","getUserAvailableTags","dataUserAvailableTags","upsertTag","removeTag","multipleIds","variables","objectId","targetSourceId","objectsIdsArray","userId","user","mongoId","tagsByObjectId","tagsByObjectsIds","checkIfUserMatch","i","length","_id","tags","element","taggedOn","public","filter","v","push","name","email","userAvailableTags","defaultTags","defaultTag","found","map","tag","indexOf","capitalizeFirstLetter","string","charAt","toUpperCase","slice","UpperAndCleanTagText","tagText","trim","split","word","join","NewTag","objectType","targetLabel","refetchQueries","awaitRefetchQueries","DeleteTag","TagIdOIds","tagId","ids","handleChangeTags","e","persist","key","target","tagName","parentNode","id","type","innerText","cleanDropDownArray","cleanArray","Set","sort","AddingAddRowToDropDown","unshift","TogglePublicButton","newValue","option","value","getTagProps","index","params"],"mappings":"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","sourcesContent":["import React, { useContext, useState, useEffect } from \"react\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/react-hooks\";\r\nimport { AppContext } from \"../../AppContext\";\r\nimport { CircularProgress } from \"@material-ui/core\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { USERAVAILABLETAGSQUERY } from \"../../graphQL/useQueryUserAvailableTags\";\r\nimport { TAGSBYOBJECTSIDS } from \"../../graphQL/useQueryTagsByObjectsIds\";\r\nimport { TAGSBYOBJECTIDQUERY } from \"../../graphQL/useQueryTagsByObjectId\";\r\nimport { UPSERTTAG } from \"../../graphQL/useMutationUpsertTag\";\r\nimport { REMOVETAG } from \"../../graphQL/useMutationRemoveTag\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\nimport \"./Tagger.css\";\r\n\r\nconst AntSwitch = withStyles((theme) => ({\r\n  root: {\r\n    width: 28,\r\n    height: 16,\r\n    padding: 0,\r\n    display: \"flex\",\r\n  },\r\n  switchBase: {\r\n    padding: 2,\r\n    color: theme.palette.grey[500],\r\n    \"&$checked\": {\r\n      transform: \"translateX(12px)\",\r\n      color: theme.palette.common.white,\r\n      \"& + $track\": {\r\n        opacity: 1,\r\n        backgroundColor: \"#12ABE0\",\r\n        borderColor: \"#12ABE0\",\r\n      },\r\n    },\r\n  },\r\n  thumb: {\r\n    width: 12,\r\n    height: 12,\r\n    boxShadow: \"none\",\r\n  },\r\n  track: {\r\n    border: `1px solid ${theme.palette.grey[500]}`,\r\n    borderRadius: 16 / 2,\r\n    opacity: 1,\r\n    backgroundColor: theme.palette.common.white,\r\n  },\r\n  checked: {},\r\n}))(Switch);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  rootDiv: {\r\n    width: ({ width }) => (width ? width : \"500px\"),\r\n    \"& > * + *\": {\r\n      marginTop: theme.spacing(5),\r\n    },\r\n    \"& .MuiAutocomplete-clearIndicator\": {\r\n      display: \"none\",\r\n    },\r\n  },\r\n  switchButtom: {\r\n    float: \"right\",\r\n    width: \"fit-content\",\r\n    alignSelf: \"flex-end\",\r\n    marginRight: 0,\r\n    \"& span.MuiTypography-body1\": {\r\n      fontSize: \"0.9rem\",\r\n    },\r\n  },\r\n  switchTextDeselected: {\r\n    color: \"rgb(141, 141, 141)\",\r\n  },\r\n  publicLeftBottom: {\r\n    float: \"none\",\r\n    flexDirection: \"row\",\r\n    alignSelf: \"unset\",\r\n    margin: 0,\r\n    \"& .MuiTypography-root\": {\r\n      display: \"none\",\r\n    },\r\n    \"& .h4Before\": { margin: \"0 13px\", color: \"#202020 !important\" },\r\n    \"& .h4After\": { margin: \"0 0 0 13px\", color: \"#B7B7B7 !important\" },\r\n  },\r\n  chip: {\r\n    \"& .MuiAutocomplete-inputRoot\": { minHeight: \"56px\" },\r\n    \"& .MuiChip-root\": {\r\n      backgroundColor: \"#ECEDED\",\r\n      color: \"#606060\",\r\n    },\r\n  },\r\n  input: {\r\n    \"& input\": {\r\n      caretColor: ({ showPlusAddIcon }) =>\r\n        !showPlusAddIcon ? \"\" : \"transparent\",\r\n      color: ({ showPlusAddIcon }) => (!showPlusAddIcon ? \"\" : \"#008ebf\"),\r\n      backgroundColor: ({ showPlusAddIcon }) =>\r\n        !showPlusAddIcon ? \"\" : \"#D5F4FF\",\r\n      maxWidth: ({ showPlusAddIcon }) => (!showPlusAddIcon ? \"\" : \"33px\"),\r\n      width: ({ showPlusAddIcon }) => (!showPlusAddIcon ? \"\" : \"33px\"),\r\n      height: ({ showPlusAddIcon }) => (!showPlusAddIcon ? \"\" : \"32px\"),\r\n      fontSize: ({ showPlusAddIcon }) => (!showPlusAddIcon ? \"\" : \"25px\"),\r\n      margin: ({ showPlusAddIcon }) => (!showPlusAddIcon ? \"\" : \"3px\"),\r\n      padding: ({ showPlusAddIcon }) =>\r\n        !showPlusAddIcon ? \"\" : \"0px !important\",\r\n      borderRadius: ({ showPlusAddIcon }) => (!showPlusAddIcon ? \"\" : \"50%\"),\r\n      textAlign: ({ showPlusAddIcon }) => (!showPlusAddIcon ? \"\" : \"center\"),\r\n      cursor: ({ showPlusAddIcon }) => (!showPlusAddIcon ? \"\" : \"pointer\"),\r\n      \"&:hover\": {\r\n        boxShadow: ({ showPlusAddIcon }) =>\r\n          !showPlusAddIcon\r\n            ? \"\"\r\n            : \"0px 2px 2px -1px rgba(0,0,0,0.2), 0px 2px 2px 0px rgba(0,0,0,0.12), 0px 1px 10px 0px rgba(0,0,0,0.1)\",\r\n        backgroundColor: ({ showPlusAddIcon }) =>\r\n          !showPlusAddIcon ? \"\" : \"rgba(0, 0, 0, 0.08)\",\r\n      },\r\n      transition: ({ showPlusAddIcon }) =>\r\n        !showPlusAddIcon\r\n          ? \"\"\r\n          : \"background-color 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,box-shadow 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms,border 250ms cubic-bezier(0.4, 0, 0.2, 1) 0ms\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function Tags(props) {\r\n  const [stateApp] = useContext(AppContext);\r\n  const [tagsArray, setTagsArray] = useState([]);\r\n  const [userAvailableTagsArray, setUserAvailableTagsArray] = useState([]);\r\n  const [tFActive, setTFActive] = useState(false);\r\n  const [textValue, setTextValue] = useState(\"\");\r\n  const [loadingTags, setLoadingTags] = useState(true);\r\n  const [addInDropDown, setAddInDropDown] = useState(false);\r\n  const [publicTag, setPublicTag] = useState(true);\r\n\r\n  const showPlusAddIcon = () => {\r\n    if (tFActive || textValue) return false;\r\n    return true;\r\n  };\r\n\r\n  const classes = useStyles({ ...props, showPlusAddIcon: showPlusAddIcon() });\r\n\r\n  const [getTagsByObjectId, { data: dataTags }] = useLazyQuery(\r\n    TAGSBYOBJECTIDQUERY,\r\n    {\r\n      fetchPolicy: \"cache-and-network\",\r\n    }\r\n  );\r\n  const [getTagsByObjectsIds, { data: dataTagsMultiIds }] = useLazyQuery(\r\n    TAGSBYOBJECTSIDS,\r\n    {\r\n      fetchPolicy: \"cache-and-network\",\r\n    }\r\n  );\r\n  const [getUserAvailableTags, { data: dataUserAvailableTags }] = useLazyQuery(\r\n    USERAVAILABLETAGSQUERY,\r\n    {\r\n      fetchPolicy: \"cache-and-network\",\r\n    }\r\n  );\r\n  const [upsertTag] = useMutation(UPSERTTAG);\r\n  const [removeTag] = useMutation(REMOVETAG);\r\n\r\n  ///////////////////// START FETCHING TAGS DATA ////////////////////////////////////////////\r\n\r\n  ////All Object Tag For The Input\r\n  useEffect(() => {\r\n    if (!props.multipleIds) {\r\n      setLoadingTags(true);\r\n      getTagsByObjectId({\r\n        variables: {\r\n          objectId: props.targetSourceId,\r\n        },\r\n      });\r\n    } else {\r\n      getTagsByObjectsIds({\r\n        variables: {\r\n          objectsIdsArray: props.multipleIds,\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n    }\r\n  }, [props.targetSourceId, props.multipleIds]);\r\n\r\n  useEffect(() => {\r\n    if (dataTags && dataTags.tagsByObjectId) {\r\n      setTagsArray(dataTags.tagsByObjectId);\r\n    }\r\n    setLoadingTags(false);\r\n  }, [dataTags]);\r\n\r\n  useEffect(() => {\r\n    if (dataTagsMultiIds && dataTagsMultiIds.tagsByObjectsIds) {\r\n      const checkIfUserMatch = (user) => {\r\n        for (let i = 0; i < user.length; i++) {\r\n          if (user[i]._id !== stateApp.user.mongoId) return false;\r\n        }\r\n        return user[0];\r\n      };\r\n\r\n      let tags = [];\r\n      for (let i = 0; i < dataTagsMultiIds.tagsByObjectsIds.length; i++) {\r\n        const element = dataTagsMultiIds.tagsByObjectsIds[i];\r\n        if (\r\n          element.taggedOn.length === props.multipleIds.length &&\r\n          element.public.filter((v) => v === publicTag).length ===\r\n            props.multipleIds.length\r\n        ) {\r\n          tags.push({\r\n            ...element,\r\n            user: checkIfUserMatch(element.user)\r\n              ? checkIfUserMatch(element.user)\r\n              : { name: \"\", email: \"\" },\r\n            public: publicTag,\r\n          });\r\n        }\r\n      }\r\n\r\n      setTagsArray(tags);\r\n    }\r\n    setLoadingTags(false);\r\n  }, [dataTagsMultiIds, publicTag]);\r\n\r\n  ////All User Available Tags For The DropDown\r\n  useEffect(() => {\r\n    if (stateApp.user && stateApp.user.mongoId) {\r\n      getUserAvailableTags({\r\n        variables: {\r\n          userId: stateApp.user.mongoId,\r\n        },\r\n      });\r\n    }\r\n  }, [stateApp.user]);\r\n\r\n  useEffect(() => {\r\n    if (\r\n      dataUserAvailableTags &&\r\n      dataUserAvailableTags.userAvailableTags &&\r\n      tagsArray\r\n    ) {\r\n      let defaultTags = [\r\n        \"High Cash Flow\",\r\n        \"Interested Seller\",\r\n        \"Recent Death\",\r\n        \"Recent Divorce\",\r\n        \"Recently Inherited\",\r\n        \"Out Of State Seller\",\r\n      ];\r\n\r\n      defaultTags = defaultTags.filter((defaultTag) => {\r\n        let found;\r\n        tagsArray.map((tag) => {\r\n          if (tag.tag === defaultTag) {\r\n            found = true;\r\n          }\r\n        });\r\n        return (\r\n          found ||\r\n          dataUserAvailableTags.userAvailableTags.indexOf(defaultTag) === -1\r\n        );\r\n      });\r\n\r\n      setUserAvailableTagsArray([\r\n        ...defaultTags,\r\n        ...dataUserAvailableTags.userAvailableTags,\r\n      ]);\r\n    }\r\n  }, [dataUserAvailableTags, tagsArray]);\r\n\r\n  ///////////////////// INSERTING NEW TAG ///////////////////////////////////////////////\r\n\r\n  const capitalizeFirstLetter = (string) => {\r\n    return string.charAt(0).toUpperCase() + string.slice(1);\r\n  };\r\n\r\n  const UpperAndCleanTagText = (tagText) => {\r\n    return tagText\r\n      .trim()\r\n      .split(\" \")\r\n      .filter((word) => word !== \"\")\r\n      .map((word) => capitalizeFirstLetter(word))\r\n      .join(\" \");\r\n  };\r\n\r\n  const NewTag = (tagText) => {\r\n    tagText = UpperAndCleanTagText(tagText);\r\n    if (addInDropDown && tagText === addInDropDown) {\r\n      tagText = UpperAndCleanTagText(textValue);\r\n    }\r\n    setTextValue(\"\");\r\n\r\n    let found = false;\r\n    tagsArray.map((tag) => {\r\n      if (tag.tag === tagText) {\r\n        found = true;\r\n      }\r\n    });\r\n    if (!found) {\r\n      if (!props.multipleIds) {\r\n        upsertTag({\r\n          variables: {\r\n            tag: {\r\n              tag: tagText,\r\n              public: publicTag,\r\n              user: stateApp.user.mongoId,\r\n              taggedOn: props.targetSourceId,\r\n              objectType: props.targetLabel,\r\n            },\r\n          },\r\n          refetchQueries: [\r\n            \"getTagsByObjectId\",\r\n            \"getUserAvailableTags\",\r\n            \"getTagSamples\",\r\n            \"getUserAvailableFilterTags\",\r\n            \"getObjectsFromTagsArray\",\r\n            \"getWellsIdsFromTagsArray\",\r\n            \"getOwnersIdsFromTagsArray\",\r\n          ],\r\n          awaitRefetchQueries: true,\r\n        });\r\n      } else {\r\n        for (let i = 0; i < props.multipleIds.length; i++) {\r\n          upsertTag({\r\n            variables: {\r\n              tag: {\r\n                tag: tagText,\r\n                public: publicTag,\r\n                user: stateApp.user.mongoId,\r\n                taggedOn: props.multipleIds[i],\r\n                objectType: props.targetLabel,\r\n              },\r\n            },\r\n            refetchQueries: [\r\n              \"getTagsByObjectId\",\r\n              \"getUserAvailableTags\",\r\n              \"getTagSamples\",\r\n              \"getUserAvailableFilterTags\",\r\n              \"getObjectsFromTagsArray\",\r\n              \"getWellsIdsFromTagsArray\",\r\n              \"getOwnersIdsFromTagsArray\",\r\n              \"getTagsByObjectsIds\",\r\n            ],\r\n            awaitRefetchQueries: true,\r\n          });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  ///////////////////// DELETING A TAG ///////////////////////////////////////////////\r\n\r\n  const DeleteTag = (TagIdOIds) => {\r\n    if (!props.multipleIds)\r\n      removeTag({\r\n        variables: {\r\n          tagId: TagIdOIds,\r\n        },\r\n        refetchQueries: [\r\n          \"getTagsByObjectId\",\r\n          \"getUserAvailableTags\",\r\n          \"getTagSamples\",\r\n          \"getUserAvailableFilterTags\",\r\n          \"getObjectsFromTagsArray\",\r\n          \"getWellsIdsFromTagsArray\",\r\n          \"getOwnersIdsFromTagsArray\",\r\n          \"getTagsByObjectsIds\",\r\n        ],\r\n        awaitRefetchQueries: true,\r\n      });\r\n    else {\r\n      let ids = TagIdOIds.split(\"???|||///\");\r\n\r\n      for (let i = 0; i < ids.length; i++) {\r\n        removeTag({\r\n          variables: {\r\n            tagId: ids[i],\r\n          },\r\n          refetchQueries: [\r\n            \"getTagsByObjectId\",\r\n            \"getUserAvailableTags\",\r\n            \"getTagSamples\",\r\n            \"getUserAvailableFilterTags\",\r\n            \"getObjectsFromTagsArray\",\r\n            \"getWellsIdsFromTagsArray\",\r\n            \"getOwnersIdsFromTagsArray\",\r\n            \"getTagsByObjectsIds\",\r\n          ],\r\n          awaitRefetchQueries: true,\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n  const handleChangeTags = (e, v) => {\r\n    e.persist();\r\n\r\n    if (e.key && e.key === \"Enter\") {\r\n      ////A new tag by keyboard\r\n      NewTag(v[v.length - 1]);\r\n    } else if (e.target.tagName === \"svg\" || e.target.tagName === \"path\") {\r\n      ////A tag was deleted\r\n      let TagIdOIds;\r\n      if (e.target.tagName === \"svg\") {\r\n        TagIdOIds = e.target.parentNode.id;\r\n      }\r\n      if (e.target.tagName === \"path\") {\r\n        TagIdOIds = e.target.parentNode.parentNode.id;\r\n      }\r\n      DeleteTag(TagIdOIds);\r\n    } else {\r\n      if (e.type === \"click\") {\r\n        ////A new tag by click on the dropdown\r\n        NewTag(e.target.innerText);\r\n      }\r\n    }\r\n  };\r\n\r\n  const cleanDropDownArray = () => {\r\n    const tags = tagsArray.map((tag) => tag.tag);\r\n\r\n    let cleanArray = userAvailableTagsArray.filter(\r\n      (tag) => tags.indexOf(tag) === -1\r\n    );\r\n    cleanArray = [...new Set(cleanArray)];\r\n    cleanArray.sort();\r\n    return { cleanArray, tags };\r\n  };\r\n\r\n  const AddingAddRowToDropDown = () => {\r\n    let { cleanArray } = cleanDropDownArray();\r\n\r\n    // if (props.multipleIds && userAvailableTagsArray) {\r\n    //   cleanArray = [...userAvailableTagsArray];\r\n    // }\r\n    if (addInDropDown) {\r\n      cleanArray.unshift(addInDropDown);\r\n    }\r\n    return cleanArray;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const { cleanArray, tags } = cleanDropDownArray();\r\n    if (\r\n      cleanArray.indexOf(UpperAndCleanTagText(textValue)) === -1 &&\r\n      tags.indexOf(UpperAndCleanTagText(textValue)) === -1 &&\r\n      textValue.trim() !== \"\"\r\n    ) {\r\n      setAddInDropDown(`Add \"${UpperAndCleanTagText(textValue)}\"`);\r\n    } else {\r\n      setAddInDropDown(false);\r\n    }\r\n  }, [textValue]);\r\n\r\n  const TogglePublicButton = () => {\r\n    return (\r\n      <FormGroup style={{ display: \"block\" }}>\r\n        {!props.publicLeftBottom && (\r\n          <h3 style={{ width: \"fit-content\", margin: \"0\", float: \"left\" }}>\r\n            Tags\r\n          </h3>\r\n        )}\r\n        <FormControlLabel\r\n          className={`${classes.switchButtom} ${\r\n            props.publicLeftBottom ? classes.publicLeftBottom : \"\"\r\n          } ${!publicTag ? classes.switchTextDeselected : \"\"}`}\r\n          control={\r\n            <React.Fragment>\r\n              {props.publicLeftBottom && <h4 className=\"h4Before\">Tags</h4>}\r\n              <AntSwitch\r\n                checked={publicTag}\r\n                onChange={() => {\r\n                  setPublicTag(!publicTag);\r\n                }}\r\n                name=\"checkedC\"\r\n              />\r\n\r\n              {props.publicLeftBottom && <h4 className=\"h4After\">Shared</h4>}\r\n            </React.Fragment>\r\n          }\r\n          label=\"Shared\"\r\n          labelPlacement=\"start\"\r\n        />\r\n      </FormGroup>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div id=\"taggerRoot\" className={classes.rootDiv}>\r\n      {!loadingTags ? (\r\n        <Grid container>\r\n          <Grid item xs={12}>\r\n            <TogglePublicButton />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <Autocomplete\r\n              className={classes.chip}\r\n              multiple\r\n              id=\"tags-outlined\"\r\n              onChange={(e, newValue) => {\r\n                handleChangeTags(e, newValue);\r\n              }}\r\n              options={AddingAddRowToDropDown().map((option) => option)}\r\n              value={tagsArray}\r\n              freeSolo\r\n              renderTags={(value, getTagProps) =>\r\n                value.map((tag, index) => {\r\n                  if (\r\n                    (publicTag && tag.public) ||\r\n                    (!publicTag &&\r\n                      !tag.public &&\r\n                      stateApp.user.email === tag.user.email)\r\n                  ) {\r\n                    return (\r\n                      <Chip\r\n                        key={index}\r\n                        id={\r\n                          !props.multipleIds\r\n                            ? tag._id\r\n                            : tag.ids.join(\"???|||///\")\r\n                        }\r\n                        label={tag.tag}\r\n                        {...getTagProps({ index })}\r\n                        deleteIcon={<ClearIcon />}\r\n                      />\r\n                    );\r\n                  }\r\n                })\r\n              }\r\n              renderInput={(params) => (\r\n                <TextField\r\n                  {...params}\r\n                  variant=\"outlined\"\r\n                  className={classes.input}\r\n                  // label={!props.publicLeftBottom ? \"Tags\" : null}\r\n                  placeholder={!showPlusAddIcon() ? \"\" : \"+\"}\r\n                  fullWidth\r\n                  value={textValue}\r\n                  onChange={(e) => {\r\n                    setTextValue(e.target.value);\r\n                  }}\r\n                  onClick={() => {\r\n                    setTFActive(true);\r\n                  }}\r\n                  onBlur={() => {\r\n                    setTFActive(false);\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          </Grid>\r\n          {/* {props.publicLeftBottom && (\r\n            <Grid item xs={12}>\r\n              <TogglePublicButton />\r\n            </Grid>\r\n          )} */}\r\n        </Grid>\r\n      ) : (\r\n        <CircularProgress color=\"secondary\"></CircularProgress>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}