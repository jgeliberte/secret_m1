{"ast":null,"code":"export function get(row, property) {\n  if (typeof row.get === 'function') {\n    return row.get(property);\n  }\n\n  return row[property];\n}\nexport function isRowSelected(keys, indexes, isSelectedKey, rowData, rowIdx) {\n  if (Array.isArray(indexes) && typeof rowIdx === 'number') {\n    return indexes.includes(rowIdx);\n  }\n\n  if (rowData && keys && keys.rowKey && Array.isArray(keys.values)) {\n    return keys.values.includes(rowData[keys.rowKey]);\n  }\n\n  if (rowData && typeof isSelectedKey === 'string') {\n    return !!rowData[isSelectedKey];\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../src/RowUtils.ts"],"names":[],"mappings":"AAEA,OAAM,SAAU,GAAV,CAAiB,GAAjB,EAAyB,QAAzB,EAA0C;AAC9C,MAAI,OAAQ,GAAe,CAAC,GAAxB,KAAgC,UAApC,EAAgD;AAC9C,WAAQ,GAAe,CAAC,GAAhB,CAAqB,QAArB,CAAR;AACD;;AAED,SAAO,GAAG,CAAC,QAAD,CAAV;AACD;AAOD,OAAM,SAAU,aAAV,CACJ,IADI,EAEJ,OAFI,EAGJ,aAHI,EAIJ,OAJI,EAKJ,MALI,EAKW;AAEf,MAAI,KAAK,CAAC,OAAN,CAAc,OAAd,KAA0B,OAAO,MAAP,KAAkB,QAAhD,EAA0D;AACxD,WAAO,OAAO,CAAC,QAAR,CAAiB,MAAjB,CAAP;AACD;;AAED,MAAI,OAAO,IAAI,IAAX,IAAmB,IAAI,CAAC,MAAxB,IAAkC,KAAK,CAAC,OAAN,CAAc,IAAI,CAAC,MAAnB,CAAtC,EAAkE;AAChE,WAAO,IAAI,CAAC,MAAL,CAAY,QAAZ,CAAqB,OAAO,CAAC,IAAI,CAAC,MAAN,CAA5B,CAAP;AACD;;AAED,MAAI,OAAO,IAAI,OAAO,aAAP,KAAyB,QAAxC,EAAkD;AAChD,WAAO,CAAC,CAAC,OAAO,CAAC,aAAD,CAAhB;AACD;;AAED,SAAO,KAAP;AACD","sourcesContent":["import { RowData } from './common/types';\n\nexport function get<R>(row: R, property: keyof R) {\n  if (typeof (row as RowData).get === 'function') {\n    return (row as RowData).get!(property) as R[typeof property];\n  }\n\n  return row[property];\n}\n\ninterface Keys {\n  rowKey?: string;\n  values?: string[];\n}\n\nexport function isRowSelected<R, K extends keyof R>(\n  keys?: Keys | null,\n  indexes?: number[] | null,\n  isSelectedKey?: string | null,\n  rowData?: R,\n  rowIdx?: number\n): boolean {\n  if (Array.isArray(indexes) && typeof rowIdx === 'number') {\n    return indexes.includes(rowIdx);\n  }\n\n  if (rowData && keys && keys.rowKey && Array.isArray(keys.values)) {\n    return keys.values.includes(rowData[keys.rowKey as K] as unknown as string);\n  }\n\n  if (rowData && typeof isSelectedKey === 'string') {\n    return !!rowData[isSelectedKey as K];\n  }\n\n  return false;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}