{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterDefaults.js\";\nimport React, { useContext, useEffect, useState, useRef } from \"react\";\nimport { AppContext } from \"../../../AppContext\";\nimport { NavigationContext } from \"../NavigationContext\";\nimport Paper from \"@material-ui/core/Paper\"; // import Popover from \"@material-ui/core/Popover\";\n\nimport DialogE from \"./Utils/DialogE\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Switch from '@material-ui/core/Switch';\nimport Divider from \"@material-ui/core/Divider\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\nimport TextField from \"@material-ui/core/TextField\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport FilterDefaultListWell from \"./FilterDefaultListWell\";\nimport FilterDefaultListGeo from \"./FilterDefaultListGeo\";\nimport FilterDefaultListOwner from \"./FilterDefaultListOwner\";\nimport FilterDefaultListProd from \"./FilterDefaultListProd\";\nimport SaveFilters from \"./SaveFilters\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nconst prodListOptions = [{\n  name: \"Cumulative  -  Oil\"\n}, {\n  name: \"Cumulative  -  Gas\"\n}, {\n  name: \"Cumulative  -  Water\"\n}, {\n  name: \"First Month  -  Oil\"\n}, {\n  name: \"First Month  -  Gas\"\n}, {\n  name: \"First Month  -  Water\"\n}, {\n  name: \"First Three Months  -  Oil\"\n}, {\n  name: \"First Three Months  -  Gas\"\n}, {\n  name: \"First Three Months  -  Water\"\n}, {\n  name: \"First Six Months  -  Oil\"\n}, {\n  name: \"First Six Months  -  Gas\"\n}, {\n  name: \"First Six Months  -  Water\"\n}, {\n  name: \"First Twelve Months  -  Oil\"\n}, {\n  name: \"First Twelve Months  -  Gas\"\n}, {\n  name: \"First Twelve Months  -  Water\"\n}, {\n  name: \"Last Month  -  Oil\"\n}, {\n  name: \"Last Month  -  Gas\"\n}, {\n  name: \"Last Month  -  Water\"\n}, {\n  name: \"Last Six Months  -  Oil\"\n}, {\n  name: \"Last Six Months  -  Gas\"\n}, {\n  name: \"Last Six Months  -  Water\"\n}, {\n  name: \"Last Twelve Months  -  Oil\"\n}, {\n  name: \"Last Twelve Months  -  Gas\"\n}, {\n  name: \"Last Twelve Months  -  Water\"\n}];\nconst useStyles = makeStyles(theme => ({\n  save: {\n    display: \"flex\",\n    width: \"100%\",\n    justifyContent: \"flex-end\",\n    padding: \"6px 12px\",\n    marginRight: 10,\n    color: \"rgba(0, 0, 0, 0.54)\",\n    boxShadow: \"none\",\n    backgroundColor: \"inherit\",\n    \"&:hover\": {\n      backgroundColor: \"transparent\"\n    }\n  },\n  input: {\n    flex: \"1 1 auto\",\n    paddingRight: 30\n  },\n  iconButton: {\n    padding: 10\n  },\n  user: {\n    fontSize: 12,\n    color: \"rgba(23, 170, 221, 1)\"\n  },\n  rootDiv: {\n    padding: \"2px 6px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: 20\n  },\n  paparMain: {\n    boxShadow: \"none\",\n    padding: \"2px 6px\"\n  },\n  listItemLabel: {\n    justifyContent: \"flex-end\",\n    flex: 1,\n    fontSize: 12,\n    color: \"rgba(0, 0, 0, 0.54)\"\n  },\n  listItem: {\n    margin: 4,\n    flex: \"1 1 auto\",\n    justifyContent: \"space-between\",\n    minWidth: 278\n  },\n  checkBox: {\n    flex: \"1 1 auto\",\n    justifyContent: \"end\",\n    paddingRight: 18,\n    \"&:hover\": {\n      backgroundColor: \"transparent !important\"\n    }\n  },\n  chip: {\n    padding: \"3px 20px\",\n    fontSize: 12\n  },\n  chipContainer: {\n    height: \"100%\",\n    margin: \"6px 6px\"\n  },\n  chipRow: {\n    display: \"inline-flex\",\n    padding: \"3px 0px\"\n  },\n  deleteButton: {\n    marginLeft: \"0%\"\n  },\n  listLabel: {\n    padding: \"6px 30px\",\n    display: \"inline-flex\",\n    marginRight: \"70%\"\n  },\n  switch: {\n    marginRight: 50\n  },\n  listItemContainer: {\n    display: \"inherit\",\n    \"&:hover\": {\n      color: \"transparent\"\n    }\n  }\n}));\n\nconst ButtonInTabs = ({\n  className,\n  onClick,\n  children\n}) => {\n  return /*#__PURE__*/React.createElement(Button, {\n    className: className,\n    onClick: onClick,\n    children: children,\n    \"aria-label\": \"save\",\n    variant: \"contained\",\n    disableElevation: true,\n    startIcon: /*#__PURE__*/React.createElement(BookmarkBorderIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 14\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default function FilterDedaults() {\n  const [stateApp, setStateApp] = useContext(AppContext);\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [tabsValue, setTabsValue] = useState(0);\n  const [stateNavCopy, setStateNavCopy] = useState(null);\n  const [filtersProd, setFiltersProd] = useState(null);\n  const [filtersGeo, setFiltersGeo] = useState(null);\n  const [filtersOwner, setFiltersOwner] = useState(null);\n  const [filtersWell, setFiltersWell] = useState(null);\n  const [savedFilters, setSavedFilters] = useState(null);\n  const [checkBoxActiveM1neral, setCheckBoxActiveM1neral] = useState(null);\n  const [checkBoxDefaultM1neral, setCheckBoxDefaultM1neral] = useState(null);\n  const [checkBoxActive, setCheckBoxActive] = useState(null);\n  const [checkBoxDefault, setCheckBoxDefault] = useState(null);\n  const [dateCreated, setDateCreated] = useState(new Date());\n  const [filterTypeWell, setFilterTypeWell] = useState(null);\n  const [filterTypeOwner, setFilterTypeOwner] = useState(null);\n  const [filterTypeProdcution, setFilterTypeProduction] = useState(null);\n  const [filterTypeGeography, setFilterTypeGeography] = useState(null); // const [saveSearchName, setSaveSearchName] = useState(\"\");\n\n  const [user, setUser] = useState(\"\");\n  const [showSavePopOver, setShowSavePopOver] = useState(false);\n  const [filtersFromDb, setFiltersFromDb] = useState(null);\n  const [typesFromDb, setTypesFromDb] = useState(null);\n  const classes = useStyles();\n  useEffect(() => {\n    let name;\n\n    if (stateApp) {\n      name = stateApp.user.name;\n      setUser(name);\n    }\n  }, [stateApp]);\n\n  const handleChange = (event, newValue) => {\n    setTabsValue(newValue);\n  };\n\n  useEffect(() => {\n    if (stateApp.filtersOnOff && stateApp.filtersDefaultOnoff) {\n      setCheckBoxActive(stateApp.filtersOnOff);\n      setCheckBoxDefault(stateApp.filtersDefaultOnoff);\n    }\n\n    if (stateNav.m1neralDefaultFilters) {\n      setCheckBoxActiveM1neral(stateNav.m1neralDefaultsOnOff);\n      setCheckBoxDefaultM1neral(stateNav.m1neralCehckOnOff);\n    }\n  }, [stateApp.filtersDefaultOnoff, stateApp.filtersOnOff, stateNav.m1neralCehckOnOff, stateNav.m1neralDefaultFilters, stateNav.m1neralDefaultsOnOff]);\n  useEffect(() => {\n    let typeName;\n    let types;\n    let filtersName;\n    let filter;\n\n    if (filtersFromDb && filtersFromDb.length > 0) {\n      filtersFromDb.forEach(element => {\n        filtersName = element[0];\n        filter = element[1];\n        setStateNav(stateNav => ({ ...stateNav,\n          [filtersName]: filter\n        }));\n      });\n    }\n\n    if (typesFromDb && typesFromDb.length > 0) {\n      typesFromDb.forEach(el => {\n        typeName = el[0];\n        types = el[1];\n        setStateNav(stateNav => ({ ...stateNav,\n          [typeName]: types\n        }));\n      });\n    }\n  }, [filtersFromDb, setStateNav, typesFromDb]);\n  useEffect(() => {\n    let saveFilters = [];\n    let filtersStateNav;\n    let defaultFiltersArgs;\n    let defaultFiltersStateApp;\n    let m1neralSavedFilters = [];\n\n    if (stateNav.m1neralDefaultFilters) {\n      defaultFiltersArgs = stateNav.m1neralDefaultFilters.map(elm => elm);\n      defaultFiltersStateApp = stateApp.filters.map(el => el[0].name);\n\n      if (defaultFiltersArgs[0].filters) {\n        m1neralSavedFilters.push(defaultFiltersArgs[0].name);\n        setSavedFilters([m1neralSavedFilters, defaultFiltersStateApp]);\n      }\n    }\n\n    if (stateNav) {\n      let stateNavActiveProperties = Object.entries(stateNav).filter(([k, v], i) => !!v && v.length > 0);\n      setStateNavCopy([...stateNavActiveProperties]);\n      let mapStateNav = stateNavActiveProperties.map(val => val);\n      mapStateNav.filter(element => element && element[1].length > 1 ? element[0].includes(\"filter\") ? saveFilters.push(element) : null : null);\n      filtersStateNav = [...saveFilters];\n      let wellArr = [];\n      let geoArr = [];\n      let geoArr1 = [];\n      let ownerArr = [];\n      let interestArr = [];\n      let prodArr = [];\n\n      if (filtersStateNav && filtersStateNav.length > 0) {\n        filtersStateNav.map(item => {\n          if (item[0].includes(\"Operator\")) {\n            setFilterTypeWell(\"Well\");\n            wellArr.push(item);\n          }\n\n          if (item[0].includes(\"Well\")) {\n            setFilterTypeWell(\"Well\");\n            wellArr.push(item);\n          }\n\n          if (item[0].includes(\"Date\")) {\n            setFilterTypeWell(\"Well\");\n            wellArr.push(item);\n          }\n\n          if (item[0].includes(\"Owner\")) {\n            setFilterTypeOwner(\"Owner\");\n            ownerArr.push(item);\n          }\n\n          if (item[0].includes(\"Interest\")) {\n            setFilterTypeOwner(\"Owner\");\n            interestArr.push(item);\n          }\n\n          if (item[0].includes(\"Geography\")) {\n            setFilterTypeGeography(\"Geography\");\n            geoArr.push(item);\n          }\n\n          if (item[0].includes(\"Basin\")) {\n            setFilterTypeGeography(\"Geography\");\n            geoArr1.push(item);\n          }\n\n          if (item[0].includes(\"Play\")) {\n            setFilterTypeGeography(\"Geography\");\n            geoArr1.push(item);\n          }\n\n          if (item[0].includes(\"Gas\")) {\n            setFilterTypeProduction(\"Production\");\n            prodArr.push(item);\n          }\n\n          if (item[0].includes(\"Oil\")) {\n            setFilterTypeProduction(\"Production\");\n            prodArr.push(item);\n          }\n\n          if (item[0].includes(\"Water\")) {\n            setFilterTypeProduction(\"Production\");\n            prodArr.push(item);\n          }\n        });\n      }\n\n      if (geoArr1.length > 0) {\n        setFiltersGeo([geoArr, geoArr1]);\n      } else if (geoArr.length > 0) {\n        setFiltersGeo([geoArr, geoArr1]);\n      } else {\n        setFiltersGeo(null);\n      }\n\n      if (ownerArr.length > 0) {\n        setFiltersOwner([ownerArr, interestArr]);\n      } else if (interestArr.length > 0) {\n        setFiltersOwner([ownerArr, interestArr]);\n      } else {\n        setFiltersOwner(null);\n      }\n\n      setFiltersProd(prodArr);\n      setFiltersWell(wellArr);\n    }\n  }, [stateApp.filters, stateNav]);\n\n  const deleteChipWell = (item, name) => {\n    if (stateNav[name] && stateNav[name].length === 5) {\n      let copy;\n      let type;\n      copy = [...stateNav[name]];\n      let removeItem = copy[2].filter(e => e !== item);\n\n      if (copy[2].length > 0) {\n        copy[2] = [...removeItem];\n\n        if (name === \"filterWellType\") {\n          type = \"typeName\";\n        }\n\n        if (name === \"filterWellStatus\") {\n          type = \"statusName\";\n        }\n\n        if (name === \"filterOperator\") {\n          type = \"operatorName\";\n        }\n\n        if (name === \"filterWellProfile\") {\n          type = \"profileName\";\n        }\n      }\n\n      if (removeItem.length === 0) {\n        setStateNav(stateNav => ({ ...stateNav,\n          [name]: null,\n          [type]: []\n        }));\n      } else {\n        setStateNav(stateNav => ({ ...stateNav,\n          [name]: copy,\n          [type]: removeItem\n        }));\n      }\n    }\n\n    if (stateNav[name] && stateNav[name].length === 3) {\n      let typeFrom;\n      let typeTo;\n\n      if (name === \"filterPermitDateRange\") {\n        typeFrom = \"permitDateFrom\";\n        typeTo = \"permitDateTo\";\n      }\n\n      if (name === \"filterSpudDateRange\") {\n        typeFrom = \"spudDateFrom\";\n        typeTo = \"spudDateTo\";\n      }\n\n      if (name === \"filterCompletetionDateRange\") {\n        typeFrom = \"completetionDateFrom\";\n        typeTo = \"completetionDateTo\";\n      }\n\n      if (name === \"filterFirstProdDateRange\") {\n        typeFrom = \"firstProdDateFrom\";\n        typeTo = \"firstProdDateTo\";\n      }\n\n      setStateNav(stateNav => ({ ...stateNav,\n        [name]: null,\n        [typeFrom]: null,\n        [typeTo]: null\n      }));\n    }\n  }; // State County Survey Abstract \n\n\n  const deleteChipGeoSCSA = (item, name) => {\n    let copy;\n    copy = [...stateNav[name]];\n\n    if (copy && copy[1] && copy[1].length === 5) {\n      for (let index = 0; index < copy.length; index++) {\n        const element = copy[index];\n\n        if (element[1][1] === \"state\") {\n          if (element[2] === item) {\n            copy.splice(0, copy.length);\n            setStateNav(stateNav => ({ ...stateNav,\n              [name]: null,\n              stateName: null,\n              displayStateName: null\n            }));\n          }\n        }\n      }\n    }\n\n    if (copy && copy[2] && copy[2].length === 5) {\n      for (let index = 0; index < copy.length; index++) {\n        const element = copy[index];\n\n        if (element[1][1] === \"county\") {\n          if (element[2] === item) {\n            copy.splice(index, copy.length);\n            setStateNav(stateNav => ({ ...stateNav,\n              [name]: copy,\n              countyName: null,\n              surveyName: null,\n              abstractName: null\n            }));\n          }\n        }\n      }\n    }\n\n    if (copy && copy[3] && copy[3].length === 5) {\n      for (let index = 0; index < copy.length; index++) {\n        const element = copy[index];\n\n        if (element[1][1] === \"survey\") {\n          if (element[2] === item) {\n            copy.splice(index, copy.length);\n            setStateNav(stateNav => ({ ...stateNav,\n              [name]: copy,\n              surveyName: null,\n              abstractName: null\n            }));\n          }\n        }\n      }\n    }\n\n    if (copy && copy[4] && copy[4].length === 5) {\n      for (let index = 0; index < copy.length; index++) {\n        const element = copy[index];\n\n        if (element[1][1] === \"abstract\") {\n          if (element[2] === item) {\n            copy.splice(index, copy.length);\n            setStateNav(stateNav => ({ ...stateNav,\n              [name]: copy,\n              abstractName: null\n            }));\n          }\n        }\n      }\n    }\n  }; // Basin And PLay \n\n\n  const deleteChipGeo = (item, name) => {\n    if (stateNav[name] && stateNav[name].length === 5) {\n      let copy;\n      let type;\n      copy = [...stateNav[name]];\n      let removeItem = copy[2].filter(e => e !== item);\n\n      if (copy[2].length > 0) {\n        copy[2] = [...removeItem];\n\n        if (name === \"filterBasin\") {\n          type = \"basinName\";\n        }\n\n        if (name === \"filterPlay\") {\n          type = \"playName\";\n        }\n      }\n\n      if (removeItem.length === 0) {\n        setStateNav(stateNav => ({ ...stateNav,\n          [name]: null,\n          [type]: []\n        }));\n      } else {\n        setStateNav(stateNav => ({ ...stateNav,\n          [name]: copy,\n          [type]: removeItem\n        }));\n      }\n    }\n  };\n\n  const deleteChipOwner = item => {\n    if (stateNav.filterNoOwnerCount && stateNav.filterNoOwnerCount.length > 0) {\n      if (item === \"noOwners\") {\n        setStateNav(stateNav => ({ ...stateNav,\n          filterNoOwnerCount: null\n        }));\n      }\n    }\n\n    if (stateNav.filterHasOwnerCount && stateNav.filterHasOwnerCount.length > 0) {\n      if (item === \"hasOwners\") {\n        setStateNav(stateNav => ({ ...stateNav,\n          filterHasOwnerCount: null\n        }));\n      }\n    }\n\n    if (stateNav.filterOwnerCount && stateNav.filterOwnerCount.length > 0) {\n      let copy;\n      copy = [...stateNav.filterOwnerCount];\n\n      for (let index = 0; index < copy.length; index++) {\n        const element = copy[index];\n\n        if (element[0] === item) {\n          copy.splice(index, 1);\n        }\n      }\n\n      setStateNav(stateNav => ({ ...stateNav,\n        filterOwnerCount: copy\n      }));\n\n      if (copy.length === 1) {\n        setStateNav(stateNav => ({ ...stateNav,\n          filterOwnerCount: null\n        }));\n      }\n    }\n\n    if (stateNav.filterAllOwnershipTypes && stateNav.filterAllOwnershipTypes.length > 0) {\n      let copy;\n      let itemRemove = stateNav.interestName;\n      let i = itemRemove.indexOf(item);\n\n      if (item === \"ownershipTypeReligiousInstitutions\") {\n        itemRemove.splice(i, 1);\n      }\n\n      if (item === \"ownershipTypeGovernmentalBodies\") {\n        itemRemove.splice(i, 1);\n      }\n\n      if (item === \"ownershipTypeNonProfits\") {\n        itemRemove.splice(i, 1);\n      }\n\n      if (item === \"ownershipTypeTrusts\") {\n        itemRemove.splice(i, 1);\n      }\n\n      if (item === \"ownershipTypeCorporations\") {\n        itemRemove.splice(i, 1);\n      }\n\n      if (item === \"ownershipTypeEducationalInstitutions\") {\n        itemRemove.splice(i, 1);\n      }\n\n      if (item === \"ownershipTypeIndividuals\") {\n        itemRemove.splice(i, 1);\n      }\n\n      if (item === \"ownershipTypeUnknown\") {\n        itemRemove.splice(i, 1);\n      }\n\n      copy = [...stateNav.filterAllOwnershipTypes];\n\n      for (let index = 0; index < copy.length; index++) {\n        const element = copy[index];\n\n        if (element.includes(item)) {\n          copy.splice(index, 1);\n        }\n      }\n\n      if (copy.length > 1) {\n        setStateNav(stateNav => ({ ...stateNav,\n          filterAllOwnershipTypes: copy,\n          ownerTypeName: itemRemove\n        }));\n      } else {\n        setStateNav(stateNav => ({ ...stateNav,\n          filterAllOwnershipTypes: null,\n          ownerTypeName: []\n        }));\n      }\n    }\n  };\n\n  const matchProdOption = string => {\n    let list = prodListOptions;\n    let match = list.map(el => el.name);\n\n    if (match.includes(string)) {\n      return string;\n    }\n  };\n\n  const removeFitlerFromProdName = string => {\n    if (string.includes(\"filterCumulative\")) {\n      return string.replace(\"filterCumulative\", \"Cumulative  -  \");\n    }\n\n    if (string.includes(\"filterFirstMonth\")) {\n      return string.replace(\"filterFirstMonth\", \"First Month  -  \");\n    }\n\n    if (string.includes(\"filterFirstThreeMonth\")) {\n      return string.replace(\"filterFirstThreeMonth\", \"First Three Months  -  \");\n    }\n\n    if (string.includes(\"filterFirstSixMonth\")) {\n      return string.replace(\"filterFirstSixMonth\", \"First Six Months  -  \");\n    }\n\n    if (string.includes(\"filterFirstTwelveMonth\")) {\n      return string.replace(\"filterFirstTwelveMonth\", \"First Twelve Months  -  \");\n    }\n\n    if (string.includes(\"filterLastTwelveMonth\")) {\n      return string.replace(\"filterLastTwelveMonth\", \"Last Twelve Months  -  \");\n    }\n\n    if (string.includes(\"filterLastSixMonth\")) {\n      return string.replace(\"filterLastSixMonth\", \"Last Six Months  -  \");\n    }\n\n    if (string.includes(\"filterLastMonth\")) {\n      return string.replace(\"filterLastMonth\", \"Last Month  -  \");\n    }\n  };\n\n  const deleteChipProd = (item, name, filter) => {\n    if (stateNav[name] && stateNav[name].length > 0) {\n      let copy;\n      copy = [...stateNav[name]];\n\n      for (let index = 0; index < copy.length; index++) {\n        const element = copy[index];\n\n        if (element[2] === item) {\n          copy.splice(index, 1);\n        }\n      }\n\n      if (filter && filter[1] && filter[1].length === 2) {\n        let compare = removeFitlerFromProdName(name);\n        let match = matchProdOption(compare);\n        let findItem = stateNav.prodOptions;\n\n        for (let index = 0; index < findItem.length; index++) {\n          const element = findItem[index];\n\n          if (element === match) {\n            findItem.splice(index, 1);\n          }\n        }\n      }\n\n      setStateNav(stateNav => ({ ...stateNav,\n        [name]: copy\n      }));\n\n      if (copy.length === 1) {\n        setStateNav(stateNav => ({ ...stateNav,\n          [name]: null\n        }));\n      }\n    }\n  };\n\n  const deleteChipInterest = item => {\n    if (stateNav.filterAllInterestTypes) {\n      let copy;\n      let itemRemove = stateNav.interestName;\n      let i = itemRemove.indexOf(item);\n\n      if (item === \"interestTypeRoyaltyInterest\") {\n        itemRemove.splice(i, 1);\n      }\n\n      if (item === \"interestTypeOverrideRoyalty\") {\n        itemRemove.splice(i, 1);\n      }\n\n      if (item === \"interestTypeWorkingInterest\") {\n        itemRemove.splice(i, 1);\n      }\n\n      if (item === \"interestTypeProductionPayment\") {\n        itemRemove.splice(i, 1);\n      }\n\n      copy = [...stateNav.filterAllInterestTypes];\n\n      for (let index = 0; index < copy.length; index++) {\n        const element = copy[index];\n\n        if (element.includes(item)) {\n          copy.splice(index, 1);\n        }\n      }\n\n      if (copy.length > 1) {\n        setStateNav(stateNav => ({ ...stateNav,\n          filterAllInterestTypes: copy,\n          interestName: itemRemove\n        }));\n      } else {\n        setStateNav(stateNav => ({ ...stateNav,\n          filterAllInterestTypes: null,\n          interestName: []\n        }));\n      }\n    }\n  };\n\n  const removeAllWell = () => {\n    if (filtersWell && filterTypeWell) {\n      setStateNav(stateNav => ({ ...stateNav,\n        filterCompletetionDateRange: null,\n        filterFirstProdDateRange: null,\n        filterPermitDateRange: null,\n        firstProdDateFrom: null,\n        firstProdDateTo: null,\n        filterSpudDateRange: null,\n        filterWellProfile: null,\n        filterWellStatus: null,\n        filterWellType: null,\n        filterOperator: null,\n        completetionDateFrom: null,\n        completetionDateTo: null,\n        dateTypeName: [],\n        operatorName: null,\n        profileName: null,\n        spudDateFrom: null,\n        spudDateTo: null,\n        statusName: [],\n        typeName: []\n      }));\n    }\n  };\n\n  const removeAllGeo = () => {\n    if (filtersGeo && filterTypeGeography) {\n      setStateNav(stateNav => ({ ...stateNav,\n        basinName: [],\n        playName: [],\n        countyName: null,\n        stateName: null,\n        displayStateName: null,\n        surveyName: null,\n        abstractName: null,\n        filterGeography: null,\n        filterBasin: null,\n        filterPlay: null\n      }));\n    }\n  };\n\n  const removeAllProd = () => {\n    if (filtersProd && filterTypeProdcution) {\n      setStateNav(stateNav => ({ ...stateNav,\n        prodOptions: [],\n        filterCumulativeOil: null,\n        filterCumulativeGas: null,\n        filterCumulativeWater: null,\n        filterFirstMonthWater: null,\n        filterFirstThreeMonthWater: null,\n        filterFirstSixMonthWater: null,\n        filterFirstTwelveMonthWater: null,\n        filterLastMonthWater: null,\n        filterLastSixMonthWater: null,\n        filterLastTwelveMonthWater: null,\n        filterFirstMonthGas: null,\n        filterFirstThreeMonthGas: null,\n        filterFirstSixMonthGas: null,\n        filterFirstTwelveMonthGas: null,\n        filterLastMonthGas: null,\n        filterLastSixMonthGas: null,\n        filterLastTwelveMonthGas: null,\n        filterFirstMonthOil: null,\n        filterFirstSixMonthOil: null,\n        filterFirstTwelveMonthOil: null,\n        filterLastMonthOil: null,\n        filterLastSixMonthOil: null,\n        filterLastTwelveMonthOil: null\n      }));\n    }\n  };\n\n  const removeAllOwner = () => {\n    if (filtersOwner && filterTypeOwner) {\n      setStateNav(stateNav => ({ ...stateNav,\n        interestName: [],\n        ownerTypeName: [],\n        ownerCountWell: [],\n        filterOwnerType: null,\n        filterOwnerCount: null,\n        filterNoOwnerCount: null,\n        filterAllInterestTypes: null,\n        filterAllOwnershipTypes: null,\n        filterHasOwners: null,\n        filterHasOwnerCount: null\n      }));\n    }\n  };\n\n  const formatString = string => {\n    return string.split(\" \").join(\"\");\n  };\n\n  const filterOnOff = e => {\n    if (e) {\n      const target = e.target;\n      const name = target.name;\n      const checked = target.checked;\n      let filtersFromSate = [...stateApp.filters];\n      let filtersTorRemove = [...stateNavCopy];\n      let removeFilters;\n      let filtersToSet;\n      let typesToSet;\n      let filtersName;\n\n      for (let index = 0; index < filtersFromSate.length; index++) {\n        const element = filtersFromSate[index];\n        filtersName = element[0].name;\n\n        if (name === filtersName.split(\" \").join(\"\")) {\n          filtersToSet = element[0].filters;\n          typesToSet = element[0].types;\n        }\n      }\n\n      if (checked) {\n        let NoMatchName;\n        let findNames = Object.keys(checkBoxActive).map(e => e);\n        findNames.forEach(i => {\n          if (i !== name) {\n            NoMatchName = i;\n            setCheckBoxActive(checkBoxActive => ({ ...checkBoxActive,\n              [name]: true,\n              [NoMatchName]: false\n            }));\n          }\n        });\n        setFiltersFromDb(filtersToSet);\n        setTypesFromDb(typesToSet);\n        setCheckBoxActiveM1neral(false);\n      } else {\n        let findNames = Object.keys(checkBoxActive).map(e => e);\n        findNames.forEach(i => {\n          setCheckBoxActive(checkBoxActive => ({ ...checkBoxActive,\n            [i]: false\n          }));\n        });\n        removeFilters = filtersTorRemove.map(el => el[0]).filter(e => e !== \"m1neralDefaultFilters\");\n        removeFilters.forEach(element => {\n          setStateNav(stateNav => ({ ...stateNav,\n            [element]: null\n          }));\n        });\n        setFiltersFromDb(null);\n        setTypesFromDb(null);\n        setCheckBoxActiveM1neral(false);\n      }\n    }\n  };\n\n  const selectDefault = e => {\n    const target = e.target;\n    const name = target.name;\n    const checked = target.checked;\n\n    if (checked) {\n      let NoMatchName;\n      let findNames = Object.keys(checkBoxDefault).map(e => e);\n      findNames.forEach(i => {\n        if (i !== name) {\n          NoMatchName = i;\n          setCheckBoxDefault(checkBoxDefault => ({ ...setCheckBoxDefault,\n            [name]: true,\n            [NoMatchName]: false\n          }));\n        }\n      });\n      setCheckBoxDefaultM1neral(false);\n    } else {\n      let findNames = Object.keys(checkBoxDefault).map(e => e);\n      findNames.forEach(i => {\n        setCheckBoxDefault(checkBoxDefault => ({ ...setCheckBoxDefault,\n          [i]: false\n        }));\n      });\n      setCheckBoxDefaultM1neral(true);\n    }\n  };\n\n  const filterOnOffM1neral = () => {\n    if (checkBoxActiveM1neral === true) {\n      setStateNav(stateNav => ({ ...stateNav,\n        statusName: [],\n        typeName: [],\n        filterWellStatus: null,\n        filterWellType: null,\n        m1neralDefaultsOnOff: false\n      }));\n      setCheckBoxActiveM1neral(false);\n      setFiltersFromDb(null);\n      setTypesFromDb(null);\n    } else {\n      let m1neralDefault = stateNav.m1neralDefaultFilters.map(elm => elm);\n      let types;\n      let filters;\n      m1neralDefault.forEach(element => {\n        filters = element.filters;\n        types = element.types;\n      });\n      filters.forEach(e => {\n        setStateNav(stateNav => ({ ...stateNav,\n          [e[0]]: e[1]\n        }));\n      });\n      types.forEach(e => {\n        setStateNav(stateNav => ({ ...stateNav,\n          [e[0]]: e[1]\n        }));\n      });\n      let findNames = Object.keys(checkBoxActive).map(e => e);\n      findNames.forEach(i => {\n        setCheckBoxActive(checkBoxActive => ({ ...checkBoxActive,\n          [i]: false\n        }));\n      });\n      setStateNav(stateNav => ({ ...stateNav,\n        m1neralDefaultsOnOff: true\n      }));\n      setCheckBoxActiveM1neral(true);\n      setFiltersFromDb(null);\n      setTypesFromDb(null);\n    }\n  };\n\n  const selectDefaultM1neral = () => {\n    if (checkBoxDefaultM1neral === true) {\n      setCheckBoxDefaultM1neral(false);\n    } else {\n      setCheckBoxDefaultM1neral(true);\n      let findNames = Object.keys(checkBoxDefault).map(e => e);\n      findNames.forEach(i => {\n        setCheckBoxDefault(checkBoxDefault => ({ ...setCheckBoxDefault,\n          [i]: false\n        }));\n      });\n    }\n  };\n\n  const saveFilters = () => {\n    setShowSavePopOver(true);\n  };\n\n  const closePopoverSaveFilters = () => {\n    setShowSavePopOver(false);\n  };\n\n  const deleteFilterM1neral = () => {\n    if (savedFilters[0] === \"M1neral Default Filters\") {\n      alert(\"M1neral Default filters cannot be deleted\");\n    }\n  };\n\n  const deleteFilter = (e, name) => {\n    let findNameToRemove = [...stateApp.filters];\n    let itemToRemove;\n    let item;\n    let updatedFilters;\n    findNameToRemove.forEach(el => {\n      itemToRemove = el[0].name;\n\n      if (itemToRemove === name) {\n        item = el[0].name;\n      }\n    });\n    updatedFilters = findNameToRemove.filter(element => element[0].name !== itemToRemove);\n    setStateApp(stateApp => ({ ...stateApp,\n      filtersMockDb: updatedFilters\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1003,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Paper, {\n    square: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1004,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Tabs, {\n    value: tabsValue,\n    onChange: handleChange,\n    \"aria-label\": \"disabled tabs example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1005,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tab, {\n    value: 0,\n    label: \"Saved Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1010,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Tab, {\n    value: 1,\n    label: \"Current Search\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1011,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ButtonInTabs, {\n    className: classes.save,\n    onClick: saveFilters,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1012,\n      columnNumber: 11\n    }\n  }, \"Save\")), showSavePopOver ? /*#__PURE__*/React.createElement(DialogE, {\n    open: saveFilters,\n    close: closePopoverSaveFilters,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1020,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SaveFilters, {\n    user: user,\n    filterList: filtersFromDb,\n    filters: stateNavCopy,\n    close: closePopoverSaveFilters,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1021,\n      columnNumber: 11\n    }\n  })) : null), tabsValue === 0 ? /*#__PURE__*/React.createElement(Paper, {\n    className: classes.paparMain,\n    square: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1026,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    component: \"form\",\n    className: classes.rootDiv,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1027,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    className: classes.input,\n    placeholder: \"Search\",\n    inputProps: {\n      \"aria-label\": \"search\"\n    },\n    InputProps: {\n      startAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        position: \"start\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1034,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(SearchIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1035,\n          columnNumber: 21\n        }\n      }))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1028,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(ListItem, {\n    className: classes.listItemLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1040,\n      columnNumber: 13\n    }\n  }, \"Default\"), /*#__PURE__*/React.createElement(ListItem, {\n    className: classes.listItemLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1041,\n      columnNumber: 13\n    }\n  }, \"Active\"), /*#__PURE__*/React.createElement(ListItem, {\n    className: classes.listItemLabel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1042,\n      columnNumber: 13\n    }\n  }, \"Delete\")), /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1044,\n      columnNumber: 11\n    }\n  }, checkBoxDefaultM1neral ? savedFilters && savedFilters[0] ? savedFilters[0].map(el => /*#__PURE__*/React.createElement(\"div\", {\n    key: el,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1048,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1049,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    className: classes.listItem,\n    primary: /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1053,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 29\n      }\n    }, el), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1055,\n        columnNumber: 29\n      }\n    }, user, \" - \", dateCreated.toDateString())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1050,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    className: classes.checkBox,\n    checked: checkBoxDefaultM1neral,\n    onChange: selectDefaultM1neral,\n    color: \"primary\",\n    disableRipple: true,\n    inputProps: {\n      \"aria-label\": \"Default checkbox\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1061,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    className: classes.switch,\n    checked: checkBoxActiveM1neral,\n    onChange: filterOnOffM1neral,\n    color: \"secondary\",\n    inputProps: {\n      'aria-label': 'primary checkbox'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1069,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    disabled: true,\n    onClick: deleteFilterM1neral,\n    \"aria-label\": \"delete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1076,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(DeleteIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1077,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1080,\n      columnNumber: 21\n    }\n  }))) : null : null, checkBoxActive && checkBoxDefault ? savedFilters && savedFilters[1] ? savedFilters[1].map(el => /*#__PURE__*/React.createElement(\"div\", {\n    key: el,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1088,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1089,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ListItemText, {\n    className: classes.listItem,\n    primary: /*#__PURE__*/React.createElement(\"section\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1093,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1094,\n        columnNumber: 29\n      }\n    }, el), /*#__PURE__*/React.createElement(\"div\", {\n      className: classes.user,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1095,\n        columnNumber: 29\n      }\n    }, user, \" - \", dateCreated.toDateString())),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1090,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    className: classes.checkBox,\n    checked: checkBoxDefault[el.split(\" \").join(\"\")],\n    onChange: e => selectDefault(e),\n    color: \"primary\",\n    name: formatString(el),\n    disableRipple: true,\n    inputProps: {\n      \"aria-label\": \"Default checkbox\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1101,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    className: classes.switch,\n    checked: checkBoxActive[el.split(\" \").join(\"\")],\n    onChange: e => filterOnOff(e),\n    color: \"secondary\",\n    name: formatString(el),\n    inputProps: {\n      'aria-label': 'primary checkbox'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1110,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(IconButton, {\n    onClick: e => deleteFilter(e, el),\n    \"aria-label\": \"delete\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1118,\n      columnNumber: 23\n    }\n  }, /*#__PURE__*/React.createElement(DeleteIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1119,\n      columnNumber: 25\n    }\n  }))), /*#__PURE__*/React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1122,\n      columnNumber: 21\n    }\n  }))) : null : null)) : null, tabsValue === 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1131,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1132,\n      columnNumber: 11\n    }\n  }, filtersWell && filterTypeWell ? /*#__PURE__*/React.createElement(FilterDefaultListWell, {\n    deleteChip: deleteChipWell,\n    type: filterTypeWell,\n    filters: filtersWell,\n    removeAll: removeAllWell,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1134,\n      columnNumber: 15\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1142,\n      columnNumber: 11\n    }\n  }, filtersGeo && filterTypeGeography ? /*#__PURE__*/React.createElement(FilterDefaultListGeo, {\n    deleteChip: deleteChipGeo,\n    deleteChipGeoSCSA: deleteChipGeoSCSA,\n    type: filterTypeGeography,\n    filters: filtersGeo,\n    removeAll: removeAllGeo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1144,\n      columnNumber: 15\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1153,\n      columnNumber: 11\n    }\n  }, filtersOwner && filterTypeOwner ? /*#__PURE__*/React.createElement(FilterDefaultListOwner, {\n    deleteChip: deleteChipOwner,\n    type: filterTypeOwner,\n    filters: filtersOwner,\n    deleteChipInterest: deleteChipInterest,\n    removeAll: removeAllOwner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1155,\n      columnNumber: 15\n    }\n  }) : null), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1164,\n      columnNumber: 11\n    }\n  }, filterTypeProdcution && filterTypeProdcution ? /*#__PURE__*/React.createElement(FilterDefaultListProd, {\n    deleteChip: deleteChipProd,\n    type: filterTypeProdcution,\n    filters: filtersProd,\n    removeAll: removeAllProd,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1166,\n      columnNumber: 15\n    }\n  }) : null)) : null);\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterDefaults.js"],"names":["React","useContext","useEffect","useState","useRef","AppContext","NavigationContext","Paper","DialogE","Tabs","Tab","List","ListItem","ListItemText","Switch","Divider","Checkbox","IconButton","InputAdornment","DeleteIcon","BookmarkBorderIcon","TextField","SearchIcon","FilterDefaultListWell","FilterDefaultListGeo","FilterDefaultListOwner","FilterDefaultListProd","SaveFilters","makeStyles","Button","prodListOptions","name","useStyles","theme","save","display","width","justifyContent","padding","marginRight","color","boxShadow","backgroundColor","input","flex","paddingRight","iconButton","user","fontSize","rootDiv","alignItems","marginTop","paparMain","listItemLabel","listItem","margin","minWidth","checkBox","chip","chipContainer","height","chipRow","deleteButton","marginLeft","listLabel","switch","listItemContainer","ButtonInTabs","className","onClick","children","FilterDedaults","stateApp","setStateApp","stateNav","setStateNav","tabsValue","setTabsValue","stateNavCopy","setStateNavCopy","filtersProd","setFiltersProd","filtersGeo","setFiltersGeo","filtersOwner","setFiltersOwner","filtersWell","setFiltersWell","savedFilters","setSavedFilters","checkBoxActiveM1neral","setCheckBoxActiveM1neral","checkBoxDefaultM1neral","setCheckBoxDefaultM1neral","checkBoxActive","setCheckBoxActive","checkBoxDefault","setCheckBoxDefault","dateCreated","setDateCreated","Date","filterTypeWell","setFilterTypeWell","filterTypeOwner","setFilterTypeOwner","filterTypeProdcution","setFilterTypeProduction","filterTypeGeography","setFilterTypeGeography","setUser","showSavePopOver","setShowSavePopOver","filtersFromDb","setFiltersFromDb","typesFromDb","setTypesFromDb","classes","handleChange","event","newValue","filtersOnOff","filtersDefaultOnoff","m1neralDefaultFilters","m1neralDefaultsOnOff","m1neralCehckOnOff","typeName","types","filtersName","filter","length","forEach","element","el","saveFilters","filtersStateNav","defaultFiltersArgs","defaultFiltersStateApp","m1neralSavedFilters","map","elm","filters","push","stateNavActiveProperties","Object","entries","k","v","i","mapStateNav","val","includes","wellArr","geoArr","geoArr1","ownerArr","interestArr","prodArr","item","deleteChipWell","copy","type","removeItem","e","typeFrom","typeTo","deleteChipGeoSCSA","index","splice","stateName","displayStateName","countyName","surveyName","abstractName","deleteChipGeo","deleteChipOwner","filterNoOwnerCount","filterHasOwnerCount","filterOwnerCount","filterAllOwnershipTypes","itemRemove","interestName","indexOf","ownerTypeName","matchProdOption","string","list","match","removeFitlerFromProdName","replace","deleteChipProd","compare","findItem","prodOptions","deleteChipInterest","filterAllInterestTypes","removeAllWell","filterCompletetionDateRange","filterFirstProdDateRange","filterPermitDateRange","firstProdDateFrom","firstProdDateTo","filterSpudDateRange","filterWellProfile","filterWellStatus","filterWellType","filterOperator","completetionDateFrom","completetionDateTo","dateTypeName","operatorName","profileName","spudDateFrom","spudDateTo","statusName","removeAllGeo","basinName","playName","filterGeography","filterBasin","filterPlay","removeAllProd","filterCumulativeOil","filterCumulativeGas","filterCumulativeWater","filterFirstMonthWater","filterFirstThreeMonthWater","filterFirstSixMonthWater","filterFirstTwelveMonthWater","filterLastMonthWater","filterLastSixMonthWater","filterLastTwelveMonthWater","filterFirstMonthGas","filterFirstThreeMonthGas","filterFirstSixMonthGas","filterFirstTwelveMonthGas","filterLastMonthGas","filterLastSixMonthGas","filterLastTwelveMonthGas","filterFirstMonthOil","filterFirstSixMonthOil","filterFirstTwelveMonthOil","filterLastMonthOil","filterLastSixMonthOil","filterLastTwelveMonthOil","removeAllOwner","ownerCountWell","filterOwnerType","filterHasOwners","formatString","split","join","filterOnOff","target","checked","filtersFromSate","filtersTorRemove","removeFilters","filtersToSet","typesToSet","NoMatchName","findNames","keys","selectDefault","filterOnOffM1neral","m1neralDefault","selectDefaultM1neral","closePopoverSaveFilters","deleteFilterM1neral","alert","deleteFilter","findNameToRemove","itemToRemove","updatedFilters","filtersMockDb","startAdornment","toDateString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,EAAiDC,MAAjD,QAA+D,OAA/D;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,OAAOC,KAAP,MAAkB,yBAAlB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,kBAAP,MAA+B,mCAA/B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,MAAMC,eAAe,GAAG,CACtB;AAAEC,EAAAA,IAAI,EAAG;AAAT,CADsB,EAEtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAFsB,EAGtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAHsB,EAItB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAJsB,EAKtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CALsB,EAMtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CANsB,EAOtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAPsB,EAQtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CARsB,EAStB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CATsB,EAUtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAVsB,EAWtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAXsB,EAYtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAZsB,EAatB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAbsB,EActB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAdsB,EAetB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAfsB,EAgBtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAhBsB,EAiBtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAjBsB,EAkBtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAlBsB,EAmBtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAnBsB,EAoBtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CApBsB,EAqBtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CArBsB,EAsBtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAtBsB,EAuBtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAvBsB,EAwBtB;AAAEA,EAAAA,IAAI,EAAG;AAAT,CAxBsB,CAAxB;AA2BA,MAAMC,SAAS,GAAGJ,UAAU,CAAEK,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,OAAO,EAAE,MADL;AAEJC,IAAAA,KAAK,EAAE,MAFH;AAGJC,IAAAA,cAAc,EAAE,UAHZ;AAIJC,IAAAA,OAAO,EAAE,UAJL;AAKJC,IAAAA,WAAW,EAAE,EALT;AAMJC,IAAAA,KAAK,EAAE,qBANH;AAOJC,IAAAA,SAAS,EAAE,MAPP;AAQJC,IAAAA,eAAe,EAAE,SARb;AASJ,eAAW;AACTA,MAAAA,eAAe,EAAE;AADR;AATP,GADiC;AAcvCC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,UADD;AAELC,IAAAA,YAAY,EAAE;AAFT,GAdgC;AAkBvCC,EAAAA,UAAU,EAAE;AACVR,IAAAA,OAAO,EAAE;AADC,GAlB2B;AAqBvCS,EAAAA,IAAI,EAAE;AACJC,IAAAA,QAAQ,EAAE,EADN;AAEJR,IAAAA,KAAK,EAAE;AAFH,GArBiC;AAyBvCS,EAAAA,OAAO,EAAE;AACPX,IAAAA,OAAO,EAAE,SADF;AAEPH,IAAAA,OAAO,EAAE,MAFF;AAGPe,IAAAA,UAAU,EAAE,QAHL;AAIPC,IAAAA,SAAS,EAAE;AAJJ,GAzB8B;AA+BvCC,EAAAA,SAAS,EAAE;AACTX,IAAAA,SAAS,EAAE,MADF;AAETH,IAAAA,OAAO,EAAE;AAFA,GA/B4B;AAmCvCe,EAAAA,aAAa,EAAE;AACbhB,IAAAA,cAAc,EAAE,UADH;AAEbO,IAAAA,IAAI,EAAE,CAFO;AAGbI,IAAAA,QAAQ,EAAE,EAHG;AAIbR,IAAAA,KAAK,EAAE;AAJM,GAnCwB;AAyCvCc,EAAAA,QAAQ,EAAE;AACRC,IAAAA,MAAM,EAAE,CADA;AAERX,IAAAA,IAAI,EAAE,UAFE;AAGRP,IAAAA,cAAc,EAAE,eAHR;AAIRmB,IAAAA,QAAQ,EAAE;AAJF,GAzC6B;AA+CvCC,EAAAA,QAAQ,EAAE;AACRb,IAAAA,IAAI,EAAE,UADE;AAERP,IAAAA,cAAc,EAAE,KAFR;AAGRQ,IAAAA,YAAY,EAAE,EAHN;AAIR,eAAW;AACTH,MAAAA,eAAe,EAAE;AADR;AAJH,GA/C6B;AAuDvCgB,EAAAA,IAAI,EAAE;AACJpB,IAAAA,OAAO,EAAE,UADL;AAEJU,IAAAA,QAAQ,EAAE;AAFN,GAvDiC;AA2DvCW,EAAAA,aAAa,EAAE;AACbC,IAAAA,MAAM,EAAE,MADK;AAEbL,IAAAA,MAAM,EAAE;AAFK,GA3DwB;AA+DvCM,EAAAA,OAAO,EAAE;AACP1B,IAAAA,OAAO,EAAE,aADF;AAEPG,IAAAA,OAAO,EAAE;AAFF,GA/D8B;AAmEvCwB,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE;AADA,GAnEyB;AAsEvCC,EAAAA,SAAS,EAAE;AACT1B,IAAAA,OAAO,EAAE,UADA;AAETH,IAAAA,OAAO,EAAE,aAFA;AAGTI,IAAAA,WAAW,EAAE;AAHJ,GAtE4B;AA2EvC0B,EAAAA,MAAM,EAAE;AACN1B,IAAAA,WAAW,EAAE;AADP,GA3E+B;AA8EvC2B,EAAAA,iBAAiB,EAAE;AACjB/B,IAAAA,OAAO,EAAE,SADQ;AAEjB,eAAW;AACTK,MAAAA,KAAK,EAAE;AADE;AAFM;AA9EoB,CAAZ,CAAD,CAA5B;;AAsFA,MAAM2B,YAAY,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,OAAb;AAAsBC,EAAAA;AAAtB,CAAD,KAAsC;AACzD,sBAAO,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAEF,SAAnB;AAA8B,IAAA,OAAO,EAAEC,OAAvC;AAAgD,IAAA,QAAQ,EAAEC,QAA1D;AAAoE,kBAAW,MAA/E;AACP,IAAA,OAAO,EAAC,WADD;AAEP,IAAA,gBAAgB,EAAE,IAFX;AAGP,IAAA,SAAS,eAAE,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AAID,CALD;;AAOA,eAAe,SAASC,cAAT,GAA0B;AACvC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BxE,UAAU,CAACI,UAAD,CAA1C;AACA,QAAM,CAACqE,QAAD,EAAWC,WAAX,IAA0B1E,UAAU,CAACK,iBAAD,CAA1C;AACA,QAAM,CAACsE,SAAD,EAAYC,YAAZ,IAA4B1E,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAAC2E,YAAD,EAAeC,eAAf,IAAkC5E,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAAC6E,WAAD,EAAcC,cAAd,IAAgC9E,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAAC+E,UAAD,EAAaC,aAAb,IAA8BhF,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM,CAACiF,YAAD,EAAeC,eAAf,IAAkClF,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACmF,WAAD,EAAcC,cAAd,IAAgCpF,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACqF,YAAD,EAAeC,eAAf,IAAkCtF,QAAQ,CAAC,IAAD,CAAhD;AACA,QAAM,CAACuF,qBAAD,EAAwBC,wBAAxB,IAAoDxF,QAAQ,CAAC,IAAD,CAAlE;AACA,QAAM,CAACyF,sBAAD,EAAyBC,yBAAzB,IAAsD1F,QAAQ,CAAC,IAAD,CAApE;AACA,QAAM,CAAC2F,cAAD,EAAiBC,iBAAjB,IAAsC5F,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAAC6F,eAAD,EAAkBC,kBAAlB,IAAwC9F,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAAC+F,WAAD,EAAcC,cAAd,IAAgChG,QAAQ,CAAC,IAAIiG,IAAJ,EAAD,CAA9C;AACA,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCnG,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACoG,eAAD,EAAkBC,kBAAlB,IAAwCrG,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACsG,oBAAD,EAAuBC,uBAAvB,IAAkDvG,QAAQ,CAAC,IAAD,CAAhE;AACA,QAAM,CAACwG,mBAAD,EAAsBC,sBAAtB,IAAgDzG,QAAQ,CAAC,IAAD,CAA9D,CAlBuC,CAmBvC;;AACA,QAAM,CAAC4C,IAAD,EAAO8D,OAAP,IAAkB1G,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAAC2G,eAAD,EAAkBC,kBAAlB,IAAwC5G,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAAC6G,aAAD,EAAgBC,gBAAhB,IAAoC9G,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAAC+G,WAAD,EAAcC,cAAd,IAAgChH,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAMiH,OAAO,GAAGpF,SAAS,EAAzB;AAEA9B,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI6B,IAAJ;;AACA,QAAIyC,QAAJ,EAAc;AACZzC,MAAAA,IAAI,GAAGyC,QAAQ,CAACzB,IAAT,CAAchB,IAArB;AACA8E,MAAAA,OAAO,CAAC9E,IAAD,CAAP;AACD;AACF,GANQ,EAMN,CAACyC,QAAD,CANM,CAAT;;AAQA,QAAM6C,YAAY,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AACxC1C,IAAAA,YAAY,CAAC0C,QAAD,CAAZ;AACD,GAFD;;AAIArH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIsE,QAAQ,CAACgD,YAAT,IAAyBhD,QAAQ,CAACiD,mBAAtC,EAA2D;AACzD1B,MAAAA,iBAAiB,CAACvB,QAAQ,CAACgD,YAAV,CAAjB;AACAvB,MAAAA,kBAAkB,CAACzB,QAAQ,CAACiD,mBAAV,CAAlB;AACD;;AACD,QAAI/C,QAAQ,CAACgD,qBAAb,EAAoC;AAClC/B,MAAAA,wBAAwB,CAACjB,QAAQ,CAACiD,oBAAV,CAAxB;AACA9B,MAAAA,yBAAyB,CAACnB,QAAQ,CAACkD,iBAAV,CAAzB;AACD;AACF,GATQ,EASP,CAACpD,QAAQ,CAACiD,mBAAV,EAA+BjD,QAAQ,CAACgD,YAAxC,EAAsD9C,QAAQ,CAACkD,iBAA/D,EAAkFlD,QAAQ,CAACgD,qBAA3F,EAAkHhD,QAAQ,CAACiD,oBAA3H,CATO,CAAT;AAWAzH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI2H,QAAJ;AACA,QAAIC,KAAJ;AACA,QAAIC,WAAJ;AACA,QAAIC,MAAJ;;AACA,QAAIhB,aAAa,IAAIA,aAAa,CAACiB,MAAd,GAAuB,CAA5C,EAA+C;AAC7CjB,MAAAA,aAAa,CAACkB,OAAd,CAAsBC,OAAO,IAAI;AAC/BJ,QAAAA,WAAW,GAAGI,OAAO,CAAC,CAAD,CAArB;AACAH,QAAAA,MAAM,GAAGG,OAAO,CAAC,CAAD,CAAhB;AACAxD,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,WAACqD,WAAD,GAAcC;AAFW,SAAf,CAAD,CAAX;AAID,OAPD;AAQD;;AAED,QAAId,WAAW,IAAIA,WAAW,CAACe,MAAZ,GAAqB,CAAxC,EAA2C;AACzCf,MAAAA,WAAW,CAACgB,OAAZ,CAAoBE,EAAE,IAAI;AACxBP,QAAAA,QAAQ,GAAGO,EAAE,CAAC,CAAD,CAAb;AACAN,QAAAA,KAAK,GAAGM,EAAE,CAAC,CAAD,CAAV;AACAzD,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,WAACmD,QAAD,GAAWC;AAFc,SAAf,CAAD,CAAX;AAID,OAPD;AAQD;AACF,GA1BQ,EA0BP,CAACd,aAAD,EAAgBrC,WAAhB,EAA6BuC,WAA7B,CA1BO,CAAT;AA4BAhH,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImI,WAAW,GAAG,EAAlB;AACA,QAAIC,eAAJ;AACA,QAAIC,kBAAJ;AACA,QAAIC,sBAAJ;AACA,QAAIC,mBAAmB,GAAG,EAA1B;;AAEA,QAAI/D,QAAQ,CAACgD,qBAAb,EAAoC;AAClCa,MAAAA,kBAAkB,GAAG7D,QAAQ,CAACgD,qBAAT,CAA+BgB,GAA/B,CAAoCC,GAAD,IAASA,GAA5C,CAArB;AACAH,MAAAA,sBAAsB,GAAGhE,QAAQ,CAACoE,OAAT,CAAiBF,GAAjB,CAAqBN,EAAE,IAAIA,EAAE,CAAC,CAAD,CAAF,CAAMrG,IAAjC,CAAzB;;AACA,UAAIwG,kBAAkB,CAAC,CAAD,CAAlB,CAAsBK,OAA1B,EAAmC;AACjCH,QAAAA,mBAAmB,CAACI,IAApB,CAAyBN,kBAAkB,CAAC,CAAD,CAAlB,CAAsBxG,IAA/C;AACA0D,QAAAA,eAAe,CAAC,CAACgD,mBAAD,EAAsBD,sBAAtB,CAAD,CAAf;AACD;AACF;;AAED,QAAI9D,QAAJ,EAAc;AACZ,UAAIoE,wBAAwB,GAAGC,MAAM,CAACC,OAAP,CAAetE,QAAf,EAAyBsD,MAAzB,CAC7B,CAAC,CAACiB,CAAD,EAAIC,CAAJ,CAAD,EAASC,CAAT,KAAe,CAAC,CAACD,CAAF,IAAOA,CAAC,CAACjB,MAAF,GAAW,CADJ,CAA/B;AAGAlD,MAAAA,eAAe,CAAC,CAAC,GAAG+D,wBAAJ,CAAD,CAAf;AAEA,UAAIM,WAAW,GAAGN,wBAAwB,CAACJ,GAAzB,CAA8BW,GAAD,IAASA,GAAtC,CAAlB;AACAD,MAAAA,WAAW,CAACpB,MAAZ,CAAoBG,OAAD,IACjBA,OAAO,IAAIA,OAAO,CAAC,CAAD,CAAP,CAAWF,MAAX,GAAoB,CAA/B,GACIE,OAAO,CAAC,CAAD,CAAP,CAAWmB,QAAX,CAAoB,QAApB,IACEjB,WAAW,CAACQ,IAAZ,CAAiBV,OAAjB,CADF,GAEE,IAHN,GAII,IALN;AAQAG,MAAAA,eAAe,GAAG,CAAC,GAAGD,WAAJ,CAAlB;AACA,UAAIkB,OAAO,GAAG,EAAd;AACA,UAAIC,MAAM,GAAG,EAAb;AACA,UAAIC,OAAO,GAAG,EAAd;AACA,UAAIC,QAAQ,GAAG,EAAf;AACA,UAAIC,WAAW,GAAG,EAAlB;AACA,UAAIC,OAAO,GAAG,EAAd;;AACA,UAAItB,eAAe,IAAIA,eAAe,CAACL,MAAhB,GAAyB,CAAhD,EAAmD;AAEjDK,QAAAA,eAAe,CAACI,GAAhB,CAAqBmB,IAAD,IAAU;AAC5B,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,UAAjB,CAAJ,EAAkC;AAChChD,YAAAA,iBAAiB,CAAC,MAAD,CAAjB;AACAiD,YAAAA,OAAO,CAACV,IAAR,CAAagB,IAAb;AACD;;AACD,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,MAAjB,CAAJ,EAA8B;AAC5BhD,YAAAA,iBAAiB,CAAC,MAAD,CAAjB;AACAiD,YAAAA,OAAO,CAACV,IAAR,CAAagB,IAAb;AACD;;AACD,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,MAAjB,CAAJ,EAA8B;AAC5BhD,YAAAA,iBAAiB,CAAC,MAAD,CAAjB;AACAiD,YAAAA,OAAO,CAACV,IAAR,CAAagB,IAAb;AACD;;AACD,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,OAAjB,CAAJ,EAA+B;AAC7B9C,YAAAA,kBAAkB,CAAC,OAAD,CAAlB;AACAkD,YAAAA,QAAQ,CAACb,IAAT,CAAcgB,IAAd;AACD;;AACD,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,UAAjB,CAAJ,EAAkC;AAChC9C,YAAAA,kBAAkB,CAAC,OAAD,CAAlB;AACAmD,YAAAA,WAAW,CAACd,IAAZ,CAAiBgB,IAAjB;AACD;;AACD,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,WAAjB,CAAJ,EAAmC;AACjC1C,YAAAA,sBAAsB,CAAC,WAAD,CAAtB;AACA4C,YAAAA,MAAM,CAACX,IAAP,CAAYgB,IAAZ;AACD;;AACD,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,OAAjB,CAAJ,EAA+B;AAC7B1C,YAAAA,sBAAsB,CAAC,WAAD,CAAtB;AACA6C,YAAAA,OAAO,CAACZ,IAAR,CAAagB,IAAb;AACD;;AACD,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,MAAjB,CAAJ,EAA8B;AAC5B1C,YAAAA,sBAAsB,CAAC,WAAD,CAAtB;AACA6C,YAAAA,OAAO,CAACZ,IAAR,CAAagB,IAAb;AACD;;AACD,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,KAAjB,CAAJ,EAA6B;AAC3B5C,YAAAA,uBAAuB,CAAC,YAAD,CAAvB;AACAkD,YAAAA,OAAO,CAACf,IAAR,CAAagB,IAAb;AACD;;AACD,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,KAAjB,CAAJ,EAA6B;AAC3B5C,YAAAA,uBAAuB,CAAC,YAAD,CAAvB;AACAkD,YAAAA,OAAO,CAACf,IAAR,CAAagB,IAAb;AACD;;AACD,cAAIA,IAAI,CAAC,CAAD,CAAJ,CAAQP,QAAR,CAAiB,OAAjB,CAAJ,EAA+B;AAC7B5C,YAAAA,uBAAuB,CAAC,YAAD,CAAvB;AACAkD,YAAAA,OAAO,CAACf,IAAR,CAAagB,IAAb;AACD;AACF,SA7CD;AA8CD;;AACD,UAAIJ,OAAO,CAACxB,MAAR,GAAiB,CAArB,EAAwB;AACtB9C,QAAAA,aAAa,CAAC,CAACqE,MAAD,EAASC,OAAT,CAAD,CAAb;AACD,OAFD,MAEO,IAAID,MAAM,CAACvB,MAAP,GAAgB,CAApB,EAAuB;AAC5B9C,QAAAA,aAAa,CAAC,CAACqE,MAAD,EAASC,OAAT,CAAD,CAAb;AACD,OAFM,MAGF;AACHtE,QAAAA,aAAa,CAAC,IAAD,CAAb;AACD;;AAED,UAAIuE,QAAQ,CAACzB,MAAT,GAAkB,CAAtB,EAAyB;AACvB5C,QAAAA,eAAe,CAAC,CAACqE,QAAD,EAAWC,WAAX,CAAD,CAAf;AACD,OAFD,MAEO,IAAIA,WAAW,CAAC1B,MAAZ,GAAqB,CAAzB,EAA4B;AACjC5C,QAAAA,eAAe,CAAC,CAACqE,QAAD,EAAWC,WAAX,CAAD,CAAf;AACD,OAFM,MAGF;AACHtE,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AACDJ,MAAAA,cAAc,CAAC2E,OAAD,CAAd;AACArE,MAAAA,cAAc,CAACgE,OAAD,CAAd;AACD;AACF,GA3GQ,EA2GN,CAAC/E,QAAQ,CAACoE,OAAV,EAAmBlE,QAAnB,CA3GM,CAAT;;AA6GA,QAAMoF,cAAc,GAAG,CAACD,IAAD,EAAO9H,IAAP,KAAgB;AACrC,QAAI2C,QAAQ,CAAC3C,IAAD,CAAR,IAAkB2C,QAAQ,CAAC3C,IAAD,CAAR,CAAekG,MAAf,KAA0B,CAAhD,EAAmD;AACjD,UAAI8B,IAAJ;AACA,UAAIC,IAAJ;AACAD,MAAAA,IAAI,GAAG,CAAC,GAAGrF,QAAQ,CAAC3C,IAAD,CAAZ,CAAP;AACA,UAAIkI,UAAU,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQ/B,MAAR,CAAgBkC,CAAD,IAAOA,CAAC,KAAKL,IAA5B,CAAjB;;AACA,UAAIE,IAAI,CAAC,CAAD,CAAJ,CAAQ9B,MAAR,GAAiB,CAArB,EAAwB;AACtB8B,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAC,GAAGE,UAAJ,CAAV;;AACA,YAAIlI,IAAI,KAAK,gBAAb,EAA+B;AAC7BiI,UAAAA,IAAI,GAAG,UAAP;AACD;;AACD,YAAIjI,IAAI,KAAK,kBAAb,EAAiC;AAC/BiI,UAAAA,IAAI,GAAG,YAAP;AACD;;AACD,YAAIjI,IAAI,KAAK,gBAAb,EAA+B;AAC7BiI,UAAAA,IAAI,GAAG,cAAP;AACD;;AACD,YAAIjI,IAAI,KAAK,mBAAb,EAAkC;AAChCiI,UAAAA,IAAI,GAAG,aAAP;AACD;AACF;;AACD,UAAIC,UAAU,CAAChC,MAAX,KAAsB,CAA1B,EAA6B;AAC3BtD,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,WAAC3C,IAAD,GAAQ,IAFiB;AAGzB,WAACiI,IAAD,GAAQ;AAHiB,SAAf,CAAD,CAAX;AAKD,OAND,MAMO;AACLrF,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,WAAC3C,IAAD,GAAQgI,IAFiB;AAGzB,WAACC,IAAD,GAAQC;AAHiB,SAAf,CAAD,CAAX;AAKD;AACF;;AAED,QAAIvF,QAAQ,CAAC3C,IAAD,CAAR,IAAkB2C,QAAQ,CAAC3C,IAAD,CAAR,CAAekG,MAAf,KAA0B,CAAhD,EAAmD;AACjD,UAAIkC,QAAJ;AACA,UAAIC,MAAJ;;AAEA,UAAIrI,IAAI,KAAK,uBAAb,EAAsC;AACpCoI,QAAAA,QAAQ,GAAG,gBAAX;AACAC,QAAAA,MAAM,GAAG,cAAT;AACD;;AAED,UAAIrI,IAAI,KAAK,qBAAb,EAAoC;AAClCoI,QAAAA,QAAQ,GAAG,cAAX;AACAC,QAAAA,MAAM,GAAG,YAAT;AACD;;AACD,UAAIrI,IAAI,KAAK,6BAAb,EAA4C;AAC1CoI,QAAAA,QAAQ,GAAG,sBAAX;AACAC,QAAAA,MAAM,GAAG,oBAAT;AACD;;AACD,UAAIrI,IAAI,KAAK,0BAAb,EAAyC;AACvCoI,QAAAA,QAAQ,GAAG,mBAAX;AACAC,QAAAA,MAAM,GAAG,iBAAT;AACD;;AAEDzF,MAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,SAAC3C,IAAD,GAAQ,IAFiB;AAGzB,SAACoI,QAAD,GAAY,IAHa;AAIzB,SAACC,MAAD,GAAU;AAJe,OAAf,CAAD,CAAX;AAMD;AACF,GAjED,CA1LuC,CA4PvC;;;AACA,QAAMC,iBAAiB,GAAG,CAACR,IAAD,EAAO9H,IAAP,KAAgB;AACxC,QAAIgI,IAAJ;AAEAA,IAAAA,IAAI,GAAG,CAAC,GAAGrF,QAAQ,CAAC3C,IAAD,CAAZ,CAAP;;AACA,QAAIgI,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAZ,IAAmBA,IAAI,CAAC,CAAD,CAAJ,CAAQ9B,MAAR,KAAmB,CAA1C,EAA8C;AAE5C,WAAK,IAAIqC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,IAAI,CAAC9B,MAAjC,EAAyCqC,KAAK,EAA9C,EAAkD;AAChD,cAAMnC,OAAO,GAAG4B,IAAI,CAACO,KAAD,CAApB;;AACA,YAAInC,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,MAAkB,OAAtB,EAA+B;AAC7B,cAAIA,OAAO,CAAC,CAAD,CAAP,KAAe0B,IAAnB,EAAyB;AACvBE,YAAAA,IAAI,CAACQ,MAAL,CAAY,CAAZ,EAAeR,IAAI,CAAC9B,MAApB;AACAtD,YAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,eAAC3C,IAAD,GAAQ,IAFiB;AAGzByI,cAAAA,SAAS,EAAE,IAHc;AAIzBC,cAAAA,gBAAgB,EAAE;AAJO,aAAf,CAAD,CAAX;AAMD;AACF;AACF;AAEF;;AACD,QAAIV,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAZ,IAAmBA,IAAI,CAAC,CAAD,CAAJ,CAAQ9B,MAAR,KAAmB,CAA1C,EAA6C;AAE3C,WAAK,IAAIqC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,IAAI,CAAC9B,MAAjC,EAAyCqC,KAAK,EAA9C,EAAkD;AAChD,cAAMnC,OAAO,GAAG4B,IAAI,CAACO,KAAD,CAApB;;AACA,YAAInC,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,MAAkB,QAAtB,EAAgC;AAC9B,cAAIA,OAAO,CAAC,CAAD,CAAP,KAAe0B,IAAnB,EAAyB;AACvBE,YAAAA,IAAI,CAACQ,MAAL,CAAYD,KAAZ,EAAmBP,IAAI,CAAC9B,MAAxB;AACAtD,YAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,eAAC3C,IAAD,GAAQgI,IAFiB;AAGzBW,cAAAA,UAAU,EAAE,IAHa;AAIzBC,cAAAA,UAAU,EAAE,IAJa;AAKzBC,cAAAA,YAAY,EAAE;AALW,aAAf,CAAD,CAAX;AAOD;AACF;AACF;AACF;;AAED,QAAIb,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAZ,IAAmBA,IAAI,CAAC,CAAD,CAAJ,CAAQ9B,MAAR,KAAmB,CAA1C,EAA6C;AAE3C,WAAK,IAAIqC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,IAAI,CAAC9B,MAAjC,EAAyCqC,KAAK,EAA9C,EAAkD;AAChD,cAAMnC,OAAO,GAAG4B,IAAI,CAACO,KAAD,CAApB;;AACA,YAAInC,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,MAAkB,QAAtB,EAAgC;AAC9B,cAAIA,OAAO,CAAC,CAAD,CAAP,KAAe0B,IAAnB,EAAyB;AACvBE,YAAAA,IAAI,CAACQ,MAAL,CAAYD,KAAZ,EAAmBP,IAAI,CAAC9B,MAAxB;AACAtD,YAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,eAAC3C,IAAD,GAAQgI,IAFiB;AAGzBY,cAAAA,UAAU,EAAE,IAHa;AAIzBC,cAAAA,YAAY,EAAE;AAJW,aAAf,CAAD,CAAX;AAMD;AACF;AACF;AACF;;AAED,QAAIb,IAAI,IAAIA,IAAI,CAAC,CAAD,CAAZ,IAAmBA,IAAI,CAAC,CAAD,CAAJ,CAAQ9B,MAAR,KAAmB,CAA1C,EAA6C;AAE3C,WAAK,IAAIqC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,IAAI,CAAC9B,MAAjC,EAAyCqC,KAAK,EAA9C,EAAkD;AAChD,cAAMnC,OAAO,GAAG4B,IAAI,CAACO,KAAD,CAApB;;AACA,YAAInC,OAAO,CAAC,CAAD,CAAP,CAAW,CAAX,MAAkB,UAAtB,EAAkC;AAChC,cAAIA,OAAO,CAAC,CAAD,CAAP,KAAe0B,IAAnB,EAAyB;AACvBE,YAAAA,IAAI,CAACQ,MAAL,CAAYD,KAAZ,EAAmBP,IAAI,CAAC9B,MAAxB;AACAtD,YAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,eAAC3C,IAAD,GAAQgI,IAFiB;AAGzBa,cAAAA,YAAY,EAAE;AAHW,aAAf,CAAD,CAAX;AAKD;AACF;AACF;AACF;AACF,GA3ED,CA7PuC,CA0UvC;;;AACA,QAAMC,aAAa,GAAG,CAAChB,IAAD,EAAO9H,IAAP,KAAgB;AACpC,QAAI2C,QAAQ,CAAC3C,IAAD,CAAR,IAAkB2C,QAAQ,CAAC3C,IAAD,CAAR,CAAekG,MAAf,KAA0B,CAAhD,EAAmD;AACjD,UAAI8B,IAAJ;AACA,UAAIC,IAAJ;AACAD,MAAAA,IAAI,GAAG,CAAC,GAAGrF,QAAQ,CAAC3C,IAAD,CAAZ,CAAP;AACA,UAAIkI,UAAU,GAAGF,IAAI,CAAC,CAAD,CAAJ,CAAQ/B,MAAR,CAAgBkC,CAAD,IAAOA,CAAC,KAAKL,IAA5B,CAAjB;;AACA,UAAIE,IAAI,CAAC,CAAD,CAAJ,CAAQ9B,MAAR,GAAiB,CAArB,EAAwB;AACtB8B,QAAAA,IAAI,CAAC,CAAD,CAAJ,GAAU,CAAC,GAAGE,UAAJ,CAAV;;AACA,YAAIlI,IAAI,KAAK,aAAb,EAA4B;AAC1BiI,UAAAA,IAAI,GAAG,WAAP;AACD;;AACD,YAAIjI,IAAI,KAAK,YAAb,EAA2B;AACzBiI,UAAAA,IAAI,GAAG,UAAP;AACD;AACF;;AACD,UAAIC,UAAU,CAAChC,MAAX,KAAsB,CAA1B,EAA6B;AAC3BtD,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,WAAC3C,IAAD,GAAQ,IAFiB;AAGzB,WAACiI,IAAD,GAAQ;AAHiB,SAAf,CAAD,CAAX;AAKD,OAND,MAMO;AACLrF,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,WAAC3C,IAAD,GAAQgI,IAFiB;AAGzB,WAACC,IAAD,GAAQC;AAHiB,SAAf,CAAD,CAAX;AAKD;AACF;AACF,GA7BD;;AA+BA,QAAMa,eAAe,GAAIjB,IAAD,IAAU;AAEhC,QAAInF,QAAQ,CAACqG,kBAAT,IAA+BrG,QAAQ,CAACqG,kBAAT,CAA4B9C,MAA5B,GAAqC,CAAxE,EAA2E;AACvE,UAAI4B,IAAI,KAAK,UAAb,EAAyB;AACvBlF,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBqG,UAAAA,kBAAkB,EAAE;AAFK,SAAf,CAAD,CAAX;AAID;AACJ;;AACD,QAAIrG,QAAQ,CAACsG,mBAAT,IAAgCtG,QAAQ,CAACsG,mBAAT,CAA6B/C,MAA7B,GAAsC,CAA1E,EAA6E;AAC3E,UAAI4B,IAAI,KAAK,WAAb,EAA0B;AACxBlF,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBsG,UAAAA,mBAAmB,EAAE;AAFI,SAAf,CAAD,CAAX;AAID;AACJ;;AACC,QAAGtG,QAAQ,CAACuG,gBAAT,IAA6BvG,QAAQ,CAACuG,gBAAT,CAA0BhD,MAA1B,GAAmC,CAAnE,EAAqE;AACnE,UAAI8B,IAAJ;AACAA,MAAAA,IAAI,GAAG,CAAC,GAAGrF,QAAQ,CAACuG,gBAAb,CAAP;;AAEA,WAAK,IAAIX,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,IAAI,CAAC9B,MAAjC,EAAyCqC,KAAK,EAA9C,EAAkD;AAChD,cAAMnC,OAAO,GAAG4B,IAAI,CAACO,KAAD,CAApB;;AACA,YAAInC,OAAO,CAAC,CAAD,CAAP,KAAe0B,IAAnB,EAAyB;AACvBE,UAAAA,IAAI,CAACQ,MAAL,CAAYD,KAAZ,EAAmB,CAAnB;AACD;AACF;;AACD3F,MAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBuG,QAAAA,gBAAgB,EAAElB;AAFO,OAAf,CAAD,CAAX;;AAKA,UAAIA,IAAI,CAAC9B,MAAL,KAAgB,CAApB,EAAuB;AACrBtD,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBuG,UAAAA,gBAAgB,EAAE;AAFO,SAAf,CAAD,CAAX;AAID;AACF;;AACD,QAAIvG,QAAQ,CAACwG,uBAAT,IAAoCxG,QAAQ,CAACwG,uBAAT,CAAiCjD,MAAjC,GAA0C,CAAlF,EAAsF;AACpF,UAAI8B,IAAJ;AACA,UAAIoB,UAAU,GAAGzG,QAAQ,CAAC0G,YAA1B;AACA,UAAIjC,CAAC,GAAGgC,UAAU,CAACE,OAAX,CAAmBxB,IAAnB,CAAR;;AACA,UAAIA,IAAI,KAAK,oCAAb,EAAmD;AACjDsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AACD,UAAIU,IAAI,KAAK,iCAAb,EAAgD;AAC9CsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AACD,UAAIU,IAAI,KAAK,yBAAb,EAAwC;AACtCsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AACD,UAAIU,IAAI,KAAK,qBAAb,EAAoC;AAClCsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AACD,UAAIU,IAAI,KAAK,2BAAb,EAA0C;AACxCsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AACD,UAAIU,IAAI,KAAK,sCAAb,EAAqD;AACnDsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AACD,UAAIU,IAAI,KAAK,0BAAb,EAAyC;AACvCsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AACD,UAAIU,IAAI,KAAK,sBAAb,EAAqC;AACnCsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AAEDY,MAAAA,IAAI,GAAG,CAAC,GAAGrF,QAAQ,CAACwG,uBAAb,CAAP;;AAEA,WAAK,IAAIZ,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,IAAI,CAAC9B,MAAjC,EAAyCqC,KAAK,EAA9C,EAAkD;AAChD,cAAMnC,OAAO,GAAG4B,IAAI,CAACO,KAAD,CAApB;;AACA,YAAInC,OAAO,CAACmB,QAAR,CAAiBO,IAAjB,CAAJ,EAA4B;AAC1BE,UAAAA,IAAI,CAACQ,MAAL,CAAYD,KAAZ,EAAmB,CAAnB;AACD;AACF;;AAED,UAAIP,IAAI,CAAC9B,MAAL,GAAc,CAAlB,EAAqB;AACnBtD,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBwG,UAAAA,uBAAuB,EAAEnB,IAFA;AAGzBuB,UAAAA,aAAa,EAAEH;AAHU,SAAf,CAAD,CAAX;AAKD,OAND,MAMO;AACLxG,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBwG,UAAAA,uBAAuB,EAAE,IAFA;AAGzBI,UAAAA,aAAa,EAAE;AAHU,SAAf,CAAD,CAAX;AAKD;AACF;AACF,GA5FD;;AA8FA,QAAMC,eAAe,GAAIC,MAAD,IAAY;AAClC,QAAIC,IAAI,GAAG3J,eAAX;AACA,QAAI4J,KAAK,GAAGD,IAAI,CAAC/C,GAAL,CAASN,EAAE,IAAIA,EAAE,CAACrG,IAAlB,CAAZ;;AACA,QAAI2J,KAAK,CAACpC,QAAN,CAAekC,MAAf,CAAJ,EAA6B;AAC3B,aAAOA,MAAP;AACD;AACF,GAND;;AAQA,QAAMG,wBAAwB,GAAIH,MAAD,IAAY;AAC3C,QAAIA,MAAM,CAAClC,QAAP,CAAgB,kBAAhB,CAAJ,EAAyC;AACvC,aAAOkC,MAAM,CAACI,OAAP,CAAe,kBAAf,EAAmC,iBAAnC,CAAP;AACD;;AACD,QAAIJ,MAAM,CAAClC,QAAP,CAAgB,kBAAhB,CAAJ,EAAyC;AACvC,aAAOkC,MAAM,CAACI,OAAP,CAAe,kBAAf,EAAmC,kBAAnC,CAAP;AACD;;AACD,QAAIJ,MAAM,CAAClC,QAAP,CAAgB,uBAAhB,CAAJ,EAA8C;AAC5C,aAAOkC,MAAM,CAACI,OAAP,CAAe,uBAAf,EAAwC,yBAAxC,CAAP;AACD;;AACD,QAAIJ,MAAM,CAAClC,QAAP,CAAgB,qBAAhB,CAAJ,EAA4C;AAC1C,aAAOkC,MAAM,CAACI,OAAP,CAAe,qBAAf,EAAsC,uBAAtC,CAAP;AACD;;AACD,QAAIJ,MAAM,CAAClC,QAAP,CAAgB,wBAAhB,CAAJ,EAA+C;AAC7C,aAAOkC,MAAM,CAACI,OAAP,CAAe,wBAAf,EAAyC,0BAAzC,CAAP;AACD;;AAED,QAAIJ,MAAM,CAAClC,QAAP,CAAgB,uBAAhB,CAAJ,EAA8C;AAC5C,aAAOkC,MAAM,CAACI,OAAP,CAAe,uBAAf,EAAwC,yBAAxC,CAAP;AACD;;AACD,QAAIJ,MAAM,CAAClC,QAAP,CAAgB,oBAAhB,CAAJ,EAA2C;AACzC,aAAOkC,MAAM,CAACI,OAAP,CAAe,oBAAf,EAAqC,sBAArC,CAAP;AACD;;AACD,QAAIJ,MAAM,CAAClC,QAAP,CAAgB,iBAAhB,CAAJ,EAAwC;AACtC,aAAOkC,MAAM,CAACI,OAAP,CAAe,iBAAf,EAAkC,iBAAlC,CAAP;AACD;AACF,GA1BD;;AA6BA,QAAMC,cAAc,GAAG,CAAChC,IAAD,EAAM9H,IAAN,EAAYiG,MAAZ,KAAuB;AAC5C,QAAGtD,QAAQ,CAAC3C,IAAD,CAAR,IAAkB2C,QAAQ,CAAC3C,IAAD,CAAR,CAAekG,MAAf,GAAwB,CAA7C,EAA+C;AAC7C,UAAI8B,IAAJ;AACAA,MAAAA,IAAI,GAAG,CAAC,GAAGrF,QAAQ,CAAC3C,IAAD,CAAZ,CAAP;;AAEA,WAAK,IAAIuI,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,IAAI,CAAC9B,MAAjC,EAAyCqC,KAAK,EAA9C,EAAkD;AAChD,cAAMnC,OAAO,GAAG4B,IAAI,CAACO,KAAD,CAApB;;AACA,YAAInC,OAAO,CAAC,CAAD,CAAP,KAAe0B,IAAnB,EAAyB;AACvBE,UAAAA,IAAI,CAACQ,MAAL,CAAYD,KAAZ,EAAmB,CAAnB;AACD;AACF;;AAED,UAAItC,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAhB,IAAuBA,MAAM,CAAC,CAAD,CAAN,CAAUC,MAAV,KAAqB,CAAhD,EAAmD;AACjD,YAAI6D,OAAO,GAAGH,wBAAwB,CAAC5J,IAAD,CAAtC;AACA,YAAI2J,KAAK,GAAGH,eAAe,CAACO,OAAD,CAA3B;AACA,YAAIC,QAAQ,GAAGrH,QAAQ,CAACsH,WAAxB;;AACA,aAAK,IAAI1B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGyB,QAAQ,CAAC9D,MAArC,EAA6CqC,KAAK,EAAlD,EAAsD;AACpD,gBAAMnC,OAAO,GAAG4D,QAAQ,CAACzB,KAAD,CAAxB;;AACA,cAAInC,OAAO,KAAKuD,KAAhB,EAAuB;AACrBK,YAAAA,QAAQ,CAACxB,MAAT,CAAgBD,KAAhB,EAAuB,CAAvB;AACD;AACF;AACF;;AACD3F,MAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,SAAC3C,IAAD,GAAQgI;AAFiB,OAAf,CAAD,CAAX;;AAKA,UAAIA,IAAI,CAAC9B,MAAL,KAAgB,CAApB,EAAuB;AACrBtD,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,WAAC3C,IAAD,GAAQ;AAFiB,SAAf,CAAD,CAAX;AAID;AACF;AACF,GAnCD;;AAqCA,QAAMkK,kBAAkB,GAAIpC,IAAD,IAAU;AACnC,QAAInF,QAAQ,CAACwH,sBAAb,EAAqC;AACnC,UAAInC,IAAJ;AACA,UAAIoB,UAAU,GAAGzG,QAAQ,CAAC0G,YAA1B;AACA,UAAIjC,CAAC,GAAGgC,UAAU,CAACE,OAAX,CAAmBxB,IAAnB,CAAR;;AACA,UAAIA,IAAI,KAAK,6BAAb,EAA4C;AAC1CsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AACD,UAAIU,IAAI,KAAK,6BAAb,EAA4C;AAC1CsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AACD,UAAIU,IAAI,KAAK,6BAAb,EAA4C;AAC1CsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AACD,UAAIU,IAAI,KAAK,+BAAb,EAA8C;AAC5CsB,QAAAA,UAAU,CAACZ,MAAX,CAAkBpB,CAAlB,EAAqB,CAArB;AACD;;AAEDY,MAAAA,IAAI,GAAG,CAAC,GAAGrF,QAAQ,CAACwH,sBAAb,CAAP;;AACA,WAAK,IAAI5B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,IAAI,CAAC9B,MAAjC,EAAyCqC,KAAK,EAA9C,EAAkD;AAChD,cAAMnC,OAAO,GAAG4B,IAAI,CAACO,KAAD,CAApB;;AACA,YAAInC,OAAO,CAACmB,QAAR,CAAiBO,IAAjB,CAAJ,EAA4B;AAC1BE,UAAAA,IAAI,CAACQ,MAAL,CAAYD,KAAZ,EAAmB,CAAnB;AACD;AACF;;AAED,UAAIP,IAAI,CAAC9B,MAAL,GAAc,CAAlB,EAAqB;AACnBtD,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBwH,UAAAA,sBAAsB,EAAEnC,IAFC;AAGzBqB,UAAAA,YAAY,EAAED;AAHW,SAAf,CAAD,CAAX;AAKD,OAND,MAMO;AACLxG,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBwH,UAAAA,sBAAsB,EAAE,IAFC;AAGzBd,UAAAA,YAAY,EAAE;AAHW,SAAf,CAAD,CAAX;AAKD;AACF;AACF,GAxCD;;AA0CA,QAAMe,aAAa,GAAG,MAAM;AAC1B,QAAI7G,WAAW,IAAIe,cAAnB,EAAmC;AACjC1B,MAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB0H,QAAAA,2BAA2B,EAAE,IAFJ;AAGzBC,QAAAA,wBAAwB,EAAE,IAHD;AAIzBC,QAAAA,qBAAqB,EAAE,IAJE;AAKzBC,QAAAA,iBAAiB,EAAE,IALM;AAMzBC,QAAAA,eAAe,EAAE,IANQ;AAOzBC,QAAAA,mBAAmB,EAAE,IAPI;AAQzBC,QAAAA,iBAAiB,EAAE,IARM;AASzBC,QAAAA,gBAAgB,EAAE,IATO;AAUzBC,QAAAA,cAAc,EAAE,IAVS;AAWzBC,QAAAA,cAAc,EAAE,IAXS;AAYzBC,QAAAA,oBAAoB,EAAE,IAZG;AAazBC,QAAAA,kBAAkB,EAAE,IAbK;AAczBC,QAAAA,YAAY,EAAG,EAdU;AAezBC,QAAAA,YAAY,EAAE,IAfW;AAgBzBC,QAAAA,WAAW,EAAE,IAhBY;AAiBzBC,QAAAA,YAAY,EAAE,IAjBW;AAkBzBC,QAAAA,UAAU,EAAE,IAlBa;AAmBzBC,QAAAA,UAAU,EAAE,EAnBa;AAoBzBxF,QAAAA,QAAQ,EAAE;AApBe,OAAf,CAAD,CAAX;AAsBD;AACF,GAzBD;;AA2BA,QAAMyF,YAAY,GAAG,MAAM;AACzB,QAAIpI,UAAU,IAAIyB,mBAAlB,EAAuC;AACrChC,MAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB6I,QAAAA,SAAS,EAAC,EAFe;AAGzBC,QAAAA,QAAQ,EAAE,EAHe;AAIzB9C,QAAAA,UAAU,EAAE,IAJa;AAKzBF,QAAAA,SAAS,EAAE,IALc;AAMzBC,QAAAA,gBAAgB,EAAE,IANO;AAOzBE,QAAAA,UAAU,EAAE,IAPa;AAQzBC,QAAAA,YAAY,EAAE,IARW;AASzB6C,QAAAA,eAAe,EAAE,IATQ;AAUzBC,QAAAA,WAAW,EAAE,IAVY;AAWzBC,QAAAA,UAAU,EAAE;AAXa,OAAf,CAAD,CAAX;AAaD;AACF,GAhBD;;AAkBA,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAI5I,WAAW,IAAIyB,oBAAnB,EAAyC;AACrC9B,MAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBsH,QAAAA,WAAW,EAAE,EAFY;AAGzB6B,QAAAA,mBAAmB,EAAC,IAHK;AAIzBC,QAAAA,mBAAmB,EAAC,IAJK;AAKzBC,QAAAA,qBAAqB,EAAC,IALG;AAMzBC,QAAAA,qBAAqB,EAAC,IANG;AAOzBC,QAAAA,0BAA0B,EAAC,IAPF;AAQzBC,QAAAA,wBAAwB,EAAC,IARA;AASzBC,QAAAA,2BAA2B,EAAC,IATH;AAUzBC,QAAAA,oBAAoB,EAAC,IAVI;AAWzBC,QAAAA,uBAAuB,EAAC,IAXC;AAYzBC,QAAAA,0BAA0B,EAAC,IAZF;AAazBC,QAAAA,mBAAmB,EAAC,IAbK;AAczBC,QAAAA,wBAAwB,EAAC,IAdA;AAezBC,QAAAA,sBAAsB,EAAC,IAfE;AAgBzBC,QAAAA,yBAAyB,EAAC,IAhBD;AAiBzBC,QAAAA,kBAAkB,EAAC,IAjBM;AAkBzBC,QAAAA,qBAAqB,EAAC,IAlBG;AAmBzBC,QAAAA,wBAAwB,EAAC,IAnBA;AAoBzBC,QAAAA,mBAAmB,EAAC,IApBK;AAqBzBC,QAAAA,sBAAsB,EAAC,IArBE;AAsBzBC,QAAAA,yBAAyB,EAAC,IAtBD;AAuBzBC,QAAAA,kBAAkB,EAAC,IAvBM;AAwBzBC,QAAAA,qBAAqB,EAAC,IAxBG;AAyBzBC,QAAAA,wBAAwB,EAAC;AAzBA,OAAf,CAAD,CAAX;AA2BH;AACF,GA9BD;;AAgCA,QAAMC,cAAc,GAAG,MAAM;AAC3B,QAAIhK,YAAY,IAAImB,eAApB,EAAqC;AACnC5B,MAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB0G,QAAAA,YAAY,EAAE,EAFW;AAGzBE,QAAAA,aAAa,EAAE,EAHU;AAIzB+D,QAAAA,cAAc,EAAE,EAJS;AAKzBC,QAAAA,eAAe,EAAC,IALS;AAMzBrE,QAAAA,gBAAgB,EAAE,IANO;AAOzBF,QAAAA,kBAAkB,EAAE,IAPK;AAQzBmB,QAAAA,sBAAsB,EAAE,IARC;AASzBhB,QAAAA,uBAAuB,EAAC,IATC;AAUzBqE,QAAAA,eAAe,EAAE,IAVQ;AAWzBvE,QAAAA,mBAAmB,EAAE;AAXI,OAAf,CAAD,CAAX;AAcD;AACF,GAjBD;;AAmBA,QAAMwE,YAAY,GAAGhE,MAAM,IAAI;AAC7B,WAAOA,MAAM,CAACiE,KAAP,CAAa,GAAb,EAAkBC,IAAlB,CAAuB,EAAvB,CAAP;AACD,GAFD;;AAIA,QAAMC,WAAW,GAAGzF,CAAC,IAAI;AACvB,QAAIA,CAAJ,EAAO;AACL,YAAM0F,MAAM,GAAG1F,CAAC,CAAC0F,MAAjB;AACA,YAAM7N,IAAI,GAAG6N,MAAM,CAAC7N,IAApB;AACA,YAAM8N,OAAO,GAAGD,MAAM,CAACC,OAAvB;AACA,UAAIC,eAAe,GAAG,CAAC,GAAGtL,QAAQ,CAACoE,OAAb,CAAtB;AACA,UAAImH,gBAAgB,GAAG,CAAC,GAAGjL,YAAJ,CAAvB;AACA,UAAIkL,aAAJ;AACA,UAAIC,YAAJ;AACA,UAAIC,UAAJ;AACA,UAAInI,WAAJ;;AACA,WAAK,IAAIuC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGwF,eAAe,CAAC7H,MAA5C,EAAoDqC,KAAK,EAAzD,EAA6D;AAC3D,cAAMnC,OAAO,GAAG2H,eAAe,CAACxF,KAAD,CAA/B;AACAvC,QAAAA,WAAW,GAAGI,OAAO,CAAC,CAAD,CAAP,CAAWpG,IAAzB;;AACA,YAAIA,IAAI,KAAKgG,WAAW,CAAC0H,KAAZ,CAAkB,GAAlB,EAAuBC,IAAvB,CAA4B,EAA5B,CAAb,EAA8C;AAC5CO,UAAAA,YAAY,GAAG9H,OAAO,CAAC,CAAD,CAAP,CAAWS,OAA1B;AACAsH,UAAAA,UAAU,GAAG/H,OAAO,CAAC,CAAD,CAAP,CAAWL,KAAxB;AACD;AACF;;AACD,UAAI+H,OAAJ,EAAa;AACX,YAAIM,WAAJ;AACA,YAAIC,SAAS,GAAGrH,MAAM,CAACsH,IAAP,CAAYvK,cAAZ,EAA4B4C,GAA5B,CAAgCwB,CAAC,IAAIA,CAArC,CAAhB;AACAkG,QAAAA,SAAS,CAAClI,OAAV,CAAkBiB,CAAC,IAAI;AACrB,cAAGA,CAAC,KAAKpH,IAAT,EAAc;AACZoO,YAAAA,WAAW,GAAGhH,CAAd;AACApD,YAAAA,iBAAiB,CAAED,cAAD,KAAqB,EACrC,GAAGA,cADkC;AAErC,eAAC/D,IAAD,GAAQ,IAF6B;AAGrC,eAACoO,WAAD,GAAe;AAHsB,aAArB,CAAD,CAAjB;AAKD;AACF,SATD;AAUAlJ,QAAAA,gBAAgB,CAACgJ,YAAD,CAAhB;AACA9I,QAAAA,cAAc,CAAC+I,UAAD,CAAd;AACAvK,QAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACD,OAhBD,MAgBO;AACL,YAAIyK,SAAS,GAAGrH,MAAM,CAACsH,IAAP,CAAYvK,cAAZ,EAA4B4C,GAA5B,CAAgCwB,CAAC,IAAIA,CAArC,CAAhB;AACAkG,QAAAA,SAAS,CAAClI,OAAV,CAAkBiB,CAAC,IAAI;AACrBpD,UAAAA,iBAAiB,CAAED,cAAD,KAAqB,EACrC,GAAGA,cADkC;AAErC,aAACqD,CAAD,GAAK;AAFgC,WAArB,CAAD,CAAjB;AAID,SALD;AAMA6G,QAAAA,aAAa,GAAGD,gBAAgB,CAACrH,GAAjB,CAAqBN,EAAE,IAAIA,EAAE,CAAC,CAAD,CAA7B,EAAkCJ,MAAlC,CAAyCkC,CAAC,IAAIA,CAAC,KAAK,uBAApD,CAAhB;AACA8F,QAAAA,aAAa,CAAC9H,OAAd,CAAsBC,OAAO,IAAI;AAC/BxD,UAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,aAACyD,OAAD,GAAW;AAFc,WAAf,CAAD,CAAX;AAID,SALD;AAMAlB,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,QAAAA,cAAc,CAAC,IAAD,CAAd;AACAxB,QAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACD;AACF;AACF,GAvDD;;AAyDA,QAAM2K,aAAa,GAAIpG,CAAD,IAAO;AAC3B,UAAM0F,MAAM,GAAG1F,CAAC,CAAC0F,MAAjB;AACA,UAAM7N,IAAI,GAAG6N,MAAM,CAAC7N,IAApB;AACA,UAAM8N,OAAO,GAAGD,MAAM,CAACC,OAAvB;;AACA,QAAIA,OAAJ,EAAa;AACX,UAAIM,WAAJ;AACA,UAAIC,SAAS,GAAGrH,MAAM,CAACsH,IAAP,CAAYrK,eAAZ,EAA6B0C,GAA7B,CAAiCwB,CAAC,IAAIA,CAAtC,CAAhB;AACEkG,MAAAA,SAAS,CAAClI,OAAV,CAAkBiB,CAAC,IAAI;AACrB,YAAGA,CAAC,KAAKpH,IAAT,EAAc;AACZoO,UAAAA,WAAW,GAAGhH,CAAd;AACAlD,UAAAA,kBAAkB,CAAED,eAAD,KAAsB,EACvC,GAAGC,kBADoC;AAEvC,aAAClE,IAAD,GAAQ,IAF+B;AAGvC,aAACoO,WAAD,GAAe;AAHwB,WAAtB,CAAD,CAAlB;AAKD;AACF,OATD;AAUFtK,MAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,KAdD,MAcO;AACL,UAAIuK,SAAS,GAAGrH,MAAM,CAACsH,IAAP,CAAYrK,eAAZ,EAA6B0C,GAA7B,CAAiCwB,CAAC,IAAIA,CAAtC,CAAhB;AACEkG,MAAAA,SAAS,CAAClI,OAAV,CAAkBiB,CAAC,IAAI;AACnBlD,QAAAA,kBAAkB,CAAED,eAAD,KAAsB,EACvC,GAAGC,kBADoC;AAEvC,WAACkD,CAAD,GAAK;AAFkC,SAAtB,CAAD,CAAlB;AAIH,OALD;AAMFtD,MAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD;AACF,GA5BD;;AA8BA,QAAM0K,kBAAkB,GAAG,MAAM;AAC/B,QAAI7K,qBAAqB,KAAK,IAA9B,EAAoC;AAClCf,MAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB2I,QAAAA,UAAU,EAAE,EAFa;AAGzBxF,QAAAA,QAAQ,EAAE,EAHe;AAIzB8E,QAAAA,gBAAgB,EAAE,IAJO;AAKzBC,QAAAA,cAAc,EAAE,IALS;AAMzBjF,QAAAA,oBAAoB,EAAE;AANG,OAAf,CAAD,CAAX;AAQAhC,MAAAA,wBAAwB,CAAC,KAAD,CAAxB;AACAsB,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KAZD,MAYO;AACL,UAAIqJ,cAAc,GAAG9L,QAAQ,CAACgD,qBAAT,CAA+BgB,GAA/B,CAAoCC,GAAD,IAASA,GAA5C,CAArB;AACA,UAAIb,KAAJ;AACA,UAAIc,OAAJ;AACA4H,MAAAA,cAAc,CAACtI,OAAf,CAAuBC,OAAO,IAAI;AAChCS,QAAAA,OAAO,GAAGT,OAAO,CAACS,OAAlB;AACAd,QAAAA,KAAK,GAAGK,OAAO,CAACL,KAAhB;AACD,OAHD;AAIAc,MAAAA,OAAO,CAACV,OAAR,CAAgBgC,CAAC,IAAI;AACnBvF,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,WAACwF,CAAC,CAAC,CAAD,CAAF,GAAQA,CAAC,CAAC,CAAD;AAFgB,SAAf,CAAD,CAAX;AAID,OALD;AAMApC,MAAAA,KAAK,CAACI,OAAN,CAAcgC,CAAC,IAAI;AACjBvF,QAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzB,WAACwF,CAAC,CAAC,CAAD,CAAF,GAAQA,CAAC,CAAC,CAAD;AAFgB,SAAf,CAAD,CAAX;AAID,OALD;AAMA,UAAIkG,SAAS,GAAGrH,MAAM,CAACsH,IAAP,CAAYvK,cAAZ,EAA4B4C,GAA5B,CAAgCwB,CAAC,IAAIA,CAArC,CAAhB;AACEkG,MAAAA,SAAS,CAAClI,OAAV,CAAkBiB,CAAC,IAAI;AACrBpD,QAAAA,iBAAiB,CAAED,cAAD,KAAqB,EACrC,GAAGA,cADkC;AAErC,WAACqD,CAAD,GAAK;AAFgC,SAArB,CAAD,CAAjB;AAIH,OALC;AAMFxE,MAAAA,WAAW,CAAED,QAAD,KAAe,EACzB,GAAGA,QADsB;AAEzBiD,QAAAA,oBAAoB,EAAE;AAFG,OAAf,CAAD,CAAX;AAIAhC,MAAAA,wBAAwB,CAAC,IAAD,CAAxB;AACAsB,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACF,GAhDD;;AAkDA,QAAMsJ,oBAAoB,GAAG,MAAM;AACjC,QAAI7K,sBAAsB,KAAK,IAA/B,EAAqC;AACnCC,MAAAA,yBAAyB,CAAC,KAAD,CAAzB;AACD,KAFD,MAEO;AACLA,MAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACA,UAAIuK,SAAS,GAAGrH,MAAM,CAACsH,IAAP,CAAYrK,eAAZ,EAA6B0C,GAA7B,CAAiCwB,CAAC,IAAIA,CAAtC,CAAhB;AACAkG,MAAAA,SAAS,CAAClI,OAAV,CAAkBiB,CAAC,IAAI;AACnBlD,QAAAA,kBAAkB,CAAED,eAAD,KAAsB,EACvC,GAAGC,kBADoC;AAEvC,WAACkD,CAAD,GAAK;AAFkC,SAAtB,CAAD,CAAlB;AAIH,OALD;AAMD;AACF,GAbD;;AAeA,QAAMd,WAAW,GAAG,MAAM;AACxBtB,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAFD;;AAIA,QAAM2J,uBAAuB,GAAG,MAAM;AACpC3J,IAAAA,kBAAkB,CAAC,KAAD,CAAlB;AACD,GAFD;;AAIA,QAAM4J,mBAAmB,GAAG,MAAM;AAChC,QAAInL,YAAY,CAAC,CAAD,CAAZ,KAAoB,yBAAxB,EAAmD;AAC/CoL,MAAAA,KAAK,CAAC,2CAAD,CAAL;AACH;AACF,GAJD;;AAMA,QAAMC,YAAY,GAAG,CAAC3G,CAAD,EAAInI,IAAJ,KAAa;AAChC,QAAI+O,gBAAgB,GAAE,CAAC,GAAGtM,QAAQ,CAACoE,OAAb,CAAtB;AACA,QAAImI,YAAJ;AACA,QAAIlH,IAAJ;AACA,QAAImH,cAAJ;AACAF,IAAAA,gBAAgB,CAAC5I,OAAjB,CAAyBE,EAAE,IAAI;AAC7B2I,MAAAA,YAAY,GAAG3I,EAAE,CAAC,CAAD,CAAF,CAAMrG,IAArB;;AACA,UAAIgP,YAAY,KAAKhP,IAArB,EAA2B;AACzB8H,QAAAA,IAAI,GAAGzB,EAAE,CAAC,CAAD,CAAF,CAAMrG,IAAb;AACD;AACF,KALD;AAMAiP,IAAAA,cAAc,GAAGF,gBAAgB,CAAC9I,MAAjB,CAAwBG,OAAO,IAAIA,OAAO,CAAC,CAAD,CAAP,CAAWpG,IAAX,KAAqBgP,YAAxD,CAAjB;AACAtM,IAAAA,WAAW,CAACD,QAAQ,KAAK,EAAC,GAAGA,QAAJ;AAAcyM,MAAAA,aAAa,EAAED;AAA7B,KAAL,CAAT,CAAX;AACD,GAbD;;AAeA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AACE,IAAA,KAAK,EAAEpM,SADT;AAEE,IAAA,QAAQ,EAAEyC,YAFZ;AAGE,kBAAW,uBAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAE,CAAZ;AAAe,IAAA,KAAK,EAAC,cAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eAME,oBAAC,GAAD;AAAK,IAAA,KAAK,EAAE,CAAZ;AAAe,IAAA,KAAK,EAAC,gBAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,eAOE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAED,OAAO,CAAClF,IADrB;AAEE,IAAA,OAAO,EAAEmG,WAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,CADF,EAeGvB,eAAe,gBAChB,oBAAC,OAAD;AAAS,IAAA,IAAI,EAAEuB,WAAf;AAA4B,IAAA,KAAK,EAAEqI,uBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAE3N,IAAnB;AAAyB,IAAA,UAAU,EAAEiE,aAArC;AAAoD,IAAA,OAAO,EAAElC,YAA7D;AAA2E,IAAA,KAAK,EAAE4L,uBAAlF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADgB,GAIjB,IAnBD,CADF,EAsBG9L,SAAS,KAAK,CAAd,gBACC,oBAAC,KAAD;AAAO,IAAA,SAAS,EAAEwC,OAAO,CAAChE,SAA1B;AAAqC,IAAA,MAAM,MAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,SAAS,EAAEgE,OAAO,CAACnE,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,SAAS,EAAEmE,OAAO,CAACzE,KADrB;AAEE,IAAA,WAAW,EAAC,QAFd;AAGE,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB,KAHd;AAIE,IAAA,UAAU,EAAE;AACVuO,MAAAA,cAAc,eACZ,oBAAC,cAAD;AAAgB,QAAA,QAAQ,EAAC,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAFQ,KAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAaE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAE9J,OAAO,CAAC/D,aAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAbF,eAcE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAE+D,OAAO,CAAC/D,aAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAdF,eAeE,oBAAC,QAAD;AAAU,IAAA,SAAS,EAAE+D,OAAO,CAAC/D,aAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAfF,CADF,eAkBE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCuC,sBAAsB,GACvBJ,YAAY,IAAIA,YAAY,CAAC,CAAD,CAA5B,GACMA,YAAY,CAAC,CAAD,CAAZ,CAAgBkD,GAAhB,CAAqBN,EAAD,iBAClB;AAAK,IAAA,GAAG,EAAEA,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,MAAM,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAEhB,OAAO,CAAC9D,QADrB;AAEE,IAAA,OAAO,eACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM8E,EAAN,CADF,eAEE;AAAK,MAAA,SAAS,EAAEhB,OAAO,CAACrE,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IADH,SACYmD,WAAW,CAACiL,YAAZ,EADZ,CAFF,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAYE,oBAAC,QAAD;AACE,IAAA,SAAS,EAAE/J,OAAO,CAAC3D,QADrB;AAEE,IAAA,OAAO,EAAEmC,sBAFX;AAGE,IAAA,QAAQ,EAAE6K,oBAHZ;AAIE,IAAA,KAAK,EAAC,SAJR;AAKE,IAAA,aAAa,EAAE,IALjB;AAME,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB,KANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,eAoBE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAErJ,OAAO,CAACnD,MADrB;AAEE,IAAA,OAAO,EAAEyB,qBAFX;AAGE,IAAA,QAAQ,EAAE6K,kBAHZ;AAIE,IAAA,KAAK,EAAC,WAJR;AAKE,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB,KALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IApBF,eA2BE,oBAAC,UAAD;AAAY,IAAA,QAAQ,EAAE,IAAtB;AAA4B,IAAA,OAAO,EAAEI,mBAArC;AAA0D,kBAAW,QAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA3BF,CADF,eAgCE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAhCF,CADF,CADN,GAqCM,IAtCiB,GAuCf,IAxCR,EAyCG7K,cAAc,IAAIE,eAAlB,GACDR,YAAY,IAAIA,YAAY,CAAC,CAAD,CAA5B,GACIA,YAAY,CAAC,CAAD,CAAZ,CAAgBkD,GAAhB,CAAqBN,EAAD,iBAClB;AAAK,IAAA,GAAG,EAAEA,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,QAAD;AAAU,IAAA,MAAM,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAEhB,OAAO,CAAC9D,QADrB;AAEE,IAAA,OAAO,eACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM8E,EAAN,CADF,eAEE;AAAK,MAAA,SAAS,EAAEhB,OAAO,CAACrE,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IADH,SACYmD,WAAW,CAACiL,YAAZ,EADZ,CAFF,CAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAYE,oBAAC,QAAD;AACE,IAAA,SAAS,EAAE/J,OAAO,CAAC3D,QADrB;AAEE,IAAA,OAAO,EAAEuC,eAAe,CAACoC,EAAE,CAACqH,KAAH,CAAS,GAAT,EAAcC,IAAd,CAAmB,EAAnB,CAAD,CAF1B;AAGE,IAAA,QAAQ,EAAExF,CAAC,IAAIoG,aAAa,CAACpG,CAAD,CAH9B;AAIE,IAAA,KAAK,EAAC,SAJR;AAKE,IAAA,IAAI,EAAEsF,YAAY,CAACpH,EAAD,CALpB;AAME,IAAA,aAAa,EAAE,IANjB;AAOE,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB,KAPd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZF,eAqBE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAEhB,OAAO,CAACnD,MADrB;AAEE,IAAA,OAAO,EAAE6B,cAAc,CAACsC,EAAE,CAACqH,KAAH,CAAS,GAAT,EAAcC,IAAd,CAAmB,EAAnB,CAAD,CAFzB;AAGE,IAAA,QAAQ,EAAExF,CAAC,IAAIyF,WAAW,CAACzF,CAAD,CAH5B;AAIE,IAAA,KAAK,EAAC,WAJR;AAKE,IAAA,IAAI,EAAEsF,YAAY,CAACpH,EAAD,CALpB;AAME,IAAA,UAAU,EAAE;AAAE,oBAAc;AAAhB,KANd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IArBF,eA6BE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAG8B,CAAC,IAAI2G,YAAY,CAAC3G,CAAD,EAAI9B,EAAJ,CAAvC;AAAgD,kBAAW,QAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA7BF,CADF,eAkCE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAlCF,CADF,CADJ,GAuCI,IAxCH,GAyCG,IAlFN,CAlBF,CADD,GAwGG,IA9HN,EA+HGxD,SAAS,KAAK,CAAd,gBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGU,WAAW,IAAIe,cAAf,gBACC,oBAAC,qBAAD;AACE,IAAA,UAAU,EAAEyD,cADd;AAEE,IAAA,IAAI,EAAEzD,cAFR;AAGE,IAAA,OAAO,EAAEf,WAHX;AAIE,IAAA,SAAS,EAAE6G,aAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAOG,IARN,CADF,eAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGjH,UAAU,IAAIyB,mBAAd,gBACC,oBAAC,oBAAD;AACE,IAAA,UAAU,EAAEkE,aADd;AAEE,IAAA,iBAAiB,EAAER,iBAFrB;AAGE,IAAA,IAAI,EAAE1D,mBAHR;AAIE,IAAA,OAAO,EAAEzB,UAJX;AAKE,IAAA,SAAS,EAAEoI,YALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAQG,IATN,CAXF,eAsBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGlI,YAAY,IAAImB,eAAhB,gBACC,oBAAC,sBAAD;AACE,IAAA,UAAU,EAAEuE,eADd;AAEE,IAAA,IAAI,EAAEvE,eAFR;AAGE,IAAA,OAAO,EAAEnB,YAHX;AAIE,IAAA,kBAAkB,EAAE6G,kBAJtB;AAKE,IAAA,SAAS,EAAEmD,cALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAQG,IATN,CAtBF,eAiCE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3I,oBAAoB,IAAIA,oBAAxB,gBACC,oBAAC,qBAAD;AACE,IAAA,UAAU,EAAEoF,cADd;AAEE,IAAA,IAAI,EAAEpF,oBAFR;AAGE,IAAA,OAAO,EAAEzB,WAHX;AAIE,IAAA,SAAS,EAAE4I,aAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAOG,IARN,CAjCF,CADD,GA6CG,IA5KN,CADF;AAgLD","sourcesContent":["import React, { useContext, useEffect, useState, useRef } from \"react\";\r\nimport { AppContext } from \"../../../AppContext\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n// import Popover from \"@material-ui/core/Popover\";\r\nimport DialogE from \"./Utils/DialogE\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Switch from '@material-ui/core/Switch';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport FilterDefaultListWell from \"./FilterDefaultListWell\";\r\nimport FilterDefaultListGeo from \"./FilterDefaultListGeo\";\r\nimport FilterDefaultListOwner from \"./FilterDefaultListOwner\";\r\nimport FilterDefaultListProd from \"./FilterDefaultListProd\";\r\nimport SaveFilters from \"./SaveFilters\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Button from \"@material-ui/core/Button\";\r\n \r\nconst prodListOptions = [\r\n  { name : \"Cumulative  -  Oil\"},\r\n  { name : \"Cumulative  -  Gas\"},\r\n  { name : \"Cumulative  -  Water\"},\r\n  { name : \"First Month  -  Oil\"},\r\n  { name : \"First Month  -  Gas\" },\r\n  { name : \"First Month  -  Water\"},\r\n  { name : \"First Three Months  -  Oil\"},\r\n  { name : \"First Three Months  -  Gas\"},\r\n  { name : \"First Three Months  -  Water\"},\r\n  { name : \"First Six Months  -  Oil\"},\r\n  { name : \"First Six Months  -  Gas\"},\r\n  { name : \"First Six Months  -  Water\"},\r\n  { name : \"First Twelve Months  -  Oil\"},\r\n  { name : \"First Twelve Months  -  Gas\"},\r\n  { name : \"First Twelve Months  -  Water\"},\r\n  { name : \"Last Month  -  Oil\"},\r\n  { name : \"Last Month  -  Gas\"},\r\n  { name : \"Last Month  -  Water\"},\r\n  { name : \"Last Six Months  -  Oil\"},\r\n  { name : \"Last Six Months  -  Gas\"},\r\n  { name : \"Last Six Months  -  Water\"},\r\n  { name : \"Last Twelve Months  -  Oil\"},\r\n  { name : \"Last Twelve Months  -  Gas\"},\r\n  { name : \"Last Twelve Months  -  Water\"}\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  save: {\r\n    display: \"flex\",\r\n    width: \"100%\",\r\n    justifyContent: \"flex-end\",\r\n    padding: \"6px 12px\",\r\n    marginRight: 10,\r\n    color: \"rgba(0, 0, 0, 0.54)\",\r\n    boxShadow: \"none\",\r\n    backgroundColor: \"inherit\",\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  input: {\r\n    flex: \"1 1 auto\",\r\n    paddingRight: 30,\r\n  },\r\n  iconButton: {\r\n    padding: 10,\r\n  },\r\n  user: {\r\n    fontSize: 12,\r\n    color: \"rgba(23, 170, 221, 1)\",\r\n  },\r\n  rootDiv: {\r\n    padding: \"2px 6px\",\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    marginTop: 20,\r\n  },\r\n  paparMain: {\r\n    boxShadow: \"none\",\r\n    padding: \"2px 6px\",\r\n  },\r\n  listItemLabel: {\r\n    justifyContent: \"flex-end\",\r\n    flex: 1,\r\n    fontSize: 12,\r\n    color: \"rgba(0, 0, 0, 0.54)\",\r\n  },\r\n  listItem: {\r\n    margin: 4,\r\n    flex: \"1 1 auto\",\r\n    justifyContent: \"space-between\",\r\n    minWidth: 278,\r\n  },\r\n  checkBox: {\r\n    flex: \"1 1 auto\",\r\n    justifyContent: \"end\",\r\n    paddingRight: 18,\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent !important\",\r\n    },\r\n  },\r\n  chip: {\r\n    padding: \"3px 20px\",\r\n    fontSize: 12,\r\n  },\r\n  chipContainer: {\r\n    height: \"100%\",\r\n    margin: \"6px 6px\",\r\n  },\r\n  chipRow: {\r\n    display: \"inline-flex\",\r\n    padding: \"3px 0px\",\r\n  },\r\n  deleteButton: {\r\n    marginLeft: \"0%\",\r\n  },\r\n  listLabel: {\r\n    padding: \"6px 30px\",\r\n    display: \"inline-flex\",\r\n    marginRight: \"70%\",\r\n  },\r\n  switch: {\r\n    marginRight: 50,\r\n  },\r\n  listItemContainer: {\r\n    display: \"inherit\",\r\n    \"&:hover\": {\r\n      color: \"transparent\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst ButtonInTabs = ({ className, onClick, children }) => {\r\n  return <Button className={className} onClick={onClick} children={children} aria-label=\"save\"\r\n  variant=\"contained\"\r\n  disableElevation={true}\r\n  startIcon={<BookmarkBorderIcon />} />;\r\n};\r\n\r\nexport default function FilterDedaults() {\r\n  const [stateApp, setStateApp] = useContext(AppContext);\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [tabsValue, setTabsValue] = useState(0);\r\n  const [stateNavCopy, setStateNavCopy] = useState(null);\r\n  const [filtersProd, setFiltersProd] = useState(null);\r\n  const [filtersGeo, setFiltersGeo] = useState(null);\r\n  const [filtersOwner, setFiltersOwner] = useState(null);\r\n  const [filtersWell, setFiltersWell] = useState(null);\r\n  const [savedFilters, setSavedFilters] = useState(null);\r\n  const [checkBoxActiveM1neral, setCheckBoxActiveM1neral] = useState(null);\r\n  const [checkBoxDefaultM1neral, setCheckBoxDefaultM1neral] = useState(null);\r\n  const [checkBoxActive, setCheckBoxActive] = useState(null);\r\n  const [checkBoxDefault, setCheckBoxDefault] = useState(null);\r\n  const [dateCreated, setDateCreated] = useState(new Date());\r\n  const [filterTypeWell, setFilterTypeWell] = useState(null);\r\n  const [filterTypeOwner, setFilterTypeOwner] = useState(null);\r\n  const [filterTypeProdcution, setFilterTypeProduction] = useState(null);\r\n  const [filterTypeGeography, setFilterTypeGeography] = useState(null);\r\n  // const [saveSearchName, setSaveSearchName] = useState(\"\");\r\n  const [user, setUser] = useState(\"\");\r\n  const [showSavePopOver ,setShowSavePopOver] = useState(false);\r\n  const [filtersFromDb, setFiltersFromDb] = useState(null);\r\n  const [typesFromDb, setTypesFromDb] = useState(null);\r\n  const classes = useStyles();\r\n \r\n  useEffect(() => {\r\n    let name;\r\n    if (stateApp) {\r\n      name = stateApp.user.name;\r\n      setUser(name);      \r\n    }\r\n  }, [stateApp]);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setTabsValue(newValue);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (stateApp.filtersOnOff && stateApp.filtersDefaultOnoff) {\r\n      setCheckBoxActive(stateApp.filtersOnOff)\r\n      setCheckBoxDefault(stateApp.filtersDefaultOnoff)\r\n    }\r\n    if (stateNav.m1neralDefaultFilters) {\r\n      setCheckBoxActiveM1neral(stateNav.m1neralDefaultsOnOff)\r\n      setCheckBoxDefaultM1neral(stateNav.m1neralCehckOnOff)\r\n    }\r\n  },[stateApp.filtersDefaultOnoff, stateApp.filtersOnOff, stateNav.m1neralCehckOnOff, stateNav.m1neralDefaultFilters, stateNav.m1neralDefaultsOnOff])\r\n\r\n  useEffect(() => {\r\n    let typeName; \r\n    let types;\r\n    let filtersName;\r\n    let filter;\r\n    if (filtersFromDb && filtersFromDb.length > 0) {\r\n      filtersFromDb.forEach(element => {\r\n        filtersName = element[0]; \r\n        filter = element[1];\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [filtersName]:filter,\r\n        }))\r\n      });\r\n    }\r\n\r\n    if (typesFromDb && typesFromDb.length > 0) {\r\n      typesFromDb.forEach(el => {\r\n        typeName = el[0];\r\n        types = el[1];\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [typeName]:types,\r\n        }))\r\n      });\r\n    }\r\n  },[filtersFromDb, setStateNav, typesFromDb])\r\n\r\n  useEffect(() => {\r\n    let saveFilters = [];\r\n    let filtersStateNav;\r\n    let defaultFiltersArgs;\r\n    let defaultFiltersStateApp;\r\n    let m1neralSavedFilters = [];\r\n\r\n    if (stateNav.m1neralDefaultFilters) {\r\n      defaultFiltersArgs = stateNav.m1neralDefaultFilters.map((elm) => elm);\r\n      defaultFiltersStateApp = stateApp.filters.map(el => el[0].name)\r\n      if (defaultFiltersArgs[0].filters) {\r\n        m1neralSavedFilters.push(defaultFiltersArgs[0].name);\r\n        setSavedFilters([m1neralSavedFilters, defaultFiltersStateApp]);\r\n      }\r\n    }\r\n\r\n    if (stateNav) {\r\n      let stateNavActiveProperties = Object.entries(stateNav).filter(\r\n        ([k, v], i) => !!v && v.length > 0\r\n      );\r\n      setStateNavCopy([...stateNavActiveProperties]);\r\n      \r\n      let mapStateNav = stateNavActiveProperties.map((val) => val);\r\n      mapStateNav.filter((element) =>\r\n        element && element[1].length > 1\r\n          ? element[0].includes(\"filter\")\r\n            ? saveFilters.push(element)\r\n            : null\r\n          : null\r\n      );\r\n\r\n      filtersStateNav = [...saveFilters];\r\n      let wellArr = [];\r\n      let geoArr = [];\r\n      let geoArr1 = [];\r\n      let ownerArr = [];\r\n      let interestArr = [];\r\n      let prodArr = [];\r\n      if (filtersStateNav && filtersStateNav.length > 0) {\r\n        \r\n        filtersStateNav.map((item) => {\r\n          if (item[0].includes(\"Operator\")) {\r\n            setFilterTypeWell(\"Well\");\r\n            wellArr.push(item);\r\n          }\r\n          if (item[0].includes(\"Well\")) {\r\n            setFilterTypeWell(\"Well\");\r\n            wellArr.push(item);\r\n          }\r\n          if (item[0].includes(\"Date\")) {\r\n            setFilterTypeWell(\"Well\");\r\n            wellArr.push(item);\r\n          }\r\n          if (item[0].includes(\"Owner\")) {\r\n            setFilterTypeOwner(\"Owner\");\r\n            ownerArr.push(item);\r\n          }\r\n          if (item[0].includes(\"Interest\")) {\r\n            setFilterTypeOwner(\"Owner\");\r\n            interestArr.push(item);\r\n          }\r\n          if (item[0].includes(\"Geography\")) {\r\n            setFilterTypeGeography(\"Geography\");\r\n            geoArr.push(item);\r\n          }\r\n          if (item[0].includes(\"Basin\")) {\r\n            setFilterTypeGeography(\"Geography\");\r\n            geoArr1.push(item);\r\n          }\r\n          if (item[0].includes(\"Play\")) {\r\n            setFilterTypeGeography(\"Geography\");\r\n            geoArr1.push(item);\r\n          }\r\n          if (item[0].includes(\"Gas\")) {\r\n            setFilterTypeProduction(\"Production\");\r\n            prodArr.push(item);\r\n          }\r\n          if (item[0].includes(\"Oil\")) {\r\n            setFilterTypeProduction(\"Production\");\r\n            prodArr.push(item);\r\n          }\r\n          if (item[0].includes(\"Water\")) {\r\n            setFilterTypeProduction(\"Production\");\r\n            prodArr.push(item);\r\n          }\r\n        });\r\n      }\r\n      if (geoArr1.length > 0) {\r\n        setFiltersGeo([geoArr, geoArr1]);\r\n      } else if (geoArr.length > 0) {\r\n        setFiltersGeo([geoArr, geoArr1]);\r\n      }\r\n      else {\r\n        setFiltersGeo(null);\r\n      }\r\n\r\n      if (ownerArr.length > 0) {\r\n        setFiltersOwner([ownerArr, interestArr]);\r\n      } else if (interestArr.length > 0) {\r\n        setFiltersOwner([ownerArr, interestArr]);\r\n      }\r\n      else {\r\n        setFiltersOwner(null);\r\n      }\r\n      setFiltersProd(prodArr);\r\n      setFiltersWell(wellArr);\r\n    }\r\n  }, [stateApp.filters, stateNav]);\r\n\r\n  const deleteChipWell = (item, name) => {\r\n    if (stateNav[name] && stateNav[name].length === 5) {\r\n      let copy;\r\n      let type;\r\n      copy = [...stateNav[name]];\r\n      let removeItem = copy[2].filter((e) => e !== item);\r\n      if (copy[2].length > 0) {\r\n        copy[2] = [...removeItem];\r\n        if (name === \"filterWellType\") {\r\n          type = \"typeName\";\r\n        }\r\n        if (name === \"filterWellStatus\") {\r\n          type = \"statusName\";\r\n        }\r\n        if (name === \"filterOperator\") {\r\n          type = \"operatorName\";\r\n        }\r\n        if (name === \"filterWellProfile\") {\r\n          type = \"profileName\";\r\n        }\r\n      }\r\n      if (removeItem.length === 0) {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [name]: null,\r\n          [type]: [],\r\n        }));\r\n      } else {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [name]: copy,\r\n          [type]: removeItem,\r\n        }));\r\n      }\r\n    }\r\n\r\n    if (stateNav[name] && stateNav[name].length === 3) {\r\n      let typeFrom;\r\n      let typeTo;\r\n\r\n      if (name === \"filterPermitDateRange\") {\r\n        typeFrom = \"permitDateFrom\";\r\n        typeTo = \"permitDateTo\";\r\n      }\r\n\r\n      if (name === \"filterSpudDateRange\") {\r\n        typeFrom = \"spudDateFrom\";\r\n        typeTo = \"spudDateTo\";\r\n      }\r\n      if (name === \"filterCompletetionDateRange\") {\r\n        typeFrom = \"completetionDateFrom\";\r\n        typeTo = \"completetionDateTo\";\r\n      }\r\n      if (name === \"filterFirstProdDateRange\") {\r\n        typeFrom = \"firstProdDateFrom\";\r\n        typeTo = \"firstProdDateTo\";\r\n      }\r\n\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        [name]: null,\r\n        [typeFrom]: null,\r\n        [typeTo]: null,\r\n      }));\r\n    }\r\n  };\r\n  // State County Survey Abstract \r\n  const deleteChipGeoSCSA = (item, name) => {\r\n    let copy;\r\n   \r\n    copy = [...stateNav[name]];\r\n    if (copy && copy[1] && copy[1].length === 5 ) {        \r\n      \r\n      for (let index = 0; index < copy.length; index++) {\r\n        const element = copy[index];\r\n        if (element[1][1] === \"state\") {\r\n          if (element[2] === item) {\r\n            copy.splice(0, copy.length);\r\n            setStateNav((stateNav) => ({\r\n              ...stateNav,\r\n              [name]: null,\r\n              stateName: null,\r\n              displayStateName: null,\r\n            }));\r\n          }\r\n        }\r\n      }\r\n      \r\n    }\r\n    if (copy && copy[2] && copy[2].length === 5) {      \r\n      \r\n      for (let index = 0; index < copy.length; index++) {\r\n        const element = copy[index];\r\n        if (element[1][1] === \"county\") {\r\n          if (element[2] === item) {\r\n            copy.splice(index, copy.length);\r\n            setStateNav((stateNav) => ({\r\n              ...stateNav,\r\n              [name]: copy,\r\n              countyName: null,\r\n              surveyName: null,\r\n              abstractName: null,\r\n            }));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (copy && copy[3] && copy[3].length === 5) {      \r\n      \r\n      for (let index = 0; index < copy.length; index++) {\r\n        const element = copy[index];\r\n        if (element[1][1] === \"survey\") {\r\n          if (element[2] === item) {\r\n            copy.splice(index, copy.length);\r\n            setStateNav((stateNav) => ({\r\n              ...stateNav,\r\n              [name]: copy,\r\n              surveyName: null,\r\n              abstractName: null,\r\n            }));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (copy && copy[4] && copy[4].length === 5) {      \r\n      \r\n      for (let index = 0; index < copy.length; index++) {\r\n        const element = copy[index];\r\n        if (element[1][1] === \"abstract\") {\r\n          if (element[2] === item) {\r\n            copy.splice(index, copy.length);\r\n            setStateNav((stateNav) => ({\r\n              ...stateNav,\r\n              [name]: copy,\r\n              abstractName: null,\r\n            }));\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  // Basin And PLay \r\n  const deleteChipGeo = (item, name) => {\r\n    if (stateNav[name] && stateNav[name].length === 5) {\r\n      let copy;\r\n      let type;\r\n      copy = [...stateNav[name]];\r\n      let removeItem = copy[2].filter((e) => e !== item);\r\n      if (copy[2].length > 0) {\r\n        copy[2] = [...removeItem];\r\n        if (name === \"filterBasin\") {\r\n          type = \"basinName\";\r\n        }\r\n        if (name === \"filterPlay\") {\r\n          type = \"playName\";\r\n        }\r\n      }\r\n      if (removeItem.length === 0) {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [name]: null,\r\n          [type]: [],\r\n        }));\r\n      } else {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [name]: copy,\r\n          [type]: removeItem,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteChipOwner = (item) => {\r\n\r\n    if (stateNav.filterNoOwnerCount && stateNav.filterNoOwnerCount.length > 0) {\r\n        if (item === \"noOwners\") {\r\n          setStateNav((stateNav) => ({\r\n            ...stateNav,\r\n            filterNoOwnerCount: null,\r\n          }));\r\n        }\r\n    }\r\n    if (stateNav.filterHasOwnerCount && stateNav.filterHasOwnerCount.length > 0) {\r\n      if (item === \"hasOwners\") {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterHasOwnerCount: null,\r\n        }));\r\n      }\r\n  }\r\n    if(stateNav.filterOwnerCount && stateNav.filterOwnerCount.length > 0){\r\n      let copy;\r\n      copy = [...stateNav.filterOwnerCount];\r\n\r\n      for (let index = 0; index < copy.length; index++) {\r\n        const element = copy[index];\r\n        if (element[0] === item) {\r\n          copy.splice(index, 1);\r\n        }\r\n      }\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        filterOwnerCount: copy,\r\n      }));\r\n\r\n      if (copy.length === 1) {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterOwnerCount: null,\r\n        }));\r\n      }\r\n    }\r\n    if (stateNav.filterAllOwnershipTypes && stateNav.filterAllOwnershipTypes.length > 0 ) {\r\n      let copy;\r\n      let itemRemove = stateNav.interestName;\r\n      let i = itemRemove.indexOf(item);\r\n      if (item === \"ownershipTypeReligiousInstitutions\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n      if (item === \"ownershipTypeGovernmentalBodies\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n      if (item === \"ownershipTypeNonProfits\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n      if (item === \"ownershipTypeTrusts\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n      if (item === \"ownershipTypeCorporations\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n      if (item === \"ownershipTypeEducationalInstitutions\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n      if (item === \"ownershipTypeIndividuals\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n      if (item === \"ownershipTypeUnknown\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n    \r\n      copy = [...stateNav.filterAllOwnershipTypes];\r\n\r\n      for (let index = 0; index < copy.length; index++) {\r\n        const element = copy[index];\r\n        if (element.includes(item)) {\r\n          copy.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      if (copy.length > 1) {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterAllOwnershipTypes: copy,\r\n          ownerTypeName: itemRemove,\r\n        }));\r\n      } else {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterAllOwnershipTypes: null,\r\n          ownerTypeName: [],\r\n        }));\r\n      }\r\n    }\r\n  };\r\n \r\n  const matchProdOption = (string) => {\r\n    let list = prodListOptions;\r\n    let match = list.map(el => el.name)\r\n    if (match.includes(string) ) {\r\n      return string;\r\n    }\r\n  }\r\n \r\n  const removeFitlerFromProdName = (string) => {\r\n    if (string.includes(\"filterCumulative\")) {\r\n      return string.replace(\"filterCumulative\", \"Cumulative  -  \");\r\n    }\r\n    if (string.includes(\"filterFirstMonth\")) {\r\n      return string.replace(\"filterFirstMonth\", \"First Month  -  \");\r\n    }\r\n    if (string.includes(\"filterFirstThreeMonth\")) {\r\n      return string.replace(\"filterFirstThreeMonth\", \"First Three Months  -  \");\r\n    }\r\n    if (string.includes(\"filterFirstSixMonth\")) {\r\n      return string.replace(\"filterFirstSixMonth\", \"First Six Months  -  \");\r\n    }\r\n    if (string.includes(\"filterFirstTwelveMonth\")) {\r\n      return string.replace(\"filterFirstTwelveMonth\", \"First Twelve Months  -  \");\r\n    }\r\n    \r\n    if (string.includes(\"filterLastTwelveMonth\")) {\r\n      return string.replace(\"filterLastTwelveMonth\", \"Last Twelve Months  -  \");\r\n    }\r\n    if (string.includes(\"filterLastSixMonth\")) {\r\n      return string.replace(\"filterLastSixMonth\", \"Last Six Months  -  \");\r\n    }\r\n    if (string.includes(\"filterLastMonth\")) {\r\n      return string.replace(\"filterLastMonth\", \"Last Month  -  \");\r\n    }\r\n  }\r\n  \r\n\r\n  const deleteChipProd = (item,name, filter) => {\r\n    if(stateNav[name] && stateNav[name].length > 0){\r\n      let copy;\r\n      copy = [...stateNav[name]];\r\n\r\n      for (let index = 0; index < copy.length; index++) {\r\n        const element = copy[index];\r\n        if (element[2] === item) {\r\n          copy.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      if (filter && filter[1] && filter[1].length === 2) {\r\n        let compare = removeFitlerFromProdName(name);\r\n        let match = matchProdOption(compare);\r\n        let findItem = stateNav.prodOptions;\r\n        for (let index = 0; index < findItem.length; index++) {\r\n          const element = findItem[index];\r\n          if (element === match) {\r\n            findItem.splice(index, 1);\r\n          }\r\n        }\r\n      }\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        [name]: copy,\r\n      }));\r\n\r\n      if (copy.length === 1) {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [name]: null,\r\n        }));\r\n      }\r\n    }\r\n  };\r\n\r\n  const deleteChipInterest = (item) => {\r\n    if (stateNav.filterAllInterestTypes) {\r\n      let copy;\r\n      let itemRemove = stateNav.interestName;\r\n      let i = itemRemove.indexOf(item);\r\n      if (item === \"interestTypeRoyaltyInterest\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n      if (item === \"interestTypeOverrideRoyalty\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n      if (item === \"interestTypeWorkingInterest\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n      if (item === \"interestTypeProductionPayment\") {\r\n        itemRemove.splice(i, 1);\r\n      }\r\n\r\n      copy = [...stateNav.filterAllInterestTypes];\r\n      for (let index = 0; index < copy.length; index++) {\r\n        const element = copy[index];\r\n        if (element.includes(item)) {\r\n          copy.splice(index, 1);\r\n        }\r\n      }\r\n\r\n      if (copy.length > 1) {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterAllInterestTypes: copy,\r\n          interestName: itemRemove,\r\n        }));\r\n      } else {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          filterAllInterestTypes: null,\r\n          interestName: [],\r\n        }));\r\n      }\r\n    }\r\n  };\r\n  \r\n  const removeAllWell = () => {\r\n    if (filtersWell && filterTypeWell) {\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        filterCompletetionDateRange: null,\r\n        filterFirstProdDateRange: null,\r\n        filterPermitDateRange: null,\r\n        firstProdDateFrom: null,\r\n        firstProdDateTo: null,\r\n        filterSpudDateRange: null,\r\n        filterWellProfile: null,\r\n        filterWellStatus: null,\r\n        filterWellType: null,\r\n        filterOperator: null,\r\n        completetionDateFrom: null,\r\n        completetionDateTo: null,\r\n        dateTypeName : [],\r\n        operatorName: null,\r\n        profileName: null,\r\n        spudDateFrom: null,\r\n        spudDateTo: null,\r\n        statusName: [],\r\n        typeName: [],\r\n      }))\r\n    }\r\n  }\r\n\r\n  const removeAllGeo = () => {\r\n    if (filtersGeo && filterTypeGeography) {\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        basinName:[],\r\n        playName: [],\r\n        countyName: null,\r\n        stateName: null,\r\n        displayStateName: null,\r\n        surveyName: null, \r\n        abstractName: null,\r\n        filterGeography: null,\r\n        filterBasin: null,\r\n        filterPlay: null,\r\n      }))\r\n    }\r\n  }\r\n\r\n  const removeAllProd = () => {\r\n    if (filtersProd && filterTypeProdcution) {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          prodOptions: [],\r\n          filterCumulativeOil:null,\r\n          filterCumulativeGas:null,\r\n          filterCumulativeWater:null,\r\n          filterFirstMonthWater:null,\r\n          filterFirstThreeMonthWater:null,\r\n          filterFirstSixMonthWater:null,\r\n          filterFirstTwelveMonthWater:null,\r\n          filterLastMonthWater:null,\r\n          filterLastSixMonthWater:null,\r\n          filterLastTwelveMonthWater:null,\r\n          filterFirstMonthGas:null,\r\n          filterFirstThreeMonthGas:null,\r\n          filterFirstSixMonthGas:null,\r\n          filterFirstTwelveMonthGas:null,\r\n          filterLastMonthGas:null,\r\n          filterLastSixMonthGas:null,\r\n          filterLastTwelveMonthGas:null,\r\n          filterFirstMonthOil:null,\r\n          filterFirstSixMonthOil:null,\r\n          filterFirstTwelveMonthOil:null,\r\n          filterLastMonthOil:null,\r\n          filterLastSixMonthOil:null,\r\n          filterLastTwelveMonthOil:null,\r\n        }))\r\n    }\r\n  }\r\n\r\n  const removeAllOwner = () => {\r\n    if (filtersOwner && filterTypeOwner) {\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        interestName: [],\r\n        ownerTypeName: [],\r\n        ownerCountWell: [],\r\n        filterOwnerType:null,\r\n        filterOwnerCount: null,\r\n        filterNoOwnerCount: null,\r\n        filterAllInterestTypes: null,\r\n        filterAllOwnershipTypes:null,\r\n        filterHasOwners: null,\r\n        filterHasOwnerCount: null\r\n      }))\r\n      \r\n    }\r\n  }\r\n\r\n  const formatString = string => {\r\n    return string.split(\" \").join(\"\")\r\n  }\r\n\r\n  const filterOnOff = e => {\r\n    if (e) {\r\n      const target = e.target;\r\n      const name = target.name;\r\n      const checked = target.checked;\r\n      let filtersFromSate = [...stateApp.filters];\r\n      let filtersTorRemove = [...stateNavCopy];\r\n      let removeFilters;\r\n      let filtersToSet;\r\n      let typesToSet;\r\n      let filtersName;\r\n      for (let index = 0; index < filtersFromSate.length; index++) {\r\n        const element = filtersFromSate[index];\r\n        filtersName = element[0].name;\r\n        if (name === filtersName.split(\" \").join(\"\")) {\r\n          filtersToSet = element[0].filters;\r\n          typesToSet = element[0].types;\r\n        }\r\n      }\r\n      if (checked) {\r\n        let NoMatchName;\r\n        let findNames = Object.keys(checkBoxActive).map(e => e)\r\n        findNames.forEach(i => {\r\n          if(i !== name){\r\n            NoMatchName = i;\r\n            setCheckBoxActive((checkBoxActive) => ({\r\n              ...checkBoxActive,\r\n              [name]: true,\r\n              [NoMatchName]: false\r\n            }));\r\n          }\r\n        })\r\n        setFiltersFromDb(filtersToSet);\r\n        setTypesFromDb(typesToSet);\r\n        setCheckBoxActiveM1neral(false)\r\n      } else {\r\n        let findNames = Object.keys(checkBoxActive).map(e => e)\r\n        findNames.forEach(i => {\r\n          setCheckBoxActive((checkBoxActive) => ({\r\n            ...checkBoxActive,\r\n            [i]: false\r\n          }));\r\n        })\r\n        removeFilters = filtersTorRemove.map(el => el[0]).filter(e => e !== \"m1neralDefaultFilters\");\r\n        removeFilters.forEach(element => {\r\n          setStateNav((stateNav) => ({\r\n            ...stateNav,\r\n            [element]: null\r\n          }))\r\n        });\r\n        setFiltersFromDb(null);\r\n        setTypesFromDb(null);\r\n        setCheckBoxActiveM1neral(false)\r\n      }\r\n    }\r\n  };\r\n \r\n  const selectDefault = (e) => {\r\n    const target = e.target;\r\n    const name = target.name;\r\n    const checked = target.checked;\r\n    if (checked) {\r\n      let NoMatchName;\r\n      let findNames = Object.keys(checkBoxDefault).map(e => e)\r\n        findNames.forEach(i => {\r\n          if(i !== name){\r\n            NoMatchName = i;\r\n            setCheckBoxDefault((checkBoxDefault) => ({\r\n              ...setCheckBoxDefault,\r\n              [name]: true,\r\n              [NoMatchName]: false\r\n            }));\r\n          }\r\n        })\r\n      setCheckBoxDefaultM1neral(false)\r\n    } else {\r\n      let findNames = Object.keys(checkBoxDefault).map(e => e)\r\n        findNames.forEach(i => {\r\n            setCheckBoxDefault((checkBoxDefault) => ({\r\n              ...setCheckBoxDefault,\r\n              [i]: false,\r\n            }));\r\n        })\r\n      setCheckBoxDefaultM1neral(true)\r\n    }\r\n  };\r\n\r\n  const filterOnOffM1neral = () => {\r\n    if (checkBoxActiveM1neral === true) {\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        statusName: [],\r\n        typeName: [],\r\n        filterWellStatus: null,\r\n        filterWellType: null,\r\n        m1neralDefaultsOnOff: false,\r\n      }));\r\n      setCheckBoxActiveM1neral(false)\r\n      setFiltersFromDb(null);\r\n      setTypesFromDb(null);\r\n    } else {\r\n      let m1neralDefault = stateNav.m1neralDefaultFilters.map((elm) => elm);\r\n      let types;\r\n      let filters;\r\n      m1neralDefault.forEach(element => {\r\n        filters = element.filters;\r\n        types = element.types;\r\n      });\r\n      filters.forEach(e => {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [e[0]]: e[1],\r\n        }));\r\n      })\r\n      types.forEach(e => {\r\n        setStateNav((stateNav) => ({\r\n          ...stateNav,\r\n          [e[0]]: e[1],\r\n        }));\r\n      })\r\n      let findNames = Object.keys(checkBoxActive).map(e => e)\r\n        findNames.forEach(i => {\r\n          setCheckBoxActive((checkBoxActive) => ({\r\n            ...checkBoxActive,\r\n            [i]: false\r\n          }));\r\n      })\r\n      setStateNav((stateNav) => ({\r\n        ...stateNav,\r\n        m1neralDefaultsOnOff: true,\r\n      }));\r\n      setCheckBoxActiveM1neral(true);\r\n      setFiltersFromDb(null);\r\n      setTypesFromDb(null);\r\n    }\r\n  };\r\n\r\n  const selectDefaultM1neral = () => {\r\n    if (checkBoxDefaultM1neral === true) {\r\n      setCheckBoxDefaultM1neral(false);\r\n    } else {\r\n      setCheckBoxDefaultM1neral(true);\r\n      let findNames = Object.keys(checkBoxDefault).map(e => e)\r\n      findNames.forEach(i => {\r\n          setCheckBoxDefault((checkBoxDefault) => ({\r\n            ...setCheckBoxDefault,\r\n            [i]: false,\r\n          }));\r\n      })\r\n    }\r\n  };\r\n\r\n  const saveFilters = () => {\r\n    setShowSavePopOver(true);\r\n  }\r\n\r\n  const closePopoverSaveFilters = () => {\r\n    setShowSavePopOver(false)\r\n  }\r\n\r\n  const deleteFilterM1neral = () => {\r\n    if (savedFilters[0] === \"M1neral Default Filters\") {\r\n        alert(\"M1neral Default filters cannot be deleted\")\r\n    }\r\n  };\r\n\r\n  const deleteFilter = (e, name) => {\r\n    let findNameToRemove =[...stateApp.filters];\r\n    let itemToRemove;\r\n    let item;\r\n    let updatedFilters;\r\n    findNameToRemove.forEach(el => {\r\n      itemToRemove = el[0].name;\r\n      if (itemToRemove === name) {\r\n        item = el[0].name;\r\n      }\r\n    });\r\n    updatedFilters = findNameToRemove.filter(element => element[0].name  !== itemToRemove);\r\n    setStateApp(stateApp => ({...stateApp, filtersMockDb: updatedFilters }))\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Paper square>\r\n        <Tabs\r\n          value={tabsValue}\r\n          onChange={handleChange}\r\n          aria-label=\"disabled tabs example\"\r\n        >\r\n          <Tab value={0} label=\"Saved Search\" />\r\n          <Tab value={1} label=\"Current Search\" />\r\n          <ButtonInTabs\r\n            className={classes.save}\r\n            onClick={saveFilters}\r\n          >\r\n            Save\r\n          </ButtonInTabs>\r\n        </Tabs>\r\n        {showSavePopOver ? \r\n        <DialogE open={saveFilters} close={closePopoverSaveFilters}>\r\n          <SaveFilters user={user} filterList={filtersFromDb} filters={stateNavCopy} close={closePopoverSaveFilters}/>\r\n        </DialogE>\r\n      :null}\r\n      </Paper>\r\n      {tabsValue === 0 ? (\r\n        <Paper className={classes.paparMain} square>\r\n          <div component=\"form\" className={classes.rootDiv}>\r\n            <TextField\r\n              className={classes.input}\r\n              placeholder=\"Search\"\r\n              inputProps={{ \"aria-label\": \"search\" }}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon />\r\n                  </InputAdornment>\r\n                ),\r\n              }}\r\n            />\r\n            <ListItem className={classes.listItemLabel}>Default</ListItem>\r\n            <ListItem className={classes.listItemLabel}>Active</ListItem>\r\n            <ListItem className={classes.listItemLabel}>Delete</ListItem>\r\n          </div>\r\n          <List>\r\n          {checkBoxDefaultM1neral  ?( \r\n          savedFilters && savedFilters[0]\r\n              ? savedFilters[0].map((el) => (\r\n                  <div key={el}>\r\n                    <ListItem button>\r\n                      <ListItemText\r\n                        className={classes.listItem}\r\n                        primary={\r\n                          <section>\r\n                            <div>{el}</div>\r\n                            <div className={classes.user}>\r\n                              {user} - {dateCreated.toDateString()}\r\n                            </div>\r\n                          </section>\r\n                        }\r\n                      />\r\n                      <Checkbox\r\n                        className={classes.checkBox}\r\n                        checked={checkBoxDefaultM1neral}\r\n                        onChange={selectDefaultM1neral}\r\n                        color=\"primary\"\r\n                        disableRipple={true}\r\n                        inputProps={{ \"aria-label\": \"Default checkbox\" }}\r\n                      />\r\n                      <Switch\r\n                        className={classes.switch}\r\n                        checked={checkBoxActiveM1neral}\r\n                        onChange={filterOnOffM1neral}\r\n                        color=\"secondary\"\r\n                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                      />\r\n                      <IconButton disabled={true} onClick={deleteFilterM1neral} aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </ListItem>\r\n                    <Divider />\r\n                  </div>\r\n                ))\r\n              : null\r\n              ): (null)}\r\n            {checkBoxActive && checkBoxDefault ?( \r\n            savedFilters && savedFilters[1]\r\n              ? savedFilters[1].map((el) => (\r\n                  <div key={el}>\r\n                    <ListItem button>\r\n                      <ListItemText\r\n                        className={classes.listItem}\r\n                        primary={\r\n                          <section>\r\n                            <div>{el}</div>\r\n                            <div className={classes.user}>\r\n                              {user} - {dateCreated.toDateString()}\r\n                            </div>\r\n                          </section>\r\n                        }\r\n                      />\r\n                      <Checkbox\r\n                        className={classes.checkBox}\r\n                        checked={checkBoxDefault[el.split(\" \").join(\"\")]}\r\n                        onChange={e => selectDefault(e)}\r\n                        color=\"primary\"\r\n                        name={formatString(el)}\r\n                        disableRipple={true}\r\n                        inputProps={{ \"aria-label\": \"Default checkbox\" }}\r\n                      />\r\n                      <Switch\r\n                        className={classes.switch}\r\n                        checked={checkBoxActive[el.split(\" \").join(\"\")]}\r\n                        onChange={e => filterOnOff(e)}\r\n                        color=\"secondary\"\r\n                        name={formatString(el)}\r\n                        inputProps={{ 'aria-label': 'primary checkbox' }}\r\n                      />\r\n                      <IconButton onClick={ e => deleteFilter(e, el)} aria-label=\"delete\">\r\n                        <DeleteIcon />\r\n                      </IconButton>\r\n                    </ListItem>\r\n                    <Divider />\r\n                  </div>\r\n                ))\r\n              : null\r\n            ): (null)}\r\n          </List>\r\n        </Paper>\r\n      ) : null}\r\n      {tabsValue === 1 ? (\r\n        <div>\r\n          <div>\r\n            {filtersWell && filterTypeWell ? (\r\n              <FilterDefaultListWell\r\n                deleteChip={deleteChipWell}\r\n                type={filterTypeWell}\r\n                filters={filtersWell}\r\n                removeAll={removeAllWell}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div>\r\n            {filtersGeo && filterTypeGeography ? (\r\n              <FilterDefaultListGeo\r\n                deleteChip={deleteChipGeo}\r\n                deleteChipGeoSCSA={deleteChipGeoSCSA}\r\n                type={filterTypeGeography}\r\n                filters={filtersGeo}\r\n                removeAll={removeAllGeo}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div>\r\n            {filtersOwner && filterTypeOwner ? (\r\n              <FilterDefaultListOwner\r\n                deleteChip={deleteChipOwner}\r\n                type={filterTypeOwner}\r\n                filters={filtersOwner}\r\n                deleteChipInterest={deleteChipInterest}\r\n                removeAll={removeAllOwner}\r\n              />\r\n            ) : null}\r\n          </div>\r\n          <div>\r\n            {filterTypeProdcution && filterTypeProdcution ? (\r\n              <FilterDefaultListProd\r\n                deleteChip={deleteChipProd}\r\n                type={filterTypeProdcution}\r\n                filters={filtersProd}\r\n                removeAll={removeAllProd}\r\n              />\r\n            ) : null}\r\n          </div>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}