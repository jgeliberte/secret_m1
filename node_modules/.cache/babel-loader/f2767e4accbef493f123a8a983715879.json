{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterWellProfileJ.js\";\nimport React, { useContext, useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { NavigationContext } from \"../NavigationContext\";\nconst profileList = [\"DIRECTIONAL\", \"HORIZONTAL\", \"SIDETRACKED\", \"UNKNOWN\", \"VERTICAL\"];\nexport default function FilterWellProfileJ() {\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [profileName, setProfileName] = React.useState(stateNav.profileName ? stateNav.profileName : null);\n\n  const handleProfileChange = value => {\n    let filter;\n\n    if (value && value.length) {\n      filter = [\"match\", [\"get\", \"wellBoreProfile\"], value, true, false];\n      setStateNav(stateNav => ({ ...stateNav,\n        profileName: value\n      }));\n      setProfileName(value);\n    } else {\n      filter = null;\n      setStateNav(stateNav => ({ ...stateNav,\n        profileName: []\n      }));\n    }\n\n    setStateNav(stateNav => ({ ...stateNav,\n      filterWellProfile: filter\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    ChipProps: {\n      color: \"secondary\"\n    },\n    defaultValue: stateNav.profileName,\n    onChange: (event, newValue) => {\n      handleProfileChange(newValue);\n    },\n    multiple: true,\n    options: profileList,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"Well Profile\",\n      placeholder: \"\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    })),\n    disableListWrap: true,\n    id: \"virtualize-well-profiles\" // style={{ maxWidth: 300, minWidth: 120 }}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterWellProfileJ.js"],"names":["React","useContext","useEffect","TextField","Autocomplete","NavigationContext","profileList","FilterWellProfileJ","stateNav","setStateNav","profileName","setProfileName","useState","handleProfileChange","value","filter","length","filterWellProfile","color","event","newValue","params"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AAEA,MAAMC,WAAW,GAAG,CAClB,aADkB,EAElB,YAFkB,EAGlB,aAHkB,EAIlB,SAJkB,EAKlB,UALkB,CAApB;AAQA,eAAe,SAASC,kBAAT,GAA8B;AAC3C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,UAAU,CAACI,iBAAD,CAA1C;AACA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCX,KAAK,CAACY,QAAN,CACpCJ,QAAQ,CAACE,WAAT,GAAuBF,QAAQ,CAACE,WAAhC,GAA8C,IADV,CAAtC;;AAIA,QAAMG,mBAAmB,GAAIC,KAAD,IAAW;AACrC,QAAIC,MAAJ;;AACA,QAAID,KAAK,IAAIA,KAAK,CAACE,MAAnB,EAA2B;AACzBD,MAAAA,MAAM,GAAG,CAAC,OAAD,EAAU,CAAC,KAAD,EAAQ,iBAAR,CAAV,EAAsCD,KAAtC,EAA6C,IAA7C,EAAmD,KAAnD,CAAT;AACAL,MAAAA,WAAW,CAAED,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeE,QAAAA,WAAW,EAAEI;AAA5B,OAAf,CAAD,CAAX;AACAH,MAAAA,cAAc,CAACG,KAAD,CAAd;AACD,KAJD,MAIO;AACLC,MAAAA,MAAM,GAAG,IAAT;AACAN,MAAAA,WAAW,CAAED,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeE,QAAAA,WAAW,EAAE;AAA5B,OAAf,CAAD,CAAX;AACD;;AACDD,IAAAA,WAAW,CAAED,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeS,MAAAA,iBAAiB,EAAEF;AAAlC,KAAf,CAAD,CAAX;AACD,GAXD;;AAaA,sBACE,oBAAC,YAAD;AACE,IAAA,SAAS,EAAE;AAAEG,MAAAA,KAAK,EAAE;AAAT,KADb;AAEE,IAAA,YAAY,EAAEV,QAAQ,CAACE,WAFzB;AAGE,IAAA,QAAQ,EAAE,CAACS,KAAD,EAAQC,QAAR,KAAqB;AAC7BP,MAAAA,mBAAmB,CAACO,QAAD,CAAnB;AACD,KALH;AAME,IAAA,QAAQ,MANV;AAOE,IAAA,OAAO,EAAEd,WAPX;AAQE,IAAA,WAAW,EAAGe,MAAD,iBACX,oBAAC,SAAD,oBACMA,MADN;AAEE,MAAA,OAAO,EAAC,UAFV;AAGE,MAAA,KAAK,EAAC,cAHR;AAIE,MAAA,WAAW,EAAC,EAJd;AAKE,MAAA,SAAS,EAAE,IALb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OATJ;AAiBE,IAAA,eAAe,MAjBjB;AAkBE,IAAA,EAAE,EAAC,0BAlBL,CAmBE;AAnBF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAuBD","sourcesContent":["import React, { useContext, useEffect } from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\n\r\nconst profileList = [\r\n  \"DIRECTIONAL\",\r\n  \"HORIZONTAL\",\r\n  \"SIDETRACKED\",\r\n  \"UNKNOWN\",\r\n  \"VERTICAL\",\r\n];\r\n\r\nexport default function FilterWellProfileJ() {\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [profileName, setProfileName] = React.useState(\r\n    stateNav.profileName ? stateNav.profileName : null\r\n  );\r\n\r\n  const handleProfileChange = (value) => {\r\n    let filter;\r\n    if (value && value.length) {\r\n      filter = [\"match\", [\"get\", \"wellBoreProfile\"], value, true, false];\r\n      setStateNav((stateNav) => ({ ...stateNav, profileName: value }));\r\n      setProfileName(value);\r\n    } else {\r\n      filter = null;\r\n      setStateNav((stateNav) => ({ ...stateNav, profileName: [] }));\r\n    }\r\n    setStateNav((stateNav) => ({ ...stateNav, filterWellProfile: filter }));\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      ChipProps={{ color: \"secondary\" }}\r\n      defaultValue={stateNav.profileName}\r\n      onChange={(event, newValue) => {\r\n        handleProfileChange(newValue);\r\n      }}\r\n      multiple\r\n      options={profileList}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          variant=\"outlined\"\r\n          label=\"Well Profile\"\r\n          placeholder=\"\"\r\n          fullWidth={true}\r\n        />\r\n      )}\r\n      disableListWrap\r\n      id=\"virtualize-well-profiles\"\r\n      // style={{ maxWidth: 300, minWidth: 120 }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}