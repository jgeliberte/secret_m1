{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\John Geliberte\\\\Work\\\\freelance\\\\m1\\\\src\\\\components\\\\Navigation\\\\components\\\\FilterBasin.js\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useLazyQuery } from \"@apollo/react-hooks\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { NavigationContext } from \"../NavigationContext\";\nimport { BASINNAMESQUERY } from \"../../../graphQL/useQueryBasinNames\";\nimport { GETBASINSHAPES } from '../../../graphQL/useQueryBasinShapes';\nexport default function BasinFilterJ() {\n  const [stateNav, setStateNav] = useContext(NavigationContext);\n  const [basinName, setBasinName] = React.useState(stateNav.basinName ? stateNav.basinName : []);\n  const [basinNameList, setBasinNameList] = useState([]);\n  const [getBasinNames, {\n    data: basinList\n  }] = useLazyQuery(BASINNAMESQUERY);\n  const [getBasinShapes, {\n    data: basinShapes\n  }] = useLazyQuery(GETBASINSHAPES);\n  useEffect(() => {\n    getBasinNames();\n  }, [getBasinNames]);\n  useEffect(() => {\n    if (basinList && basinList.basinNames) {\n      setBasinNameList(basinList.basinNames.map(basinName => basinName.name));\n    }\n  }, [basinList]);\n  useEffect(() => {\n    if (basinShapes && basinShapes.basinShapes) {\n      const filter = basinShapes.basinShapes.map(basinShape => {\n        return JSON.parse(basinShape.shape);\n      });\n      console.log(filter);\n      setStateNav(stateNav => ({ ...stateNav,\n        filterBasin: filter\n      }));\n    }\n  }, [basinShapes]);\n\n  const handleBasinChange = value => {\n    let filter;\n\n    if (value && value.length) {\n      getBasinShapes({\n        variables: {\n          names: value\n        }\n      }); // filter = [\"match\", [\"get\", \"basin\"], value, true, false];\n\n      setStateNav(stateNav => ({ ...stateNav,\n        basinName: value\n      }));\n      setBasinName(value);\n    } else {\n      filter = null;\n      setStateNav(stateNav => ({ ...stateNav,\n        basinName: null\n      }));\n      setStateNav(stateNav => ({ ...stateNav,\n        filterBasin: filter\n      }));\n    } // setStateNav((stateNav) => ({ ...stateNav, filterBasin: filter }));\n\n  };\n\n  return /*#__PURE__*/React.createElement(Autocomplete, {\n    defaultValue: basinName,\n    onChange: (event, newValue) => {\n      handleBasinChange(newValue);\n    },\n    multiple: true,\n    ChipProps: {\n      color: \"secondary\"\n    },\n    options: basinNameList,\n    renderInput: params => /*#__PURE__*/React.createElement(TextField, Object.assign({}, params, {\n      variant: \"outlined\",\n      label: \"Basin\",\n      placeholder: \"\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    })),\n    disableListWrap: true,\n    id: \"virtualize-basins\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/John Geliberte/Work/freelance/m1/src/components/Navigation/components/FilterBasin.js"],"names":["React","useContext","useEffect","useState","useLazyQuery","TextField","Autocomplete","NavigationContext","BASINNAMESQUERY","GETBASINSHAPES","BasinFilterJ","stateNav","setStateNav","basinName","setBasinName","basinNameList","setBasinNameList","getBasinNames","data","basinList","getBasinShapes","basinShapes","basinNames","map","name","filter","basinShape","JSON","parse","shape","console","log","filterBasin","handleBasinChange","value","length","variables","names","event","newValue","color","params"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAuD,OAAvD;AACA,SAASC,YAAT,QAA6B,qBAA7B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,SAASC,eAAT,QAAgC,qCAAhC;AACA,SAASC,cAAT,QAA+B,sCAA/B;AAEA,eAAe,SAASC,YAAT,GAAwB;AACrC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,UAAU,CAACM,iBAAD,CAA1C;AACA,QAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4Bd,KAAK,CAACG,QAAN,CAChCQ,QAAQ,CAACE,SAAT,GAAqBF,QAAQ,CAACE,SAA9B,GAA0C,EADV,CAAlC;AAGA,QAAM,CAACE,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAM,CAACc,aAAD,EAAgB;AAAEC,IAAAA,IAAI,EAAEC;AAAR,GAAhB,IAAuCf,YAAY,CACvDI,eADuD,CAAzD;AAIA,QAAM,CAACY,cAAD,EAAiB;AAAEF,IAAAA,IAAI,EAAEG;AAAR,GAAjB,IAA0CjB,YAAY,CAC1DK,cAD0D,CAA5D;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACde,IAAAA,aAAa;AACd,GAFQ,EAEN,CAACA,aAAD,CAFM,CAAT;AAIAf,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,SAAS,IAAIA,SAAS,CAACG,UAA3B,EAAuC;AACrCN,MAAAA,gBAAgB,CAACG,SAAS,CAACG,UAAV,CAAqBC,GAArB,CAAyBV,SAAS,IAAIA,SAAS,CAACW,IAAhD,CAAD,CAAhB;AACD;AACF,GAJQ,EAIN,CAACL,SAAD,CAJM,CAAT;AAMAjB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAImB,WAAW,IAAIA,WAAW,CAACA,WAA/B,EAA4C;AAC1C,YAAMI,MAAM,GAAGJ,WAAW,CAACA,WAAZ,CAAwBE,GAAxB,CAA4BG,UAAU,IAAI;AACvD,eAAOC,IAAI,CAACC,KAAL,CAAWF,UAAU,CAACG,KAAtB,CAAP;AACD,OAFc,CAAf;AAGAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAZ;AACAb,MAAAA,WAAW,CAAED,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeqB,QAAAA,WAAW,EAAEP;AAA5B,OAAf,CAAD,CAAX;AACD;AACF,GARQ,EAQN,CAACJ,WAAD,CARM,CAAT;;AAUA,QAAMY,iBAAiB,GAAIC,KAAD,IAAW;AACnC,QAAIT,MAAJ;;AACA,QAAIS,KAAK,IAAIA,KAAK,CAACC,MAAnB,EAA2B;AACzBf,MAAAA,cAAc,CAAC;AACbgB,QAAAA,SAAS,EAAE;AACTC,UAAAA,KAAK,EAAEH;AADE;AADE,OAAD,CAAd,CADyB,CAMzB;;AACAtB,MAAAA,WAAW,CAAED,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeE,QAAAA,SAAS,EAAEqB;AAA1B,OAAf,CAAD,CAAX;AACApB,MAAAA,YAAY,CAACoB,KAAD,CAAZ;AACD,KATD,MASO;AACLT,MAAAA,MAAM,GAAG,IAAT;AACAb,MAAAA,WAAW,CAAED,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeE,QAAAA,SAAS,EAAE;AAA1B,OAAf,CAAD,CAAX;AACAD,MAAAA,WAAW,CAAED,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeqB,QAAAA,WAAW,EAAEP;AAA5B,OAAf,CAAD,CAAX;AACD,KAfkC,CAgBnC;;AACD,GAjBD;;AAmBA,sBACE,oBAAC,YAAD;AACE,IAAA,YAAY,EAAEZ,SADhB;AAEE,IAAA,QAAQ,EAAE,CAACyB,KAAD,EAAQC,QAAR,KAAqB;AAC7BN,MAAAA,iBAAiB,CAACM,QAAD,CAAjB;AACD,KAJH;AAKE,IAAA,QAAQ,MALV;AAME,IAAA,SAAS,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KANb;AAOE,IAAA,OAAO,EAAEzB,aAPX;AAQE,IAAA,WAAW,EAAG0B,MAAD,iBACX,oBAAC,SAAD,oBACMA,MADN;AAEE,MAAA,OAAO,EAAC,UAFV;AAGE,MAAA,KAAK,EAAC,OAHR;AAIE,MAAA,WAAW,EAAC,EAJd;AAKE,MAAA,SAAS,MALX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OATJ;AAiBE,IAAA,eAAe,MAjBjB;AAkBE,IAAA,EAAE,EAAC,mBAlBL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAsBD","sourcesContent":["import React, { useContext, useEffect, useState } from \"react\";\r\nimport { useLazyQuery } from \"@apollo/react-hooks\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport { NavigationContext } from \"../NavigationContext\";\r\nimport { BASINNAMESQUERY } from \"../../../graphQL/useQueryBasinNames\";\r\nimport { GETBASINSHAPES } from '../../../graphQL/useQueryBasinShapes';\r\n\r\nexport default function BasinFilterJ() {\r\n  const [stateNav, setStateNav] = useContext(NavigationContext);\r\n  const [basinName, setBasinName] = React.useState(\r\n    stateNav.basinName ? stateNav.basinName : []\r\n  );\r\n  const [basinNameList, setBasinNameList] = useState([]);\r\n\r\n  const [getBasinNames, { data: basinList }] = useLazyQuery(\r\n    BASINNAMESQUERY\r\n  );\r\n\r\n  const [getBasinShapes, { data: basinShapes }] = useLazyQuery(\r\n    GETBASINSHAPES\r\n  );\r\n\r\n  useEffect(() => {\r\n    getBasinNames();\r\n  }, [getBasinNames]);\r\n\r\n  useEffect(() => {\r\n    if (basinList && basinList.basinNames) {\r\n      setBasinNameList(basinList.basinNames.map(basinName => basinName.name));\r\n    }\r\n  }, [basinList])\r\n\r\n  useEffect(() => {\r\n    if (basinShapes && basinShapes.basinShapes) {\r\n      const filter = basinShapes.basinShapes.map(basinShape => {\r\n        return JSON.parse(basinShape.shape);\r\n      });\r\n      console.log(filter);\r\n      setStateNav((stateNav) => ({ ...stateNav, filterBasin: filter }));\r\n    }\r\n  }, [basinShapes])\r\n\r\n  const handleBasinChange = (value) => {\r\n    let filter;\r\n    if (value && value.length) {\r\n      getBasinShapes({\r\n        variables: {\r\n          names: value\r\n        }\r\n      });\r\n      // filter = [\"match\", [\"get\", \"basin\"], value, true, false];\r\n      setStateNav((stateNav) => ({ ...stateNav, basinName: value }));\r\n      setBasinName(value);\r\n    } else {\r\n      filter = null;\r\n      setStateNav((stateNav) => ({ ...stateNav, basinName: null }));\r\n      setStateNav((stateNav) => ({ ...stateNav, filterBasin: filter }));\r\n    }\r\n    // setStateNav((stateNav) => ({ ...stateNav, filterBasin: filter }));\r\n  };\r\n\r\n  return (\r\n    <Autocomplete\r\n      defaultValue={basinName}\r\n      onChange={(event, newValue) => {\r\n        handleBasinChange(newValue);\r\n      }}\r\n      multiple\r\n      ChipProps={{ color: \"secondary\" }}\r\n      options={basinNameList}\r\n      renderInput={(params) => (\r\n        <TextField\r\n          {...params}\r\n          variant=\"outlined\"\r\n          label=\"Basin\"\r\n          placeholder=\"\"\r\n          fullWidth\r\n        />\r\n      )}\r\n      disableListWrap\r\n      id=\"virtualize-basins\"\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}